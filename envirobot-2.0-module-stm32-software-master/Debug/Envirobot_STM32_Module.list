
Envirobot_STM32_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da84  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0801dd28  0801dd28  0001ed28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e428  0801e428  0001f428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801e430  0801e430  0001f430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0801e438  0801e438  0001f438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0801e440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006cb4  24000068  0801e4a4  00020068  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24006d1c  0801e4a4  00020d1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00349c41  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010ee4  00000000  00000000  00369cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00063aad  00000000  00000000  0037abb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003c78  00000000  00000000  003de668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000b038  00000000  00000000  003e22e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000122ca  00000000  00000000  003ed318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0007df95  00000000  00000000  003ff5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0023ab6a  00000000  00000000  0047d577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  006b80e1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ce5c  00000000  00000000  006b8124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007f  00000000  00000000  006c4f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000068 	.word	0x24000068
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dd0c 	.word	0x0801dd0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400006c 	.word	0x2400006c
 80002dc:	0801dd0c 	.word	0x0801dd0c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_frsub>:
 80002f4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002f8:	e002      	b.n	8000300 <__addsf3>
 80002fa:	bf00      	nop

080002fc <__aeabi_fsub>:
 80002fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000300 <__addsf3>:
 8000300:	0042      	lsls	r2, r0, #1
 8000302:	bf1f      	itttt	ne
 8000304:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000308:	ea92 0f03 	teqne	r2, r3
 800030c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000310:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000314:	d06a      	beq.n	80003ec <__addsf3+0xec>
 8000316:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800031a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031e:	bfc1      	itttt	gt
 8000320:	18d2      	addgt	r2, r2, r3
 8000322:	4041      	eorgt	r1, r0
 8000324:	4048      	eorgt	r0, r1
 8000326:	4041      	eorgt	r1, r0
 8000328:	bfb8      	it	lt
 800032a:	425b      	neglt	r3, r3
 800032c:	2b19      	cmp	r3, #25
 800032e:	bf88      	it	hi
 8000330:	4770      	bxhi	lr
 8000332:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000336:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800033a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4240      	negne	r0, r0
 8000342:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000346:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800034a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800034e:	bf18      	it	ne
 8000350:	4249      	negne	r1, r1
 8000352:	ea92 0f03 	teq	r2, r3
 8000356:	d03f      	beq.n	80003d8 <__addsf3+0xd8>
 8000358:	f1a2 0201 	sub.w	r2, r2, #1
 800035c:	fa41 fc03 	asr.w	ip, r1, r3
 8000360:	eb10 000c 	adds.w	r0, r0, ip
 8000364:	f1c3 0320 	rsb	r3, r3, #32
 8000368:	fa01 f103 	lsl.w	r1, r1, r3
 800036c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000370:	d502      	bpl.n	8000378 <__addsf3+0x78>
 8000372:	4249      	negs	r1, r1
 8000374:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000378:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800037c:	d313      	bcc.n	80003a6 <__addsf3+0xa6>
 800037e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000382:	d306      	bcc.n	8000392 <__addsf3+0x92>
 8000384:	0840      	lsrs	r0, r0, #1
 8000386:	ea4f 0131 	mov.w	r1, r1, rrx
 800038a:	f102 0201 	add.w	r2, r2, #1
 800038e:	2afe      	cmp	r2, #254	@ 0xfe
 8000390:	d251      	bcs.n	8000436 <__addsf3+0x136>
 8000392:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000396:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800039a:	bf08      	it	eq
 800039c:	f020 0001 	biceq.w	r0, r0, #1
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	4770      	bx	lr
 80003a6:	0049      	lsls	r1, r1, #1
 80003a8:	eb40 0000 	adc.w	r0, r0, r0
 80003ac:	3a01      	subs	r2, #1
 80003ae:	bf28      	it	cs
 80003b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80003b4:	d2ed      	bcs.n	8000392 <__addsf3+0x92>
 80003b6:	fab0 fc80 	clz	ip, r0
 80003ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80003be:	ebb2 020c 	subs.w	r2, r2, ip
 80003c2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c6:	bfaa      	itet	ge
 80003c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003cc:	4252      	neglt	r2, r2
 80003ce:	4318      	orrge	r0, r3
 80003d0:	bfbc      	itt	lt
 80003d2:	40d0      	lsrlt	r0, r2
 80003d4:	4318      	orrlt	r0, r3
 80003d6:	4770      	bx	lr
 80003d8:	f092 0f00 	teq	r2, #0
 80003dc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003e0:	bf06      	itte	eq
 80003e2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003e6:	3201      	addeq	r2, #1
 80003e8:	3b01      	subne	r3, #1
 80003ea:	e7b5      	b.n	8000358 <__addsf3+0x58>
 80003ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f4:	bf18      	it	ne
 80003f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003fa:	d021      	beq.n	8000440 <__addsf3+0x140>
 80003fc:	ea92 0f03 	teq	r2, r3
 8000400:	d004      	beq.n	800040c <__addsf3+0x10c>
 8000402:	f092 0f00 	teq	r2, #0
 8000406:	bf08      	it	eq
 8000408:	4608      	moveq	r0, r1
 800040a:	4770      	bx	lr
 800040c:	ea90 0f01 	teq	r0, r1
 8000410:	bf1c      	itt	ne
 8000412:	2000      	movne	r0, #0
 8000414:	4770      	bxne	lr
 8000416:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800041a:	d104      	bne.n	8000426 <__addsf3+0x126>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	bf28      	it	cs
 8000420:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000424:	4770      	bx	lr
 8000426:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800042a:	bf3c      	itt	cc
 800042c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000430:	4770      	bxcc	lr
 8000432:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000436:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800043a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800043e:	4770      	bx	lr
 8000440:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000444:	bf16      	itet	ne
 8000446:	4608      	movne	r0, r1
 8000448:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800044c:	4601      	movne	r1, r0
 800044e:	0242      	lsls	r2, r0, #9
 8000450:	bf06      	itte	eq
 8000452:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000456:	ea90 0f01 	teqeq	r0, r1
 800045a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800045e:	4770      	bx	lr

08000460 <__aeabi_ui2f>:
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	e004      	b.n	8000470 <__aeabi_i2f+0x8>
 8000466:	bf00      	nop

08000468 <__aeabi_i2f>:
 8000468:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800046c:	bf48      	it	mi
 800046e:	4240      	negmi	r0, r0
 8000470:	ea5f 0c00 	movs.w	ip, r0
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800047c:	4601      	mov	r1, r0
 800047e:	f04f 0000 	mov.w	r0, #0
 8000482:	e01c      	b.n	80004be <__aeabi_l2f+0x2a>

08000484 <__aeabi_ul2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f04f 0300 	mov.w	r3, #0
 8000490:	e00a      	b.n	80004a8 <__aeabi_l2f+0x14>
 8000492:	bf00      	nop

08000494 <__aeabi_l2f>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80004a0:	d502      	bpl.n	80004a8 <__aeabi_l2f+0x14>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	ea5f 0c01 	movs.w	ip, r1
 80004ac:	bf02      	ittt	eq
 80004ae:	4684      	moveq	ip, r0
 80004b0:	4601      	moveq	r1, r0
 80004b2:	2000      	moveq	r0, #0
 80004b4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80004b8:	bf08      	it	eq
 80004ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004be:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004c2:	fabc f28c 	clz	r2, ip
 80004c6:	3a08      	subs	r2, #8
 80004c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004cc:	db10      	blt.n	80004f0 <__aeabi_l2f+0x5c>
 80004ce:	fa01 fc02 	lsl.w	ip, r1, r2
 80004d2:	4463      	add	r3, ip
 80004d4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d8:	f1c2 0220 	rsb	r2, r2, #32
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	eb43 0002 	adc.w	r0, r3, r2
 80004e8:	bf08      	it	eq
 80004ea:	f020 0001 	biceq.w	r0, r0, #1
 80004ee:	4770      	bx	lr
 80004f0:	f102 0220 	add.w	r2, r2, #32
 80004f4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f8:	f1c2 0220 	rsb	r2, r2, #32
 80004fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000500:	fa21 f202 	lsr.w	r2, r1, r2
 8000504:	eb43 0002 	adc.w	r0, r3, r2
 8000508:	bf08      	it	eq
 800050a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050e:	4770      	bx	lr

08000510 <__aeabi_uldivmod>:
 8000510:	b953      	cbnz	r3, 8000528 <__aeabi_uldivmod+0x18>
 8000512:	b94a      	cbnz	r2, 8000528 <__aeabi_uldivmod+0x18>
 8000514:	2900      	cmp	r1, #0
 8000516:	bf08      	it	eq
 8000518:	2800      	cmpeq	r0, #0
 800051a:	bf1c      	itt	ne
 800051c:	f04f 31ff 	movne.w	r1, #4294967295
 8000520:	f04f 30ff 	movne.w	r0, #4294967295
 8000524:	f000 b96a 	b.w	80007fc <__aeabi_idiv0>
 8000528:	f1ad 0c08 	sub.w	ip, sp, #8
 800052c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000530:	f000 f806 	bl	8000540 <__udivmoddi4>
 8000534:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800053c:	b004      	add	sp, #16
 800053e:	4770      	bx	lr

08000540 <__udivmoddi4>:
 8000540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000544:	9d08      	ldr	r5, [sp, #32]
 8000546:	460c      	mov	r4, r1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d14e      	bne.n	80005ea <__udivmoddi4+0xaa>
 800054c:	4694      	mov	ip, r2
 800054e:	458c      	cmp	ip, r1
 8000550:	4686      	mov	lr, r0
 8000552:	fab2 f282 	clz	r2, r2
 8000556:	d962      	bls.n	800061e <__udivmoddi4+0xde>
 8000558:	b14a      	cbz	r2, 800056e <__udivmoddi4+0x2e>
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	4091      	lsls	r1, r2
 8000560:	fa20 f303 	lsr.w	r3, r0, r3
 8000564:	fa0c fc02 	lsl.w	ip, ip, r2
 8000568:	4319      	orrs	r1, r3
 800056a:	fa00 fe02 	lsl.w	lr, r0, r2
 800056e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000572:	fa1f f68c 	uxth.w	r6, ip
 8000576:	fbb1 f4f7 	udiv	r4, r1, r7
 800057a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057e:	fb07 1114 	mls	r1, r7, r4, r1
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	fb04 f106 	mul.w	r1, r4, r6
 800058a:	4299      	cmp	r1, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x64>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f104 30ff 	add.w	r0, r4, #4294967295
 8000596:	f080 8112 	bcs.w	80007be <__udivmoddi4+0x27e>
 800059a:	4299      	cmp	r1, r3
 800059c:	f240 810f 	bls.w	80007be <__udivmoddi4+0x27e>
 80005a0:	3c02      	subs	r4, #2
 80005a2:	4463      	add	r3, ip
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80005ae:	fb07 1110 	mls	r1, r7, r0, r1
 80005b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b6:	fb00 f606 	mul.w	r6, r0, r6
 80005ba:	429e      	cmp	r6, r3
 80005bc:	d90a      	bls.n	80005d4 <__udivmoddi4+0x94>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c6:	f080 80fc 	bcs.w	80007c2 <__udivmoddi4+0x282>
 80005ca:	429e      	cmp	r6, r3
 80005cc:	f240 80f9 	bls.w	80007c2 <__udivmoddi4+0x282>
 80005d0:	4463      	add	r3, ip
 80005d2:	3802      	subs	r0, #2
 80005d4:	1b9b      	subs	r3, r3, r6
 80005d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80005da:	2100      	movs	r1, #0
 80005dc:	b11d      	cbz	r5, 80005e6 <__udivmoddi4+0xa6>
 80005de:	40d3      	lsrs	r3, r2
 80005e0:	2200      	movs	r2, #0
 80005e2:	e9c5 3200 	strd	r3, r2, [r5]
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d905      	bls.n	80005fa <__udivmoddi4+0xba>
 80005ee:	b10d      	cbz	r5, 80005f4 <__udivmoddi4+0xb4>
 80005f0:	e9c5 0100 	strd	r0, r1, [r5]
 80005f4:	2100      	movs	r1, #0
 80005f6:	4608      	mov	r0, r1
 80005f8:	e7f5      	b.n	80005e6 <__udivmoddi4+0xa6>
 80005fa:	fab3 f183 	clz	r1, r3
 80005fe:	2900      	cmp	r1, #0
 8000600:	d146      	bne.n	8000690 <__udivmoddi4+0x150>
 8000602:	42a3      	cmp	r3, r4
 8000604:	d302      	bcc.n	800060c <__udivmoddi4+0xcc>
 8000606:	4290      	cmp	r0, r2
 8000608:	f0c0 80f0 	bcc.w	80007ec <__udivmoddi4+0x2ac>
 800060c:	1a86      	subs	r6, r0, r2
 800060e:	eb64 0303 	sbc.w	r3, r4, r3
 8000612:	2001      	movs	r0, #1
 8000614:	2d00      	cmp	r5, #0
 8000616:	d0e6      	beq.n	80005e6 <__udivmoddi4+0xa6>
 8000618:	e9c5 6300 	strd	r6, r3, [r5]
 800061c:	e7e3      	b.n	80005e6 <__udivmoddi4+0xa6>
 800061e:	2a00      	cmp	r2, #0
 8000620:	f040 8090 	bne.w	8000744 <__udivmoddi4+0x204>
 8000624:	eba1 040c 	sub.w	r4, r1, ip
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa1f f78c 	uxth.w	r7, ip
 8000630:	2101      	movs	r1, #1
 8000632:	fbb4 f6f8 	udiv	r6, r4, r8
 8000636:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800063a:	fb08 4416 	mls	r4, r8, r6, r4
 800063e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000642:	fb07 f006 	mul.w	r0, r7, r6
 8000646:	4298      	cmp	r0, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x11c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000652:	d202      	bcs.n	800065a <__udivmoddi4+0x11a>
 8000654:	4298      	cmp	r0, r3
 8000656:	f200 80cd 	bhi.w	80007f4 <__udivmoddi4+0x2b4>
 800065a:	4626      	mov	r6, r4
 800065c:	1a1c      	subs	r4, r3, r0
 800065e:	fa1f f38e 	uxth.w	r3, lr
 8000662:	fbb4 f0f8 	udiv	r0, r4, r8
 8000666:	fb08 4410 	mls	r4, r8, r0, r4
 800066a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800066e:	fb00 f707 	mul.w	r7, r0, r7
 8000672:	429f      	cmp	r7, r3
 8000674:	d908      	bls.n	8000688 <__udivmoddi4+0x148>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f100 34ff 	add.w	r4, r0, #4294967295
 800067e:	d202      	bcs.n	8000686 <__udivmoddi4+0x146>
 8000680:	429f      	cmp	r7, r3
 8000682:	f200 80b0 	bhi.w	80007e6 <__udivmoddi4+0x2a6>
 8000686:	4620      	mov	r0, r4
 8000688:	1bdb      	subs	r3, r3, r7
 800068a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800068e:	e7a5      	b.n	80005dc <__udivmoddi4+0x9c>
 8000690:	f1c1 0620 	rsb	r6, r1, #32
 8000694:	408b      	lsls	r3, r1
 8000696:	fa22 f706 	lsr.w	r7, r2, r6
 800069a:	431f      	orrs	r7, r3
 800069c:	fa20 fc06 	lsr.w	ip, r0, r6
 80006a0:	fa04 f301 	lsl.w	r3, r4, r1
 80006a4:	ea43 030c 	orr.w	r3, r3, ip
 80006a8:	40f4      	lsrs	r4, r6
 80006aa:	fa00 f801 	lsl.w	r8, r0, r1
 80006ae:	0c38      	lsrs	r0, r7, #16
 80006b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80006b4:	fbb4 fef0 	udiv	lr, r4, r0
 80006b8:	fa1f fc87 	uxth.w	ip, r7
 80006bc:	fb00 441e 	mls	r4, r0, lr, r4
 80006c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006c4:	fb0e f90c 	mul.w	r9, lr, ip
 80006c8:	45a1      	cmp	r9, r4
 80006ca:	fa02 f201 	lsl.w	r2, r2, r1
 80006ce:	d90a      	bls.n	80006e6 <__udivmoddi4+0x1a6>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80006d6:	f080 8084 	bcs.w	80007e2 <__udivmoddi4+0x2a2>
 80006da:	45a1      	cmp	r9, r4
 80006dc:	f240 8081 	bls.w	80007e2 <__udivmoddi4+0x2a2>
 80006e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80006e4:	443c      	add	r4, r7
 80006e6:	eba4 0409 	sub.w	r4, r4, r9
 80006ea:	fa1f f983 	uxth.w	r9, r3
 80006ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80006f2:	fb00 4413 	mls	r4, r0, r3, r4
 80006f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80006fe:	45a4      	cmp	ip, r4
 8000700:	d907      	bls.n	8000712 <__udivmoddi4+0x1d2>
 8000702:	193c      	adds	r4, r7, r4
 8000704:	f103 30ff 	add.w	r0, r3, #4294967295
 8000708:	d267      	bcs.n	80007da <__udivmoddi4+0x29a>
 800070a:	45a4      	cmp	ip, r4
 800070c:	d965      	bls.n	80007da <__udivmoddi4+0x29a>
 800070e:	3b02      	subs	r3, #2
 8000710:	443c      	add	r4, r7
 8000712:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000716:	fba0 9302 	umull	r9, r3, r0, r2
 800071a:	eba4 040c 	sub.w	r4, r4, ip
 800071e:	429c      	cmp	r4, r3
 8000720:	46ce      	mov	lr, r9
 8000722:	469c      	mov	ip, r3
 8000724:	d351      	bcc.n	80007ca <__udivmoddi4+0x28a>
 8000726:	d04e      	beq.n	80007c6 <__udivmoddi4+0x286>
 8000728:	b155      	cbz	r5, 8000740 <__udivmoddi4+0x200>
 800072a:	ebb8 030e 	subs.w	r3, r8, lr
 800072e:	eb64 040c 	sbc.w	r4, r4, ip
 8000732:	fa04 f606 	lsl.w	r6, r4, r6
 8000736:	40cb      	lsrs	r3, r1
 8000738:	431e      	orrs	r6, r3
 800073a:	40cc      	lsrs	r4, r1
 800073c:	e9c5 6400 	strd	r6, r4, [r5]
 8000740:	2100      	movs	r1, #0
 8000742:	e750      	b.n	80005e6 <__udivmoddi4+0xa6>
 8000744:	f1c2 0320 	rsb	r3, r2, #32
 8000748:	fa20 f103 	lsr.w	r1, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	fa24 f303 	lsr.w	r3, r4, r3
 8000754:	4094      	lsls	r4, r2
 8000756:	430c      	orrs	r4, r1
 8000758:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800075c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000760:	fa1f f78c 	uxth.w	r7, ip
 8000764:	fbb3 f0f8 	udiv	r0, r3, r8
 8000768:	fb08 3110 	mls	r1, r8, r0, r3
 800076c:	0c23      	lsrs	r3, r4, #16
 800076e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000772:	fb00 f107 	mul.w	r1, r0, r7
 8000776:	4299      	cmp	r1, r3
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x24c>
 800077a:	eb1c 0303 	adds.w	r3, ip, r3
 800077e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000782:	d22c      	bcs.n	80007de <__udivmoddi4+0x29e>
 8000784:	4299      	cmp	r1, r3
 8000786:	d92a      	bls.n	80007de <__udivmoddi4+0x29e>
 8000788:	3802      	subs	r0, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a5b      	subs	r3, r3, r1
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb3 f1f8 	udiv	r1, r3, r8
 8000794:	fb08 3311 	mls	r3, r8, r1, r3
 8000798:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800079c:	fb01 f307 	mul.w	r3, r1, r7
 80007a0:	42a3      	cmp	r3, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x276>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80007ac:	d213      	bcs.n	80007d6 <__udivmoddi4+0x296>
 80007ae:	42a3      	cmp	r3, r4
 80007b0:	d911      	bls.n	80007d6 <__udivmoddi4+0x296>
 80007b2:	3902      	subs	r1, #2
 80007b4:	4464      	add	r4, ip
 80007b6:	1ae4      	subs	r4, r4, r3
 80007b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80007bc:	e739      	b.n	8000632 <__udivmoddi4+0xf2>
 80007be:	4604      	mov	r4, r0
 80007c0:	e6f0      	b.n	80005a4 <__udivmoddi4+0x64>
 80007c2:	4608      	mov	r0, r1
 80007c4:	e706      	b.n	80005d4 <__udivmoddi4+0x94>
 80007c6:	45c8      	cmp	r8, r9
 80007c8:	d2ae      	bcs.n	8000728 <__udivmoddi4+0x1e8>
 80007ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80007ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80007d2:	3801      	subs	r0, #1
 80007d4:	e7a8      	b.n	8000728 <__udivmoddi4+0x1e8>
 80007d6:	4631      	mov	r1, r6
 80007d8:	e7ed      	b.n	80007b6 <__udivmoddi4+0x276>
 80007da:	4603      	mov	r3, r0
 80007dc:	e799      	b.n	8000712 <__udivmoddi4+0x1d2>
 80007de:	4630      	mov	r0, r6
 80007e0:	e7d4      	b.n	800078c <__udivmoddi4+0x24c>
 80007e2:	46d6      	mov	lr, sl
 80007e4:	e77f      	b.n	80006e6 <__udivmoddi4+0x1a6>
 80007e6:	4463      	add	r3, ip
 80007e8:	3802      	subs	r0, #2
 80007ea:	e74d      	b.n	8000688 <__udivmoddi4+0x148>
 80007ec:	4606      	mov	r6, r0
 80007ee:	4623      	mov	r3, r4
 80007f0:	4608      	mov	r0, r1
 80007f2:	e70f      	b.n	8000614 <__udivmoddi4+0xd4>
 80007f4:	3e02      	subs	r6, #2
 80007f6:	4463      	add	r3, ip
 80007f8:	e730      	b.n	800065c <__udivmoddi4+0x11c>
 80007fa:	bf00      	nop

080007fc <__aeabi_idiv0>:
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <_Z11ControlTaskPv>:
  {
#ifdef USE_SERVOMOTORS
	  servomotors.Control();
#endif
#ifdef USE_MOTOR_CONTROL
	  controller.Control();
 8000800:	4c02      	ldr	r4, [pc, #8]	@ (800080c <_Z11ControlTaskPv+0xc>)
{
 8000802:	b508      	push	{r3, lr}
	  controller.Control();
 8000804:	4620      	mov	r0, r4
 8000806:	f013 fab1 	bl	8013d6c <_ZN10Controller7ControlEv>
  for(;;)
 800080a:	e7fb      	b.n	8000804 <_Z11ControlTaskPv+0x4>
 800080c:	24000140 	.word	0x24000140

08000810 <_Z11SensorsTaskPv>:
  /* USER CODE BEGIN SensorsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_SENSORS
	  sensors.Spin();
 8000810:	4c02      	ldr	r4, [pc, #8]	@ (800081c <_Z11SensorsTaskPv+0xc>)
{
 8000812:	b508      	push	{r3, lr}
	  sensors.Spin();
 8000814:	4620      	mov	r0, r4
 8000816:	f019 fee2 	bl	801a5de <_ZN7Sensors4SpinEv>
  for(;;)
 800081a:	e7fb      	b.n	8000814 <_Z11SensorsTaskPv+0x4>
 800081c:	240003b8 	.word	0x240003b8

08000820 <_Z17CommunicationTaskPv>:
{
  /* USER CODE BEGIN CommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  communication.Spin();
 8000820:	4c02      	ldr	r4, [pc, #8]	@ (800082c <_Z17CommunicationTaskPv+0xc>)
{
 8000822:	b508      	push	{r3, lr}
	  communication.Spin();
 8000824:	4620      	mov	r0, r4
 8000826:	f010 fba1 	bl	8010f6c <_ZN13Communication4SpinEv>
  for(;;)
 800082a:	e7fb      	b.n	8000824 <_Z17CommunicationTaskPv+0x4>
 800082c:	240010cc 	.word	0x240010cc

08000830 <_Z8LEDsTaskPv>:
  /* USER CODE BEGIN LEDsTask */
  /* Infinite loop */
  for(;;)
  {
#ifdef USE_LEDS
	  leds.Spin();
 8000830:	4c02      	ldr	r4, [pc, #8]	@ (800083c <_Z8LEDsTaskPv+0xc>)
{
 8000832:	b508      	push	{r3, lr}
	  leds.Spin();
 8000834:	4620      	mov	r0, r4
 8000836:	f014 fe80 	bl	801553a <_ZN4LEDS4SpinEv>
  for(;;)
 800083a:	e7fb      	b.n	8000834 <_Z8LEDsTaskPv+0x4>
 800083c:	24000380 	.word	0x24000380

08000840 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb>:
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
template<typename H>
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 8000840:	b4f0      	push	{r4, r5, r6, r7}
 8000842:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	uint8_t index = 0;
	for (H* interface : interfaces) {
 8000846:	2400      	movs	r4, #0
 8000848:	429d      	cmp	r5, r3
 800084a:	461e      	mov	r6, r3
 800084c:	d103      	bne.n	8000856 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x16>
		if (interface == pointer)
			return GetIDFromIndex(index, success);
		index += 1;
	}
	*success = false;
 800084e:	2000      	movs	r0, #0
	return 0;
}
 8000850:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 8000852:	7010      	strb	r0, [r2, #0]
}
 8000854:	4770      	bx	lr
		if (interface == pointer)
 8000856:	6836      	ldr	r6, [r6, #0]
 8000858:	3304      	adds	r3, #4
 800085a:	1c67      	adds	r7, r4, #1
 800085c:	428e      	cmp	r6, r1
 800085e:	d103      	bne.n	8000868 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 8000860:	b2e1      	uxtb	r1, r4
}
 8000862:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000864:	f015 bcc1 	b.w	80161ea <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000868:	463c      	mov	r4, r7
 800086a:	e7ed      	b.n	8000848 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE5GetIDEPvPb+0x8>

0800086c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb>:
uint8_t TemplateCommunicationProtocol<H>::GetID(void* pointer, bool* success) {
 800086c:	b4f0      	push	{r4, r5, r6, r7}
 800086e:	e9d0 350e 	ldrd	r3, r5, [r0, #56]	@ 0x38
	for (H* interface : interfaces) {
 8000872:	2400      	movs	r4, #0
 8000874:	429d      	cmp	r5, r3
 8000876:	461e      	mov	r6, r3
 8000878:	d103      	bne.n	8000882 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x16>
	*success = false;
 800087a:	2000      	movs	r0, #0
}
 800087c:	bcf0      	pop	{r4, r5, r6, r7}
	*success = false;
 800087e:	7010      	strb	r0, [r2, #0]
}
 8000880:	4770      	bx	lr
		if (interface == pointer)
 8000882:	6836      	ldr	r6, [r6, #0]
 8000884:	3304      	adds	r3, #4
 8000886:	1c67      	adds	r7, r4, #1
 8000888:	428e      	cmp	r6, r1
 800088a:	d103      	bne.n	8000894 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x28>
			return GetIDFromIndex(index, success);
 800088c:	b2e1      	uxtb	r1, r4
}
 800088e:	bcf0      	pop	{r4, r5, r6, r7}
			return GetIDFromIndex(index, success);
 8000890:	f015 bcab 	b.w	80161ea <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>
 8000894:	463c      	mov	r4, r7
 8000896:	e7ed      	b.n	8000874 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE5GetIDEPvPb+0x8>

08000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>:
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000898:	0089      	lsls	r1, r1, #2
 800089a:	f01c b945 	b.w	801cb28 <_ZdlPvj>

0800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>:
 800089e:	0109      	lsls	r1, r1, #4
 80008a0:	f01c b942 	b.w	801cb28 <_ZdlPvj>

080008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80008a4:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80008a6:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80008a8:	d006      	beq.n	80008b8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80008aa:	da01      	bge.n	80008b0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80008ac:	f01c fa10 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 80008b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80008b4:	f01c b95d 	b.w	801cb72 <_Znwj>
 80008b8:	bd08      	pop	{r3, pc}
	...

080008bc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80008bc:	b513      	push	{r0, r1, r4, lr}
 80008be:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) huart, &success);
 80008c0:	f10d 0207 	add.w	r2, sp, #7
 80008c4:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008c6:	f00f ff29 	bl	801071c <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 80008ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) huart, &success);
 80008ce:	4604      	mov	r4, r0
	if (!success) {return;}
 80008d0:	b15b      	cbz	r3, 80008ea <HAL_UART_ErrorCallback+0x2e>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 80008d2:	4601      	mov	r1, r0
 80008d4:	f10d 0207 	add.w	r2, sp, #7
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008da:	f00f ff3e 	bl	801075a <_ZN13Communication14GetBufferIndexEhPb>
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80008de:	2300      	movs	r3, #0
	communication.ActivateReception(ID);
 80008e0:	4621      	mov	r1, r4
	*buffer_index = 0; // resets the buffer index to the DMA pointer
 80008e2:	8003      	strh	r3, [r0, #0]
	communication.ActivateReception(ID);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <HAL_UART_ErrorCallback+0x34>)
 80008e6:	f00f ff53 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
}
 80008ea:	b002      	add	sp, #8
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	240010cc 	.word	0x240010cc

080008f4 <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 80008f4:	b507      	push	{r0, r1, r2, lr}
 80008f6:	4601      	mov	r1, r0
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 80008f8:	f10d 0207 	add.w	r2, sp, #7
 80008fc:	4806      	ldr	r0, [pc, #24]	@ (8000918 <HAL_FDCAN_ErrorCallback+0x24>)
 80008fe:	f00f ff0d 	bl	801071c <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8000902:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = communication.GetID((void*) hfdcan, &success);
 8000906:	4601      	mov	r1, r0
	if (!success) {return;}
 8000908:	b113      	cbz	r3, 8000910 <HAL_FDCAN_ErrorCallback+0x1c>
	communication.ActivateReception(ID);
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <HAL_FDCAN_ErrorCallback+0x24>)
 800090c:	f00f ff40 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
}
 8000910:	b003      	add	sp, #12
 8000912:	f85d fb04 	ldr.w	pc, [sp], #4
 8000916:	bf00      	nop
 8000918:	240010cc 	.word	0x240010cc

0800091c <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800091c:	4601      	mov	r1, r0
	sensors.ReceiveSensorData(hi2c);
 800091e:	4801      	ldr	r0, [pc, #4]	@ (8000924 <HAL_I2C_MasterTxCpltCallback+0x8>)
 8000920:	f019 be40 	b.w	801a5a4 <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef>
 8000924:	240003b8 	.word	0x240003b8

08000928 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000928:	f7ff bff8 	b.w	800091c <HAL_I2C_MasterTxCpltCallback>

0800092c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800092c:	f7ff bff6 	b.w	800091c <HAL_I2C_MasterTxCpltCallback>

08000930 <HAL_GPIO_EXTI_Callback>:
    if(GPIO_Pin == WATER_DETECTION_Pin) // Trigger fault LED and set RGB led to blue when water detected
 8000930:	2808      	cmp	r0, #8
 8000932:	d102      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0xa>
    	WaterDetectedLEDS(&leds);
 8000934:	4801      	ldr	r0, [pc, #4]	@ (800093c <HAL_GPIO_EXTI_Callback+0xc>)
 8000936:	f00e bb89 	b.w	800f04c <_Z17WaterDetectedLEDSP4LEDS>
}
 800093a:	4770      	bx	lr
 800093c:	24000380 	.word	0x24000380

08000940 <_Z18SystemClock_Configv>:
{
 8000940:	b530      	push	{r4, r5, lr}
 8000942:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000944:	224c      	movs	r2, #76	@ 0x4c
 8000946:	2100      	movs	r1, #0
 8000948:	a80b      	add	r0, sp, #44	@ 0x2c
 800094a:	f01d f8a9 	bl	801daa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	a803      	add	r0, sp, #12
 8000954:	f01d f8a4 	bl	801daa0 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f007 ff37 	bl	80087cc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095e:	2300      	movs	r3, #0
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <_Z18SystemClock_Configv+0x108>)
 8000964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000966:	f022 0201 	bic.w	r2, r2, #1
 800096a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800096c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4b35      	ldr	r3, [pc, #212]	@ (8000a4c <_Z18SystemClock_Configv+0x10c>)
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800097c:	619a      	str	r2, [r3, #24]
 800097e:	699a      	ldr	r2, [r3, #24]
 8000980:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	0495      	lsls	r5, r2, #18
 800098c:	d5fc      	bpl.n	8000988 <_Z18SystemClock_Configv+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4a30      	ldr	r2, [pc, #192]	@ (8000a50 <_Z18SystemClock_Configv+0x110>)
 8000990:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 8000994:	f041 0102 	orr.w	r1, r1, #2
 8000998:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 800099c:	f8d2 10f4 	ldr.w	r1, [r2, #244]	@ 0xf4
 80009a0:	f001 0102 	and.w	r1, r1, #2
 80009a4:	9101      	str	r1, [sp, #4]
 80009a6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	9102      	str	r1, [sp, #8]
 80009ac:	6999      	ldr	r1, [r3, #24]
 80009ae:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80009b2:	6199      	str	r1, [r3, #24]
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <_Z18SystemClock_Configv+0x108>)
 80009be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80009c0:	f041 0101 	orr.w	r1, r1, #1
 80009c4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80009c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c8:	4920      	ldr	r1, [pc, #128]	@ (8000a4c <_Z18SystemClock_Configv+0x10c>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d2:	698b      	ldr	r3, [r1, #24]
 80009d4:	049c      	lsls	r4, r3, #18
 80009d6:	d5fc      	bpl.n	80009d2 <_Z18SystemClock_Configv+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009d8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009dc:	200c      	movs	r0, #12
  RCC_OscInitStruct.PLL.PLLR = 4;
 80009de:	2508      	movs	r5, #8
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e0:	f023 0303 	bic.w	r3, r3, #3
  RCC_OscInitStruct.PLL.PLLR = 4;
 80009e4:	2404      	movs	r4, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	6293      	str	r3, [r2, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009f0:	2250      	movs	r2, #80	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f2:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f8:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009fc:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fe:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0a:	931d      	str	r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000a0c:	e9cd 5419 	strd	r5, r4, [sp, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f007 ff06 	bl	8008820 <HAL_RCC_OscConfig>
 8000a14:	b108      	cbz	r0, 8000a1a <_Z18SystemClock_Configv+0xda>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <_Z18SystemClock_Configv+0xd8>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	223f      	movs	r2, #63	@ 0x3f
 8000a1c:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a24:	2340      	movs	r3, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a2a:	e9cd 0505 	strd	r0, r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a30:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a34:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a38:	f008 fb26 	bl	8009088 <HAL_RCC_ClockConfig>
 8000a3c:	b108      	cbz	r0, 8000a42 <_Z18SystemClock_Configv+0x102>
 8000a3e:	b672      	cpsid	i
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <_Z18SystemClock_Configv+0x100>
}
 8000a42:	b01f      	add	sp, #124	@ 0x7c
 8000a44:	bd30      	pop	{r4, r5, pc}
 8000a46:	bf00      	nop
 8000a48:	58000400 	.word	0x58000400
 8000a4c:	58024800 	.word	0x58024800
 8000a50:	58024400 	.word	0x58024400

08000a54 <_Z24PeriphCommonClock_Configv>:
{
 8000a54:	b500      	push	{lr}
 8000a56:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	22a0      	movs	r2, #160	@ 0xa0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	a808      	add	r0, sp, #32
 8000a5e:	f01d f81f 	bl	801daa0 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000a62:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000a66:	2203      	movs	r2, #3
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a68:	2119      	movs	r1, #25
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 3;
 8000a6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a76:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a78:	930a      	str	r3, [sp, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a7a:	9107      	str	r1, [sp, #28]
  PeriphClkInitStruct.PLL3.PLL3N = 40;
 8000a7c:	2128      	movs	r1, #40	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a82:	e9cd 130b 	strd	r1, r3, [sp, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a86:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a8e:	930f      	str	r3, [sp, #60]	@ 0x3c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000a90:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a94:	931c      	str	r3, [sp, #112]	@ 0x70
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9a:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9c:	f008 fdba 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	b108      	cbz	r0, 8000aa6 <_Z24PeriphCommonClock_Configv+0x52>
 8000aa2:	b672      	cpsid	i
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <_Z24PeriphCommonClock_Configv+0x50>
}
 8000aa6:	b031      	add	sp, #196	@ 0xc4
 8000aa8:	f85d fb04 	ldr.w	pc, [sp], #4

08000aac <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM5) {
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ab0:	429a      	cmp	r2, r3
{
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	4604      	mov	r4, r0
  if (htim->Instance == TIM5) {
 8000ab6:	d101      	bne.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8000ab8:	f002 fcfc 	bl	80034b4 <HAL_IncTick>
  if (hardware_delay.AssignedTimer(htim)) {
 8000abc:	4621      	mov	r1, r4
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ac0:	f014 fac9 	bl	8015056 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>
 8000ac4:	b120      	cbz	r0, 8000ad0 <HAL_TIM_PeriodElapsedCallback+0x24>
    hardware_delay.TriggeredDelay();
 8000ac6:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
}
 8000ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hardware_delay.TriggeredDelay();
 8000acc:	f014 bc94 	b.w	80153f8 <_ZN13HardwareDelay14TriggeredDelayEv>
}
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40000c00 	.word	0x40000c00
 8000ad8:	24000454 	.word	0x24000454

08000adc <Error_Handler>:
 8000adc:	b672      	cpsid	i
  while (1)
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x2>

08000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8000ae4:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8000ae6:	b118      	cbz	r0, 8000af0 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000ae8:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000aea:	1a09      	subs	r1, r1, r0
 8000aec:	f01c f81c 	bl	801cb28 <_ZdlPvj>
      }
 8000af0:	4620      	mov	r0, r4
 8000af2:	bd10      	pop	{r4, pc}

08000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      _GLIBCXX20_CONSTEXPR
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000af4:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8000af6:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8000af8:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8000afa:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8000afc:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8000b00:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8000b02:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b04:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8000b06:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8000b08:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b0a:	688d      	ldr	r5, [r1, #8]
 8000b0c:	6085      	str	r5, [r0, #8]
      }
 8000b0e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8000b10:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8000b12:	e9c1 3300 	strd	r3, r3, [r1]
 8000b16:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8000b1a:	f7ff ffe1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	constexpr bool __move_storage =
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
	return *this;
      }
 8000b1e:	b005      	add	sp, #20
 8000b20:	bd30      	pop	{r4, r5, pc}

08000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000b22:	b510      	push	{r4, lr}
 8000b24:	4604      	mov	r4, r0
 8000b26:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b28:	e9d4 2300 	ldrd	r2, r3, [r4]
      {
	if (max_size() - size() < __n)
 8000b2c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b30:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 8000b32:	1ae2      	subs	r2, r4, r3
 8000b34:	428a      	cmp	r2, r1
 8000b36:	d201      	bcs.n	8000b3c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 8000b38:	f01c f8d0 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	bf38      	it	cc
 8000b40:	4619      	movcc	r1, r3
 8000b42:	185b      	adds	r3, r3, r1
 8000b44:	d204      	bcs.n	8000b50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2e>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	bf28      	it	cs
 8000b4a:	4623      	movcs	r3, r4
 8000b4c:	4618      	mov	r0, r3

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }
 8000b4e:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b50:	4620      	mov	r0, r4
 8000b52:	e7fc      	b.n	8000b4e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x2c>

08000b54 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8000b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b58:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8000b5c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8000b5e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b62:	ebaa 0208 	sub.w	r2, sl, r8
 8000b66:	4607      	mov	r7, r0
 8000b68:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8000b6a:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000b6e:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8000b72:	d102      	bne.n	8000b7a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000b74:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 8000b76:	f01c f8b1 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000b7a:	45c2      	cmp	sl, r8
 8000b7c:	bf14      	ite	ne
 8000b7e:	4622      	movne	r2, r4
 8000b80:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000b82:	eba1 0508 	sub.w	r5, r1, r8
 8000b86:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b88:	d22f      	bcs.n	8000bea <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000b8a:	b384      	cbz	r4, 8000bee <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000b8c:	429c      	cmp	r4, r3
 8000b8e:	bf28      	it	cs
 8000b90:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8000b92:	00a0      	lsls	r0, r4, #2
 8000b94:	f01b ffed 	bl	801cb72 <_Znwj>
 8000b98:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000b9a:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	5173      	str	r3, [r6, r5]
 8000ba2:	dd04      	ble.n	8000bae <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000ba4:	462a      	mov	r2, r5
 8000ba6:	4641      	mov	r1, r8
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f01c ff5f 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8000bae:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8000bb2:	3504      	adds	r5, #4
      if (__count > 0)
 8000bb4:	f1ba 0f00 	cmp.w	sl, #0
 8000bb8:	4435      	add	r5, r6
 8000bba:	dd04      	ble.n	8000bc6 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000bbc:	4652      	mov	r2, sl
 8000bbe:	4649      	mov	r1, r9
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f01d f84b 	bl	801dc5c <memcpy>
	}
      return __result + __count;
 8000bc6:	4455      	add	r5, sl
	if (__p)
 8000bc8:	f1b8 0f00 	cmp.w	r8, #0
 8000bcc:	d006      	beq.n	8000bdc <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	4640      	mov	r0, r8
 8000bd2:	eba1 0108 	sub.w	r1, r1, r8
 8000bd6:	1089      	asrs	r1, r1, #2
 8000bd8:	f7ff fe5e 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 8000bdc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000be0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000be4:	60be      	str	r6, [r7, #8]
    }
 8000be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000bea:	461c      	mov	r4, r3
 8000bec:	e7d1      	b.n	8000b92 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000bee:	4626      	mov	r6, r4
 8000bf0:	e7d3      	b.n	8000b9a <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8000bf2:	bf00      	nop
 8000bf4:	0801dd74 	.word	0x0801dd74

08000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 8000bf8:	b513      	push	{r0, r1, r4, lr}
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8000bfe:	f015 fa8f 	bl	8016120 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 8000c02:	4620      	mov	r0, r4
 8000c04:	f015 fc26 	bl	8016454 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000c08:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d005      	beq.n	8000c1c <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 8000c16:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 8000c1c:	aa01      	add	r2, sp, #4
 8000c1e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8000c22:	f7ff ff97 	bl	8000b54 <_ZNSt6vectorIP20__UART_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8000c26:	e7f7      	b.n	8000c18 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

08000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000c28:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8000c2a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000c2c:	4613      	mov	r3, r2
	  if (_Num)
 8000c2e:	d005      	beq.n	8000c3c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000c30:	4601      	mov	r1, r0
 8000c32:	4622      	mov	r2, r4
 8000c34:	4618      	mov	r0, r3
 8000c36:	f01c ff19 	bl	801da6c <memmove>
 8000c3a:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 8000c3c:	1918      	adds	r0, r3, r4
 8000c3e:	bd10      	pop	{r4, pc}

08000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8000c40:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c42:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8000c46:	4604      	mov	r4, r0
 8000c48:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000c4a:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c52:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000c54:	4630      	mov	r0, r6
 8000c56:	f7ff fe25 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000c5a:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8000c5c:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000c5e:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8000c60:	e9c4 0000 	strd	r0, r0, [r4]
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 8000c64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8000c68:	f7ff ffde 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8000c6c:	6060      	str	r0, [r4, #4]
      }
 8000c6e:	4620      	mov	r0, r4
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c74 <HAL_FDCAN_RxFifo0Callback>:
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000c74:	07cb      	lsls	r3, r1, #31
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b0a3      	sub	sp, #140	@ 0x8c
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8000c7e:	d512      	bpl.n	8000ca6 <HAL_FDCAN_RxFifo0Callback+0x32>
	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000c80:	ab12      	add	r3, sp, #72	@ 0x48
 8000c82:	aa08      	add	r2, sp, #32
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f005 faff 	bl	8006288 <HAL_FDCAN_GetRxMessage>
		ID = communication.GetID((void*) hfdcan, &success);
 8000c8a:	f10d 0207 	add.w	r2, sp, #7
 8000c8e:	4621      	mov	r1, r4
 8000c90:	482c      	ldr	r0, [pc, #176]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000c92:	f00f fd43 	bl	801071c <_ZN13Communication5GetIDEPvPb>
		if (!success) {communication.ActivateReception(ID); return;}
 8000c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
		ID = communication.GetID((void*) hfdcan, &success);
 8000c9a:	4606      	mov	r6, r0
		if (!success) {communication.ActivateReception(ID); return;}
 8000c9c:	b933      	cbnz	r3, 8000cac <HAL_FDCAN_RxFifo0Callback+0x38>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	4828      	ldr	r0, [pc, #160]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000ca2:	f00f fd75 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
}
 8000ca6:	b023      	add	sp, #140	@ 0x8c
 8000ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000cac:	2040      	movs	r0, #64	@ 0x40
	    uint8_t target_address = (uint8_t) RxHeader.Identifier;
 8000cae:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8000cb2:	f7ff fdf7 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000cb6:	ab12      	add	r3, sp, #72	@ 0x48
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000cb8:	f100 0740 	add.w	r7, r0, #64	@ 0x40
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f10d 0c88 	add.w	ip, sp, #136	@ 0x88
 8000cc4:	9002      	str	r0, [sp, #8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000cc6:	9704      	str	r7, [sp, #16]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	3408      	adds	r4, #8
 8000ccc:	ca03      	ldmia	r2!, {r0, r1}
 8000cce:	4562      	cmp	r2, ip
 8000cd0:	f844 0c08 	str.w	r0, [r4, #-8]
 8000cd4:	f844 1c04 	str.w	r1, [r4, #-4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	d1f5      	bne.n	8000cc8 <HAL_FDCAN_RxFifo0Callback+0x54>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d48 <HAL_FDCAN_RxFifo0Callback+0xd4>)
 8000cde:	2101      	movs	r1, #1
 8000ce0:	a802      	add	r0, sp, #8
	  this->_M_impl._M_finish =
 8000ce2:	9703      	str	r7, [sp, #12]
 8000ce4:	f7ff ff1d 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000ce8:	4681      	mov	r9, r0
      pointer __new_start(this->_M_allocate(__len));
 8000cea:	f7ff fddb 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000cee:	462a      	mov	r2, r5
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	f803 8b01 	strb.w	r8, [r3], #1
 8000cf8:	f852 1b04 	ldr.w	r1, [r2], #4
 8000cfc:	42ba      	cmp	r2, r7
 8000cfe:	f843 1b04 	str.w	r1, [r3], #4
 8000d02:	d1f9      	bne.n	8000cf8 <HAL_FDCAN_RxFifo0Callback+0x84>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8000d04:	4628      	mov	r0, r5
 8000d06:	2140      	movs	r1, #64	@ 0x40
 8000d08:	f01b ff0e 	bl	801cb28 <_ZdlPvj>
      return __result + __count;
 8000d0c:	f104 0341 	add.w	r3, r4, #65	@ 0x41
      this->_M_impl._M_start = __new_start;
 8000d10:	9402      	str	r4, [sp, #8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d12:	444c      	add	r4, r9
		communication.Process(ID, received_data, &success);
 8000d14:	a902      	add	r1, sp, #8
 8000d16:	a805      	add	r0, sp, #20
      this->_M_impl._M_finish = __new_finish;
 8000d18:	9303      	str	r3, [sp, #12]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000d1a:	9404      	str	r4, [sp, #16]
 8000d1c:	f7ff ff90 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8000d20:	f10d 0307 	add.w	r3, sp, #7
 8000d24:	aa05      	add	r2, sp, #20
 8000d26:	4631      	mov	r1, r6
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000d2a:	f012 fa3d 	bl	80131a8 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
      }
 8000d2e:	a805      	add	r0, sp, #20
 8000d30:	f7ff fed6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		communication.ActivateReception(ID);
 8000d34:	4631      	mov	r1, r6
 8000d36:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8000d38:	f00f fd2a 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
 8000d3c:	a802      	add	r0, sp, #8
 8000d3e:	f7ff fecf 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000d42:	e7b0      	b.n	8000ca6 <HAL_FDCAN_RxFifo0Callback+0x32>
 8000d44:	240010cc 	.word	0x240010cc
 8000d48:	0801dd74 	.word	0x0801dd74

08000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>:
	vector(_InputIterator __first, _InputIterator __last,
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d4e:	2300      	movs	r3, #0

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d50:	1a57      	subs	r7, r2, r1
	vector(_InputIterator __first, _InputIterator __last,
 8000d52:	4604      	mov	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	4616      	mov	r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d58:	6083      	str	r3, [r0, #8]
 8000d5a:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d5e:	d502      	bpl.n	8000d66 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x1a>
	  __throw_length_error(
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_+0x38>)
 8000d62:	f01b ffbb 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000d66:	4638      	mov	r0, r7
 8000d68:	f7ff fd9c 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d6c:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6020      	str	r0, [r4, #0]
			      _Category>::__copy_m(__first, __last, __result);
 8000d72:	4631      	mov	r1, r6
 8000d74:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000d76:	60a7      	str	r7, [r4, #8]
 8000d78:	f7ff ff56 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000d7c:	6060      	str	r0, [r4, #4]
	}
 8000d7e:	4620      	mov	r0, r4
 8000d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0801dd8e 	.word	0x0801dd8e

08000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8000d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d8a:	ab02      	add	r3, sp, #8
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460e      	mov	r6, r1
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }

      // Number of elements.
      constexpr size_type
      size() const noexcept { return _M_len; }
 8000d90:	4615      	mov	r5, r2
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000d92:	188f      	adds	r7, r1, r2
 8000d94:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d98:	2300      	movs	r3, #0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000d9a:	429a      	cmp	r2, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000d9c:	6083      	str	r3, [r0, #8]
 8000d9e:	e9c0 3300 	strd	r3, r3, [r0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000da2:	da02      	bge.n	8000daa <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x22>
	  __throw_length_error(
 8000da4:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_+0x40>)
 8000da6:	f01b ff99 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000daa:	4610      	mov	r0, r2
 8000dac:	f7ff fd7a 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000db0:	4405      	add	r5, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8000db2:	4602      	mov	r2, r0
 8000db4:	6020      	str	r0, [r4, #0]
 8000db6:	4639      	mov	r1, r7
 8000db8:	4630      	mov	r0, r6
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8000dba:	60a5      	str	r5, [r4, #8]
 8000dbc:	f7ff ff34 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8000dc0:	6060      	str	r0, [r4, #4]
      }
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc8:	0801dd8e 	.word	0x0801dd8e

08000dcc <main>:
{
 8000dcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000dd0:	b0c1      	sub	sp, #260	@ 0x104
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	4dcf      	ldr	r5, [pc, #828]	@ (8001110 <main+0x344>)
  HAL_Init();
 8000dd4:	f002 fb40 	bl	8003458 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2400      	movs	r4, #0
  SystemClock_Config();
 8000dda:	f7ff fdb1 	bl	8000940 <_Z18SystemClock_Configv>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8000de0:	f7ff fe38 	bl	8000a54 <_Z24PeriphCommonClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	2214      	movs	r2, #20
 8000de6:	2100      	movs	r1, #0
 8000de8:	a835      	add	r0, sp, #212	@ 0xd4
 8000dea:	f01c fe59 	bl	801daa0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000df2:	2200      	movs	r2, #0
 8000df4:	f64c 211c 	movw	r1, #51740	@ 0xca1c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df8:	f043 0310 	orr.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000dfc:	48c5      	ldr	r0, [pc, #788]	@ (8001114 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dfe:	f04f 0908 	mov.w	r9, #8
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	2780      	movs	r7, #128	@ 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e04:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	9307      	str	r3, [sp, #28]
 8000e12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e14:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e20:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e38:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e50:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e68:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000e72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000e80:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, LED_STATUS_Pin|LED_CONTROLLER_Pin|LED_FAULT_Pin|MOTOR_IN1_Pin
 8000e8c:	f005 fde7 	bl	8006a5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED_USER1_Pin|LED_USER2_Pin|LED_USER3_Pin|LED_UART_FRONT_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f248 01b0 	movw	r1, #32944	@ 0x80b0
 8000e96:	48a0      	ldr	r0, [pc, #640]	@ (8001118 <main+0x34c>)
 8000e98:	f005 fde1 	bl	8006a5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHIFTER_EN_GPIO_Port, SHIFTER_EN_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	489e      	ldr	r0, [pc, #632]	@ (800111c <main+0x350>)
 8000ea2:	f005 fddc 	bl	8006a5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_RS485_Pin|LED_UART_BACK_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000eac:	489c      	ldr	r0, [pc, #624]	@ (8001120 <main+0x354>)
 8000eae:	f005 fdd6 	bl	8006a5e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	489b      	ldr	r0, [pc, #620]	@ (8001124 <main+0x358>)
 8000eb8:	f005 fdd1 	bl	8006a5e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	f64c 231c 	movw	r3, #51740	@ 0xca1c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec0:	a935      	add	r1, sp, #212	@ 0xd4
 8000ec2:	4894      	ldr	r0, [pc, #592]	@ (8001114 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ecc:	f005 fcb0 	bl	8006830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USER1_Pin|LED_USER2_Pin|LED_USER3_Pin|LED_UART_FRONT_Pin;
 8000ed0:	f248 03b0 	movw	r3, #32944	@ 0x80b0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	a935      	add	r1, sp, #212	@ 0xd4
 8000ed6:	4890      	ldr	r0, [pc, #576]	@ (8001118 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f005 fca6 	bl	8006830 <HAL_GPIO_Init>
  HAL_GPIO_Init(SHIFTER_EN_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	a935      	add	r1, sp, #212	@ 0xd4
 8000ee6:	488d      	ldr	r0, [pc, #564]	@ (800111c <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	e9cd 6635 	strd	r6, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(SHIFTER_EN_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f005 fc9e 	bl	8006830 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_RS485_Pin|LED_UART_BACK_Pin;
 8000ef4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	a935      	add	r1, sp, #212	@ 0xd4
 8000efa:	4889      	ldr	r0, [pc, #548]	@ (8001120 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	e9cd 3635 	strd	r3, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f005 fc94 	bl	8006830 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_FDCAN1_GPIO_Port, &GPIO_InitStruct);
 8000f08:	a935      	add	r1, sp, #212	@ 0xd4
 8000f0a:	4886      	ldr	r0, [pc, #536]	@ (8001124 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	e9cd 6635 	strd	r6, r6, [sp, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_GPIO_Init(LED_FDCAN1_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f005 fc8c 	bl	8006830 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(WATER_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	a935      	add	r1, sp, #212	@ 0xd4
 8000f1e:	4881      	ldr	r0, [pc, #516]	@ (8001124 <main+0x358>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	9437      	str	r4, [sp, #220]	@ 0xdc
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f22:	e9cd 9335 	strd	r9, r3, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(WATER_DETECTION_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f005 fc83 	bl	8006830 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2009      	movs	r0, #9
 8000f30:	f003 fb04 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f34:	2009      	movs	r0, #9
 8000f36:	f003 fb11 	bl	800455c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f3e:	4622      	mov	r2, r4
 8000f40:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f42:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f44:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000f4a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000f4e:	4033      	ands	r3, r6
 8000f50:	9305      	str	r3, [sp, #20]
 8000f52:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f54:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000f60:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  htim1.Instance = TIM1;
 8000f64:	4d70      	ldr	r5, [pc, #448]	@ (8001128 <main+0x35c>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	9306      	str	r3, [sp, #24]
 8000f6c:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f6e:	f003 fae5 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f72:	200b      	movs	r0, #11
 8000f74:	f003 faf2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f78:	4622      	mov	r2, r4
 8000f7a:	2105      	movs	r1, #5
 8000f7c:	200c      	movs	r0, #12
 8000f7e:	f003 fadd 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f82:	200c      	movs	r0, #12
 8000f84:	f003 faea 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f88:	4622      	mov	r2, r4
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	200d      	movs	r0, #13
 8000f8e:	f003 fad5 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f92:	200d      	movs	r0, #13
 8000f94:	f003 fae2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f98:	4622      	mov	r2, r4
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	200e      	movs	r0, #14
 8000f9e:	f003 facd 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f003 fada 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000fa8:	4622      	mov	r2, r4
 8000faa:	2105      	movs	r1, #5
 8000fac:	200f      	movs	r0, #15
 8000fae:	f003 fac5 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fb2:	200f      	movs	r0, #15
 8000fb4:	f003 fad2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000fb8:	4622      	mov	r2, r4
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2010      	movs	r0, #16
 8000fbe:	f003 fabd 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f003 faca 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000fc8:	4622      	mov	r2, r4
 8000fca:	2105      	movs	r1, #5
 8000fcc:	2011      	movs	r0, #17
 8000fce:	f003 fab5 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fd2:	2011      	movs	r0, #17
 8000fd4:	f003 fac2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000fd8:	4622      	mov	r2, r4
 8000fda:	2105      	movs	r1, #5
 8000fdc:	202f      	movs	r0, #47	@ 0x2f
 8000fde:	f003 faad 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000fe2:	202f      	movs	r0, #47	@ 0x2f
 8000fe4:	f003 faba 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fe8:	4622      	mov	r2, r4
 8000fea:	2105      	movs	r1, #5
 8000fec:	2038      	movs	r0, #56	@ 0x38
 8000fee:	f003 faa5 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ff2:	2038      	movs	r0, #56	@ 0x38
 8000ff4:	f003 fab2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000ff8:	4622      	mov	r2, r4
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2039      	movs	r0, #57	@ 0x39
 8000ffe:	f003 fa9d 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001002:	2039      	movs	r0, #57	@ 0x39
 8001004:	f003 faaa 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001008:	4622      	mov	r2, r4
 800100a:	2105      	movs	r1, #5
 800100c:	203a      	movs	r0, #58	@ 0x3a
 800100e:	f003 fa95 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001012:	203a      	movs	r0, #58	@ 0x3a
 8001014:	f003 faa2 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001018:	4622      	mov	r2, r4
 800101a:	2105      	movs	r1, #5
 800101c:	203b      	movs	r0, #59	@ 0x3b
 800101e:	f003 fa8d 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001022:	203b      	movs	r0, #59	@ 0x3b
 8001024:	f003 fa9a 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001028:	4622      	mov	r2, r4
 800102a:	2105      	movs	r1, #5
 800102c:	203c      	movs	r0, #60	@ 0x3c
 800102e:	f003 fa85 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001032:	203c      	movs	r0, #60	@ 0x3c
 8001034:	f003 fa92 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001038:	4622      	mov	r2, r4
 800103a:	2105      	movs	r1, #5
 800103c:	2044      	movs	r0, #68	@ 0x44
 800103e:	f003 fa7d 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001042:	2044      	movs	r0, #68	@ 0x44
 8001044:	f003 fa8a 	bl	800455c <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001048:	2210      	movs	r2, #16
 800104a:	4621      	mov	r1, r4
 800104c:	a82a      	add	r0, sp, #168	@ 0xa8
 800104e:	f01c fd27 	bl	801daa0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	221c      	movs	r2, #28
 8001054:	4621      	mov	r1, r4
 8001056:	a82e      	add	r0, sp, #184	@ 0xb8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	9429      	str	r4, [sp, #164]	@ 0xa4
 800105a:	e9cd 4427 	strd	r4, r4, [sp, #156]	@ 0x9c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105e:	f01c fd1f 	bl	801daa0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001062:	222c      	movs	r2, #44	@ 0x2c
 8001064:	4621      	mov	r1, r4
 8001066:	a835      	add	r0, sp, #212	@ 0xd4
 8001068:	f01c fd1a 	bl	801daa0 <memset>
  htim1.Instance = TIM1;
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <main+0x360>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800106e:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8001072:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001074:	61af      	str	r7, [r5, #24]
  htim1.Init.Prescaler = 0;
 8001076:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 24000;
 800107a:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001082:	f00a f8f1 	bl	800b268 <HAL_TIM_Base_Init>
 8001086:	b108      	cbz	r0, 800108c <main+0x2c0>
 8001088:	b672      	cpsid	i
  while (1)
 800108a:	e7fe      	b.n	800108a <main+0x2be>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001090:	a92a      	add	r1, sp, #168	@ 0xa8
 8001092:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001098:	f00a fa92 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 800109c:	b108      	cbz	r0, 80010a2 <main+0x2d6>
 800109e:	b672      	cpsid	i
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x2d4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a2:	4628      	mov	r0, r5
 80010a4:	f00a f910 	bl	800b2c8 <HAL_TIM_PWM_Init>
 80010a8:	b108      	cbz	r0, 80010ae <main+0x2e2>
 80010aa:	b672      	cpsid	i
  while (1)
 80010ac:	e7fe      	b.n	80010ac <main+0x2e0>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010ae:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	9029      	str	r0, [sp, #164]	@ 0xa4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b4:	a927      	add	r1, sp, #156	@ 0x9c
 80010b6:	4628      	mov	r0, r5
 80010b8:	f00a fc4a 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	b108      	cbz	r0, 80010c2 <main+0x2f6>
 80010be:	b672      	cpsid	i
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0x2f4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c4:	9034      	str	r0, [sp, #208]	@ 0xd0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010c6:	464a      	mov	r2, r9
 80010c8:	a92e      	add	r1, sp, #184	@ 0xb8
  sConfigOC.Pulse = 0;
 80010ca:	e9cd 302e 	strd	r3, r0, [sp, #184]	@ 0xb8
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ce:	e9cd 0030 	strd	r0, r0, [sp, #192]	@ 0xc0
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	e9cd 0032 	strd	r0, r0, [sp, #200]	@ 0xc8
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010d6:	4628      	mov	r0, r5
 80010d8:	f00a f9c8 	bl	800b46c <HAL_TIM_PWM_ConfigChannel>
 80010dc:	b108      	cbz	r0, 80010e2 <main+0x316>
 80010de:	b672      	cpsid	i
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0x314>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e6:	9039      	str	r0, [sp, #228]	@ 0xe4
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e8:	903c      	str	r0, [sp, #240]	@ 0xf0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ea:	a935      	add	r1, sp, #212	@ 0xd4
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ec:	903f      	str	r0, [sp, #252]	@ 0xfc
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ee:	e9cd 303a 	strd	r3, r0, [sp, #232]	@ 0xe8
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f6:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fa:	e9cd 0037 	strd	r0, r0, [sp, #220]	@ 0xdc
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fe:	e9cd 303d 	strd	r3, r0, [sp, #244]	@ 0xf4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001102:	4628      	mov	r0, r5
 8001104:	f00a fc74 	bl	800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001108:	4604      	mov	r4, r0
 800110a:	b188      	cbz	r0, 8001130 <main+0x364>
 800110c:	b672      	cpsid	i
  while (1)
 800110e:	e7fe      	b.n	800110e <main+0x342>
 8001110:	58024400 	.word	0x58024400
 8001114:	58021000 	.word	0x58021000
 8001118:	58020000 	.word	0x58020000
 800111c:	58020400 	.word	0x58020400
 8001120:	58020800 	.word	0x58020800
 8001124:	58020c00 	.word	0x58020c00
 8001128:	24001af4 	.word	0x24001af4
 800112c:	40010000 	.word	0x40010000
  HAL_TIM_MspPostInit(&htim1);
 8001130:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8001132:	4da9      	ldr	r5, [pc, #676]	@ (80013d8 <main+0x60c>)
  HAL_TIM_MspPostInit(&htim1);
 8001134:	f001 fc98 	bl	8002a68 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001138:	4621      	mov	r1, r4
 800113a:	221c      	movs	r2, #28
 800113c:	a836      	add	r0, sp, #216	@ 0xd8
 800113e:	f01c fcaf 	bl	801daa0 <memset>
  htim2.Instance = TIM2;
 8001142:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001146:	a935      	add	r1, sp, #212	@ 0xd4
 8001148:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	9430      	str	r4, [sp, #192]	@ 0xc0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800114e:	61af      	str	r7, [r5, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	9637      	str	r6, [sp, #220]	@ 0xdc
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001152:	963b      	str	r6, [sp, #236]	@ 0xec
  htim2.Init.Prescaler = 0;
 8001154:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 4294967295;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001160:	2303      	movs	r3, #3
 8001162:	9335      	str	r3, [sp, #212]	@ 0xd4
  sConfig.IC1Filter = 10;
 8001164:	230a      	movs	r3, #10
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	e9cd 442e 	strd	r4, r4, [sp, #184]	@ 0xb8
  sConfig.IC1Filter = 10;
 800116a:	9339      	str	r3, [sp, #228]	@ 0xe4
  sConfig.IC2Filter = 10;
 800116c:	933d      	str	r3, [sp, #244]	@ 0xf4
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800116e:	f00a f8db 	bl	800b328 <HAL_TIM_Encoder_Init>
 8001172:	b108      	cbz	r0, 8001178 <main+0x3ac>
 8001174:	b672      	cpsid	i
  while (1)
 8001176:	e7fe      	b.n	8001176 <main+0x3aa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117a:	a92e      	add	r1, sp, #184	@ 0xb8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	9030      	str	r0, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117e:	4628      	mov	r0, r5
 8001180:	f00a fbe6 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4604      	mov	r4, r0
 8001186:	b108      	cbz	r0, 800118c <main+0x3c0>
 8001188:	b672      	cpsid	i
  while (1)
 800118a:	e7fe      	b.n	800118a <main+0x3be>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118c:	4601      	mov	r1, r0
 800118e:	2210      	movs	r2, #16
 8001190:	a82e      	add	r0, sp, #184	@ 0xb8
  htim3.Instance = TIM3;
 8001192:	4d92      	ldr	r5, [pc, #584]	@ (80013dc <main+0x610>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001194:	f01c fc84 	bl	801daa0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	221c      	movs	r2, #28
 800119a:	4621      	mov	r1, r4
 800119c:	a835      	add	r0, sp, #212	@ 0xd4
  htim3.Init.Prescaler = 24;
 800119e:	f8df b268 	ldr.w	fp, [pc, #616]	@ 8001408 <main+0x63c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	942c      	str	r4, [sp, #176]	@ 0xb0
 80011a4:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	f01c fc7a 	bl	801daa0 <memset>
  htim3.Init.Prescaler = 24;
 80011ac:	2318      	movs	r3, #24
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ae:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b2:	61af      	str	r7, [r5, #24]
  htim3.Init.Prescaler = 24;
 80011b4:	e9c5 b300 	strd	fp, r3, [r5]
  htim3.Init.Period = 30000;
 80011b8:	f247 5330 	movw	r3, #30000	@ 0x7530
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	f00a f852 	bl	800b268 <HAL_TIM_Base_Init>
 80011c4:	b108      	cbz	r0, 80011ca <main+0x3fe>
 80011c6:	b672      	cpsid	i
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <main+0x3fc>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ca:	a92e      	add	r1, sp, #184	@ 0xb8
 80011cc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d2:	f00a f9f5 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 80011d6:	b108      	cbz	r0, 80011dc <main+0x410>
 80011d8:	b672      	cpsid	i
  while (1)
 80011da:	e7fe      	b.n	80011da <main+0x40e>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011dc:	487f      	ldr	r0, [pc, #508]	@ (80013dc <main+0x610>)
 80011de:	f00a f873 	bl	800b2c8 <HAL_TIM_PWM_Init>
 80011e2:	b108      	cbz	r0, 80011e8 <main+0x41c>
 80011e4:	b672      	cpsid	i
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <main+0x41a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	902a      	str	r0, [sp, #168]	@ 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ea:	a92a      	add	r1, sp, #168	@ 0xa8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	902c      	str	r0, [sp, #176]	@ 0xb0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ee:	487b      	ldr	r0, [pc, #492]	@ (80013dc <main+0x610>)
 80011f0:	f00a fbae 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4602      	mov	r2, r0
 80011f6:	b108      	cbz	r0, 80011fc <main+0x430>
 80011f8:	b672      	cpsid	i
  while (1)
 80011fa:	e7fe      	b.n	80011fa <main+0x42e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fc:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fe:	9037      	str	r0, [sp, #220]	@ 0xdc
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	9039      	str	r0, [sp, #228]	@ 0xe4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	a935      	add	r1, sp, #212	@ 0xd4
  sConfigOC.Pulse = 0;
 8001204:	e9cd 3035 	strd	r3, r0, [sp, #212]	@ 0xd4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001208:	4874      	ldr	r0, [pc, #464]	@ (80013dc <main+0x610>)
 800120a:	f00a f92f 	bl	800b46c <HAL_TIM_PWM_ConfigChannel>
 800120e:	b108      	cbz	r0, 8001214 <main+0x448>
 8001210:	b672      	cpsid	i
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x446>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001214:	2204      	movs	r2, #4
 8001216:	a935      	add	r1, sp, #212	@ 0xd4
 8001218:	4870      	ldr	r0, [pc, #448]	@ (80013dc <main+0x610>)
 800121a:	f00a f927 	bl	800b46c <HAL_TIM_PWM_ConfigChannel>
 800121e:	4605      	mov	r5, r0
 8001220:	b108      	cbz	r0, 8001226 <main+0x45a>
 8001222:	b672      	cpsid	i
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x458>
  HAL_TIM_MspPostInit(&htim3);
 8001226:	486d      	ldr	r0, [pc, #436]	@ (80013dc <main+0x610>)
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001228:	2704      	movs	r7, #4
  hadc1.Instance = ADC1;
 800122a:	4c6d      	ldr	r4, [pc, #436]	@ (80013e0 <main+0x614>)
  HAL_TIM_MspPostInit(&htim3);
 800122c:	f001 fc1c 	bl	8002a68 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001230:	221c      	movs	r2, #28
 8001232:	4629      	mov	r1, r5
 8001234:	a835      	add	r0, sp, #212	@ 0xd4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001236:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 800140c <main+0x640>
  hadc1.Init.NbrOfConversion = 1;
 800123a:	2601      	movs	r6, #1
  ADC_MultiModeTypeDef multimode = {0};
 800123c:	9530      	str	r5, [sp, #192]	@ 0xc0
 800123e:	e9cd 552e 	strd	r5, r5, [sp, #184]	@ 0xb8
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	f01c fc2d 	bl	801daa0 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001246:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800124a:	4620      	mov	r0, r4
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124c:	6127      	str	r7, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124e:	82a5      	strh	r5, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8001250:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001252:	7725      	strb	r5, [r4, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001254:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001256:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800125a:	e9c4 a300 	strd	sl, r3, [r4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800125e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001266:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	f002 feed 	bl	8004048 <HAL_ADC_Init>
 800126e:	b108      	cbz	r0, 8001274 <main+0x4a8>
 8001270:	b672      	cpsid	i
  while (1)
 8001272:	e7fe      	b.n	8001272 <main+0x4a6>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001274:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001276:	a92e      	add	r1, sp, #184	@ 0xb8
 8001278:	4620      	mov	r0, r4
 800127a:	f003 f865 	bl	8004348 <HAL_ADCEx_MultiModeConfigChannel>
 800127e:	b108      	cbz	r0, 8001284 <main+0x4b8>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x4b6>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001284:	2306      	movs	r3, #6
 8001286:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8001410 <main+0x644>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800128a:	2503      	movs	r5, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 800128c:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001292:	e9cd 9335 	strd	r9, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001296:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 800129a:	e9cd 7039 	strd	r7, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a0:	e9cd 5337 	strd	r5, r3, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	f002 f9fc 	bl	80036a0 <HAL_ADC_ConfigChannel>
 80012a8:	4602      	mov	r2, r0
 80012aa:	b108      	cbz	r0, 80012b0 <main+0x4e4>
 80012ac:	b672      	cpsid	i
  while (1)
 80012ae:	e7fe      	b.n	80012ae <main+0x4e2>
  hfdcan1.Instance = FDCAN1;
 80012b0:	484c      	ldr	r0, [pc, #304]	@ (80013e4 <main+0x618>)
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012b2:	f04f 0914 	mov.w	r9, #20
  hfdcan1.Instance = FDCAN1;
 80012b6:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <main+0x61c>)
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012b8:	f04f 080a 	mov.w	r8, #10
 80012bc:	2412      	movs	r4, #18
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012be:	f04f 0b4f 	mov.w	fp, #79	@ 0x4f
  hfdcan1.Instance = FDCAN1;
 80012c2:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.DataTimeSeg1 = 21;
 80012c4:	f04f 0a15 	mov.w	sl, #21
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80012c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80012cc:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 80012ce:	7482      	strb	r2, [r0, #18]
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012d0:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hfdcan1.Init.NominalPrescaler = 1;
 80012d2:	6146      	str	r6, [r0, #20]
  hfdcan1.Init.DataSyncJumpWidth = 3;
 80012d4:	6285      	str	r5, [r0, #40]	@ 0x28
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 80012d6:	6684      	str	r4, [r0, #104]	@ 0x68
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80012d8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan1.Init.StdFiltersNbr = 0;
 80012dc:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012e0:	e9c0 2712 	strd	r2, r7, [r0, #72]	@ 0x48
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012e4:	e9c0 2714 	strd	r2, r7, [r0, #80]	@ 0x50
  hfdcan1.Init.TxBuffersNbr = 0;
 80012e8:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ec:	e9c0 8218 	strd	r8, r2, [r0, #96]	@ 0x60
  hfdcan1.Init.NominalTimeSeg1 = 79;
 80012f0:	e9c0 9b06 	strd	r9, fp, [r0, #24]
  hfdcan1.Init.DataPrescaler = 1;
 80012f4:	e9c0 9608 	strd	r9, r6, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 3;
 80012f8:	e9c0 a50b 	strd	sl, r5, [r0, #44]	@ 0x2c
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80012fc:	e9c0 8410 	strd	r8, r4, [r0, #64]	@ 0x40
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001300:	f004 fe08 	bl	8005f14 <HAL_FDCAN_Init>
 8001304:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001308:	4602      	mov	r2, r0
 800130a:	b108      	cbz	r0, 8001310 <main+0x544>
 800130c:	b672      	cpsid	i
  while (1)
 800130e:	e7fe      	b.n	800130e <main+0x542>
  hfdcan2.Instance = FDCAN2;
 8001310:	4836      	ldr	r0, [pc, #216]	@ (80013ec <main+0x620>)
 8001312:	4937      	ldr	r1, [pc, #220]	@ (80013f0 <main+0x624>)
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001314:	8202      	strh	r2, [r0, #16]
  hfdcan2.Instance = FDCAN2;
 8001316:	6001      	str	r1, [r0, #0]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001318:	7482      	strb	r2, [r0, #18]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800131a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hfdcan2.Init.MessageRAMOffset = 360;
 800131e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
  hfdcan2.Init.NominalSyncJumpWidth = 20;
 8001322:	e9c0 6905 	strd	r6, r9, [r0, #20]
  hfdcan2.Init.StdFiltersNbr = 0;
 8001326:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hfdcan2.Init.NominalTimeSeg2 = 20;
 800132a:	e9c0 b907 	strd	fp, r9, [r0, #28]
  hfdcan2.Init.DataSyncJumpWidth = 3;
 800132e:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hfdcan2.Init.DataTimeSeg2 = 3;
 8001332:	e9c0 a50b 	strd	sl, r5, [r0, #44]	@ 0x2c
  hfdcan2.Init.RxFifo0ElmtsNbr = 10;
 8001336:	e9c0 280f 	strd	r2, r8, [r0, #60]	@ 0x3c
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800133a:	e9c0 4211 	strd	r4, r2, [r0, #68]	@ 0x44
  hfdcan2.Init.RxBuffersNbr = 0;
 800133e:	e9c0 7213 	strd	r7, r2, [r0, #76]	@ 0x4c
  hfdcan2.Init.TxEventsNbr = 0;
 8001342:	e9c0 7215 	strd	r7, r2, [r0, #84]	@ 0x54
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8001346:	e9c0 2817 	strd	r2, r8, [r0, #92]	@ 0x5c
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800134a:	e9c0 2419 	strd	r2, r4, [r0, #100]	@ 0x64
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800134e:	f004 fde1 	bl	8005f14 <HAL_FDCAN_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	b108      	cbz	r0, 800135a <main+0x58e>
 8001356:	b672      	cpsid	i
  while (1)
 8001358:	e7fe      	b.n	8001358 <main+0x58c>
  hi2c1.Instance = I2C1;
 800135a:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <main+0x628>)
  hi2c1.Init.Timing = 0x307075B1;
 800135c:	4a26      	ldr	r2, [pc, #152]	@ (80013f8 <main+0x62c>)
 800135e:	4d27      	ldr	r5, [pc, #156]	@ (80013fc <main+0x630>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001360:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x307075B1;
 8001362:	e9c0 2500 	strd	r2, r5, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	f005 fdbb 	bl	8006eec <HAL_I2C_Init>
 8001376:	b108      	cbz	r0, 800137c <main+0x5b0>
 8001378:	b672      	cpsid	i
  while (1)
 800137a:	e7fe      	b.n	800137a <main+0x5ae>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137c:	2100      	movs	r1, #0
 800137e:	481d      	ldr	r0, [pc, #116]	@ (80013f4 <main+0x628>)
 8001380:	f007 f9c9 	bl	8008716 <HAL_I2CEx_ConfigAnalogFilter>
 8001384:	4601      	mov	r1, r0
 8001386:	b108      	cbz	r0, 800138c <main+0x5c0>
 8001388:	b672      	cpsid	i
  while (1)
 800138a:	e7fe      	b.n	800138a <main+0x5be>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	4819      	ldr	r0, [pc, #100]	@ (80013f4 <main+0x628>)
 800138e:	f007 f9f0 	bl	8008772 <HAL_I2CEx_ConfigDigitalFilter>
 8001392:	b108      	cbz	r0, 8001398 <main+0x5cc>
 8001394:	b672      	cpsid	i
  while (1)
 8001396:	e7fe      	b.n	8001396 <main+0x5ca>
  hi2c2.Instance = I2C2;
 8001398:	4c19      	ldr	r4, [pc, #100]	@ (8001400 <main+0x634>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139a:	2601      	movs	r6, #1
  hi2c2.Instance = I2C2;
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <main+0x638>)
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	60a0      	str	r0, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a4:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013ac:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x307075B1;
 80013ae:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b2:	f005 fd9b 	bl	8006eec <HAL_I2C_Init>
 80013b6:	4601      	mov	r1, r0
 80013b8:	b108      	cbz	r0, 80013be <main+0x5f2>
 80013ba:	b672      	cpsid	i
  while (1)
 80013bc:	e7fe      	b.n	80013bc <main+0x5f0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013be:	4620      	mov	r0, r4
 80013c0:	f007 f9a9 	bl	8008716 <HAL_I2CEx_ConfigAnalogFilter>
 80013c4:	4601      	mov	r1, r0
 80013c6:	b108      	cbz	r0, 80013cc <main+0x600>
 80013c8:	b672      	cpsid	i
  while (1)
 80013ca:	e7fe      	b.n	80013ca <main+0x5fe>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f007 f9d0 	bl	8008772 <HAL_I2CEx_ConfigDigitalFilter>
 80013d2:	b1f8      	cbz	r0, 8001414 <main+0x648>
 80013d4:	b672      	cpsid	i
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <main+0x60a>
 80013d8:	24001aa8 	.word	0x24001aa8
 80013dc:	24001a5c 	.word	0x24001a5c
 80013e0:	240020fc 	.word	0x240020fc
 80013e4:	24001f94 	.word	0x24001f94
 80013e8:	4000a000 	.word	0x4000a000
 80013ec:	24001ef4 	.word	0x24001ef4
 80013f0:	4000a400 	.word	0x4000a400
 80013f4:	24001ea8 	.word	0x24001ea8
 80013f8:	40005400 	.word	0x40005400
 80013fc:	307075b1 	.word	0x307075b1
 8001400:	24001e5c 	.word	0x24001e5c
 8001404:	40005800 	.word	0x40005800
 8001408:	40000400 	.word	0x40000400
 800140c:	40022000 	.word	0x40022000
 8001410:	14f00020 	.word	0x14f00020
  hi2c4.Instance = I2C4;
 8001414:	4ca1      	ldr	r4, [pc, #644]	@ (800169c <main+0x8d0>)
 8001416:	4ba2      	ldr	r3, [pc, #648]	@ (80016a0 <main+0x8d4>)
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001418:	6220      	str	r0, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c4.Init.OwnAddress2 = 0;
 800141e:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001426:	4620      	mov	r0, r4
  hi2c4.Init.Timing = 0x307075B1;
 8001428:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800142c:	f005 fd5e 	bl	8006eec <HAL_I2C_Init>
 8001430:	4601      	mov	r1, r0
 8001432:	b108      	cbz	r0, 8001438 <main+0x66c>
 8001434:	b672      	cpsid	i
  while (1)
 8001436:	e7fe      	b.n	8001436 <main+0x66a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001438:	4620      	mov	r0, r4
 800143a:	f007 f96c 	bl	8008716 <HAL_I2CEx_ConfigAnalogFilter>
 800143e:	4601      	mov	r1, r0
 8001440:	b108      	cbz	r0, 8001446 <main+0x67a>
 8001442:	b672      	cpsid	i
  while (1)
 8001444:	e7fe      	b.n	8001444 <main+0x678>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001446:	4620      	mov	r0, r4
 8001448:	f007 f993 	bl	8008772 <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	b108      	cbz	r0, 8001452 <main+0x686>
 800144e:	b672      	cpsid	i
  while (1)
 8001450:	e7fe      	b.n	8001450 <main+0x684>
  huart5.Instance = UART5;
 8001452:	4c94      	ldr	r4, [pc, #592]	@ (80016a4 <main+0x8d8>)
  huart5.Init.BaudRate = 115200;
 8001454:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001458:	f8df e278 	ldr.w	lr, [pc, #632]	@ 80016d4 <main+0x908>
  huart5.Init.Parity = UART_PARITY_NONE;
 800145c:	6120      	str	r0, [r4, #16]
  huart5.Init.BaudRate = 115200;
 800145e:	e9c4 e300 	strd	lr, r3, [r4]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001462:	230c      	movs	r3, #12
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001464:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001468:	e9c4 3005 	strd	r3, r0, [r4, #20]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146c:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001470:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001474:	4620      	mov	r0, r4
 8001476:	f00b fa46 	bl	800c906 <HAL_UART_Init>
 800147a:	4601      	mov	r1, r0
 800147c:	b108      	cbz	r0, 8001482 <main+0x6b6>
 800147e:	b672      	cpsid	i
  while (1)
 8001480:	e7fe      	b.n	8001480 <main+0x6b4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	4620      	mov	r0, r4
 8001484:	f00b fb58 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 8001488:	b108      	cbz	r0, 800148e <main+0x6c2>
 800148a:	b672      	cpsid	i
  while (1)
 800148c:	e7fe      	b.n	800148c <main+0x6c0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4884      	ldr	r0, [pc, #528]	@ (80016a4 <main+0x8d8>)
 8001492:	f00b fb76 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	b108      	cbz	r0, 800149c <main+0x6d0>
 8001498:	b672      	cpsid	i
  while (1)
 800149a:	e7fe      	b.n	800149a <main+0x6ce>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800149c:	4881      	ldr	r0, [pc, #516]	@ (80016a4 <main+0x8d8>)
 800149e:	f00b fb2c 	bl	800cafa <HAL_UARTEx_DisableFifoMode>
 80014a2:	b108      	cbz	r0, 80014a8 <main+0x6dc>
 80014a4:	b672      	cpsid	i
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <main+0x6da>
  huart1.Instance = USART1;
 80014a8:	4c7f      	ldr	r4, [pc, #508]	@ (80016a8 <main+0x8dc>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014aa:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 80014ac:	4b7f      	ldr	r3, [pc, #508]	@ (80016ac <main+0x8e0>)
 80014ae:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	6120      	str	r0, [r4, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b8:	e9c4 5005 	strd	r5, r0, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014bc:	e9c4 0007 	strd	r0, r0, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c0:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c4:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80014c6:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ca:	f00b fa1c 	bl	800c906 <HAL_UART_Init>
 80014ce:	4601      	mov	r1, r0
 80014d0:	b108      	cbz	r0, 80014d6 <main+0x70a>
 80014d2:	b672      	cpsid	i
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <main+0x708>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	4620      	mov	r0, r4
 80014d8:	f00b fb2e 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 80014dc:	4601      	mov	r1, r0
 80014de:	b108      	cbz	r0, 80014e4 <main+0x718>
 80014e0:	b672      	cpsid	i
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <main+0x716>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	4620      	mov	r0, r4
 80014e6:	f00b fb4c 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	b108      	cbz	r0, 80014f0 <main+0x724>
 80014ec:	b672      	cpsid	i
  while (1)
 80014ee:	e7fe      	b.n	80014ee <main+0x722>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014f0:	4620      	mov	r0, r4
 80014f2:	f00b fb02 	bl	800cafa <HAL_UARTEx_DisableFifoMode>
 80014f6:	b108      	cbz	r0, 80014fc <main+0x730>
 80014f8:	b672      	cpsid	i
  while (1)
 80014fa:	e7fe      	b.n	80014fa <main+0x72e>
  huart2.Instance = USART2;
 80014fc:	4c6c      	ldr	r4, [pc, #432]	@ (80016b0 <main+0x8e4>)
 80014fe:	4b6d      	ldr	r3, [pc, #436]	@ (80016b4 <main+0x8e8>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001502:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001506:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150a:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800150e:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8001514:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001518:	f00b f9f5 	bl	800c906 <HAL_UART_Init>
 800151c:	4601      	mov	r1, r0
 800151e:	b108      	cbz	r0, 8001524 <main+0x758>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x756>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001524:	4620      	mov	r0, r4
 8001526:	f00b fb07 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 800152a:	4601      	mov	r1, r0
 800152c:	b108      	cbz	r0, 8001532 <main+0x766>
 800152e:	b672      	cpsid	i
  while (1)
 8001530:	e7fe      	b.n	8001530 <main+0x764>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001532:	4620      	mov	r0, r4
 8001534:	f00b fb25 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 8001538:	b108      	cbz	r0, 800153e <main+0x772>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x770>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800153e:	4620      	mov	r0, r4
 8001540:	f00b fadb 	bl	800cafa <HAL_UARTEx_DisableFifoMode>
 8001544:	b108      	cbz	r0, 800154a <main+0x77e>
 8001546:	b672      	cpsid	i
  while (1)
 8001548:	e7fe      	b.n	8001548 <main+0x77c>
  __HAL_RCC_BDMA_CLK_ENABLE();
 800154a:	4b5b      	ldr	r3, [pc, #364]	@ (80016b8 <main+0x8ec>)
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 800154c:	2105      	movs	r1, #5
 800154e:	2081      	movs	r0, #129	@ 0x81
  huart3.Instance = USART3;
 8001550:	4c5a      	ldr	r4, [pc, #360]	@ (80016bc <main+0x8f0>)
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001552:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
  huart3.Init.BaudRate = 115200;
 8001556:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800155a:	250c      	movs	r5, #12
  __HAL_RCC_BDMA_CLK_ENABLE();
 800155c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001560:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 5, 0);
 8001572:	f002 ffe3 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001576:	2081      	movs	r0, #129	@ 0x81
 8001578:	f002 fff0 	bl	800455c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 5, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2105      	movs	r1, #5
 8001580:	2082      	movs	r0, #130	@ 0x82
 8001582:	f002 ffdb 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 8001586:	2082      	movs	r0, #130	@ 0x82
 8001588:	f002 ffe8 	bl	800455c <HAL_NVIC_EnableIRQ>
  huart3.Init.BaudRate = 115200;
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <main+0x8f4>)
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800158e:	4620      	mov	r0, r4
  huart3.Init.BaudRate = 115200;
 8001590:	e9c4 3600 	strd	r3, r6, [r4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001594:	2300      	movs	r3, #0
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001596:	4619      	mov	r1, r3
 8001598:	461a      	mov	r2, r3
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	6123      	str	r3, [r4, #16]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800159c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a0:	e9c4 5305 	strd	r5, r3, [r4, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a4:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_RS485Ex_Init(&huart3, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80015ac:	f00b fa5e 	bl	800ca6c <HAL_RS485Ex_Init>
 80015b0:	4601      	mov	r1, r0
 80015b2:	b108      	cbz	r0, 80015b8 <main+0x7ec>
 80015b4:	b672      	cpsid	i
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <main+0x7ea>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b8:	4620      	mov	r0, r4
 80015ba:	f00b fabd 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 80015be:	4601      	mov	r1, r0
 80015c0:	b108      	cbz	r0, 80015c6 <main+0x7fa>
 80015c2:	b672      	cpsid	i
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x7f8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	4620      	mov	r0, r4
 80015c8:	f00b fadb 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 80015cc:	b108      	cbz	r0, 80015d2 <main+0x806>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x804>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015d2:	4620      	mov	r0, r4
 80015d4:	f00b fa91 	bl	800cafa <HAL_UARTEx_DisableFifoMode>
 80015d8:	b108      	cbz	r0, 80015de <main+0x812>
 80015da:	b672      	cpsid	i
  while (1)
 80015dc:	e7fe      	b.n	80015dc <main+0x810>
  huart6.Instance = USART6;
 80015de:	4c39      	ldr	r4, [pc, #228]	@ (80016c4 <main+0x8f8>)
 80015e0:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <main+0x8fc>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e2:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015e4:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e8:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f0:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f4:	4620      	mov	r0, r4
  huart6.Init.BaudRate = 115200;
 80015f6:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015fa:	f00b f984 	bl	800c906 <HAL_UART_Init>
 80015fe:	4601      	mov	r1, r0
 8001600:	b108      	cbz	r0, 8001606 <main+0x83a>
 8001602:	b672      	cpsid	i
  while (1)
 8001604:	e7fe      	b.n	8001604 <main+0x838>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001606:	4620      	mov	r0, r4
 8001608:	f00b fa96 	bl	800cb38 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4601      	mov	r1, r0
 800160e:	b108      	cbz	r0, 8001614 <main+0x848>
 8001610:	b672      	cpsid	i
  while (1)
 8001612:	e7fe      	b.n	8001612 <main+0x846>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001614:	4620      	mov	r0, r4
 8001616:	f00b fab4 	bl	800cb82 <HAL_UARTEx_SetRxFifoThreshold>
 800161a:	b108      	cbz	r0, 8001620 <main+0x854>
 800161c:	b672      	cpsid	i
  while (1)
 800161e:	e7fe      	b.n	800161e <main+0x852>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001620:	4620      	mov	r0, r4
 8001622:	f00b fa6a 	bl	800cafa <HAL_UARTEx_DisableFifoMode>
 8001626:	4605      	mov	r5, r0
 8001628:	b108      	cbz	r0, 800162e <main+0x862>
 800162a:	b672      	cpsid	i
  while (1)
 800162c:	e7fe      	b.n	800162c <main+0x860>
  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	4601      	mov	r1, r0
 8001630:	221c      	movs	r2, #28
 8001632:	a835      	add	r0, sp, #212	@ 0xd4
  hadc2.Instance = ADC2;
 8001634:	4c25      	ldr	r4, [pc, #148]	@ (80016cc <main+0x900>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	f01c fa33 	bl	801daa0 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800163a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800163e:	f8df c098 	ldr.w	ip, [pc, #152]	@ 80016d8 <main+0x90c>
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001642:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001644:	4620      	mov	r0, r4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001646:	82a5      	strh	r5, [r4, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	6126      	str	r6, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800164a:	7725      	strb	r5, [r4, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800164c:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800164e:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001652:	e9c4 c300 	strd	ip, r3, [r4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001656:	2308      	movs	r3, #8
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001658:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hadc2.Init.NbrOfConversion = 1;
 800165c:	2301      	movs	r3, #1
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800165e:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hadc2.Init.NbrOfConversion = 1;
 8001662:	61a3      	str	r3, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001664:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001668:	f002 fcee 	bl	8004048 <HAL_ADC_Init>
 800166c:	b108      	cbz	r0, 8001672 <main+0x8a6>
 800166e:	b672      	cpsid	i
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x8a4>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001672:	2306      	movs	r3, #6
 8001674:	4d16      	ldr	r5, [pc, #88]	@ (80016d0 <main+0x904>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001676:	2703      	movs	r7, #3
  sConfig.OffsetSignedSaturation = DISABLE;
 8001678:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800167c:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167e:	e9cd 5335 	strd	r5, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001682:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  sConfig.Offset = 0;
 8001686:	e9cd 6039 	strd	r6, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800168a:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800168c:	e9cd 7337 	strd	r7, r3, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001690:	f002 f806 	bl	80036a0 <HAL_ADC_ConfigChannel>
 8001694:	b310      	cbz	r0, 80016dc <main+0x910>
 8001696:	b672      	cpsid	i
  while (1)
 8001698:	e7fe      	b.n	8001698 <main+0x8cc>
 800169a:	bf00      	nop
 800169c:	24001e10 	.word	0x24001e10
 80016a0:	58001c00 	.word	0x58001c00
 80016a4:	24001980 	.word	0x24001980
 80016a8:	240018f0 	.word	0x240018f0
 80016ac:	40011000 	.word	0x40011000
 80016b0:	24001860 	.word	0x24001860
 80016b4:	40004400 	.word	0x40004400
 80016b8:	58024400 	.word	0x58024400
 80016bc:	240017d0 	.word	0x240017d0
 80016c0:	40004800 	.word	0x40004800
 80016c4:	24001740 	.word	0x24001740
 80016c8:	40011400 	.word	0x40011400
 80016cc:	24002098 	.word	0x24002098
 80016d0:	21800100 	.word	0x21800100
 80016d4:	40005000 	.word	0x40005000
 80016d8:	40022100 	.word	0x40022100
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016dc:	2210      	movs	r2, #16
 80016de:	2100      	movs	r1, #0
 80016e0:	a835      	add	r0, sp, #212	@ 0xd4
  htim4.Instance = TIM4;
 80016e2:	4c35      	ldr	r4, [pc, #212]	@ (80017b8 <main+0x9ec>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e4:	f01c f9dc 	bl	801daa0 <memset>
  htim4.Init.Prescaler = 60000;
 80016e8:	4834      	ldr	r0, [pc, #208]	@ (80017bc <main+0x9f0>)
 80016ea:	f64e 2260 	movw	r2, #60000	@ 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ee:	2300      	movs	r3, #0
 80016f0:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 80016f4:	932e      	str	r3, [sp, #184]	@ 0xb8
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	60a3      	str	r3, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	61a3      	str	r3, [r4, #24]
  htim4.Init.Prescaler = 60000;
 80016fa:	e9c4 0200 	strd	r0, r2, [r4]
  htim4.Init.Period = 65535;
 80016fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001702:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	e9c8 3301 	strd	r3, r3, [r8, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	e9c4 2303 	strd	r2, r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800170c:	f009 fdac 	bl	800b268 <HAL_TIM_Base_Init>
 8001710:	b108      	cbz	r0, 8001716 <main+0x94a>
 8001712:	b672      	cpsid	i
  while (1)
 8001714:	e7fe      	b.n	8001714 <main+0x948>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800171a:	a935      	add	r1, sp, #212	@ 0xd4
 800171c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171e:	9335      	str	r3, [sp, #212]	@ 0xd4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001720:	f009 ff4e 	bl	800b5c0 <HAL_TIM_ConfigClockSource>
 8001724:	b108      	cbz	r0, 800172a <main+0x95e>
 8001726:	b672      	cpsid	i
  while (1)
 8001728:	e7fe      	b.n	8001728 <main+0x95c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	902e      	str	r0, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172c:	4641      	mov	r1, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	9030      	str	r0, [sp, #192]	@ 0xc0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001730:	4620      	mov	r0, r4
 8001732:	f00a f90d 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4604      	mov	r4, r0
 8001738:	b108      	cbz	r0, 800173e <main+0x972>
 800173a:	b672      	cpsid	i
  while (1)
 800173c:	e7fe      	b.n	800173c <main+0x970>
  hadc3.Instance = ADC3;
 800173e:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80017c8 <main+0x9fc>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001742:	4601      	mov	r1, r0
 8001744:	221c      	movs	r2, #28
 8001746:	a835      	add	r0, sp, #212	@ 0xd4
 8001748:	f01c f9aa 	bl	801daa0 <memset>
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800174c:	f04f 0b08 	mov.w	fp, #8
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001750:	491b      	ldr	r1, [pc, #108]	@ (80017c0 <main+0x9f4>)
 8001752:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	2704      	movs	r7, #4
  hadc3.Init.NbrOfConversion = 1;
 8001758:	2601      	movs	r6, #1
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800175a:	4648      	mov	r0, r9
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800175c:	f8a9 4014 	strh.w	r4, [r9, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001760:	f8c9 7010 	str.w	r7, [r9, #16]
  hadc3.Init.NbrOfConversion = 1;
 8001764:	f8c9 6018 	str.w	r6, [r9, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001768:	f889 401c 	strb.w	r4, [r9, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800176c:	f8c9 4034 	str.w	r4, [r9, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001770:	f889 4038 	strb.w	r4, [r9, #56]	@ 0x38
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001774:	e9c9 1300 	strd	r1, r3, [r9]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001778:	e9c9 b402 	strd	fp, r4, [r9, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177c:	e9c9 4409 	strd	r4, r4, [r9, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001780:	e9c9 440b 	strd	r4, r4, [r9, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001784:	f002 fc60 	bl	8004048 <HAL_ADC_Init>
 8001788:	b108      	cbz	r0, 800178e <main+0x9c2>
 800178a:	b672      	cpsid	i
  while (1)
 800178c:	e7fe      	b.n	800178c <main+0x9c0>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <main+0x9f8>)
 8001790:	2306      	movs	r3, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001792:	f240 74ff 	movw	r4, #2047	@ 0x7ff
  sConfig.OffsetSignedSaturation = DISABLE;
 8001796:	f88d 00ed 	strb.w	r0, [sp, #237]	@ 0xed
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800179a:	a935      	add	r1, sp, #212	@ 0xd4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179c:	e9cd 2335 	strd	r2, r3, [sp, #212]	@ 0xd4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a0:	2303      	movs	r3, #3
  sConfig.Offset = 0;
 80017a2:	e9cd 7039 	strd	r7, r0, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017a6:	4648      	mov	r0, r9
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a8:	e9cd 3437 	strd	r3, r4, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017ac:	f001 ff78 	bl	80036a0 <HAL_ADC_ConfigChannel>
 80017b0:	4605      	mov	r5, r0
 80017b2:	b158      	cbz	r0, 80017cc <main+0xa00>
 80017b4:	b672      	cpsid	i
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <main+0x9ea>
 80017b8:	24001a10 	.word	0x24001a10
 80017bc:	40000800 	.word	0x40000800
 80017c0:	58026000 	.word	0x58026000
 80017c4:	cfb80000 	.word	0xcfb80000
 80017c8:	24002034 	.word	0x24002034
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017cc:	4622      	mov	r2, r4
 80017ce:	4601      	mov	r1, r0
 80017d0:	48ce      	ldr	r0, [pc, #824]	@ (8001b0c <main+0xd40>)
 80017d2:	f002 fd65 	bl	80042a0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017d6:	4622      	mov	r2, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	48cd      	ldr	r0, [pc, #820]	@ (8001b10 <main+0xd44>)
 80017dc:	f002 fd60 	bl	80042a0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017e0:	4622      	mov	r2, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	4648      	mov	r0, r9
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 80017e6:	4ccb      	ldr	r4, [pc, #812]	@ (8001b14 <main+0xd48>)
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80017e8:	f002 fd5a 	bl	80042a0 <HAL_ADCEx_Calibration_Start>
  registers.Init(); 																registers.AddBaseRegisters();
 80017ec:	48ca      	ldr	r0, [pc, #808]	@ (8001b18 <main+0xd4c>)
 80017ee:	f016 ff80 	bl	80186f2 <_ZN9Registers4InitEv>
 80017f2:	48c9      	ldr	r0, [pc, #804]	@ (8001b18 <main+0xd4c>)
 80017f4:	f017 f83a 	bl	801886c <_ZN9Registers16AddBaseRegistersEv>
  communication.Init(&registers, &services, &subscribers, &leds);					communication.AddRegisters();
 80017f8:	4bc8      	ldr	r3, [pc, #800]	@ (8001b1c <main+0xd50>)
 80017fa:	4ac9      	ldr	r2, [pc, #804]	@ (8001b20 <main+0xd54>)
 80017fc:	49c6      	ldr	r1, [pc, #792]	@ (8001b18 <main+0xd4c>)
 80017fe:	48c9      	ldr	r0, [pc, #804]	@ (8001b24 <main+0xd58>)
 8001800:	9400      	str	r4, [sp, #0]
 8001802:	f00e ff4c 	bl	801069e <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>
 8001806:	48c7      	ldr	r0, [pc, #796]	@ (8001b24 <main+0xd58>)
 8001808:	f00f f9e4 	bl	8010bd4 <_ZN13Communication12AddRegistersEv>
  services.Init(&registers, &communication, &leds);
 800180c:	4623      	mov	r3, r4
 800180e:	4ac5      	ldr	r2, [pc, #788]	@ (8001b24 <main+0xd58>)
 8001810:	49c1      	ldr	r1, [pc, #772]	@ (8001b18 <main+0xd4c>)
 8001812:	48c3      	ldr	r0, [pc, #780]	@ (8001b20 <main+0xd54>)
 8001814:	f01a faa0 	bl	801bd58 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>
  publishers.Init(&registers, &communication); 										publishers.AddRegisters();
 8001818:	4ac2      	ldr	r2, [pc, #776]	@ (8001b24 <main+0xd58>)
 800181a:	49bf      	ldr	r1, [pc, #764]	@ (8001b18 <main+0xd4c>)
 800181c:	48c2      	ldr	r0, [pc, #776]	@ (8001b28 <main+0xd5c>)
 800181e:	f015 fccb 	bl	80171b8 <_ZN10Publishers4InitEP9RegistersP13Communication>
 8001822:	48c1      	ldr	r0, [pc, #772]	@ (8001b28 <main+0xd5c>)
 8001824:	f016 f9aa 	bl	8017b7c <_ZN10Publishers12AddRegistersEv>
  subscribers.Init(&registers, &leds);												subscribers.AddRegisters();
 8001828:	4622      	mov	r2, r4
 800182a:	49bb      	ldr	r1, [pc, #748]	@ (8001b18 <main+0xd4c>)
 800182c:	48bb      	ldr	r0, [pc, #748]	@ (8001b1c <main+0xd50>)
 800182e:	f01a fc23 	bl	801c078 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>
 8001832:	48ba      	ldr	r0, [pc, #744]	@ (8001b1c <main+0xd50>)
 8001834:	f01a feb4 	bl	801c5a0 <_ZN17MasterSubscribers12AddRegistersEv>
  sensors.Init(&registers, &publishers, &hardware_delay, &leds);					sensors.AddRegisters();
 8001838:	4bbc      	ldr	r3, [pc, #752]	@ (8001b2c <main+0xd60>)
 800183a:	4abb      	ldr	r2, [pc, #748]	@ (8001b28 <main+0xd5c>)
 800183c:	49b6      	ldr	r1, [pc, #728]	@ (8001b18 <main+0xd4c>)
 800183e:	48bc      	ldr	r0, [pc, #752]	@ (8001b30 <main+0xd64>)
 8001840:	9400      	str	r4, [sp, #0]
 8001842:	f017 fb2d 	bl	8018ea0 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>
 8001846:	48ba      	ldr	r0, [pc, #744]	@ (8001b30 <main+0xd64>)
 8001848:	f019 fafa 	bl	801ae40 <_ZN7Sensors12AddRegistersEv>
  leds.Init(&registers);															leds.AddRegisters();
 800184c:	49b2      	ldr	r1, [pc, #712]	@ (8001b18 <main+0xd4c>)
 800184e:	4620      	mov	r0, r4
  leds.AddLED(LED_UART_FRONT, GPIO {LED_UART_FRONT_GPIO_Port, LED_UART_FRONT_Pin});
 8001850:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 8001b6c <main+0xda0>
  leds.Init(&registers);															leds.AddRegisters();
 8001854:	f013 fe64 	bl	8015520 <_ZN4LEDS4InitEP9Registers>
 8001858:	4620      	mov	r0, r4
 800185a:	f014 fa53 	bl	8015d04 <_ZN4LEDS12AddRegistersEv>
  leds.AddLED(LED_UART_FRONT, GPIO {LED_UART_FRONT_GPIO_Port, LED_UART_FRONT_Pin});
 800185e:	f248 0300 	movw	r3, #32768	@ 0x8000
 8001862:	464a      	mov	r2, r9
 8001864:	2102      	movs	r1, #2
 8001866:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 800186a:	4620      	mov	r0, r4
 800186c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800186e:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
 8001872:	f014 fb77 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_RS485, GPIO {LED_RS485_GPIO_Port, LED_RS485_Pin});
 8001876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187a:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 8001b70 <main+0xda4>
 800187e:	4639      	mov	r1, r7
 8001880:	4620      	mov	r0, r4
 8001882:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68
 8001886:	4652      	mov	r2, sl
 8001888:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800188a:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
 800188e:	f014 fb69 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_UART_BACK, GPIO {LED_UART_BACK_GPIO_Port, LED_UART_BACK_Pin});
 8001892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001896:	4652      	mov	r2, sl
 8001898:	2103      	movs	r1, #3
 800189a:	4620      	mov	r0, r4
 800189c:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
 80018a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80018a2:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 80018a6:	f014 fb5d 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80018aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001b34 <main+0xd68>)
 80018ac:	4629      	mov	r1, r5
 80018ae:	f8ad 6078 	strh.w	r6, [sp, #120]	@ 0x78
 80018b2:	4620      	mov	r0, r4
 80018b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b34 <main+0xd68>)
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80018b6:	f50a 6a00 	add.w	sl, sl, #2048	@ 0x800
  leds.AddLED(LED_CANFD1, GPIO {LED_FDCAN1_GPIO_Port, LED_FDCAN1_Pin});
 80018ba:	931d      	str	r3, [sp, #116]	@ 0x74
 80018bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80018be:	f014 fb51 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CANFD2, GPIO {LED_FDCAN2_GPIO_Port, LED_FDCAN2_Pin});
 80018c2:	f248 0300 	movw	r3, #32768	@ 0x8000
 80018c6:	4652      	mov	r2, sl
 80018c8:	4631      	mov	r1, r6
 80018ca:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 80018ce:	4620      	mov	r0, r4
 80018d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80018d2:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 80018d6:	f014 fb45 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_STATUS, GPIO {LED_STATUS_GPIO_Port, LED_STATUS_Pin});
 80018da:	f8ad 7088 	strh.w	r7, [sp, #136]	@ 0x88
 80018de:	4652      	mov	r2, sl
 80018e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80018e2:	2107      	movs	r1, #7
 80018e4:	4620      	mov	r0, r4
 80018e6:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
 80018ea:	f014 fb3b 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_CONTROLLER, GPIO {LED_CONTROLLER_GPIO_Port, LED_CONTROLLER_Pin});
 80018ee:	f8ad b090 	strh.w	fp, [sp, #144]	@ 0x90
 80018f2:	4652      	mov	r2, sl
 80018f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80018f6:	4659      	mov	r1, fp
 80018f8:	4620      	mov	r0, r4
 80018fa:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 80018fe:	f014 fb31 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_FAULT, GPIO {LED_FAULT_GPIO_Port, LED_FAULT_Pin});
 8001902:	f04f 0310 	mov.w	r3, #16
 8001906:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
 800190a:	4a8b      	ldr	r2, [pc, #556]	@ (8001b38 <main+0xd6c>)
 800190c:	2109      	movs	r1, #9
 800190e:	469a      	mov	sl, r3
 8001910:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8001914:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001916:	4620      	mov	r0, r4
 8001918:	f014 fb24 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER1, GPIO {LED_USER1_GPIO_Port, LED_USER1_Pin});
 800191c:	f8ad a0a0 	strh.w	sl, [sp, #160]	@ 0xa0
 8001920:	464a      	mov	r2, r9
 8001922:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8001924:	210a      	movs	r1, #10
 8001926:	4620      	mov	r0, r4
 8001928:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
 800192c:	f014 fb1a 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001930:	2320      	movs	r3, #32
 8001932:	464a      	mov	r2, r9
 8001934:	210b      	movs	r1, #11
 8001936:	4620      	mov	r0, r4
 8001938:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 800193c:	f10d 0a0c 	add.w	sl, sp, #12
  leds.AddLED(LED_USER2, GPIO {LED_USER2_GPIO_Port, LED_USER2_Pin});
 8001940:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8001942:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
 8001946:	f014 fb0d 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	f8cd 90b8 	str.w	r9, [sp, #184]	@ 0xb8
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001950:	f10d 094c 	add.w	r9, sp, #76	@ 0x4c
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001954:	210c      	movs	r1, #12
 8001956:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
 800195a:	4620      	mov	r0, r4
 800195c:	e898 000c 	ldmia.w	r8, {r2, r3}
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001960:	f10d 0854 	add.w	r8, sp, #84	@ 0x54
  leds.AddLED(LED_USER3, GPIO {LED_USER3_GPIO_Port, LED_USER3_Pin});
 8001964:	f014 fafe 	bl	8015f64 <_ZN4LEDS6AddLEDEh4GPIO>
  leds.ConfigureTimings(LED_CANFD1, std::vector<uint8_t>{1}, 2);
 8001968:	4632      	mov	r2, r6
 800196a:	4649      	mov	r1, r9
 800196c:	4643      	mov	r3, r8
 800196e:	a835      	add	r0, sp, #212	@ 0xd4
 8001970:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 8001974:	e9cd 960d 	strd	r9, r6, [sp, #52]	@ 0x34
 8001978:	f7ff fa06 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800197c:	2302      	movs	r3, #2
 800197e:	aa35      	add	r2, sp, #212	@ 0xd4
 8001980:	4629      	mov	r1, r5
 8001982:	4620      	mov	r0, r4
 8001984:	f014 fb31 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8001988:	a835      	add	r0, sp, #212	@ 0xd4
 800198a:	f7ff f8a9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_CANFD2, std::vector<uint8_t>{1}, 2);
 800198e:	4643      	mov	r3, r8
 8001990:	4632      	mov	r2, r6
 8001992:	4649      	mov	r1, r9
 8001994:	a835      	add	r0, sp, #212	@ 0xd4
 8001996:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 800199a:	e9cd 960f 	strd	r9, r6, [sp, #60]	@ 0x3c
 800199e:	f7ff f9f3 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019a2:	2302      	movs	r3, #2
 80019a4:	aa35      	add	r2, sp, #212	@ 0xd4
 80019a6:	4631      	mov	r1, r6
 80019a8:	4620      	mov	r0, r4
 80019aa:	f014 fb1e 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019ae:	a835      	add	r0, sp, #212	@ 0xd4
 80019b0:	f7ff f896 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_FRONT, std::vector<uint8_t>{1}, 2);
 80019b4:	4643      	mov	r3, r8
 80019b6:	4632      	mov	r2, r6
 80019b8:	4649      	mov	r1, r9
 80019ba:	a835      	add	r0, sp, #212	@ 0xd4
 80019bc:	f88d 604c 	strb.w	r6, [sp, #76]	@ 0x4c
 80019c0:	e9cd 9611 	strd	r9, r6, [sp, #68]	@ 0x44
 80019c4:	f7ff f9e0 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019c8:	2302      	movs	r3, #2
 80019ca:	aa35      	add	r2, sp, #212	@ 0xd4
 80019cc:	4620      	mov	r0, r4
 80019ce:	4619      	mov	r1, r3
 80019d0:	f014 fb0b 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019d4:	a835      	add	r0, sp, #212	@ 0xd4
 80019d6:	f7ff f883 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_BACK, std::vector<uint8_t>{1}, 2);
 80019da:	4643      	mov	r3, r8
 80019dc:	a835      	add	r0, sp, #212	@ 0xd4
 80019de:	f88d 600c 	strb.w	r6, [sp, #12]
 80019e2:	e9cd a613 	strd	sl, r6, [sp, #76]	@ 0x4c
 80019e6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80019ea:	f7ff f9cd 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80019ee:	2302      	movs	r3, #2
 80019f0:	aa35      	add	r2, sp, #212	@ 0xd4
 80019f2:	2103      	movs	r1, #3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f014 faf8 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80019fa:	a835      	add	r0, sp, #212	@ 0xd4
 80019fc:	f7ff f870 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.ConfigureTimings(LED_UART_RS485, std::vector<uint8_t>{1}, 2);
 8001a00:	ab02      	add	r3, sp, #8
 8001a02:	a835      	add	r0, sp, #212	@ 0xd4
 8001a04:	f88d 6008 	strb.w	r6, [sp, #8]
 8001a08:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8001a12:	f7ff f9b9 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8001a16:	2302      	movs	r3, #2
 8001a18:	aa35      	add	r2, sp, #212	@ 0xd4
 8001a1a:	4639      	mov	r1, r7
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f014 fae4 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 8001a22:	a835      	add	r0, sp, #212	@ 0xd4
 8001a24:	f7ff f85c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
  leds.TestLEDs();
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f014 fa00 	bl	8015e2e <_ZN4LEDS8TestLEDsEv>
  StartupLEDS(&leds);
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f00d fb16 	bl	800f060 <_Z11StartupLEDSP4LEDS>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 			// Motor PWM
 8001a34:	4659      	mov	r1, fp
 8001a36:	4841      	ldr	r0, [pc, #260]	@ (8001b3c <main+0xd70>)
 8001a38:	f009 fe6e 	bl	800b718 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); 		// Encoder
 8001a3c:	213c      	movs	r1, #60	@ 0x3c
 8001a3e:	4840      	ldr	r0, [pc, #256]	@ (8001b40 <main+0xd74>)
 8001a40:	f009 ff22 	bl	800b888 <HAL_TIM_Encoder_Start>
  controller.Init(&registers, &publishers, &leds);
 8001a44:	4623      	mov	r3, r4
 8001a46:	4a38      	ldr	r2, [pc, #224]	@ (8001b28 <main+0xd5c>)
 8001a48:	4933      	ldr	r1, [pc, #204]	@ (8001b18 <main+0xd4c>)
 8001a4a:	483e      	ldr	r0, [pc, #248]	@ (8001b44 <main+0xd78>)
 8001a4c:	f013 f9cc 	bl	8014de8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS>
  controller.AddRegisters();
 8001a50:	483c      	ldr	r0, [pc, #240]	@ (8001b44 <main+0xd78>)
 8001a52:	f012 fd15 	bl	8014480 <_ZN10Controller12AddRegistersEv>
  controller.SetupPublisher(PUBLISHER_CONTROLLER_INTERFACE);
 8001a56:	2106      	movs	r1, #6
 8001a58:	483a      	ldr	r0, [pc, #232]	@ (8001b44 <main+0xd78>)
 8001a5a:	f011 fefc 	bl	8013856 <_ZN10Controller14SetupPublisherEh>
  protocol_uart.SetProtocolPayloadMaxLength(256);
 8001a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a62:	4839      	ldr	r0, [pc, #228]	@ (8001b48 <main+0xd7c>)
 8001a64:	f014 fbe8 	bl	8016238 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_uart.AddInterface(UART_FRONT, &huart1);
 8001a68:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <main+0xd80>)
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4836      	ldr	r0, [pc, #216]	@ (8001b48 <main+0xd7c>)
 8001a6e:	f7ff f8c3 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_BACK, &huart6);
 8001a72:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <main+0xd84>)
 8001a74:	2103      	movs	r1, #3
 8001a76:	4834      	ldr	r0, [pc, #208]	@ (8001b48 <main+0xd7c>)
 8001a78:	f7ff f8be 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  protocol_uart.AddInterface(UART_PIC, &huart2);
 8001a7c:	4a35      	ldr	r2, [pc, #212]	@ (8001b54 <main+0xd88>)
 8001a7e:	2105      	movs	r1, #5
 8001a80:	4831      	ldr	r0, [pc, #196]	@ (8001b48 <main+0xd7c>)
 8001a82:	f7ff f8b9 	bl	8000bf8 <_ZN29TemplateCommunicationProtocolI20__UART_HandleTypeDefE12AddInterfaceEhPS0_>
  communication.AddProtocol(&protocol_uart);
 8001a86:	4930      	ldr	r1, [pc, #192]	@ (8001b48 <main+0xd7c>)
 8001a88:	4826      	ldr	r0, [pc, #152]	@ (8001b24 <main+0xd58>)
 8001a8a:	f00e ff61 	bl	8010950 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(UART_FRONT);
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4824      	ldr	r0, [pc, #144]	@ (8001b24 <main+0xd58>)
 8001a92:	f00e fe7d 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_BACK);
 8001a96:	2103      	movs	r1, #3
 8001a98:	4822      	ldr	r0, [pc, #136]	@ (8001b24 <main+0xd58>)
 8001a9a:	f00e fe79 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
  communication.ActivateReception(UART_PIC);
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	4820      	ldr	r0, [pc, #128]	@ (8001b24 <main+0xd58>)
 8001aa2:	f00e fe75 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
  protocol_canfd.SetProtocolPayloadMaxLength(62);
 8001aa6:	213e      	movs	r1, #62	@ 0x3e
 8001aa8:	482b      	ldr	r0, [pc, #172]	@ (8001b58 <main+0xd8c>)
 8001aaa:	f014 fbc5 	bl	8016238 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>
  protocol_canfd.AddInterface(CANFD1, &hfdcan1);
 8001aae:	4a2b      	ldr	r2, [pc, #172]	@ (8001b5c <main+0xd90>)
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4829      	ldr	r0, [pc, #164]	@ (8001b58 <main+0xd8c>)
 8001ab4:	f014 fe5c 	bl	8016770 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>
  protocol_canfd.ConfigureFilters(CANFD1);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4827      	ldr	r0, [pc, #156]	@ (8001b58 <main+0xd8c>)
 8001abc:	f014 fdb7 	bl	801662e <_ZN11CANProtocol16ConfigureFiltersEh>
  protocol_canfd.ActivateReception(CANFD1);
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4825      	ldr	r0, [pc, #148]	@ (8001b58 <main+0xd8c>)
 8001ac4:	f014 fdc6 	bl	8016654 <_ZN11CANProtocol17ActivateReceptionEh>
  protocol_canfd.Start(CANFD1);
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4823      	ldr	r0, [pc, #140]	@ (8001b58 <main+0xd8c>)
 8001acc:	f014 fdd3 	bl	8016676 <_ZN11CANProtocol5StartEh>
  communication.AddProtocol(&protocol_canfd);
 8001ad0:	4921      	ldr	r1, [pc, #132]	@ (8001b58 <main+0xd8c>)
 8001ad2:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <main+0xd58>)
 8001ad4:	f00e ff3c 	bl	8010950 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>
  communication.ActivateReception(CANFD1);
 8001ad8:	4629      	mov	r1, r5
 8001ada:	4812      	ldr	r0, [pc, #72]	@ (8001b24 <main+0xd58>)
 8001adc:	f00e fe58 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
  platform_sensors.Init(&sensors, &registers, &publishers, &leds);
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <main+0xd5c>)
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <main+0xd4c>)
 8001ae4:	4912      	ldr	r1, [pc, #72]	@ (8001b30 <main+0xd64>)
 8001ae6:	481e      	ldr	r0, [pc, #120]	@ (8001b60 <main+0xd94>)
 8001ae8:	9400      	str	r4, [sp, #0]
 8001aea:	f00d fcb6 	bl	800f45a <_ZN15PlatformSensors4InitEP7SensorsP9RegistersP10PublishersP4LEDS>
  HAL_Delay(2000); // leave some time to the power PIC to configure the DS2778. This can be optimized by monitoring the PIC and wait until configuration is complete.
 8001aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001af2:	f001 fcf1 	bl	80034d8 <HAL_Delay>
  sensors.AddInterface(I2C1_ID, &hi2c1);
 8001af6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <main+0xd98>)
 8001af8:	2107      	movs	r1, #7
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <main+0xd64>)
 8001afc:	f019 feb4 	bl	801b868 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
  sensors.AddInterface(I2C2_ID, &hi2c2);
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <main+0xd9c>)
 8001b02:	4659      	mov	r1, fp
 8001b04:	480a      	ldr	r0, [pc, #40]	@ (8001b30 <main+0xd64>)
 8001b06:	f019 feaf 	bl	801b868 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
 8001b0a:	e033      	b.n	8001b74 <main+0xda8>
 8001b0c:	240020fc 	.word	0x240020fc
 8001b10:	24002098 	.word	0x24002098
 8001b14:	24000380 	.word	0x24000380
 8001b18:	240011e8 	.word	0x240011e8
 8001b1c:	24001108 	.word	0x24001108
 8001b20:	24000488 	.word	0x24000488
 8001b24:	240010cc 	.word	0x240010cc
 8001b28:	24000470 	.word	0x24000470
 8001b2c:	24000454 	.word	0x24000454
 8001b30:	240003b8 	.word	0x240003b8
 8001b34:	58020c00 	.word	0x58020c00
 8001b38:	58021000 	.word	0x58021000
 8001b3c:	24001af4 	.word	0x24001af4
 8001b40:	24001aa8 	.word	0x24001aa8
 8001b44:	24000140 	.word	0x24000140
 8001b48:	24001180 	.word	0x24001180
 8001b4c:	240018f0 	.word	0x240018f0
 8001b50:	24001740 	.word	0x24001740
 8001b54:	24001860 	.word	0x24001860
 8001b58:	2400112c 	.word	0x2400112c
 8001b5c:	24001f94 	.word	0x24001f94
 8001b60:	240002f8 	.word	0x240002f8
 8001b64:	24001ea8 	.word	0x24001ea8
 8001b68:	24001e5c 	.word	0x24001e5c
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	58020800 	.word	0x58020800
  sensors.AddInterface(INTERNAL, NULL);
 8001b74:	462a      	mov	r2, r5
 8001b76:	210a      	movs	r1, #10
 8001b78:	481f      	ldr	r0, [pc, #124]	@ (8001bf8 <main+0xe2c>)
 8001b7a:	f019 fe75 	bl	801b868 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>
  platform_sensors.AddMotorSensorRegisters();
 8001b7e:	481f      	ldr	r0, [pc, #124]	@ (8001bfc <main+0xe30>)
 8001b80:	f00e fafa 	bl	8010178 <_ZN15PlatformSensors23AddMotorSensorRegistersEv>
  platform_sensors.AddMotorSensor();
 8001b84:	481d      	ldr	r0, [pc, #116]	@ (8001bfc <main+0xe30>)
 8001b86:	f00d fc6f 	bl	800f468 <_ZN15PlatformSensors14AddMotorSensorEv>
  platform_sensors.ActivateMotorSensor();
 8001b8a:	481c      	ldr	r0, [pc, #112]	@ (8001bfc <main+0xe30>)
 8001b8c:	f00d fce4 	bl	800f558 <_ZN15PlatformSensors19ActivateMotorSensorEv>
  platform_sensors.SetupMotorSensorPublisher();
 8001b90:	481a      	ldr	r0, [pc, #104]	@ (8001bfc <main+0xe30>)
 8001b92:	f00d fced 	bl	800f570 <_ZN15PlatformSensors25SetupMotorSensorPublisherEv>
  HAL_Delay(10);
 8001b96:	200a      	movs	r0, #10
 8001b98:	f001 fc9e 	bl	80034d8 <HAL_Delay>
  platform_sensors.ConfigureMotorSensor();
 8001b9c:	4817      	ldr	r0, [pc, #92]	@ (8001bfc <main+0xe30>)
 8001b9e:	f00d fd24 	bl	800f5ea <_ZN15PlatformSensors20ConfigureMotorSensorEv>
  HAL_Delay(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f001 fc98 	bl	80034d8 <HAL_Delay>
  user.Init();
 8001ba8:	4815      	ldr	r0, [pc, #84]	@ (8001c00 <main+0xe34>)
 8001baa:	f01a ff07 	bl	801c9bc <_ZN4User4InitEv>
  osKernelInitialize();
 8001bae:	f00b f847 	bl	800cc40 <osKernelInitialize>
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8001bb2:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <main+0xe38>)
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	4814      	ldr	r0, [pc, #80]	@ (8001c08 <main+0xe3c>)
 8001bb8:	f00b f870 	bl	800cc9c <osThreadNew>
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <main+0xe40>)
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <main+0xe44>)
 8001bc0:	4629      	mov	r1, r5
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8001bc2:	6018      	str	r0, [r3, #0]
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bc4:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <main+0xe48>)
 8001bc6:	f00b f869 	bl	800cc9c <osThreadNew>
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <main+0xe4c>)
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bcc:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <main+0xe50>)
 8001bce:	4629      	mov	r1, r5
  SensorsHandle = osThreadNew(SensorsTask, NULL, &Sensors_attributes);
 8001bd0:	6018      	str	r0, [r3, #0]
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bd2:	4813      	ldr	r0, [pc, #76]	@ (8001c20 <main+0xe54>)
 8001bd4:	f00b f862 	bl	800cc9c <osThreadNew>
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <main+0xe58>)
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001bda:	4a13      	ldr	r2, [pc, #76]	@ (8001c28 <main+0xe5c>)
 8001bdc:	4629      	mov	r1, r5
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8001bde:	6018      	str	r0, [r3, #0]
  LEDsHandle = osThreadNew(LEDsTask, NULL, &LEDs_attributes);
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <main+0xe60>)
 8001be2:	f00b f85b 	bl	800cc9c <osThreadNew>
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <main+0xe64>)
 8001be8:	6018      	str	r0, [r3, #0]
  user.AddOSThreads();
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <main+0xe34>)
 8001bec:	f01a fee8 	bl	801c9c0 <_ZN4User12AddOSThreadsEv>
  osKernelStart();
 8001bf0:	f00b f838 	bl	800cc64 <osKernelStart>
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <main+0xe28>
 8001bf6:	bf00      	nop
 8001bf8:	240003b8 	.word	0x240003b8
 8001bfc:	240002f8 	.word	0x240002f8
 8001c00:	24000084 	.word	0x24000084
 8001c04:	0801df28 	.word	0x0801df28
 8001c08:	08000801 	.word	0x08000801
 8001c0c:	2400128c 	.word	0x2400128c
 8001c10:	0801df04 	.word	0x0801df04
 8001c14:	08000811 	.word	0x08000811
 8001c18:	24001288 	.word	0x24001288
 8001c1c:	0801dee0 	.word	0x0801dee0
 8001c20:	08000821 	.word	0x08000821
 8001c24:	24001284 	.word	0x24001284
 8001c28:	0801debc 	.word	0x0801debc
 8001c2c:	08000831 	.word	0x08000831
 8001c30:	24001280 	.word	0x24001280

08001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c34:	b510      	push	{r4, lr}
	  if (_Num)
 8001c36:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001c38:	4613      	mov	r3, r2
	  if (_Num)
 8001c3a:	d005      	beq.n	8001c48 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4622      	mov	r2, r4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01b ff13 	bl	801da6c <memmove>
 8001c46:	4603      	mov	r3, r0
	}
 8001c48:	1918      	adds	r0, r3, r4
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c50:	b08b      	sub	sp, #44	@ 0x2c
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001c52:	2300      	movs	r3, #0
 8001c54:	460c      	mov	r4, r1
	ID = communication.GetID((void*) huart, &success);
 8001c56:	4601      	mov	r1, r0
 8001c58:	f10d 020f 	add.w	r2, sp, #15
 8001c5c:	4852      	ldr	r0, [pc, #328]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c5e:	9306      	str	r3, [sp, #24]
 8001c60:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c64:	f00e fd5a 	bl	801071c <_ZN13Communication5GetIDEPvPb>
	if (!success) {return;}
 8001c68:	f89d 300f 	ldrb.w	r3, [sp, #15]
	ID = communication.GetID((void*) huart, &success);
 8001c6c:	4605      	mov	r5, r0
	if (!success) {return;}
 8001c6e:	b1a3      	cbz	r3, 8001c9a <HAL_UARTEx_RxEventCallback+0x4e>
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001c70:	4601      	mov	r1, r0
 8001c72:	f10d 020f 	add.w	r2, sp, #15
 8001c76:	484c      	ldr	r0, [pc, #304]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c78:	f00e fd64 	bl	8010744 <_ZN13Communication9GetBufferEhPb>
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c7c:	f10d 020f 	add.w	r2, sp, #15
	std::vector<uint8_t>* buffer = communication.GetBuffer(ID, &success);
 8001c80:	4607      	mov	r7, r0
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c82:	4629      	mov	r1, r5
 8001c84:	4848      	ldr	r0, [pc, #288]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c86:	f00e fd68 	bl	801075a <_ZN13Communication14GetBufferIndexEhPb>
	if (!success) {communication.ActivateReception(ID); return;}
 8001c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	uint16_t* buffer_index = communication.GetBufferIndex(ID, &success);
 8001c8e:	4680      	mov	r8, r0
	if (!success) {communication.ActivateReception(ID); return;}
 8001c90:	b94b      	cbnz	r3, 8001ca6 <HAL_UARTEx_RxEventCallback+0x5a>
	communication.ActivateReception(ID);
 8001c92:	4629      	mov	r1, r5
 8001c94:	4844      	ldr	r0, [pc, #272]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001c96:	f00e fd7b 	bl	8010790 <_ZN13Communication17ActivateReceptionEh>
      }
 8001c9a:	a804      	add	r0, sp, #16
 8001c9c:	f7fe ff20 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8001ca0:	b00b      	add	sp, #44	@ 0x2c
 8001ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (Size == *buffer_index) {communication.ActivateReception(ID); return;}
 8001ca6:	8801      	ldrh	r1, [r0, #0]
 8001ca8:	42a1      	cmp	r1, r4
 8001caa:	d0f2      	beq.n	8001c92 <HAL_UARTEx_RxEventCallback+0x46>
      : _M_current(__i) { }
 8001cac:	683a      	ldr	r2, [r7, #0]
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cae:	ab03      	add	r3, sp, #12
      { return __normal_iterator(_M_current + __n); }
 8001cb0:	4411      	add	r1, r2
	if (Size > *buffer_index)
 8001cb2:	d228      	bcs.n	8001d06 <HAL_UARTEx_RxEventCallback+0xba>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->begin() + Size);
 8001cb4:	4422      	add	r2, r4
 8001cb6:	a807      	add	r0, sp, #28
 8001cb8:	f7ff f848 	bl	8000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001cbc:	a804      	add	r0, sp, #16
 8001cbe:	a907      	add	r1, sp, #28
 8001cc0:	f7fe ff18 	bl	8000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8001cc4:	a807      	add	r0, sp, #28
 8001cc6:	f7fe ff0b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t processed_length = communication.Process(ID, received_data, &success);
 8001cca:	a904      	add	r1, sp, #16
 8001ccc:	a807      	add	r0, sp, #28
 8001cce:	f7fe ffb7 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8001cd2:	f10d 030f 	add.w	r3, sp, #15
 8001cd6:	aa07      	add	r2, sp, #28
 8001cd8:	4629      	mov	r1, r5
 8001cda:	4833      	ldr	r0, [pc, #204]	@ (8001da8 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001cdc:	f011 fa64 	bl	80131a8 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	a807      	add	r0, sp, #28
 8001ce4:	f7fe fefc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	*buffer_index += processed_length;
 8001ce8:	f8b8 3000 	ldrh.w	r3, [r8]
 8001cec:	18e0      	adds	r0, r4, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf2:	b280      	uxth	r0, r0
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	f8a8 0000 	strh.w	r0, [r8]
	if (*buffer_index >= buffer->size())
 8001cfa:	4298      	cmp	r0, r3
		*buffer_index -= buffer->size();
 8001cfc:	bf24      	itt	cs
 8001cfe:	1ac0      	subcs	r0, r0, r3
 8001d00:	f8a8 0000 	strhcs.w	r0, [r8]
 8001d04:	e7c5      	b.n	8001c92 <HAL_UARTEx_RxEventCallback+0x46>
		received_data = std::vector<uint8_t>(buffer->begin() + *buffer_index, buffer->end());
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	a807      	add	r0, sp, #28
 8001d0a:	f7ff f81f 	bl	8000d4c <_ZNSt6vectorIhSaIhEEC1IN9__gnu_cxx17__normal_iteratorIPhS1_EEvEET_S7_RKS0_>
 8001d0e:	a907      	add	r1, sp, #28
 8001d10:	a804      	add	r0, sp, #16
 8001d12:	f7fe feef 	bl	8000af4 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8001d16:	a807      	add	r0, sp, #28
 8001d18:	f7fe fee2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      : _M_current(__i) { }
 8001d1c:	f8d7 9000 	ldr.w	r9, [r7]
      { return __normal_iterator(_M_current + __n); }
 8001d20:	eb09 0b04 	add.w	fp, r9, r4
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 8001d24:	45cb      	cmp	fp, r9
 8001d26:	d0d0      	beq.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
	  {
	    const size_type __n = std::distance(__first, __last);
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d28:	9b06      	ldr	r3, [sp, #24]
      : _M_current(__i) { }
 8001d2a:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			  - this->_M_impl._M_finish) >= __n)
 8001d2e:	1b9a      	subs	r2, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8001d30:	42a2      	cmp	r2, r4
 8001d32:	d310      	bcc.n	8001d56 <HAL_UARTEx_RxEventCallback+0x10a>
			      _Category>::__copy_m(__first, __last, __result);
 8001d34:	4632      	mov	r2, r6
 8001d36:	4659      	mov	r1, fp
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f7fe ff75 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    std::advance(__mid, __elems_after);
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_copy_a(__mid, __last,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
		    this->_M_impl._M_finish += __n - __elems_after;
 8001d3e:	1932      	adds	r2, r6, r4
 8001d40:	4631      	mov	r1, r6
 8001d42:	4630      	mov	r0, r6
 8001d44:	9205      	str	r2, [sp, #20]
 8001d46:	f7ff ff75 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4648      	mov	r0, r9
 8001d50:	f7fe ff6a 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001d54:	e7b9      	b.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
		// reachable.
		pointer __old_start = this->_M_impl._M_start;
		pointer __old_finish = this->_M_impl._M_finish;

		const size_type __len =
		  _M_check_len(__n, "vector::_M_range_insert");
 8001d56:	4621      	mov	r1, r4
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <HAL_UARTEx_RxEventCallback+0x160>)
 8001d5a:	a804      	add	r0, sp, #16
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	f7fe fee0 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8001d62:	9000      	str	r0, [sp, #0]
		pointer __new_start(this->_M_allocate(__len));
 8001d64:	f7fe fd9e 	bl	80008a4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8001d68:	4631      	mov	r1, r6
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4650      	mov	r0, sl
 8001d70:	f7ff ff60 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d74:	4659      	mov	r1, fp
 8001d76:	4602      	mov	r2, r0
 8001d78:	4648      	mov	r0, r9
 8001d7a:	f7fe ff55 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d7e:	4631      	mov	r1, r6
 8001d80:	4602      	mov	r2, r0
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff ff56 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8001d88:	4606      	mov	r6, r0
	if (__p)
 8001d8a:	f1ba 0f00 	cmp.w	sl, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_UARTEx_RxEventCallback+0x150>
 8001d90:	9b01      	ldr	r3, [sp, #4]
 8001d92:	4650      	mov	r0, sl
 8001d94:	eba3 010a 	sub.w	r1, r3, sl
 8001d98:	f01a fec6 	bl	801cb28 <_ZdlPvj>
		_GLIBCXX_ASAN_ANNOTATE_REINIT;
		_M_deallocate(__old_start,
			      this->_M_impl._M_end_of_storage - __old_start);
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001d9c:	9b00      	ldr	r3, [sp, #0]
		this->_M_impl._M_finish = __new_finish;
 8001d9e:	e9cd 4604 	strd	r4, r6, [sp, #16]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8001da2:	441c      	add	r4, r3
 8001da4:	9406      	str	r4, [sp, #24]
 8001da6:	e790      	b.n	8001cca <HAL_UARTEx_RxEventCallback+0x7e>
 8001da8:	240010cc 	.word	0x240010cc
 8001dac:	0801ddbf 	.word	0x0801ddbf

08001db0 <_ZN23ControllerConfigurationD1Ev>:
#include "Configurations/ControlConfiguration.h"

#include "PlatformLEDs/PlatformLEDs.hpp"

// Controller Configuration Struct
struct ControllerConfiguration {
 8001db0:	b510      	push	{r4, lr}
 8001db2:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001db4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
	if (__p)
 8001db6:	b120      	cbz	r0, 8001dc2 <_ZN23ControllerConfigurationD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001db8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001dba:	1a09      	subs	r1, r1, r0
 8001dbc:	1089      	asrs	r1, r1, #2
 8001dbe:	f7fe fd6b 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001dc2:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001dc4:	b120      	cbz	r0, 8001dd0 <_ZN23ControllerConfigurationD1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001dc6:	6921      	ldr	r1, [r4, #16]
 8001dc8:	1a09      	subs	r1, r1, r0
 8001dca:	1089      	asrs	r1, r1, #2
 8001dcc:	f7fe fd64 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	bd10      	pop	{r4, pc}

08001dd4 <_ZN4LEDSD1Ev>:
    uint16_t G_address;
    uint16_t B_address;
};

// LEDS class used to control the LED
class LEDS {
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001dd8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
	if (__p)
 8001dda:	b118      	cbz	r0, 8001de4 <_ZN4LEDSD1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dde:	1a09      	subs	r1, r1, r0
 8001de0:	f01a fea2 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001de4:	6a20      	ldr	r0, [r4, #32]
	if (__p)
 8001de6:	b120      	cbz	r0, 8001df2 <_ZN4LEDSD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001de8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001dea:	1a09      	subs	r1, r1, r0
 8001dec:	1109      	asrs	r1, r1, #4
 8001dee:	f7fe fd56 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001df2:	6960      	ldr	r0, [r4, #20]
	if (__p)
 8001df4:	b120      	cbz	r0, 8001e00 <_ZN4LEDSD1Ev+0x2c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001df6:	69e1      	ldr	r1, [r4, #28]
 8001df8:	1a09      	subs	r1, r1, r0
 8001dfa:	1109      	asrs	r1, r1, #4
 8001dfc:	f7fe fd4f 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e00:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8001e04:	42ae      	cmp	r6, r5
 8001e06:	d107      	bne.n	8001e18 <_ZN4LEDSD1Ev+0x44>
	_M_deallocate(_M_impl._M_start,
 8001e08:	68a0      	ldr	r0, [r4, #8]
	if (__p)
 8001e0a:	b118      	cbz	r0, 8001e14 <_ZN4LEDSD1Ev+0x40>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e0c:	6921      	ldr	r1, [r4, #16]
 8001e0e:	1a09      	subs	r1, r1, r0
 8001e10:	f01a fe8a 	bl	801cb28 <_ZdlPvj>
 8001e14:	4620      	mov	r0, r4
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001e18:	f105 0010 	add.w	r0, r5, #16
 8001e1c:	3520      	adds	r5, #32
 8001e1e:	f7fe fe5f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e22:	e7ef      	b.n	8001e04 <_ZN4LEDSD1Ev+0x30>

08001e24 <_ZN13CommunicationD1Ev>:

	std::vector<uint8_t> data; // TODO, set as the register type with template
};

// Communication Class to communication with other modules
class Communication {
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e28:	e9d0 560c 	ldrd	r5, r6, [r0, #48]	@ 0x30
 8001e2c:	42ae      	cmp	r6, r5
 8001e2e:	d112      	bne.n	8001e56 <_ZN13CommunicationD1Ev+0x32>
	_M_deallocate(_M_impl._M_start,
 8001e30:	6b20      	ldr	r0, [r4, #48]	@ 0x30
	if (__p)
 8001e32:	b118      	cbz	r0, 8001e3c <_ZN13CommunicationD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001e36:	1a09      	subs	r1, r1, r0
 8001e38:	f01a fe76 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e3c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	if (__p)
 8001e3e:	b120      	cbz	r0, 8001e4a <_ZN13CommunicationD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e40:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e42:	1a09      	subs	r1, r1, r0
 8001e44:	1089      	asrs	r1, r1, #2
 8001e46:	f7fe fd27 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001e4a:	f104 0018 	add.w	r0, r4, #24
 8001e4e:	f7fe fe47 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e52:	4620      	mov	r0, r4
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
 8001e56:	1d28      	adds	r0, r5, #4
 8001e58:	3514      	adds	r5, #20
 8001e5a:	f7fe fe41 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001e5e:	e7e5      	b.n	8001e2c <_ZN13CommunicationD1Ev+0x8>

08001e60 <_ZN17MasterSubscribersD1Ev>:
	std::vector<SubscriberInterface> interfaces;    // interfaces associated to remote_registers (index by index)
	std::vector<uint8_t> filters;					// list of module address filters
};

// MasterSubscribers class used to receive published data from other modules
class MasterSubscribers {
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001e64:	6980      	ldr	r0, [r0, #24]
	if (__p)
 8001e66:	b120      	cbz	r0, 8001e72 <_ZN17MasterSubscribersD1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e68:	6a21      	ldr	r1, [r4, #32]
 8001e6a:	1a09      	subs	r1, r1, r0
 8001e6c:	1089      	asrs	r1, r1, #2
 8001e6e:	f7fe fd13 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001e72:	e9d4 5603 	ldrd	r5, r6, [r4, #12]
 8001e76:	42ae      	cmp	r6, r5
 8001e78:	d107      	bne.n	8001e8a <_ZN17MasterSubscribersD1Ev+0x2a>
	_M_deallocate(_M_impl._M_start,
 8001e7a:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8001e7c:	b118      	cbz	r0, 8001e86 <_ZN17MasterSubscribersD1Ev+0x26>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e7e:	6961      	ldr	r1, [r4, #20]
 8001e80:	1a09      	subs	r1, r1, r0
 8001e82:	f01a fe51 	bl	801cb28 <_ZdlPvj>
 8001e86:	4620      	mov	r0, r4
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
      }
 8001e8a:	f105 001c 	add.w	r0, r5, #28
 8001e8e:	f7fe fe27 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8001e92:	6928      	ldr	r0, [r5, #16]
	if (__p)
 8001e94:	b118      	cbz	r0, 8001e9e <_ZN17MasterSubscribersD1Ev+0x3e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e96:	69a9      	ldr	r1, [r5, #24]
 8001e98:	1a09      	subs	r1, r1, r0
 8001e9a:	f01a fe45 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8001e9e:	6868      	ldr	r0, [r5, #4]
	if (__p)
 8001ea0:	b118      	cbz	r0, 8001eaa <_ZN17MasterSubscribersD1Ev+0x4a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ea2:	68e9      	ldr	r1, [r5, #12]
 8001ea4:	1a09      	subs	r1, r1, r0
 8001ea6:	f01a fe3f 	bl	801cb28 <_ZdlPvj>
 8001eaa:	3528      	adds	r5, #40	@ 0x28
 8001eac:	e7e3      	b.n	8001e76 <_ZN17MasterSubscribersD1Ev+0x16>

08001eae <_ZN9RegistersD1Ev>:
	bool (*write)(void*, uint16_t, T*, uint16_t);	// write callback
	bool (*read)(void*, uint16_t, T**, uint16_t*);	// read callback
};

// Registers class used to interface memory addresses to memory pointers and / or callbacks
class Registers {
 8001eae:	b510      	push	{r4, lr}
 8001eb0:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001eb2:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
	if (__p)
 8001eb6:	b128      	cbz	r0, 8001ec4 <_ZN9RegistersD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eb8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8001ebc:	1a09      	subs	r1, r1, r0
 8001ebe:	1109      	asrs	r1, r1, #4
 8001ec0:	f7fe fced 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ec4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
	if (__p)
 8001ec8:	b128      	cbz	r0, 8001ed6 <_ZN9RegistersD1Ev+0x28>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eca:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8001ece:	1a09      	subs	r1, r1, r0
 8001ed0:	1109      	asrs	r1, r1, #4
 8001ed2:	f7fe fce4 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ed6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 8001ed8:	b120      	cbz	r0, 8001ee4 <_ZN9RegistersD1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001eda:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8001edc:	1a09      	subs	r1, r1, r0
 8001ede:	1109      	asrs	r1, r1, #4
 8001ee0:	f7fe fcdd 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ee4:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
	if (__p)
 8001ee6:	b120      	cbz	r0, 8001ef2 <_ZN9RegistersD1Ev+0x44>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ee8:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001eea:	1a09      	subs	r1, r1, r0
 8001eec:	1109      	asrs	r1, r1, #4
 8001eee:	f7fe fcd6 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001ef2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
	if (__p)
 8001ef4:	b120      	cbz	r0, 8001f00 <_ZN9RegistersD1Ev+0x52>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ef6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8001ef8:	1a09      	subs	r1, r1, r0
 8001efa:	1109      	asrs	r1, r1, #4
 8001efc:	f7fe fccf 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f00:	6d20      	ldr	r0, [r4, #80]	@ 0x50
	if (__p)
 8001f02:	b120      	cbz	r0, 8001f0e <_ZN9RegistersD1Ev+0x60>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f04:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8001f06:	1a09      	subs	r1, r1, r0
 8001f08:	1109      	asrs	r1, r1, #4
 8001f0a:	f7fe fcc8 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f0e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
	if (__p)
 8001f10:	b120      	cbz	r0, 8001f1c <_ZN9RegistersD1Ev+0x6e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f12:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001f14:	1a09      	subs	r1, r1, r0
 8001f16:	1109      	asrs	r1, r1, #4
 8001f18:	f7fe fcc1 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	if (__p)
 8001f1e:	b120      	cbz	r0, 8001f2a <_ZN9RegistersD1Ev+0x7c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f20:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001f22:	1a09      	subs	r1, r1, r0
 8001f24:	1109      	asrs	r1, r1, #4
 8001f26:	f7fe fcba 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f2a:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8001f2c:	b120      	cbz	r0, 8001f38 <_ZN9RegistersD1Ev+0x8a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f2e:	68e1      	ldr	r1, [r4, #12]
 8001f30:	1a09      	subs	r1, r1, r0
 8001f32:	1109      	asrs	r1, r1, #4
 8001f34:	f7fe fcb3 	bl	800089e <_ZNSt12_Vector_baseI17RegisterCallbacksIaESaIS1_EE13_M_deallocateEPS1_j.part.0>
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bd10      	pop	{r4, pc}

08001f3c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001f40:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f44:	42ae      	cmp	r6, r5
 8001f46:	d107      	bne.n	8001f58 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001f48:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001f4a:	b118      	cbz	r0, 8001f54 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f4c:	68a1      	ldr	r1, [r4, #8]
 8001f4e:	1a09      	subs	r1, r1, r0
 8001f50:	f01a fdea 	bl	801cb28 <_ZdlPvj>
      }
 8001f54:	4620      	mov	r0, r4
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
	_M_deallocate(_M_impl._M_start,
 8001f58:	6968      	ldr	r0, [r5, #20]
	if (__p)
 8001f5a:	b120      	cbz	r0, 8001f66 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f5c:	69e9      	ldr	r1, [r5, #28]
 8001f5e:	1a09      	subs	r1, r1, r0
 8001f60:	1089      	asrs	r1, r1, #2
 8001f62:	f7fe fc99 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
	_M_deallocate(_M_impl._M_start,
 8001f66:	68a8      	ldr	r0, [r5, #8]
	if (__p)
 8001f68:	b118      	cbz	r0, 8001f72 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f6a:	6929      	ldr	r1, [r5, #16]
 8001f6c:	1a09      	subs	r1, r1, r0
 8001f6e:	f01a fddb 	bl	801cb28 <_ZdlPvj>
 8001f72:	3520      	adds	r5, #32
 8001f74:	e7e6      	b.n	8001f44 <_ZNSt6vectorI9PublisherSaIS0_EED1Ev+0x8>

08001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001f76:	b570      	push	{r4, r5, r6, lr}
 8001f78:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001f7a:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f7e:	42ae      	cmp	r6, r5
 8001f80:	d107      	bne.n	8001f92 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8001f82:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8001f84:	b118      	cbz	r0, 8001f8e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f86:	68a1      	ldr	r1, [r4, #8]
 8001f88:	1a09      	subs	r1, r1, r0
 8001f8a:	f01a fdcd 	bl	801cb28 <_ZdlPvj>
      }
 8001f8e:	4620      	mov	r0, r4
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
 8001f92:	4628      	mov	r0, r5
 8001f94:	350c      	adds	r5, #12
 8001f96:	f7fe fda3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001f9a:	e7f0      	b.n	8001f7e <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x8>

08001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001fa0:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001fa2:	b120      	cbz	r0, 8001fae <_ZNSt12_Vector_baseIfSaIfEED1Ev+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fa4:	68a1      	ldr	r1, [r4, #8]
 8001fa6:	1a09      	subs	r1, r1, r0
 8001fa8:	1089      	asrs	r1, r1, #2
 8001faa:	f7fe fc75 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 8001fae:	4620      	mov	r0, r4
 8001fb0:	bd10      	pop	{r4, pc}

08001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001fb2:	b510      	push	{r4, lr}
 8001fb4:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001fb6:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001fb8:	b118      	cbz	r0, 8001fc2 <_ZNSt12_Vector_baseItSaItEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001fba:	68a1      	ldr	r1, [r4, #8]
 8001fbc:	1a09      	subs	r1, r1, r0
 8001fbe:	f01a fdb3 	bl	801cb28 <_ZdlPvj>
      }
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	bd10      	pop	{r4, pc}
	...

08001fc8 <_ZN21CommunicationProtocolD1Ev>:
	uint8_t target_address;
	uint8_t source_address;
};

// CommunicationProtocol class used as a basis to derive custom Protocols
class CommunicationProtocol {
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <_ZN21CommunicationProtocolD1Ev+0x28>)
 8001fca:	b510      	push	{r4, lr}
 8001fcc:	4604      	mov	r4, r0
 8001fce:	f840 3b2c 	str.w	r3, [r0], #44
      }
 8001fd2:	f7ff ffee 	bl	8001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8001fd6:	f104 0020 	add.w	r0, r4, #32
 8001fda:	f7ff ffcc 	bl	8001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001fde:	f104 0010 	add.w	r0, r4, #16
 8001fe2:	f7fe fd7d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001fe6:	1d20      	adds	r0, r4, #4
 8001fe8:	f7ff ffc5 	bl	8001f76 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8001fec:	4620      	mov	r0, r4
 8001fee:	bd10      	pop	{r4, pc}
 8001ff0:	0801e040 	.word	0x0801e040

08001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8001ff8:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8001ffa:	b118      	cbz	r0, 8002004 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ffc:	68a1      	ldr	r1, [r4, #8]
 8001ffe:	1a09      	subs	r1, r1, r0
 8002000:	f01a fd92 	bl	801cb28 <_ZdlPvj>
      }
 8002004:	4620      	mov	r0, r4
 8002006:	bd10      	pop	{r4, pc}

08002008 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800200c:	4604      	mov	r4, r0
 800200e:	460f      	mov	r7, r1
	  for (; __first != __last; ++__first)
 8002010:	42bc      	cmp	r4, r7
 8002012:	d101      	bne.n	8002018 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x10>
	    std::_Destroy(std::__addressof(*__first));
	}
 8002014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002018:	e9d4 5803 	ldrd	r5, r8, [r4, #12]
	  for (; __first != __last; ++__first)
 800201c:	45a8      	cmp	r8, r5
 800201e:	d107      	bne.n	8002030 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x28>
	_M_deallocate(_M_impl._M_start,
 8002020:	68e0      	ldr	r0, [r4, #12]
	if (__p)
 8002022:	b118      	cbz	r0, 800202c <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002024:	6961      	ldr	r1, [r4, #20]
 8002026:	1a09      	subs	r1, r1, r0
 8002028:	f01a fd7e 	bl	801cb28 <_ZdlPvj>
 800202c:	3418      	adds	r4, #24
 800202e:	e7ef      	b.n	8002010 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x8>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002030:	e9d5 6905 	ldrd	r6, r9, [r5, #20]
 8002034:	45b1      	cmp	r9, r6
 8002036:	d107      	bne.n	8002048 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x40>
	_M_deallocate(_M_impl._M_start,
 8002038:	6968      	ldr	r0, [r5, #20]
	if (__p)
 800203a:	b118      	cbz	r0, 8002044 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x3c>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800203c:	69e9      	ldr	r1, [r5, #28]
 800203e:	1a09      	subs	r1, r1, r0
 8002040:	f01a fd72 	bl	801cb28 <_ZdlPvj>
 8002044:	3528      	adds	r5, #40	@ 0x28
 8002046:	e7e9      	b.n	800201c <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x14>
      }
 8002048:	f106 000c 	add.w	r0, r6, #12
 800204c:	3618      	adds	r6, #24
 800204e:	f7ff ffd1 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8002052:	e7ef      	b.n	8002034 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_+0x2c>

08002054 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	4604      	mov	r4, r0
 8002058:	460e      	mov	r6, r1
	  for (; __first != __last; ++__first)
 800205a:	42b4      	cmp	r4, r6
 800205c:	d100      	bne.n	8002060 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0xc>
	}
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002060:	e9d4 571c 	ldrd	r5, r7, [r4, #112]	@ 0x70
	  for (; __first != __last; ++__first)
 8002064:	42af      	cmp	r7, r5
 8002066:	d118      	bne.n	800209a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x46>
	_M_deallocate(_M_impl._M_start,
 8002068:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 800206a:	b118      	cbz	r0, 8002074 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800206c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800206e:	1a09      	subs	r1, r1, r0
 8002070:	f01a fd5a 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8002074:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 8002076:	b120      	cbz	r0, 8002082 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x2e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002078:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800207a:	1a09      	subs	r1, r1, r0
 800207c:	1089      	asrs	r1, r1, #2
 800207e:	f7fe fc0b 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002082:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
 8002086:	f7ff ffbf 	bl	8002008 <_ZNSt12_Destroy_auxILb0EE9__destroyIP11SensorGroupEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 800208a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 800208c:	b118      	cbz	r0, 8002096 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800208e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002090:	1a09      	subs	r1, r1, r0
 8002092:	f01a fd49 	bl	801cb28 <_ZdlPvj>
	  for (; __first != __last; ++__first)
 8002096:	347c      	adds	r4, #124	@ 0x7c
 8002098:	e7df      	b.n	800205a <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x6>
      }
 800209a:	f105 0014 	add.w	r0, r5, #20
 800209e:	3520      	adds	r5, #32
 80020a0:	f7ff ffa8 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 80020a4:	e7de      	b.n	8002064 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_+0x10>

080020a6 <_ZN7SensorsD1Ev>:
	std::vector<Sensor*> pending_sensors; 		// vector of pending sensor pointers
	std::vector<ReadRequest> pending_requests;	// vector of read requests
};

// Sensors class to manage reading of I2C and internal sensors. It is compatible with almost every I2C sensor and does optimize the reading time by avoiding waiting times as much as possible.
class Sensors {
 80020a6:	b510      	push	{r4, lr}
 80020a8:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 80020aa:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
	if (__p)
 80020ae:	b120      	cbz	r0, 80020ba <_ZN7SensorsD1Ev+0x14>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020b0:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80020b4:	1a09      	subs	r1, r1, r0
 80020b6:	f01a fd37 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
	if (__p)
 80020bc:	b118      	cbz	r0, 80020c6 <_ZN7SensorsD1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020be:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80020c0:	1a09      	subs	r1, r1, r0
 80020c2:	f01a fd31 	bl	801cb28 <_ZdlPvj>
      }
 80020c6:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80020ca:	f7ff ff67 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 80020ce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	if (__p)
 80020d0:	b118      	cbz	r0, 80020da <_ZN7SensorsD1Ev+0x34>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020d2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80020d4:	1a09      	subs	r1, r1, r0
 80020d6:	f01a fd27 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80020da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
	if (__p)
 80020dc:	b120      	cbz	r0, 80020e8 <_ZN7SensorsD1Ev+0x42>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020de:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80020e0:	1a09      	subs	r1, r1, r0
 80020e2:	1089      	asrs	r1, r1, #2
 80020e4:	f7fe fbd8 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      }
 80020e8:	f104 001c 	add.w	r0, r4, #28
 80020ec:	f7ff ff61 	bl	8001fb2 <_ZNSt12_Vector_baseItSaItEED1Ev>
	__destroy(__first, __last);
 80020f0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80020f4:	f7ff ffae 	bl	8002054 <_ZNSt12_Destroy_auxILb0EE9__destroyIP12I2CInterfaceEEvT_S4_>
	_M_deallocate(_M_impl._M_start,
 80020f8:	6920      	ldr	r0, [r4, #16]
	if (__p)
 80020fa:	b118      	cbz	r0, 8002104 <_ZN7SensorsD1Ev+0x5e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80020fc:	69a1      	ldr	r1, [r4, #24]
 80020fe:	1a09      	subs	r1, r1, r0
 8002100:	f01a fd12 	bl	801cb28 <_ZdlPvj>
 8002104:	4620      	mov	r0, r4
 8002106:	bd10      	pop	{r4, pc}

08002108 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800210c:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8002110:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8002112:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002116:	ebaa 0208 	sub.w	r2, sl, r8
 800211a:	4607      	mov	r7, r0
 800211c:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800211e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002122:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8002126:	d102      	bne.n	800212e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8002128:	481f      	ldr	r0, [pc, #124]	@ (80021a8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa0>)
 800212a:	f01a fdd7 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800212e:	45c2      	cmp	sl, r8
 8002130:	bf14      	ite	ne
 8002132:	4622      	movne	r2, r4
 8002134:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8002136:	eba1 0508 	sub.w	r5, r1, r8
 800213a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800213c:	d22f      	bcs.n	800219e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x96>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800213e:	b384      	cbz	r4, 80021a2 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002140:	429c      	cmp	r4, r3
 8002142:	bf28      	it	cs
 8002144:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002146:	00a0      	lsls	r0, r4, #2
 8002148:	f01a fd13 	bl	801cb72 <_Znwj>
 800214c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800214e:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 8002152:	2d00      	cmp	r5, #0
 8002154:	5173      	str	r3, [r6, r5]
 8002156:	dd04      	ble.n	8002162 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002158:	462a      	mov	r2, r5
 800215a:	4641      	mov	r1, r8
 800215c:	4630      	mov	r0, r6
 800215e:	f01b fc85 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8002162:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 8002166:	3504      	adds	r5, #4
      if (__count > 0)
 8002168:	f1ba 0f00 	cmp.w	sl, #0
 800216c:	4435      	add	r5, r6
 800216e:	dd04      	ble.n	800217a <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002170:	4652      	mov	r2, sl
 8002172:	4649      	mov	r1, r9
 8002174:	4628      	mov	r0, r5
 8002176:	f01b fd71 	bl	801dc5c <memcpy>
      return __result + __count;
 800217a:	4455      	add	r5, sl
	if (__p)
 800217c:	f1b8 0f00 	cmp.w	r8, #0
 8002180:	d006      	beq.n	8002190 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x88>
		    this->_M_impl._M_end_of_storage - __old_start);
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	4640      	mov	r0, r8
 8002186:	eba1 0108 	sub.w	r1, r1, r8
 800218a:	1089      	asrs	r1, r1, #2
 800218c:	f7fe fb84 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
      this->_M_impl._M_finish = __new_finish;
 8002190:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002194:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8002198:	60be      	str	r6, [r7, #8]
    }
 800219a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800219e:	461c      	mov	r4, r3
 80021a0:	e7d1      	b.n	8002146 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80021a2:	4626      	mov	r6, r4
 80021a4:	e7d3      	b.n	800214e <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 80021a6:	bf00      	nop
 80021a8:	0801dd74 	.word	0x0801dd74

080021ac <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_>:
void TemplateCommunicationProtocol<H>::AddInterface(uint8_t ID, H* interface) {
 80021ac:	b513      	push	{r0, r1, r4, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 80021b2:	f013 ffb5 	bl	8016120 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 80021b6:	4620      	mov	r0, r4
 80021b8:	f014 f94c 	bl	8016454 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80021bc:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	@ 0x3c
 80021c0:	4299      	cmp	r1, r3
 80021c2:	d005      	beq.n	80021d0 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x24>
 80021c4:	9b01      	ldr	r3, [sp, #4]
 80021c6:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 80021ca:	63e1      	str	r1, [r4, #60]	@ 0x3c
}
 80021cc:	b002      	add	sp, #8
 80021ce:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80021d0:	aa01      	add	r2, sp, #4
 80021d2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80021d6:	f7ff ff97 	bl	8002108 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 80021da:	e7f7      	b.n	80021cc <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12AddInterfaceEhPS0_+0x20>

080021dc <_GLOBAL__sub_I_hadc1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80021dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
Registers registers;
 80021e0:	4839      	ldr	r0, [pc, #228]	@ (80022c8 <_GLOBAL__sub_I_hadc1+0xec>)
}
 80021e2:	b091      	sub	sp, #68	@ 0x44
Registers registers;
 80021e4:	f016 fa4e 	bl	8018684 <_ZN9RegistersC1Ev>
MasterSubscribers subscribers;
 80021e8:	4d38      	ldr	r5, [pc, #224]	@ (80022cc <_GLOBAL__sub_I_hadc1+0xf0>)
UARTProtocol protocol_uart;
 80021ea:	4839      	ldr	r0, [pc, #228]	@ (80022d0 <_GLOBAL__sub_I_hadc1+0xf4>)
 80021ec:	f014 fde6 	bl	8016dbc <_ZN12UARTProtocolC1Ev>
Communication communication;
 80021f0:	4e38      	ldr	r6, [pc, #224]	@ (80022d4 <_GLOBAL__sub_I_hadc1+0xf8>)
CANProtocol protocol_canfd;
 80021f2:	4839      	ldr	r0, [pc, #228]	@ (80022d8 <_GLOBAL__sub_I_hadc1+0xfc>)
 80021f4:	f014 f992 	bl	801651c <_ZN11CANProtocolC1Ev>
Services services;
 80021f8:	4c38      	ldr	r4, [pc, #224]	@ (80022dc <_GLOBAL__sub_I_hadc1+0x100>)
MasterSubscribers subscribers;
 80021fa:	4628      	mov	r0, r5
Publishers publishers;
 80021fc:	4f38      	ldr	r7, [pc, #224]	@ (80022e0 <_GLOBAL__sub_I_hadc1+0x104>)
MasterSubscribers subscribers;
 80021fe:	f019 ff33 	bl	801c068 <_ZN17MasterSubscribersC1Ev>
Communication communication;
 8002202:	4630      	mov	r0, r6
 8002204:	f00e fa3e 	bl	8010684 <_ZN13CommunicationC1Ev>
HardwareDelay hardware_delay(&htim4);
 8002208:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 800230c <_GLOBAL__sub_I_hadc1+0x130>
Services services;
 800220c:	4620      	mov	r0, r4
Sensors sensors;
 800220e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8002310 <_GLOBAL__sub_I_hadc1+0x134>
Services services;
 8002212:	f019 fdc6 	bl	801bda2 <_ZN8ServicesC1Ev>
Publishers publishers;
 8002216:	4638      	mov	r0, r7
 8002218:	f015 f9b2 	bl	8017580 <_ZN10PublishersC1Ev>
LEDS leds;
 800221c:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 8002314 <_GLOBAL__sub_I_hadc1+0x138>
HardwareDelay hardware_delay(&htim4);
 8002220:	4930      	ldr	r1, [pc, #192]	@ (80022e4 <_GLOBAL__sub_I_hadc1+0x108>)
 8002222:	4640      	mov	r0, r8
 8002224:	f012 fef6 	bl	8015014 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>
Sensors sensors;
 8002228:	4648      	mov	r0, r9
 800222a:	f016 fd82 	bl	8018d32 <_ZN7SensorsC1Ev>
LEDS leds;
 800222e:	4650      	mov	r0, sl
 8002230:	f013 f968 	bl	8015504 <_ZN4LEDSC1Ev>
PlatformSensors platform_sensors;
 8002234:	482c      	ldr	r0, [pc, #176]	@ (80022e8 <_GLOBAL__sub_I_hadc1+0x10c>)
 8002236:	f00d f90f 	bl	800f458 <_ZN15PlatformSensorsC1Ev>
);
 800223a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <_GLOBAL__sub_I_hadc1+0x110>)
 8002240:	a910      	add	r1, sp, #64	@ 0x40
 8002242:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8002246:	4a2a      	ldr	r2, [pc, #168]	@ (80022f0 <_GLOBAL__sub_I_hadc1+0x114>)
 8002248:	930e      	str	r3, [sp, #56]	@ 0x38
 800224a:	920a      	str	r2, [sp, #40]	@ 0x28
 800224c:	2201      	movs	r2, #1
 800224e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002250:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8002254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002258:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8002318 <_GLOBAL__sub_I_hadc1+0x13c>
 800225c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8002260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002264:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <_GLOBAL__sub_I_hadc1+0x118>)
 800226a:	9207      	str	r2, [sp, #28]
 800226c:	aa05      	add	r2, sp, #20
 800226e:	e911 0003 	ldmdb	r1, {r0, r1}
 8002272:	e882 0003 	stmia.w	r2, {r0, r1}
 8002276:	aa03      	add	r2, sp, #12
 8002278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800227c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002280:	aa01      	add	r2, sp, #4
 8002282:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002286:	e882 0003 	stmia.w	r2, {r0, r1}
 800228a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800228c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002290:	4658      	mov	r0, fp
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	4a18      	ldr	r2, [pc, #96]	@ (80022f8 <_GLOBAL__sub_I_hadc1+0x11c>)
 8002296:	f011 fa8e 	bl	80137b6 <_ZN10ControllerC1EP11TIM_TypeDefPm4GPIOS3_S3_S3_P17ADC_HandleTypeDef>
);
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <_GLOBAL__sub_I_hadc1+0x120>)
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <_GLOBAL__sub_I_hadc1+0x124>)
 800229e:	4919      	ldr	r1, [pc, #100]	@ (8002304 <_GLOBAL__sub_I_hadc1+0x128>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f019 fe7f 	bl	801bfa4 <_ZN11ServomotorsC1EPmS0_>
User user(&registers, &subscribers, &communication, &services, &publishers, &hardware_delay, &sensors, &leds, &controller, &servomotors);
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <_GLOBAL__sub_I_hadc1+0x120>)
 80022a8:	462a      	mov	r2, r5
 80022aa:	4907      	ldr	r1, [pc, #28]	@ (80022c8 <_GLOBAL__sub_I_hadc1+0xec>)
 80022ac:	9400      	str	r4, [sp, #0]
 80022ae:	4816      	ldr	r0, [pc, #88]	@ (8002308 <_GLOBAL__sub_I_hadc1+0x12c>)
 80022b0:	e9cd b305 	strd	fp, r3, [sp, #20]
 80022b4:	4633      	mov	r3, r6
 80022b6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80022ba:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80022be:	f01a fb6a 	bl	801c996 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDSP10ControllerP11Servomotors>
}
 80022c2:	b011      	add	sp, #68	@ 0x44
 80022c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c8:	240011e8 	.word	0x240011e8
 80022cc:	24001108 	.word	0x24001108
 80022d0:	24001180 	.word	0x24001180
 80022d4:	240010cc 	.word	0x240010cc
 80022d8:	2400112c 	.word	0x2400112c
 80022dc:	24000488 	.word	0x24000488
 80022e0:	24000470 	.word	0x24000470
 80022e4:	24001a10 	.word	0x24001a10
 80022e8:	240002f8 	.word	0x240002f8
 80022ec:	58021000 	.word	0x58021000
 80022f0:	58020400 	.word	0x58020400
 80022f4:	240020fc 	.word	0x240020fc
 80022f8:	4001003c 	.word	0x4001003c
 80022fc:	240000ac 	.word	0x240000ac
 8002300:	40000438 	.word	0x40000438
 8002304:	40000434 	.word	0x40000434
 8002308:	24000084 	.word	0x24000084
 800230c:	24000454 	.word	0x24000454
 8002310:	240003b8 	.word	0x240003b8
 8002314:	24000380 	.word	0x24000380
 8002318:	24000140 	.word	0x24000140

0800231c <_GLOBAL__sub_D_hadc1>:
 800231c:	b510      	push	{r4, lr}
      }
 800231e:	482b      	ldr	r0, [pc, #172]	@ (80023cc <_GLOBAL__sub_D_hadc1+0xb0>)
 8002320:	f7ff fe3c 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	float (*model)(std::vector<float*>, std::vector<float>); 			// Function to add a custom model to the controller output
	std::vector<float*> model_variables; 								// Vector of variables used by the custom model
};

// Controller class used to control the motor
class Controller {
 8002324:	482a      	ldr	r0, [pc, #168]	@ (80023d0 <_GLOBAL__sub_D_hadc1+0xb4>)
 8002326:	f7ff fd43 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
 800232a:	482a      	ldr	r0, [pc, #168]	@ (80023d4 <_GLOBAL__sub_D_hadc1+0xb8>)
 800232c:	f7ff fd40 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
 8002330:	4829      	ldr	r0, [pc, #164]	@ (80023d8 <_GLOBAL__sub_D_hadc1+0xbc>)
 8002332:	f7ff fd3d 	bl	8001db0 <_ZN23ControllerConfigurationD1Ev>
LEDS leds;
 8002336:	4829      	ldr	r0, [pc, #164]	@ (80023dc <_GLOBAL__sub_D_hadc1+0xc0>)
 8002338:	f7ff fd4c 	bl	8001dd4 <_ZN4LEDSD1Ev>
Sensors sensors;
 800233c:	4828      	ldr	r0, [pc, #160]	@ (80023e0 <_GLOBAL__sub_D_hadc1+0xc4>)
 800233e:	f7ff feb2 	bl	80020a6 <_ZN7SensorsD1Ev>
	_M_deallocate(_M_impl._M_start,
 8002342:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <_GLOBAL__sub_D_hadc1+0xc8>)
 8002344:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8002346:	b118      	cbz	r0, 8002350 <_GLOBAL__sub_D_hadc1+0x34>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002348:	6999      	ldr	r1, [r3, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800234a:	1a09      	subs	r1, r1, r0
 800234c:	f01a fbec 	bl	801cb28 <_ZdlPvj>
	std::vector<PublishInterface> interfaces; 	// links interfaces to the publisher
	std::vector<Topic> topics;					// topics of the publisher
};

// Publishers class used to broadcast registers on the bus
class Publishers {
 8002350:	4825      	ldr	r0, [pc, #148]	@ (80023e8 <_GLOBAL__sub_D_hadc1+0xcc>)
 8002352:	f7ff fdf3 	bl	8001f3c <_ZNSt6vectorI9PublisherSaIS0_EED1Ev>
#include <stm32h7xx_hal.h>

#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

// CANProtocol class used to interface with every CANFD interface
class CANProtocol : public TemplateCommunicationProtocol<FDCAN_HandleTypeDef> {
 8002356:	4c25      	ldr	r4, [pc, #148]	@ (80023ec <_GLOBAL__sub_D_hadc1+0xd0>)
Communication communication;
 8002358:	4825      	ldr	r0, [pc, #148]	@ (80023f0 <_GLOBAL__sub_D_hadc1+0xd4>)
 800235a:	f7ff fd63 	bl	8001e24 <_ZN13CommunicationD1Ev>
MasterSubscribers subscribers;
 800235e:	4825      	ldr	r0, [pc, #148]	@ (80023f4 <_GLOBAL__sub_D_hadc1+0xd8>)
 8002360:	f7ff fd7e 	bl	8001e60 <_ZN17MasterSubscribersD1Ev>
 8002364:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <_GLOBAL__sub_D_hadc1+0xdc>)
	_M_deallocate(_M_impl._M_start,
 8002366:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002368:	6023      	str	r3, [r4, #0]
	if (__p)
 800236a:	b118      	cbz	r0, 8002374 <_GLOBAL__sub_D_hadc1+0x58>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800236c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800236e:	1a09      	subs	r1, r1, r0
 8002370:	f01a fbda 	bl	801cb28 <_ZdlPvj>
class TemplateCommunicationProtocol : public CommunicationProtocol {
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <_GLOBAL__sub_D_hadc1+0xe0>)
	_M_deallocate(_M_impl._M_start,
 8002376:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002378:	6023      	str	r3, [r4, #0]
	if (__p)
 800237a:	b120      	cbz	r0, 8002386 <_GLOBAL__sub_D_hadc1+0x6a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800237c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800237e:	1a09      	subs	r1, r1, r0
 8002380:	1089      	asrs	r1, r1, #2
 8002382:	f7fe fa89 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
#include "Protocols/Communication/Core/TemplateCommunicationProtocol.hpp"

#include "Definitions/CommunicationDefinition.h"

// UARTProtocol class used to interface with every UART interface
class UARTProtocol : public TemplateCommunicationProtocol<UART_HandleTypeDef> {
 8002386:	4c1e      	ldr	r4, [pc, #120]	@ (8002400 <_GLOBAL__sub_D_hadc1+0xe4>)
 8002388:	4818      	ldr	r0, [pc, #96]	@ (80023ec <_GLOBAL__sub_D_hadc1+0xd0>)
 800238a:	f7ff fe1d 	bl	8001fc8 <_ZN21CommunicationProtocolD1Ev>
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <_GLOBAL__sub_D_hadc1+0xe8>)
 8002390:	4620      	mov	r0, r4
 8002392:	f840 3b5c 	str.w	r3, [r0], #92
      }
 8002396:	f7fe fba3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800239a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800239e:	f7fe fb9f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023a2:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 80023a6:	f7fe fb9b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80023aa:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <_GLOBAL__sub_D_hadc1+0xec>)
	_M_deallocate(_M_impl._M_start,
 80023ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80023ae:	6023      	str	r3, [r4, #0]
	if (__p)
 80023b0:	b120      	cbz	r0, 80023bc <_GLOBAL__sub_D_hadc1+0xa0>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80023b2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80023b4:	1a09      	subs	r1, r1, r0
 80023b6:	1089      	asrs	r1, r1, #2
 80023b8:	f7fe fa6e 	bl	8000898 <_ZNSt12_Vector_baseI5TopicSaIS0_EE13_M_deallocateEPS0_j.part.0>
 80023bc:	4810      	ldr	r0, [pc, #64]	@ (8002400 <_GLOBAL__sub_D_hadc1+0xe4>)
 80023be:	f7ff fe03 	bl	8001fc8 <_ZN21CommunicationProtocolD1Ev>
Registers registers;
 80023c2:	4812      	ldr	r0, [pc, #72]	@ (800240c <_GLOBAL__sub_D_hadc1+0xf0>)
 80023c4:	f7ff fd73 	bl	8001eae <_ZN9RegistersD1Ev>
}
 80023c8:	bd10      	pop	{r4, pc}
 80023ca:	bf00      	nop
 80023cc:	24000290 	.word	0x24000290
 80023d0:	24000240 	.word	0x24000240
 80023d4:	240001fc 	.word	0x240001fc
 80023d8:	240001b8 	.word	0x240001b8
 80023dc:	24000380 	.word	0x24000380
 80023e0:	240003b8 	.word	0x240003b8
 80023e4:	24000454 	.word	0x24000454
 80023e8:	2400047c 	.word	0x2400047c
 80023ec:	2400112c 	.word	0x2400112c
 80023f0:	240010cc 	.word	0x240010cc
 80023f4:	24001108 	.word	0x24001108
 80023f8:	0801e074 	.word	0x0801e074
 80023fc:	0801de84 	.word	0x0801de84
 8002400:	24001180 	.word	0x24001180
 8002404:	0801e0b0 	.word	0x0801e0b0
 8002408:	0801de68 	.word	0x0801de68
 800240c:	240011e8 	.word	0x240011e8

08002410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b500      	push	{lr}
 8002412:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_MspInit+0x30>)
 8002416:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800241a:	f042 0202 	orr.w	r2, r2, #2
 800241e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	210f      	movs	r1, #15
 8002432:	f06f 0001 	mvn.w	r0, #1
 8002436:	f002 f881 	bl	800453c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	b003      	add	sp, #12
 800243c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002440:	58024400 	.word	0x58024400

08002444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002444:	b500      	push	{lr}
 8002446:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	2300      	movs	r3, #0
 800244a:	9305      	str	r3, [sp, #20]
 800244c:	9306      	str	r3, [sp, #24]
 800244e:	9307      	str	r3, [sp, #28]
 8002450:	9308      	str	r3, [sp, #32]
 8002452:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hadc->Instance==ADC1)
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	4a37      	ldr	r2, [pc, #220]	@ (8002534 <HAL_ADC_MspInit+0xf0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d008      	beq.n	800246e <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800245c:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <HAL_ADC_MspInit+0xf4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02f      	beq.n	80024c2 <HAL_ADC_MspInit+0x7e>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8002462:	4a36      	ldr	r2, [pc, #216]	@ (800253c <HAL_ADC_MspInit+0xf8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d056      	beq.n	8002516 <HAL_ADC_MspInit+0xd2>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002468:	b00b      	add	sp, #44	@ 0x2c
 800246a:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 800246e:	4a34      	ldr	r2, [pc, #208]	@ (8002540 <HAL_ADC_MspInit+0xfc>)
 8002470:	6813      	ldr	r3, [r2, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002476:	2b01      	cmp	r3, #1
 8002478:	d015      	beq.n	80024a6 <HAL_ADC_MspInit+0x62>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b32      	ldr	r3, [pc, #200]	@ (8002544 <HAL_ADC_MspInit+0x100>)
 800247c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002480:	f042 0202 	orr.w	r2, r2, #2
 8002484:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002494:	2302      	movs	r3, #2
 8002496:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3
 800249a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	a905      	add	r1, sp, #20
 800249e:	482a      	ldr	r0, [pc, #168]	@ (8002548 <HAL_ADC_MspInit+0x104>)
 80024a0:	f004 f9c6 	bl	8006830 <HAL_GPIO_Init>
 80024a4:	e7e0      	b.n	8002468 <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024a6:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_ADC_MspInit+0x100>)
 80024a8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80024b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	9b00      	ldr	r3, [sp, #0]
 80024c0:	e7db      	b.n	800247a <HAL_ADC_MspInit+0x36>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <HAL_ADC_MspInit+0xfc>)
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d015      	beq.n	80024fa <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_ADC_MspInit+0x100>)
 80024d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80024d4:	f042 0204 	orr.w	r2, r2, #4
 80024d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	9303      	str	r3, [sp, #12]
 80024e6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024e8:	2320      	movs	r3, #32
 80024ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ec:	2303      	movs	r3, #3
 80024ee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f0:	a905      	add	r1, sp, #20
 80024f2:	4816      	ldr	r0, [pc, #88]	@ (800254c <HAL_ADC_MspInit+0x108>)
 80024f4:	f004 f99c 	bl	8006830 <HAL_GPIO_Init>
 80024f8:	e7b6      	b.n	8002468 <HAL_ADC_MspInit+0x24>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_ADC_MspInit+0x100>)
 80024fc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002500:	f042 0220 	orr.w	r2, r2, #32
 8002504:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002508:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	9b02      	ldr	r3, [sp, #8]
 8002514:	e7db      	b.n	80024ce <HAL_ADC_MspInit+0x8a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_ADC_MspInit+0x100>)
 8002518:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800251c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002520:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800252c:	9304      	str	r3, [sp, #16]
 800252e:	9b04      	ldr	r3, [sp, #16]
}
 8002530:	e79a      	b.n	8002468 <HAL_ADC_MspInit+0x24>
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40022100 	.word	0x40022100
 800253c:	58026000 	.word	0x58026000
 8002540:	24002164 	.word	0x24002164
 8002544:	58024400 	.word	0x58024400
 8002548:	58020400 	.word	0x58020400
 800254c:	58020800 	.word	0x58020800

08002550 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002550:	b500      	push	{lr}
 8002552:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	2300      	movs	r3, #0
 8002556:	9305      	str	r3, [sp, #20]
 8002558:	9306      	str	r3, [sp, #24]
 800255a:	9307      	str	r3, [sp, #28]
 800255c:	9308      	str	r3, [sp, #32]
 800255e:	9309      	str	r3, [sp, #36]	@ 0x24
  if(hfdcan->Instance==FDCAN1)
 8002560:	6803      	ldr	r3, [r0, #0]
 8002562:	4a3b      	ldr	r2, [pc, #236]	@ (8002650 <HAL_FDCAN_MspInit+0x100>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d005      	beq.n	8002574 <HAL_FDCAN_MspInit+0x24>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 8002568:	4a3a      	ldr	r2, [pc, #232]	@ (8002654 <HAL_FDCAN_MspInit+0x104>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d039      	beq.n	80025e2 <HAL_FDCAN_MspInit+0x92>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800256e:	b00b      	add	sp, #44	@ 0x2c
 8002570:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002574:	4a38      	ldr	r2, [pc, #224]	@ (8002658 <HAL_FDCAN_MspInit+0x108>)
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800257c:	2b01      	cmp	r3, #1
 800257e:	d022      	beq.n	80025c6 <HAL_FDCAN_MspInit+0x76>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <HAL_FDCAN_MspInit+0x10c>)
 8002582:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800259a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800259e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80025a8:	2309      	movs	r3, #9
 80025aa:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	a905      	add	r1, sp, #20
 80025ae:	482c      	ldr	r0, [pc, #176]	@ (8002660 <HAL_FDCAN_MspInit+0x110>)
 80025b0:	f004 f93e 	bl	8006830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2105      	movs	r1, #5
 80025b8:	2013      	movs	r0, #19
 80025ba:	f001 ffbf 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80025be:	2013      	movs	r0, #19
 80025c0:	f001 ffcc 	bl	800455c <HAL_NVIC_EnableIRQ>
 80025c4:	e7d3      	b.n	800256e <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_FDCAN_MspInit+0x10c>)
 80025c8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 80025cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025d0:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80025d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80025d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	9b01      	ldr	r3, [sp, #4]
 80025e0:	e7ce      	b.n	8002580 <HAL_FDCAN_MspInit+0x30>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002658 <HAL_FDCAN_MspInit+0x108>)
 80025e4:	6813      	ldr	r3, [r2, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d021      	beq.n	8002632 <HAL_FDCAN_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_FDCAN_MspInit+0x10c>)
 80025f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80025f4:	f042 0202 	orr.w	r2, r2, #2
 80025f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80025fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	9304      	str	r3, [sp, #16]
 8002606:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002608:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800260c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002612:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002614:	2309      	movs	r3, #9
 8002616:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	a905      	add	r1, sp, #20
 800261a:	4812      	ldr	r0, [pc, #72]	@ (8002664 <HAL_FDCAN_MspInit+0x114>)
 800261c:	f004 f908 	bl	8006830 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2105      	movs	r1, #5
 8002624:	2014      	movs	r0, #20
 8002626:	f001 ff89 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800262a:	2014      	movs	r0, #20
 800262c:	f001 ff96 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 8002630:	e79d      	b.n	800256e <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_FDCAN_MspInit+0x10c>)
 8002634:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 8002638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263c:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8002640:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002648:	9303      	str	r3, [sp, #12]
 800264a:	9b03      	ldr	r3, [sp, #12]
 800264c:	e7cf      	b.n	80025ee <HAL_FDCAN_MspInit+0x9e>
 800264e:	bf00      	nop
 8002650:	4000a000 	.word	0x4000a000
 8002654:	4000a400 	.word	0x4000a400
 8002658:	24002160 	.word	0x24002160
 800265c:	58024400 	.word	0x58024400
 8002660:	58020000 	.word	0x58020000
 8002664:	58020400 	.word	0x58020400

08002668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	b0ba      	sub	sp, #232	@ 0xe8
 800266c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266e:	2100      	movs	r1, #0
 8002670:	9135      	str	r1, [sp, #212]	@ 0xd4
 8002672:	9136      	str	r1, [sp, #216]	@ 0xd8
 8002674:	9137      	str	r1, [sp, #220]	@ 0xdc
 8002676:	9138      	str	r1, [sp, #224]	@ 0xe0
 8002678:	9139      	str	r1, [sp, #228]	@ 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800267a:	22bc      	movs	r2, #188	@ 0xbc
 800267c:	a806      	add	r0, sp, #24
 800267e:	f01b fa0f 	bl	801daa0 <memset>
  if(hi2c->Instance==I2C1)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	4aa6      	ldr	r2, [pc, #664]	@ (8002920 <HAL_I2C_MspInit+0x2b8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d008      	beq.n	800269c <HAL_I2C_MspInit+0x34>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800268a:	4aa6      	ldr	r2, [pc, #664]	@ (8002924 <HAL_I2C_MspInit+0x2bc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d071      	beq.n	8002774 <HAL_I2C_MspInit+0x10c>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8002690:	4aa5      	ldr	r2, [pc, #660]	@ (8002928 <HAL_I2C_MspInit+0x2c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	f000 80da 	beq.w	800284c <HAL_I2C_MspInit+0x1e4>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002698:	b03a      	add	sp, #232	@ 0xe8
 800269a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800269c:	2308      	movs	r3, #8
 800269e:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a0:	a806      	add	r0, sp, #24
 80026a2:	f006 ffb7 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d15b      	bne.n	8002762 <HAL_I2C_MspInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4ea0      	ldr	r6, [pc, #640]	@ (800292c <HAL_I2C_MspInit+0x2c4>)
 80026ac:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80026b8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026c8:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ca:	2312      	movs	r3, #18
 80026cc:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2500      	movs	r5, #0
 80026d0:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d4:	2304      	movs	r3, #4
 80026d6:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d8:	a935      	add	r1, sp, #212	@ 0xd4
 80026da:	4895      	ldr	r0, [pc, #596]	@ (8002930 <HAL_I2C_MspInit+0x2c8>)
 80026dc:	f004 f8a8 	bl	8006830 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026e0:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80026e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026e8:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 80026ec:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 80026f8:	488e      	ldr	r0, [pc, #568]	@ (8002934 <HAL_I2C_MspInit+0x2cc>)
 80026fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002938 <HAL_I2C_MspInit+0x2d0>)
 80026fc:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80026fe:	2322      	movs	r3, #34	@ 0x22
 8002700:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002702:	2340      	movs	r3, #64	@ 0x40
 8002704:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002706:	60c5      	str	r5, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800270c:	6103      	str	r3, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800270e:	6145      	str	r5, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002710:	6185      	str	r5, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002712:	61c5      	str	r5, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002714:	6205      	str	r5, [r0, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002716:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002718:	f002 f936 	bl	8004988 <HAL_DMA_Init>
 800271c:	bb20      	cbnz	r0, 8002768 <HAL_I2C_MspInit+0x100>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800271e:	4b85      	ldr	r3, [pc, #532]	@ (8002934 <HAL_I2C_MspInit+0x2cc>)
 8002720:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002722:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA2_Stream1;
 8002724:	4885      	ldr	r0, [pc, #532]	@ (800293c <HAL_I2C_MspInit+0x2d4>)
 8002726:	4b86      	ldr	r3, [pc, #536]	@ (8002940 <HAL_I2C_MspInit+0x2d8>)
 8002728:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800272a:	2321      	movs	r3, #33	@ 0x21
 800272c:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272e:	2300      	movs	r3, #0
 8002730:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002732:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002738:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273a:	6143      	str	r3, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800273c:	6183      	str	r3, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800273e:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002740:	6203      	str	r3, [r0, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002742:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002744:	f002 f920 	bl	8004988 <HAL_DMA_Init>
 8002748:	b988      	cbnz	r0, 800276e <HAL_I2C_MspInit+0x106>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800274a:	4b7c      	ldr	r3, [pc, #496]	@ (800293c <HAL_I2C_MspInit+0x2d4>)
 800274c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800274e:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2105      	movs	r1, #5
 8002754:	201f      	movs	r0, #31
 8002756:	f001 fef1 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800275a:	201f      	movs	r0, #31
 800275c:	f001 fefe 	bl	800455c <HAL_NVIC_EnableIRQ>
 8002760:	e79a      	b.n	8002698 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 8002762:	f7fe f9bb 	bl	8000adc <Error_Handler>
 8002766:	e7a0      	b.n	80026aa <HAL_I2C_MspInit+0x42>
      Error_Handler();
 8002768:	f7fe f9b8 	bl	8000adc <Error_Handler>
 800276c:	e7d7      	b.n	800271e <HAL_I2C_MspInit+0xb6>
      Error_Handler();
 800276e:	f7fe f9b5 	bl	8000adc <Error_Handler>
 8002772:	e7ea      	b.n	800274a <HAL_I2C_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002774:	2308      	movs	r3, #8
 8002776:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002778:	a806      	add	r0, sp, #24
 800277a:	f006 ff4b 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	2800      	cmp	r0, #0
 8002780:	d15b      	bne.n	800283a <HAL_I2C_MspInit+0x1d2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	4e6a      	ldr	r6, [pc, #424]	@ (800292c <HAL_I2C_MspInit+0x2c4>)
 8002784:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002790:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800279c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027a0:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a2:	2312      	movs	r3, #18
 80027a4:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2500      	movs	r5, #0
 80027a8:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027ac:	2304      	movs	r3, #4
 80027ae:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	a935      	add	r1, sp, #212	@ 0xd4
 80027b2:	485f      	ldr	r0, [pc, #380]	@ (8002930 <HAL_I2C_MspInit+0x2c8>)
 80027b4:	f004 f83c 	bl	8006830 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027b8:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80027bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027c0:	f8c6 30e8 	str.w	r3, [r6, #232]	@ 0xe8
 80027c4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	@ 0xe8
 80027c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA2_Stream2;
 80027d0:	485c      	ldr	r0, [pc, #368]	@ (8002944 <HAL_I2C_MspInit+0x2dc>)
 80027d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002948 <HAL_I2C_MspInit+0x2e0>)
 80027d4:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80027d6:	2324      	movs	r3, #36	@ 0x24
 80027d8:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027da:	2340      	movs	r3, #64	@ 0x40
 80027dc:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027de:	60c5      	str	r5, [r0, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027e4:	6103      	str	r3, [r0, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027e6:	6145      	str	r5, [r0, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027e8:	6185      	str	r5, [r0, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80027ea:	61c5      	str	r5, [r0, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027ec:	6205      	str	r5, [r0, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ee:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80027f0:	f002 f8ca 	bl	8004988 <HAL_DMA_Init>
 80027f4:	bb20      	cbnz	r0, 8002840 <HAL_I2C_MspInit+0x1d8>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80027f6:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_I2C_MspInit+0x2dc>)
 80027f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027fa:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c2_rx.Instance = DMA2_Stream3;
 80027fc:	4853      	ldr	r0, [pc, #332]	@ (800294c <HAL_I2C_MspInit+0x2e4>)
 80027fe:	4b54      	ldr	r3, [pc, #336]	@ (8002950 <HAL_I2C_MspInit+0x2e8>)
 8002800:	6003      	str	r3, [r0, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8002802:	2323      	movs	r3, #35	@ 0x23
 8002804:	6043      	str	r3, [r0, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002806:	2300      	movs	r3, #0
 8002808:	6083      	str	r3, [r0, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280a:	60c3      	str	r3, [r0, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800280c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002810:	6102      	str	r2, [r0, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002812:	6143      	str	r3, [r0, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	6183      	str	r3, [r0, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002816:	61c3      	str	r3, [r0, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002818:	6203      	str	r3, [r0, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800281a:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800281c:	f002 f8b4 	bl	8004988 <HAL_DMA_Init>
 8002820:	b988      	cbnz	r0, 8002846 <HAL_I2C_MspInit+0x1de>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002822:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_I2C_MspInit+0x2e4>)
 8002824:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002826:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2105      	movs	r1, #5
 800282c:	2021      	movs	r0, #33	@ 0x21
 800282e:	f001 fe85 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002832:	2021      	movs	r0, #33	@ 0x21
 8002834:	f001 fe92 	bl	800455c <HAL_NVIC_EnableIRQ>
 8002838:	e72e      	b.n	8002698 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 800283a:	f7fe f94f 	bl	8000adc <Error_Handler>
 800283e:	e7a0      	b.n	8002782 <HAL_I2C_MspInit+0x11a>
      Error_Handler();
 8002840:	f7fe f94c 	bl	8000adc <Error_Handler>
 8002844:	e7d7      	b.n	80027f6 <HAL_I2C_MspInit+0x18e>
      Error_Handler();
 8002846:	f7fe f949 	bl	8000adc <Error_Handler>
 800284a:	e7ea      	b.n	8002822 <HAL_I2C_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800284c:	2310      	movs	r3, #16
 800284e:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002850:	a806      	add	r0, sp, #24
 8002852:	f006 fedf 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002856:	2800      	cmp	r0, #0
 8002858:	d158      	bne.n	800290c <HAL_I2C_MspInit+0x2a4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285a:	4e34      	ldr	r6, [pc, #208]	@ (800292c <HAL_I2C_MspInit+0x2c4>)
 800285c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 8002868:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	9304      	str	r3, [sp, #16]
 8002872:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002874:	23c0      	movs	r3, #192	@ 0xc0
 8002876:	9335      	str	r3, [sp, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002878:	2312      	movs	r3, #18
 800287a:	9336      	str	r3, [sp, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2500      	movs	r5, #0
 800287e:	9537      	str	r5, [sp, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	9538      	str	r5, [sp, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002882:	2306      	movs	r3, #6
 8002884:	9339      	str	r3, [sp, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	a935      	add	r1, sp, #212	@ 0xd4
 8002888:	4829      	ldr	r0, [pc, #164]	@ (8002930 <HAL_I2C_MspInit+0x2c8>)
 800288a:	f003 ffd1 	bl	8006830 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800288e:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 8002892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002896:	f8c6 30f4 	str.w	r3, [r6, #244]	@ 0xf4
 800289a:	f8d6 30f4 	ldr.w	r3, [r6, #244]	@ 0xf4
 800289e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a2:	9305      	str	r3, [sp, #20]
 80028a4:	9b05      	ldr	r3, [sp, #20]
    hdma_i2c4_tx.Instance = BDMA_Channel0;
 80028a6:	482b      	ldr	r0, [pc, #172]	@ (8002954 <HAL_I2C_MspInit+0x2ec>)
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_I2C_MspInit+0x2f0>)
 80028aa:	6003      	str	r3, [r0, #0]
    hdma_i2c4_tx.Init.Request = BDMA_REQUEST_I2C4_TX;
 80028ac:	230e      	movs	r3, #14
 80028ae:	6043      	str	r3, [r0, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b0:	2340      	movs	r3, #64	@ 0x40
 80028b2:	6083      	str	r3, [r0, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b4:	60c5      	str	r5, [r0, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028ba:	6103      	str	r3, [r0, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	6145      	str	r5, [r0, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028be:	6185      	str	r5, [r0, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80028c0:	61c5      	str	r5, [r0, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028c2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80028c4:	f002 f860 	bl	8004988 <HAL_DMA_Init>
 80028c8:	bb18      	cbnz	r0, 8002912 <HAL_I2C_MspInit+0x2aa>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_I2C_MspInit+0x2ec>)
 80028cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80028ce:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_i2c4_rx.Instance = BDMA_Channel1;
 80028d0:	4822      	ldr	r0, [pc, #136]	@ (800295c <HAL_I2C_MspInit+0x2f4>)
 80028d2:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <HAL_I2C_MspInit+0x2f8>)
 80028d4:	6003      	str	r3, [r0, #0]
    hdma_i2c4_rx.Init.Request = BDMA_REQUEST_I2C4_RX;
 80028d6:	230d      	movs	r3, #13
 80028d8:	6043      	str	r3, [r0, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028da:	2300      	movs	r3, #0
 80028dc:	6083      	str	r3, [r0, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028de:	60c3      	str	r3, [r0, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e4:	6102      	str	r2, [r0, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e6:	6143      	str	r3, [r0, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e8:	6183      	str	r3, [r0, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80028ea:	61c3      	str	r3, [r0, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ec:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80028ee:	f002 f84b 	bl	8004988 <HAL_DMA_Init>
 80028f2:	b988      	cbnz	r0, 8002918 <HAL_I2C_MspInit+0x2b0>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c4_rx);
 80028f4:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_I2C_MspInit+0x2f4>)
 80028f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80028f8:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2105      	movs	r1, #5
 80028fe:	205f      	movs	r0, #95	@ 0x5f
 8002900:	f001 fe1c 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8002904:	205f      	movs	r0, #95	@ 0x5f
 8002906:	f001 fe29 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 800290a:	e6c5      	b.n	8002698 <HAL_I2C_MspInit+0x30>
      Error_Handler();
 800290c:	f7fe f8e6 	bl	8000adc <Error_Handler>
 8002910:	e7a3      	b.n	800285a <HAL_I2C_MspInit+0x1f2>
      Error_Handler();
 8002912:	f7fe f8e3 	bl	8000adc <Error_Handler>
 8002916:	e7d8      	b.n	80028ca <HAL_I2C_MspInit+0x262>
      Error_Handler();
 8002918:	f7fe f8e0 	bl	8000adc <Error_Handler>
 800291c:	e7ea      	b.n	80028f4 <HAL_I2C_MspInit+0x28c>
 800291e:	bf00      	nop
 8002920:	40005400 	.word	0x40005400
 8002924:	40005800 	.word	0x40005800
 8002928:	58001c00 	.word	0x58001c00
 800292c:	58024400 	.word	0x58024400
 8002930:	58020400 	.word	0x58020400
 8002934:	24001d98 	.word	0x24001d98
 8002938:	40020410 	.word	0x40020410
 800293c:	24001d20 	.word	0x24001d20
 8002940:	40020428 	.word	0x40020428
 8002944:	24001ca8 	.word	0x24001ca8
 8002948:	40020440 	.word	0x40020440
 800294c:	24001c30 	.word	0x24001c30
 8002950:	40020458 	.word	0x40020458
 8002954:	24001bb8 	.word	0x24001bb8
 8002958:	58025408 	.word	0x58025408
 800295c:	24001b40 	.word	0x24001b40
 8002960:	5802541c 	.word	0x5802541c

08002964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002964:	b500      	push	{lr}
 8002966:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 8002968:	6803      	ldr	r3, [r0, #0]
 800296a:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <HAL_TIM_Base_MspInit+0x84>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d008      	beq.n	8002982 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002970:	4a1e      	ldr	r2, [pc, #120]	@ (80029ec <HAL_TIM_Base_MspInit+0x88>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_TIM_Base_MspInit+0x3a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_TIM_Base_MspInit+0x8c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d01e      	beq.n	80029ba <HAL_TIM_Base_MspInit+0x56>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800297c:	b005      	add	sp, #20
 800297e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002982:	4b1c      	ldr	r3, [pc, #112]	@ (80029f4 <HAL_TIM_Base_MspInit+0x90>)
 8002984:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	e7ee      	b.n	800297c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299e:	4b15      	ldr	r3, [pc, #84]	@ (80029f4 <HAL_TIM_Base_MspInit+0x90>)
 80029a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80029a4:	f042 0202 	orr.w	r2, r2, #2
 80029a8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80029ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	9302      	str	r3, [sp, #8]
 80029b6:	9b02      	ldr	r3, [sp, #8]
 80029b8:	e7e0      	b.n	800297c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_TIM_Base_MspInit+0x90>)
 80029bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80029c0:	f042 0204 	orr.w	r2, r2, #4
 80029c4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80029c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	9303      	str	r3, [sp, #12]
 80029d2:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2105      	movs	r1, #5
 80029d8:	201e      	movs	r0, #30
 80029da:	f001 fdaf 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029de:	201e      	movs	r0, #30
 80029e0:	f001 fdbc 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 80029e4:	e7ca      	b.n	800297c <HAL_TIM_Base_MspInit+0x18>
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	58024400 	.word	0x58024400

080029f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029f8:	b500      	push	{lr}
 80029fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	2300      	movs	r3, #0
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	9304      	str	r3, [sp, #16]
 8002a02:	9305      	str	r3, [sp, #20]
 8002a04:	9306      	str	r3, [sp, #24]
 8002a06:	9307      	str	r3, [sp, #28]
  if(htim_encoder->Instance==TIM2)
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0e:	d002      	beq.n	8002a16 <HAL_TIM_Encoder_MspInit+0x1e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a10:	b009      	add	sp, #36	@ 0x24
 8002a12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_TIM_Encoder_MspInit+0x68>)
 8002a18:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002a24:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002a28:	f002 0201 	and.w	r2, r2, #1
 8002a2c:	9201      	str	r2, [sp, #4]
 8002a2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a50:	2301      	movs	r3, #1
 8002a52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	a903      	add	r1, sp, #12
 8002a56:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <HAL_TIM_Encoder_MspInit+0x6c>)
 8002a58:	f003 feea 	bl	8006830 <HAL_GPIO_Init>
}
 8002a5c:	e7d8      	b.n	8002a10 <HAL_TIM_Encoder_MspInit+0x18>
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	58020000 	.word	0x58020000

08002a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a68:	b500      	push	{lr}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9303      	str	r3, [sp, #12]
 8002a70:	9304      	str	r3, [sp, #16]
 8002a72:	9305      	str	r3, [sp, #20]
 8002a74:	9306      	str	r3, [sp, #24]
 8002a76:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8002a78:	6803      	ldr	r3, [r0, #0]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_TIM_MspPostInit+0x84>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d005      	beq.n	8002a8c <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_TIM_MspPostInit+0x88>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01b      	beq.n	8002abe <HAL_TIM_MspPostInit+0x56>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a86:	b009      	add	sp, #36	@ 0x24
 8002a88:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_TIM_MspPostInit+0x8c>)
 8002a8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002a92:	f042 0210 	orr.w	r2, r2, #16
 8002a96:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aaa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	a903      	add	r1, sp, #12
 8002ab6:	4810      	ldr	r0, [pc, #64]	@ (8002af8 <HAL_TIM_MspPostInit+0x90>)
 8002ab8:	f003 feba 	bl	8006830 <HAL_GPIO_Init>
 8002abc:	e7e3      	b.n	8002a86 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_TIM_MspPostInit+0x8c>)
 8002ac0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002ac4:	f042 0202 	orr.w	r2, r2, #2
 8002ac8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin;
 8002ad8:	2330      	movs	r3, #48	@ 0x30
 8002ada:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ae0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	a903      	add	r1, sp, #12
 8002ae4:	4805      	ldr	r0, [pc, #20]	@ (8002afc <HAL_TIM_MspPostInit+0x94>)
 8002ae6:	f003 fea3 	bl	8006830 <HAL_GPIO_Init>
}
 8002aea:	e7cc      	b.n	8002a86 <HAL_TIM_MspPostInit+0x1e>
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58021000 	.word	0x58021000
 8002afc:	58020400 	.word	0x58020400

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	b0c1      	sub	sp, #260	@ 0x104
 8002b04:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	2100      	movs	r1, #0
 8002b08:	913b      	str	r1, [sp, #236]	@ 0xec
 8002b0a:	913c      	str	r1, [sp, #240]	@ 0xf0
 8002b0c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8002b0e:	913e      	str	r1, [sp, #248]	@ 0xf8
 8002b10:	913f      	str	r1, [sp, #252]	@ 0xfc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b12:	22bc      	movs	r2, #188	@ 0xbc
 8002b14:	a80c      	add	r0, sp, #48	@ 0x30
 8002b16:	f01a ffc3 	bl	801daa0 <memset>
  if(huart->Instance==UART5)
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002d1c <HAL_UART_MspInit+0x21c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d011      	beq.n	8002b46 <HAL_UART_MspInit+0x46>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 8002b22:	4a7f      	ldr	r2, [pc, #508]	@ (8002d20 <HAL_UART_MspInit+0x220>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f000 808a 	beq.w	8002c3e <HAL_UART_MspInit+0x13e>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d24 <HAL_UART_MspInit+0x224>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f000 8117 	beq.w	8002d60 <HAL_UART_MspInit+0x260>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8002b32:	4a7d      	ldr	r2, [pc, #500]	@ (8002d28 <HAL_UART_MspInit+0x228>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f000 8180 	beq.w	8002e3a <HAL_UART_MspInit+0x33a>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d2c <HAL_UART_MspInit+0x22c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	f000 8201 	beq.w	8002f44 <HAL_UART_MspInit+0x444>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b42:	b041      	add	sp, #260	@ 0x104
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b46:	2302      	movs	r3, #2
 8002b48:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4a:	a80c      	add	r0, sp, #48	@ 0x30
 8002b4c:	f006 fd62 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d16b      	bne.n	8002c2c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b54:	4b76      	ldr	r3, [pc, #472]	@ (8002d30 <HAL_UART_MspInit+0x230>)
 8002b56:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b5a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b5e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002b62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002b66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b6a:	9200      	str	r2, [sp, #0]
 8002b6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b72:	f042 0204 	orr.w	r2, r2, #4
 8002b76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b7e:	f002 0204 	and.w	r2, r2, #4
 8002b82:	9201      	str	r2, [sp, #4]
 8002b84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = TX5_EXT_Pin;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba2:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2702      	movs	r7, #2
 8002ba6:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2500      	movs	r5, #0
 8002baa:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bae:	2608      	movs	r6, #8
 8002bb0:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(TX5_EXT_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	a93b      	add	r1, sp, #236	@ 0xec
 8002bb4:	485f      	ldr	r0, [pc, #380]	@ (8002d34 <HAL_UART_MspInit+0x234>)
 8002bb6:	f003 fe3b 	bl	8006830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX5_EXT_Pin;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bc4:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(RX5_EXT_GPIO_Port, &GPIO_InitStruct);
 8002bc6:	a93b      	add	r1, sp, #236	@ 0xec
 8002bc8:	485b      	ldr	r0, [pc, #364]	@ (8002d38 <HAL_UART_MspInit+0x238>)
 8002bca:	f003 fe31 	bl	8006830 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA2_Stream4;
 8002bce:	485b      	ldr	r0, [pc, #364]	@ (8002d3c <HAL_UART_MspInit+0x23c>)
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HAL_UART_MspInit+0x240>)
 8002bd2:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8002bd4:	2342      	movs	r3, #66	@ 0x42
 8002bd6:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd8:	2340      	movs	r3, #64	@ 0x40
 8002bda:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bdc:	60c5      	str	r5, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002be2:	6103      	str	r3, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be4:	6145      	str	r5, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be6:	6185      	str	r5, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002be8:	61c5      	str	r5, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bea:	6205      	str	r5, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bec:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002bee:	f001 fecb 	bl	8004988 <HAL_DMA_Init>
 8002bf2:	b9f0      	cbnz	r0, 8002c32 <HAL_UART_MspInit+0x132>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002bf4:	4b51      	ldr	r3, [pc, #324]	@ (8002d3c <HAL_UART_MspInit+0x23c>)
 8002bf6:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002bf8:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_uart5_rx.Instance = DMA2_Stream5;
 8002bfa:	4852      	ldr	r0, [pc, #328]	@ (8002d44 <HAL_UART_MspInit+0x244>)
 8002bfc:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_UART_MspInit+0x248>)
 8002bfe:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002c00:	2341      	movs	r3, #65	@ 0x41
 8002c02:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	6083      	str	r3, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c08:	60c3      	str	r3, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c0e:	6102      	str	r2, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c10:	6143      	str	r3, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c12:	6183      	str	r3, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c18:	61c2      	str	r2, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c1a:	6203      	str	r3, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002c1e:	f001 feb3 	bl	8004988 <HAL_DMA_Init>
 8002c22:	b948      	cbnz	r0, 8002c38 <HAL_UART_MspInit+0x138>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002c24:	4b47      	ldr	r3, [pc, #284]	@ (8002d44 <HAL_UART_MspInit+0x244>)
 8002c26:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002c28:	639c      	str	r4, [r3, #56]	@ 0x38
 8002c2a:	e78a      	b.n	8002b42 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002c2c:	f7fd ff56 	bl	8000adc <Error_Handler>
 8002c30:	e790      	b.n	8002b54 <HAL_UART_MspInit+0x54>
      Error_Handler();
 8002c32:	f7fd ff53 	bl	8000adc <Error_Handler>
 8002c36:	e7dd      	b.n	8002bf4 <HAL_UART_MspInit+0xf4>
      Error_Handler();
 8002c38:	f7fd ff50 	bl	8000adc <Error_Handler>
 8002c3c:	e7f2      	b.n	8002c24 <HAL_UART_MspInit+0x124>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c42:	a80c      	add	r0, sp, #48	@ 0x30
 8002c44:	f006 fce6 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d15d      	bne.n	8002d08 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c4c:	4b38      	ldr	r3, [pc, #224]	@ (8002d30 <HAL_UART_MspInit+0x230>)
 8002c4e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c52:	f042 0210 	orr.w	r2, r2, #16
 8002c56:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002c5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002c5e:	f002 0210 	and.w	r2, r2, #16
 8002c62:	9203      	str	r2, [sp, #12]
 8002c64:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TX1_FRONT_Pin|RX1_FRONT_Pin;
 8002c7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c82:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2500      	movs	r5, #0
 8002c8a:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8c:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	a93b      	add	r1, sp, #236	@ 0xec
 8002c94:	482d      	ldr	r0, [pc, #180]	@ (8002d4c <HAL_UART_MspInit+0x24c>)
 8002c96:	f003 fdcb 	bl	8006830 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8002c9a:	482d      	ldr	r0, [pc, #180]	@ (8002d50 <HAL_UART_MspInit+0x250>)
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <HAL_UART_MspInit+0x254>)
 8002c9e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ca0:	232a      	movs	r3, #42	@ 0x2a
 8002ca2:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ca4:	2340      	movs	r3, #64	@ 0x40
 8002ca6:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca8:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cae:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb0:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb2:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb4:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cb6:	6205      	str	r5, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cba:	f001 fe65 	bl	8004988 <HAL_DMA_Init>
 8002cbe:	bb30      	cbnz	r0, 8002d0e <HAL_UART_MspInit+0x20e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cc0:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <HAL_UART_MspInit+0x250>)
 8002cc2:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002cc4:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8002cc6:	4824      	ldr	r0, [pc, #144]	@ (8002d58 <HAL_UART_MspInit+0x258>)
 8002cc8:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_UART_MspInit+0x25c>)
 8002cca:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002ccc:	2329      	movs	r3, #41	@ 0x29
 8002cce:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cda:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cdc:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cde:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce4:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce6:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce8:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cea:	f001 fe4d 	bl	8004988 <HAL_DMA_Init>
 8002cee:	b988      	cbnz	r0, 8002d14 <HAL_UART_MspInit+0x214>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_UART_MspInit+0x258>)
 8002cf2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002cf4:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2105      	movs	r1, #5
 8002cfa:	2025      	movs	r0, #37	@ 0x25
 8002cfc:	f001 fc1e 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d00:	2025      	movs	r0, #37	@ 0x25
 8002d02:	f001 fc2b 	bl	800455c <HAL_NVIC_EnableIRQ>
 8002d06:	e71c      	b.n	8002b42 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002d08:	f7fd fee8 	bl	8000adc <Error_Handler>
 8002d0c:	e79e      	b.n	8002c4c <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002d0e:	f7fd fee5 	bl	8000adc <Error_Handler>
 8002d12:	e7d5      	b.n	8002cc0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8002d14:	f7fd fee2 	bl	8000adc <Error_Handler>
 8002d18:	e7ea      	b.n	8002cf0 <HAL_UART_MspInit+0x1f0>
 8002d1a:	bf00      	nop
 8002d1c:	40005000 	.word	0x40005000
 8002d20:	40011000 	.word	0x40011000
 8002d24:	40004400 	.word	0x40004400
 8002d28:	40004800 	.word	0x40004800
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58020800 	.word	0x58020800
 8002d38:	58020c00 	.word	0x58020c00
 8002d3c:	240016c8 	.word	0x240016c8
 8002d40:	40020470 	.word	0x40020470
 8002d44:	24001650 	.word	0x24001650
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	58020000 	.word	0x58020000
 8002d50:	240015d8 	.word	0x240015d8
 8002d54:	40020010 	.word	0x40020010
 8002d58:	24001560 	.word	0x24001560
 8002d5c:	40020028 	.word	0x40020028
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d64:	a80c      	add	r0, sp, #48	@ 0x30
 8002d66:	f006 fc55 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d15c      	bne.n	8002e28 <HAL_UART_MspInit+0x328>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003010 <HAL_UART_MspInit+0x510>)
 8002d70:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002d74:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d78:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002d7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002d80:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002d84:	9205      	str	r2, [sp, #20]
 8002d86:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	9306      	str	r3, [sp, #24]
 8002d9e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = TX2_PIC_Pin|RX2_PIC_Pin;
 8002da0:	230c      	movs	r3, #12
 8002da2:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2500      	movs	r5, #0
 8002daa:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dae:	2307      	movs	r3, #7
 8002db0:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db2:	a93b      	add	r1, sp, #236	@ 0xec
 8002db4:	4897      	ldr	r0, [pc, #604]	@ (8003014 <HAL_UART_MspInit+0x514>)
 8002db6:	f003 fd3b 	bl	8006830 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream2;
 8002dba:	4897      	ldr	r0, [pc, #604]	@ (8003018 <HAL_UART_MspInit+0x518>)
 8002dbc:	4b97      	ldr	r3, [pc, #604]	@ (800301c <HAL_UART_MspInit+0x51c>)
 8002dbe:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002dc0:	232c      	movs	r3, #44	@ 0x2c
 8002dc2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc4:	2340      	movs	r3, #64	@ 0x40
 8002dc6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dce:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd0:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd2:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dd4:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd6:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dda:	f001 fdd5 	bl	8004988 <HAL_DMA_Init>
 8002dde:	bb30      	cbnz	r0, 8002e2e <HAL_UART_MspInit+0x32e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002de0:	4b8d      	ldr	r3, [pc, #564]	@ (8003018 <HAL_UART_MspInit+0x518>)
 8002de2:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002de4:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002de6:	488e      	ldr	r0, [pc, #568]	@ (8003020 <HAL_UART_MspInit+0x520>)
 8002de8:	4b8e      	ldr	r3, [pc, #568]	@ (8003024 <HAL_UART_MspInit+0x524>)
 8002dea:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002dec:	232b      	movs	r3, #43	@ 0x2b
 8002dee:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df0:	2300      	movs	r3, #0
 8002df2:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df4:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002df6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dfa:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dfc:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dfe:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e04:	61c2      	str	r2, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e06:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e08:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e0a:	f001 fdbd 	bl	8004988 <HAL_DMA_Init>
 8002e0e:	b988      	cbnz	r0, 8002e34 <HAL_UART_MspInit+0x334>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e10:	4b83      	ldr	r3, [pc, #524]	@ (8003020 <HAL_UART_MspInit+0x520>)
 8002e12:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002e14:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	2026      	movs	r0, #38	@ 0x26
 8002e1c:	f001 fb8e 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e20:	2026      	movs	r0, #38	@ 0x26
 8002e22:	f001 fb9b 	bl	800455c <HAL_NVIC_EnableIRQ>
 8002e26:	e68c      	b.n	8002b42 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002e28:	f7fd fe58 	bl	8000adc <Error_Handler>
 8002e2c:	e79f      	b.n	8002d6e <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8002e2e:	f7fd fe55 	bl	8000adc <Error_Handler>
 8002e32:	e7d5      	b.n	8002de0 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8002e34:	f7fd fe52 	bl	8000adc <Error_Handler>
 8002e38:	e7ea      	b.n	8002e10 <HAL_UART_MspInit+0x310>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e3e:	a80c      	add	r0, sp, #48	@ 0x30
 8002e40:	f006 fbe8 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d174      	bne.n	8002f32 <HAL_UART_MspInit+0x432>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e48:	4b71      	ldr	r3, [pc, #452]	@ (8003010 <HAL_UART_MspInit+0x510>)
 8002e4a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e4e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002e52:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002e56:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e5a:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002e5e:	9207      	str	r2, [sp, #28]
 8002e60:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e66:	f042 0202 	orr.w	r2, r2, #2
 8002e6a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002e6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e72:	f002 0202 	and.w	r2, r2, #2
 8002e76:	9208      	str	r2, [sp, #32]
 8002e78:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e7e:	f042 0208 	orr.w	r2, r2, #8
 8002e82:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = DE3_RS485_Pin;
 8002e92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e96:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e98:	2702      	movs	r7, #2
 8002e9a:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea2:	2607      	movs	r6, #7
 8002ea4:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(DE3_RS485_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	a93b      	add	r1, sp, #236	@ 0xec
 8002ea8:	485f      	ldr	r0, [pc, #380]	@ (8003028 <HAL_UART_MspInit+0x528>)
 8002eaa:	f003 fcc1 	bl	8006830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_RS485_Pin|RX3_RS485_Pin;
 8002eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002eb2:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	973c      	str	r7, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002eba:	963f      	str	r6, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebc:	a93b      	add	r1, sp, #236	@ 0xec
 8002ebe:	485b      	ldr	r0, [pc, #364]	@ (800302c <HAL_UART_MspInit+0x52c>)
 8002ec0:	f003 fcb6 	bl	8006830 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002ec4:	485a      	ldr	r0, [pc, #360]	@ (8003030 <HAL_UART_MspInit+0x530>)
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <HAL_UART_MspInit+0x534>)
 8002ec8:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002eca:	232e      	movs	r3, #46	@ 0x2e
 8002ecc:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ece:	2340      	movs	r3, #64	@ 0x40
 8002ed0:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed2:	60c5      	str	r5, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ed8:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eda:	6145      	str	r5, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002edc:	6185      	str	r5, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ede:	61c5      	str	r5, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ee0:	6205      	str	r5, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee2:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ee4:	f001 fd50 	bl	8004988 <HAL_DMA_Init>
 8002ee8:	bb30      	cbnz	r0, 8002f38 <HAL_UART_MspInit+0x438>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002eea:	4b51      	ldr	r3, [pc, #324]	@ (8003030 <HAL_UART_MspInit+0x530>)
 8002eec:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002eee:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8002ef0:	4851      	ldr	r0, [pc, #324]	@ (8003038 <HAL_UART_MspInit+0x538>)
 8002ef2:	4b52      	ldr	r3, [pc, #328]	@ (800303c <HAL_UART_MspInit+0x53c>)
 8002ef4:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002ef6:	232d      	movs	r3, #45	@ 0x2d
 8002ef8:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002efa:	2300      	movs	r3, #0
 8002efc:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efe:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f04:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f06:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f08:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f0e:	61c2      	str	r2, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f10:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f12:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f14:	f001 fd38 	bl	8004988 <HAL_DMA_Init>
 8002f18:	b988      	cbnz	r0, 8002f3e <HAL_UART_MspInit+0x43e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f1a:	4b47      	ldr	r3, [pc, #284]	@ (8003038 <HAL_UART_MspInit+0x538>)
 8002f1c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002f1e:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2105      	movs	r1, #5
 8002f24:	2027      	movs	r0, #39	@ 0x27
 8002f26:	f001 fb09 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f2a:	2027      	movs	r0, #39	@ 0x27
 8002f2c:	f001 fb16 	bl	800455c <HAL_NVIC_EnableIRQ>
 8002f30:	e607      	b.n	8002b42 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002f32:	f7fd fdd3 	bl	8000adc <Error_Handler>
 8002f36:	e787      	b.n	8002e48 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8002f38:	f7fd fdd0 	bl	8000adc <Error_Handler>
 8002f3c:	e7d5      	b.n	8002eea <HAL_UART_MspInit+0x3ea>
      Error_Handler();
 8002f3e:	f7fd fdcd 	bl	8000adc <Error_Handler>
 8002f42:	e7ea      	b.n	8002f1a <HAL_UART_MspInit+0x41a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002f44:	2301      	movs	r3, #1
 8002f46:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f48:	a80c      	add	r0, sp, #48	@ 0x30
 8002f4a:	f006 fb63 	bl	8009614 <HAL_RCCEx_PeriphCLKConfig>
 8002f4e:	2800      	cmp	r0, #0
 8002f50:	f040 8080 	bne.w	8003054 <HAL_UART_MspInit+0x554>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f54:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_UART_MspInit+0x510>)
 8002f56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f5a:	f042 0220 	orr.w	r2, r2, #32
 8002f5e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002f62:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f66:	f002 0220 	and.w	r2, r2, #32
 8002f6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002f72:	f042 0204 	orr.w	r2, r2, #4
 8002f76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = TX6_BACK_Pin|RX6_BACK_Pin;
 8002f86:	23c0      	movs	r3, #192	@ 0xc0
 8002f88:	933b      	str	r3, [sp, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	933c      	str	r3, [sp, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2500      	movs	r5, #0
 8002f90:	953d      	str	r5, [sp, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	953e      	str	r5, [sp, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f94:	2307      	movs	r3, #7
 8002f96:	933f      	str	r3, [sp, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	a93b      	add	r1, sp, #236	@ 0xec
 8002f9a:	4829      	ldr	r0, [pc, #164]	@ (8003040 <HAL_UART_MspInit+0x540>)
 8002f9c:	f003 fc48 	bl	8006830 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA1_Stream6;
 8002fa0:	4828      	ldr	r0, [pc, #160]	@ (8003044 <HAL_UART_MspInit+0x544>)
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_UART_MspInit+0x548>)
 8002fa4:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002fa6:	2348      	movs	r3, #72	@ 0x48
 8002fa8:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002faa:	2340      	movs	r3, #64	@ 0x40
 8002fac:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fae:	60c5      	str	r5, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fb4:	6103      	str	r3, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fb6:	6145      	str	r5, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fb8:	6185      	str	r5, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002fba:	61c5      	str	r5, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fbc:	6205      	str	r5, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fbe:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002fc0:	f001 fce2 	bl	8004988 <HAL_DMA_Init>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d148      	bne.n	800305a <HAL_UART_MspInit+0x55a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003044 <HAL_UART_MspInit+0x544>)
 8002fca:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002fcc:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart6_rx.Instance = DMA1_Stream7;
 8002fce:	481f      	ldr	r0, [pc, #124]	@ (800304c <HAL_UART_MspInit+0x54c>)
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003050 <HAL_UART_MspInit+0x550>)
 8002fd2:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002fd4:	2347      	movs	r3, #71	@ 0x47
 8002fd6:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe2:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe4:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe6:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fec:	61c2      	str	r2, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff0:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002ff2:	f001 fcc9 	bl	8004988 <HAL_DMA_Init>
 8002ff6:	bb98      	cbnz	r0, 8003060 <HAL_UART_MspInit+0x560>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_UART_MspInit+0x54c>)
 8002ffa:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002ffc:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	2047      	movs	r0, #71	@ 0x47
 8003004:	f001 fa9a 	bl	800453c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003008:	2047      	movs	r0, #71	@ 0x47
 800300a:	f001 faa7 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 800300e:	e598      	b.n	8002b42 <HAL_UART_MspInit+0x42>
 8003010:	58024400 	.word	0x58024400
 8003014:	58020000 	.word	0x58020000
 8003018:	240014e8 	.word	0x240014e8
 800301c:	40020040 	.word	0x40020040
 8003020:	24001470 	.word	0x24001470
 8003024:	40020058 	.word	0x40020058
 8003028:	58020400 	.word	0x58020400
 800302c:	58020c00 	.word	0x58020c00
 8003030:	240013f8 	.word	0x240013f8
 8003034:	40020070 	.word	0x40020070
 8003038:	24001380 	.word	0x24001380
 800303c:	40020088 	.word	0x40020088
 8003040:	58020800 	.word	0x58020800
 8003044:	24001308 	.word	0x24001308
 8003048:	400200a0 	.word	0x400200a0
 800304c:	24001290 	.word	0x24001290
 8003050:	400200b8 	.word	0x400200b8
      Error_Handler();
 8003054:	f7fd fd42 	bl	8000adc <Error_Handler>
 8003058:	e77c      	b.n	8002f54 <HAL_UART_MspInit+0x454>
      Error_Handler();
 800305a:	f7fd fd3f 	bl	8000adc <Error_Handler>
 800305e:	e7b3      	b.n	8002fc8 <HAL_UART_MspInit+0x4c8>
      Error_Handler();
 8003060:	f7fd fd3c 	bl	8000adc <Error_Handler>
 8003064:	e7c8      	b.n	8002ff8 <HAL_UART_MspInit+0x4f8>
 8003066:	bf00      	nop

08003068 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003068:	280f      	cmp	r0, #15
 800306a:	d901      	bls.n	8003070 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800306c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim5);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800306e:	4770      	bx	lr
{
 8003070:	b510      	push	{r4, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0U);
 8003076:	2200      	movs	r2, #0
 8003078:	4601      	mov	r1, r0
 800307a:	2032      	movs	r0, #50	@ 0x32
 800307c:	f001 fa5e 	bl	800453c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003080:	2032      	movs	r0, #50	@ 0x32
 8003082:	f001 fa6b 	bl	800455c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003086:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <HAL_InitTick+0x88>)
 8003088:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM5_CLK_ENABLE();
 800308a:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <HAL_InitTick+0x8c>)
 800308c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8003090:	f042 0208 	orr.w	r2, r2, #8
 8003094:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8003098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030a4:	a901      	add	r1, sp, #4
 80030a6:	a802      	add	r0, sp, #8
 80030a8:	f006 f97e 	bl	80093a8 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030ac:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030ae:	b9bb      	cbnz	r3, 80030e0 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030b0:	f006 f956 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
 80030b4:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030b6:	4a10      	ldr	r2, [pc, #64]	@ (80030f8 <HAL_InitTick+0x90>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	3b01      	subs	r3, #1
  htim5.Instance = TIM5;
 80030c0:	480e      	ldr	r0, [pc, #56]	@ (80030fc <HAL_InitTick+0x94>)
 80030c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003100 <HAL_InitTick+0x98>)
 80030c4:	6002      	str	r2, [r0, #0]
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80030c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030ca:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80030cc:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	6103      	str	r3, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d2:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80030d4:	f008 f8c8 	bl	800b268 <HAL_TIM_Base_Init>
 80030d8:	b130      	cbz	r0, 80030e8 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	b00a      	add	sp, #40	@ 0x28
 80030de:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030e0:	f006 f93e 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
 80030e4:	0043      	lsls	r3, r0, #1
 80030e6:	e7e6      	b.n	80030b6 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim5);
 80030e8:	4804      	ldr	r0, [pc, #16]	@ (80030fc <HAL_InitTick+0x94>)
 80030ea:	f007 ff07 	bl	800aefc <HAL_TIM_Base_Start_IT>
 80030ee:	e7f5      	b.n	80030dc <HAL_InitTick+0x74>
 80030f0:	2400000c 	.word	0x2400000c
 80030f4:	58024400 	.word	0x58024400
 80030f8:	431bde83 	.word	0x431bde83
 80030fc:	24002168 	.word	0x24002168
 8003100:	40000c00 	.word	0x40000c00

08003104 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler>

08003106 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <HardFault_Handler>

08003108 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <MemManage_Handler>

0800310a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <BusFault_Handler>

0800310c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <UsageFault_Handler>

0800310e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800310e:	4770      	bx	lr

08003110 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003110:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WATER_DETECTION_Pin);
 8003112:	2008      	movs	r0, #8
 8003114:	f003 fca9 	bl	8006a6a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003118:	bd08      	pop	{r3, pc}
	...

0800311c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800311c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800311e:	4802      	ldr	r0, [pc, #8]	@ (8003128 <DMA1_Stream0_IRQHandler+0xc>)
 8003120:	f002 fa28 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003124:	bd08      	pop	{r3, pc}
 8003126:	bf00      	nop
 8003128:	240015d8 	.word	0x240015d8

0800312c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800312c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800312e:	4802      	ldr	r0, [pc, #8]	@ (8003138 <DMA1_Stream1_IRQHandler+0xc>)
 8003130:	f002 fa20 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003134:	bd08      	pop	{r3, pc}
 8003136:	bf00      	nop
 8003138:	24001560 	.word	0x24001560

0800313c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800313c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800313e:	4802      	ldr	r0, [pc, #8]	@ (8003148 <DMA1_Stream2_IRQHandler+0xc>)
 8003140:	f002 fa18 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop
 8003148:	240014e8 	.word	0x240014e8

0800314c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800314c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800314e:	4802      	ldr	r0, [pc, #8]	@ (8003158 <DMA1_Stream3_IRQHandler+0xc>)
 8003150:	f002 fa10 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003154:	bd08      	pop	{r3, pc}
 8003156:	bf00      	nop
 8003158:	24001470 	.word	0x24001470

0800315c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800315c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800315e:	4802      	ldr	r0, [pc, #8]	@ (8003168 <DMA1_Stream4_IRQHandler+0xc>)
 8003160:	f002 fa08 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003164:	bd08      	pop	{r3, pc}
 8003166:	bf00      	nop
 8003168:	240013f8 	.word	0x240013f8

0800316c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800316c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800316e:	4802      	ldr	r0, [pc, #8]	@ (8003178 <DMA1_Stream5_IRQHandler+0xc>)
 8003170:	f002 fa00 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003174:	bd08      	pop	{r3, pc}
 8003176:	bf00      	nop
 8003178:	24001380 	.word	0x24001380

0800317c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800317c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800317e:	4802      	ldr	r0, [pc, #8]	@ (8003188 <DMA1_Stream6_IRQHandler+0xc>)
 8003180:	f002 f9f8 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003184:	bd08      	pop	{r3, pc}
 8003186:	bf00      	nop
 8003188:	24001308 	.word	0x24001308

0800318c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800318c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800318e:	4802      	ldr	r0, [pc, #8]	@ (8003198 <FDCAN1_IT0_IRQHandler+0xc>)
 8003190:	f003 f9c0 	bl	8006514 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003194:	bd08      	pop	{r3, pc}
 8003196:	bf00      	nop
 8003198:	24001f94 	.word	0x24001f94

0800319c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800319c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800319e:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <FDCAN2_IT0_IRQHandler+0xc>)
 80031a0:	f003 f9b8 	bl	8006514 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80031a4:	bd08      	pop	{r3, pc}
 80031a6:	bf00      	nop
 80031a8:	24001ef4 	.word	0x24001ef4

080031ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031ae:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <TIM4_IRQHandler+0xc>)
 80031b0:	f007 ff0a 	bl	800afc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031b4:	bd08      	pop	{r3, pc}
 80031b6:	bf00      	nop
 80031b8:	24001a10 	.word	0x24001a10

080031bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80031bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031be:	4802      	ldr	r0, [pc, #8]	@ (80031c8 <I2C1_EV_IRQHandler+0xc>)
 80031c0:	f004 fb3a 	bl	8007838 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80031c4:	bd08      	pop	{r3, pc}
 80031c6:	bf00      	nop
 80031c8:	24001ea8 	.word	0x24001ea8

080031cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80031cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80031ce:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <I2C2_EV_IRQHandler+0xc>)
 80031d0:	f004 fb32 	bl	8007838 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80031d4:	bd08      	pop	{r3, pc}
 80031d6:	bf00      	nop
 80031d8:	24001e5c 	.word	0x24001e5c

080031dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031de:	4c03      	ldr	r4, [pc, #12]	@ (80031ec <USART1_IRQHandler+0x10>)
 80031e0:	4620      	mov	r0, r4
 80031e2:	f008 fd65 	bl	800bcb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (huart1.ErrorCode != HAL_UART_ERROR_NONE) {
 80031e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
//	  UART_Error_Callback(&huart1);
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80031ea:	bd10      	pop	{r4, pc}
 80031ec:	240018f0 	.word	0x240018f0

080031f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f2:	4802      	ldr	r0, [pc, #8]	@ (80031fc <USART2_IRQHandler+0xc>)
 80031f4:	f008 fd5c 	bl	800bcb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f8:	bd08      	pop	{r3, pc}
 80031fa:	bf00      	nop
 80031fc:	24001860 	.word	0x24001860

08003200 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003202:	4802      	ldr	r0, [pc, #8]	@ (800320c <USART3_IRQHandler+0xc>)
 8003204:	f008 fd54 	bl	800bcb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop
 800320c:	240017d0 	.word	0x240017d0

08003210 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003212:	4802      	ldr	r0, [pc, #8]	@ (800321c <DMA1_Stream7_IRQHandler+0xc>)
 8003214:	f002 f9ae 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	24001290 	.word	0x24001290

08003220 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003222:	4802      	ldr	r0, [pc, #8]	@ (800322c <TIM5_IRQHandler+0xc>)
 8003224:	f007 fed0 	bl	800afc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003228:	bd08      	pop	{r3, pc}
 800322a:	bf00      	nop
 800322c:	24002168 	.word	0x24002168

08003230 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003232:	4802      	ldr	r0, [pc, #8]	@ (800323c <DMA2_Stream0_IRQHandler+0xc>)
 8003234:	f002 f99e 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003238:	bd08      	pop	{r3, pc}
 800323a:	bf00      	nop
 800323c:	24001d98 	.word	0x24001d98

08003240 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003242:	4802      	ldr	r0, [pc, #8]	@ (800324c <DMA2_Stream1_IRQHandler+0xc>)
 8003244:	f002 f996 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	24001d20 	.word	0x24001d20

08003250 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003252:	4802      	ldr	r0, [pc, #8]	@ (800325c <DMA2_Stream2_IRQHandler+0xc>)
 8003254:	f002 f98e 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003258:	bd08      	pop	{r3, pc}
 800325a:	bf00      	nop
 800325c:	24001ca8 	.word	0x24001ca8

08003260 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003262:	4802      	ldr	r0, [pc, #8]	@ (800326c <DMA2_Stream3_IRQHandler+0xc>)
 8003264:	f002 f986 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003268:	bd08      	pop	{r3, pc}
 800326a:	bf00      	nop
 800326c:	24001c30 	.word	0x24001c30

08003270 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003272:	4802      	ldr	r0, [pc, #8]	@ (800327c <DMA2_Stream4_IRQHandler+0xc>)
 8003274:	f002 f97e 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	240016c8 	.word	0x240016c8

08003280 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003282:	4802      	ldr	r0, [pc, #8]	@ (800328c <DMA2_Stream5_IRQHandler+0xc>)
 8003284:	f002 f976 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003288:	bd08      	pop	{r3, pc}
 800328a:	bf00      	nop
 800328c:	24001650 	.word	0x24001650

08003290 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003290:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003292:	4802      	ldr	r0, [pc, #8]	@ (800329c <USART6_IRQHandler+0xc>)
 8003294:	f008 fd0c 	bl	800bcb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003298:	bd08      	pop	{r3, pc}
 800329a:	bf00      	nop
 800329c:	24001740 	.word	0x24001740

080032a0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80032a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80032a2:	4802      	ldr	r0, [pc, #8]	@ (80032ac <I2C4_EV_IRQHandler+0xc>)
 80032a4:	f004 fac8 	bl	8007838 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80032a8:	bd08      	pop	{r3, pc}
 80032aa:	bf00      	nop
 80032ac:	24001e10 	.word	0x24001e10

080032b0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80032b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 80032b2:	4802      	ldr	r0, [pc, #8]	@ (80032bc <BDMA_Channel0_IRQHandler+0xc>)
 80032b4:	f002 f95e 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80032b8:	bd08      	pop	{r3, pc}
 80032ba:	bf00      	nop
 80032bc:	24001bb8 	.word	0x24001bb8

080032c0 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80032c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 80032c2:	4802      	ldr	r0, [pc, #8]	@ (80032cc <BDMA_Channel1_IRQHandler+0xc>)
 80032c4:	f002 f956 	bl	8005574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 80032c8:	bd08      	pop	{r3, pc}
 80032ca:	bf00      	nop
 80032cc:	24001b40 	.word	0x24001b40

080032d0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80032d0:	2001      	movs	r0, #1
 80032d2:	4770      	bx	lr

080032d4 <_kill>:

int _kill(int pid, int sig)
{
 80032d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80032d6:	f01a fc95 	bl	801dc04 <__errno>
 80032da:	2316      	movs	r3, #22
 80032dc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80032de:	f04f 30ff 	mov.w	r0, #4294967295
 80032e2:	bd08      	pop	{r3, pc}

080032e4 <_exit>:

void _exit (int status)
{
 80032e4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80032e6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ea:	f7ff fff3 	bl	80032d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032ee:	e7fe      	b.n	80032ee <_exit+0xa>

080032f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003328 <_sbrk+0x38>)
 80032f6:	490d      	ldr	r1, [pc, #52]	@ (800332c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032f8:	480d      	ldr	r0, [pc, #52]	@ (8003330 <_sbrk+0x40>)
 80032fa:	6800      	ldr	r0, [r0, #0]
 80032fc:	b140      	cbz	r0, 8003310 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032fe:	480c      	ldr	r0, [pc, #48]	@ (8003330 <_sbrk+0x40>)
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	4403      	add	r3, r0
 8003304:	1a52      	subs	r2, r2, r1
 8003306:	4293      	cmp	r3, r2
 8003308:	d806      	bhi.n	8003318 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800330a:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <_sbrk+0x40>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800330e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003310:	4807      	ldr	r0, [pc, #28]	@ (8003330 <_sbrk+0x40>)
 8003312:	4c08      	ldr	r4, [pc, #32]	@ (8003334 <_sbrk+0x44>)
 8003314:	6004      	str	r4, [r0, #0]
 8003316:	e7f2      	b.n	80032fe <_sbrk+0xe>
    errno = ENOMEM;
 8003318:	f01a fc74 	bl	801dc04 <__errno>
 800331c:	230c      	movs	r3, #12
 800331e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003320:	f04f 30ff 	mov.w	r0, #4294967295
 8003324:	e7f3      	b.n	800330e <_sbrk+0x1e>
 8003326:	bf00      	nop
 8003328:	24080000 	.word	0x24080000
 800332c:	00000400 	.word	0x00000400
 8003330:	240021b4 	.word	0x240021b4
 8003334:	24006d20 	.word	0x24006d20

08003338 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003338:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <SystemInit+0xa0>)
 800333a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800333e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003342:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <SystemInit+0xa4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2b06      	cmp	r3, #6
 8003350:	d806      	bhi.n	8003360 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003352:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <SystemInit+0xa4>)
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f023 030f 	bic.w	r3, r3, #15
 800335a:	f043 0307 	orr.w	r3, r3, #7
 800335e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <SystemInit+0xa8>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	4a1c      	ldr	r2, [pc, #112]	@ (80033e4 <SystemInit+0xac>)
 8003372:	400a      	ands	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <SystemInit+0xa4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f013 0f08 	tst.w	r3, #8
 800337e:	d006      	beq.n	800338e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003380:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <SystemInit+0xa4>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	f023 030f 	bic.w	r3, r3, #15
 8003388:	f043 0307 	orr.w	r3, r3, #7
 800338c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <SystemInit+0xa8>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003394:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003396:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003398:	4913      	ldr	r1, [pc, #76]	@ (80033e8 <SystemInit+0xb0>)
 800339a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800339c:	4913      	ldr	r1, [pc, #76]	@ (80033ec <SystemInit+0xb4>)
 800339e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80033a0:	4913      	ldr	r1, [pc, #76]	@ (80033f0 <SystemInit+0xb8>)
 80033a2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80033a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80033a6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80033a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80033aa:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80033b4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033b8:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <SystemInit+0xbc>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <SystemInit+0xc0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c4:	d203      	bcs.n	80033ce <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <SystemInit+0xc4>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <SystemInit+0xc8>)
 80033d0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80033d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	52002000 	.word	0x52002000
 80033e0:	58024400 	.word	0x58024400
 80033e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80033e8:	02020200 	.word	0x02020200
 80033ec:	01ff0000 	.word	0x01ff0000
 80033f0:	01010280 	.word	0x01010280
 80033f4:	5c001000 	.word	0x5c001000
 80033f8:	ffff0000 	.word	0xffff0000
 80033fc:	51008000 	.word	0x51008000
 8003400:	52004000 	.word	0x52004000

08003404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800343c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003408:	f7ff ff96 	bl	8003338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800340c:	480c      	ldr	r0, [pc, #48]	@ (8003440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800340e:	490d      	ldr	r1, [pc, #52]	@ (8003444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003410:	4a0d      	ldr	r2, [pc, #52]	@ (8003448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003414:	e002      	b.n	800341c <LoopCopyDataInit>

08003416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341a:	3304      	adds	r3, #4

0800341c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800341c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003420:	d3f9      	bcc.n	8003416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003424:	4c0a      	ldr	r4, [pc, #40]	@ (8003450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003428:	e001      	b.n	800342e <LoopFillZerobss>

0800342a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800342c:	3204      	adds	r2, #4

0800342e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003430:	d3fb      	bcc.n	800342a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003432:	f01a fbed 	bl	801dc10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003436:	f7fd fcc9 	bl	8000dcc <main>
  bx  lr
 800343a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800343c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003444:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8003448:	0801e440 	.word	0x0801e440
  ldr r2, =_sbss
 800344c:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8003450:	24006d1c 	.word	0x24006d1c

08003454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003454:	e7fe      	b.n	8003454 <ADC3_IRQHandler>
	...

08003458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003458:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800345a:	2003      	movs	r0, #3
 800345c:	f001 f85c 	bl	8004518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003460:	f005 fd18 	bl	8008e94 <HAL_RCC_GetSysClockFreq>
 8003464:	490f      	ldr	r1, [pc, #60]	@ (80034a4 <HAL_Init+0x4c>)
 8003466:	698b      	ldr	r3, [r1, #24]
 8003468:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800346c:	4a0e      	ldr	r2, [pc, #56]	@ (80034a8 <HAL_Init+0x50>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	698b      	ldr	r3, [r1, #24]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	5cd3      	ldrb	r3, [r2, r3]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	fa20 f303 	lsr.w	r3, r0, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	@ (80034ac <HAL_Init+0x54>)
 8003488:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_Init+0x58>)
 800348c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800348e:	2000      	movs	r0, #0
 8003490:	f7ff fdea 	bl	8003068 <HAL_InitTick>
 8003494:	b110      	cbz	r0, 800349c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8003496:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8003498:	4620      	mov	r0, r4
 800349a:	bd10      	pop	{r4, pc}
 800349c:	4604      	mov	r4, r0
  HAL_MspInit();
 800349e:	f7fe ffb7 	bl	8002410 <HAL_MspInit>
  return HAL_OK;
 80034a2:	e7f9      	b.n	8003498 <HAL_Init+0x40>
 80034a4:	58024400 	.word	0x58024400
 80034a8:	0801df4c 	.word	0x0801df4c
 80034ac:	24000000 	.word	0x24000000
 80034b0:	24000004 	.word	0x24000004

080034b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80034b4:	4b03      	ldr	r3, [pc, #12]	@ (80034c4 <HAL_IncTick+0x10>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4a03      	ldr	r2, [pc, #12]	@ (80034c8 <HAL_IncTick+0x14>)
 80034ba:	6811      	ldr	r1, [r2, #0]
 80034bc:	440b      	add	r3, r1
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	24000008 	.word	0x24000008
 80034c8:	240021b8 	.word	0x240021b8

080034cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034cc:	4b01      	ldr	r3, [pc, #4]	@ (80034d4 <HAL_GetTick+0x8>)
 80034ce:	6818      	ldr	r0, [r3, #0]
}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	240021b8 	.word	0x240021b8

080034d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034d8:	b538      	push	{r3, r4, r5, lr}
 80034da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff fff6 	bl	80034cc <HAL_GetTick>
 80034e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034e2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034e6:	d002      	beq.n	80034ee <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e8:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <HAL_Delay+0x24>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ee:	f7ff ffed 	bl	80034cc <HAL_GetTick>
 80034f2:	1b40      	subs	r0, r0, r5
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	d3fa      	bcc.n	80034ee <HAL_Delay+0x16>
  {
  }
}
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
 80034fa:	bf00      	nop
 80034fc:	24000008 	.word	0x24000008

08003500 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003500:	4b01      	ldr	r3, [pc, #4]	@ (8003508 <HAL_GetREVID+0x8>)
 8003502:	6818      	ldr	r0, [r3, #0]
}
 8003504:	0c00      	lsrs	r0, r0, #16
 8003506:	4770      	bx	lr
 8003508:	5c001000 	.word	0x5c001000

0800350c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800350c:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800350e:	3030      	adds	r0, #48	@ 0x30
 8003510:	0a0b      	lsrs	r3, r1, #8
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f003 030c 	and.w	r3, r3, #12

  MODIFY_REG(*preg,
 8003518:	58c4      	ldr	r4, [r0, r3]
 800351a:	f001 011f 	and.w	r1, r1, #31
 800351e:	f04f 0c1f 	mov.w	ip, #31
 8003522:	fa0c fc01 	lsl.w	ip, ip, r1
 8003526:	ea24 0c0c 	bic.w	ip, r4, ip
 800352a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800352e:	408a      	lsls	r2, r1
 8003530:	ea4c 0202 	orr.w	r2, ip, r2
 8003534:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800353c:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800353e:	3014      	adds	r0, #20
 8003540:	0e4b      	lsrs	r3, r1, #25
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f003 0304 	and.w	r3, r3, #4

  MODIFY_REG(*preg,
 8003548:	58c4      	ldr	r4, [r0, r3]
 800354a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800354e:	f04f 0c07 	mov.w	ip, #7
 8003552:	fa0c fc01 	lsl.w	ip, ip, r1
 8003556:	ea24 0c0c 	bic.w	ip, r4, ip
 800355a:	408a      	lsls	r2, r1
 800355c:	ea4c 0202 	orr.w	r2, ip, r2
 8003560:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356c:	4604      	mov	r4, r0
 800356e:	460e      	mov	r6, r1
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003570:	6803      	ldr	r3, [r0, #0]
 8003572:	4946      	ldr	r1, [pc, #280]	@ (800368c <HAL_ADC_PollForConversion+0x124>)
 8003574:	4a46      	ldr	r2, [pc, #280]	@ (8003690 <HAL_ADC_PollForConversion+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	bf18      	it	ne
 800357a:	428b      	cmpne	r3, r1
 800357c:	d115      	bne.n	80035aa <HAL_ADC_PollForConversion+0x42>
 800357e:	f501 7140 	add.w	r1, r1, #768	@ 0x300
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003582:	688f      	ldr	r7, [r1, #8]
 8003584:	f007 071f 	and.w	r7, r7, #31

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003588:	6925      	ldr	r5, [r4, #16]
 800358a:	2d08      	cmp	r5, #8
 800358c:	d014      	beq.n	80035b8 <HAL_ADC_PollForConversion+0x50>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800358e:	2f09      	cmp	r7, #9
 8003590:	d805      	bhi.n	800359e <HAL_ADC_PollForConversion+0x36>
 8003592:	f240 2221 	movw	r2, #545	@ 0x221
 8003596:	40fa      	lsrs	r2, r7
 8003598:	f012 0f01 	tst.w	r2, #1
 800359c:	d107      	bne.n	80035ae <HAL_ADC_PollForConversion+0x46>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800359e:	688b      	ldr	r3, [r1, #8]
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035a0:	f413 4f40 	tst.w	r3, #49152	@ 0xc000
 80035a4:	d12d      	bne.n	8003602 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80035a6:	2504      	movs	r5, #4
 80035a8:	e006      	b.n	80035b8 <HAL_ADC_PollForConversion+0x50>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035aa:	493a      	ldr	r1, [pc, #232]	@ (8003694 <HAL_ADC_PollForConversion+0x12c>)
 80035ac:	e7e9      	b.n	8003582 <HAL_ADC_PollForConversion+0x1a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f013 0f01 	tst.w	r3, #1
 80035b4:	d11f      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x8e>
        tmp_Flag_End = (ADC_FLAG_EOC);
 80035b6:	2504      	movs	r5, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80035b8:	f7ff ff88 	bl	80034cc <HAL_GetTick>
 80035bc:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	422a      	tst	r2, r5
 80035c4:	d123      	bne.n	800360e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80035ca:	d0f8      	beq.n	80035be <HAL_ADC_PollForConversion+0x56>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80035cc:	f7ff ff7e 	bl	80034cc <HAL_GetTick>
 80035d0:	eba0 0008 	sub.w	r0, r0, r8
 80035d4:	42b0      	cmp	r0, r6
 80035d6:	d801      	bhi.n	80035dc <HAL_ADC_PollForConversion+0x74>
 80035d8:	2e00      	cmp	r6, #0
 80035da:	d1f0      	bne.n	80035be <HAL_ADC_PollForConversion+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	422b      	tst	r3, r5
 80035e2:	d1ec      	bne.n	80035be <HAL_ADC_PollForConversion+0x56>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035ec:	2300      	movs	r3, #0
 80035ee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 80035f2:	2003      	movs	r0, #3
 80035f4:	e045      	b.n	8003682 <HAL_ADC_PollForConversion+0x11a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035f8:	f043 0320 	orr.w	r3, r3, #32
 80035fc:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80035fe:	2001      	movs	r0, #1
 8003600:	e03f      	b.n	8003682 <HAL_ADC_PollForConversion+0x11a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003602:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003604:	f043 0320 	orr.w	r3, r3, #32
 8003608:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 800360a:	2001      	movs	r0, #1
 800360c:	e039      	b.n	8003682 <HAL_ADC_PollForConversion+0x11a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800360e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003614:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800361c:	d111      	bne.n	8003642 <HAL_ADC_PollForConversion+0xda>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800361e:	7d62      	ldrb	r2, [r4, #21]
 8003620:	b97a      	cbnz	r2, 8003642 <HAL_ADC_PollForConversion+0xda>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f012 0f08 	tst.w	r2, #8
 8003628:	d00b      	beq.n	8003642 <HAL_ADC_PollForConversion+0xda>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800362a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800362c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003630:	6562      	str	r2, [r4, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003632:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003634:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003638:	d103      	bne.n	8003642 <HAL_ADC_PollForConversion+0xda>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	6562      	str	r2, [r4, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003642:	4a13      	ldr	r2, [pc, #76]	@ (8003690 <HAL_ADC_PollForConversion+0x128>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00c      	beq.n	8003662 <HAL_ADC_PollForConversion+0xfa>
 8003648:	461a      	mov	r2, r3
 800364a:	4293      	cmp	r3, r2
 800364c:	d00c      	beq.n	8003668 <HAL_ADC_PollForConversion+0x100>
 800364e:	2f09      	cmp	r7, #9
 8003650:	d805      	bhi.n	800365e <HAL_ADC_PollForConversion+0xf6>
 8003652:	f240 2121 	movw	r1, #545	@ 0x221
 8003656:	40f9      	lsrs	r1, r7
 8003658:	f011 0f01 	tst.w	r1, #1
 800365c:	d104      	bne.n	8003668 <HAL_ADC_PollForConversion+0x100>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800365e:	68d2      	ldr	r2, [r2, #12]
 8003660:	e003      	b.n	800366a <HAL_ADC_PollForConversion+0x102>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003662:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003666:	e7f0      	b.n	800364a <HAL_ADC_PollForConversion+0xe2>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003668:	68da      	ldr	r2, [r3, #12]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800366a:	2d08      	cmp	r5, #8
 800366c:	d006      	beq.n	800367c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800366e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8003672:	d108      	bne.n	8003686 <HAL_ADC_PollForConversion+0x11e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003674:	220c      	movs	r2, #12
 8003676:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003678:	2000      	movs	r0, #0
 800367a:	e002      	b.n	8003682 <HAL_ADC_PollForConversion+0x11a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800367c:	2208      	movs	r2, #8
 800367e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003680:	2000      	movs	r0, #0
}
 8003682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003686:	2000      	movs	r0, #0
 8003688:	e7fb      	b.n	8003682 <HAL_ADC_PollForConversion+0x11a>
 800368a:	bf00      	nop
 800368c:	40022000 	.word	0x40022000
 8003690:	40022100 	.word	0x40022100
 8003694:	58026300 	.word	0x58026300

08003698 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f000 8224 	beq.w	8003afa <HAL_ADC_ConfigChannel+0x45a>
 80036b2:	4604      	mov	r4, r0
 80036b4:	460d      	mov	r5, r1
 80036b6:	2301      	movs	r3, #1
 80036b8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036bc:	6802      	ldr	r2, [r0, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036be:	6893      	ldr	r3, [r2, #8]
 80036c0:	f013 0f04 	tst.w	r3, #4
 80036c4:	d009      	beq.n	80036da <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80036c8:	f043 0320 	orr.w	r3, r3, #32
 80036cc:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d0:	2300      	movs	r3, #0
 80036d2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80036d6:	b002      	add	sp, #8
 80036d8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036da:	680b      	ldr	r3, [r1, #0]
 80036dc:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d13c      	bne.n	800375e <HAL_ADC_ConfigChannel+0xbe>
 80036e4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80036e8:	2101      	movs	r1, #1
 80036ea:	4099      	lsls	r1, r3
 80036ec:	69d3      	ldr	r3, [r2, #28]
 80036ee:	430b      	orrs	r3, r1
 80036f0:	61d3      	str	r3, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036f2:	682a      	ldr	r2, [r5, #0]
 80036f4:	6869      	ldr	r1, [r5, #4]
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	f7ff ff08 	bl	800350c <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	6883      	ldr	r3, [r0, #8]
 8003700:	f013 0304 	ands.w	r3, r3, #4
 8003704:	d000      	beq.n	8003708 <HAL_ADC_ConfigChannel+0x68>
 8003706:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003708:	6882      	ldr	r2, [r0, #8]
 800370a:	f012 0208 	ands.w	r2, r2, #8
 800370e:	d000      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x72>
 8003710:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003712:	ea52 0603 	orrs.w	r6, r2, r3
 8003716:	d02e      	beq.n	8003776 <HAL_ADC_ConfigChannel+0xd6>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003718:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800371a:	6893      	ldr	r3, [r2, #8]
 800371c:	f013 0f01 	tst.w	r3, #1
 8003720:	f040 81e7 	bne.w	8003af2 <HAL_ADC_ConfigChannel+0x452>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003728:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 800372c:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003730:	ea21 0106 	bic.w	r1, r1, r6
 8003734:	f000 0618 	and.w	r6, r0, #24
 8003738:	48ae      	ldr	r0, [pc, #696]	@ (80039f4 <HAL_ADC_ConfigChannel+0x354>)
 800373a:	40f0      	lsrs	r0, r6
 800373c:	4003      	ands	r3, r0
 800373e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003742:	430b      	orrs	r3, r1
 8003744:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003748:	68ea      	ldr	r2, [r5, #12]
 800374a:	4bab      	ldr	r3, [pc, #684]	@ (80039f8 <HAL_ADC_ConfigChannel+0x358>)
 800374c:	429a      	cmp	r2, r3
 800374e:	f000 80a1 	beq.w	8003894 <HAL_ADC_ConfigChannel+0x1f4>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f2c0 8153 	blt.w	8003a00 <HAL_ADC_ConfigChannel+0x360>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375a:	2000      	movs	r0, #0
 800375c:	e7b8      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003762:	b133      	cbz	r3, 8003772 <HAL_ADC_ConfigChannel+0xd2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003764:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2101      	movs	r1, #1
 800376e:	4099      	lsls	r1, r3
 8003770:	e7bc      	b.n	80036ec <HAL_ADC_ConfigChannel+0x4c>
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e7f8      	b.n	8003768 <HAL_ADC_ConfigChannel+0xc8>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003776:	68aa      	ldr	r2, [r5, #8]
 8003778:	6829      	ldr	r1, [r5, #0]
 800377a:	f7ff fedf 	bl	800353c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800377e:	4b9f      	ldr	r3, [pc, #636]	@ (80039fc <HAL_ADC_ConfigChannel+0x35c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378a:	d00b      	beq.n	80037a4 <HAL_ADC_ConfigChannel+0x104>
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	68d3      	ldr	r3, [r2, #12]
 8003790:	f013 0f10 	tst.w	r3, #16
 8003794:	d13b      	bne.n	800380e <HAL_ADC_ConfigChannel+0x16e>
 8003796:	696b      	ldr	r3, [r5, #20]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800379e:	0052      	lsls	r2, r2, #1
 80037a0:	4093      	lsls	r3, r2
 80037a2:	e006      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x112>
 80037a4:	696b      	ldr	r3, [r5, #20]
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	f3c2 0282 	ubfx	r2, r2, #2, #3
 80037ae:	0052      	lsls	r2, r2, #1
 80037b0:	4093      	lsls	r3, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037b2:	6929      	ldr	r1, [r5, #16]
 80037b4:	2904      	cmp	r1, #4
 80037b6:	d038      	beq.n	800382a <HAL_ADC_ConfigChannel+0x18a>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	6828      	ldr	r0, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037bc:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80037c0:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 80037c4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037c8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80037cc:	4303      	orrs	r3, r0
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	6928      	ldr	r0, [r5, #16]
 80037d8:	7e6a      	ldrb	r2, [r5, #25]
 80037da:	2a01      	cmp	r2, #1
 80037dc:	d01f      	beq.n	800381e <HAL_ADC_ConfigChannel+0x17e>
 80037de:	4631      	mov	r1, r6
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e0:	3360      	adds	r3, #96	@ 0x60
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037e2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80037e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037ea:	430a      	orrs	r2, r1
 80037ec:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	692a      	ldr	r2, [r5, #16]
 80037f4:	7e2b      	ldrb	r3, [r5, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d014      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x184>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037fa:	690b      	ldr	r3, [r1, #16]
 80037fc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	fa06 f202 	lsl.w	r2, r6, r2
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]
}
 800380c:	e784      	b.n	8003718 <HAL_ADC_ConfigChannel+0x78>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800380e:	696b      	ldr	r3, [r5, #20]
 8003810:	68d2      	ldr	r2, [r2, #12]
 8003812:	0892      	lsrs	r2, r2, #2
 8003814:	f002 0204 	and.w	r2, r2, #4
 8003818:	0052      	lsls	r2, r2, #1
 800381a:	4093      	lsls	r3, r2
 800381c:	e7c9      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x112>
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800381e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003822:	e7dd      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x140>
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003824:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8003828:	e7e7      	b.n	80037fa <HAL_ADC_ConfigChannel+0x15a>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800382e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003832:	6829      	ldr	r1, [r5, #0]
 8003834:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003838:	d01d      	beq.n	8003876 <HAL_ADC_ConfigChannel+0x1d6>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800383e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003842:	6829      	ldr	r1, [r5, #0]
 8003844:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003848:	d01a      	beq.n	8003880 <HAL_ADC_ConfigChannel+0x1e0>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800384e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003852:	6829      	ldr	r1, [r5, #0]
 8003854:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003858:	d017      	beq.n	800388a <HAL_ADC_ConfigChannel+0x1ea>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800385a:	6822      	ldr	r2, [r4, #0]
 800385c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800385e:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8003862:	6829      	ldr	r1, [r5, #0]
 8003864:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 8003868:	f47f af56 	bne.w	8003718 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800386c:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 800386e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003872:	66d3      	str	r3, [r2, #108]	@ 0x6c
 8003874:	e750      	b.n	8003718 <HAL_ADC_ConfigChannel+0x78>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003876:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8003878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800387c:	6613      	str	r3, [r2, #96]	@ 0x60
 800387e:	e7dc      	b.n	800383a <HAL_ADC_ConfigChannel+0x19a>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003880:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8003882:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003886:	6653      	str	r3, [r2, #100]	@ 0x64
 8003888:	e7df      	b.n	800384a <HAL_ADC_ConfigChannel+0x1aa>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800388a:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 800388c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003890:	6693      	str	r3, [r2, #104]	@ 0x68
 8003892:	e7e2      	b.n	800385a <HAL_ADC_ConfigChannel+0x1ba>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003894:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	f3c3 0613 	ubfx	r6, r3, #0, #20
 800389c:	bb3e      	cbnz	r6, 80038ee <HAL_ADC_ConfigChannel+0x24e>
 800389e:	0e9a      	lsrs	r2, r3, #26
 80038a0:	3201      	adds	r2, #1
 80038a2:	f002 021f 	and.w	r2, r2, #31
 80038a6:	2a09      	cmp	r2, #9
 80038a8:	bf8c      	ite	hi
 80038aa:	2200      	movhi	r2, #0
 80038ac:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ae:	2a00      	cmp	r2, #0
 80038b0:	d055      	beq.n	800395e <HAL_ADC_ConfigChannel+0x2be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038b2:	bb5e      	cbnz	r6, 800390c <HAL_ADC_ConfigChannel+0x26c>
 80038b4:	0e99      	lsrs	r1, r3, #26
 80038b6:	3101      	adds	r1, #1
 80038b8:	0689      	lsls	r1, r1, #26
 80038ba:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80038be:	bb8e      	cbnz	r6, 8003924 <HAL_ADC_ConfigChannel+0x284>
 80038c0:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 80038c4:	f10c 0c01 	add.w	ip, ip, #1
 80038c8:	f00c 0c1f 	and.w	ip, ip, #31
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f20c 	lsl.w	r2, r2, ip
 80038d2:	4311      	orrs	r1, r2
 80038d4:	bbae      	cbnz	r6, 8003942 <HAL_ADC_ConfigChannel+0x2a2>
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	3301      	adds	r3, #1
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e4:	4319      	orrs	r1, r3
 80038e6:	68aa      	ldr	r2, [r5, #8]
 80038e8:	f7ff fe28 	bl	800353c <LL_ADC_SetChannelSamplingTime>
 80038ec:	e731      	b.n	8003752 <HAL_ADC_ConfigChannel+0xb2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80038f2:	b14a      	cbz	r2, 8003908 <HAL_ADC_ConfigChannel+0x268>
  return __builtin_clz(value);
 80038f4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f8:	3201      	adds	r2, #1
 80038fa:	f002 021f 	and.w	r2, r2, #31
 80038fe:	2a09      	cmp	r2, #9
 8003900:	bf8c      	ite	hi
 8003902:	2200      	movhi	r2, #0
 8003904:	2201      	movls	r2, #1
 8003906:	e7d2      	b.n	80038ae <HAL_ADC_ConfigChannel+0x20e>
    return 32U;
 8003908:	2220      	movs	r2, #32
 800390a:	e7f5      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x258>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 8003910:	b131      	cbz	r1, 8003920 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003912:	fab1 f181 	clz	r1, r1
 8003916:	3101      	adds	r1, #1
 8003918:	0689      	lsls	r1, r1, #26
 800391a:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800391e:	e7ce      	b.n	80038be <HAL_ADC_ConfigChannel+0x21e>
    return 32U;
 8003920:	2120      	movs	r1, #32
 8003922:	e7f8      	b.n	8003916 <HAL_ADC_ConfigChannel+0x276>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8003928:	b14a      	cbz	r2, 800393e <HAL_ADC_ConfigChannel+0x29e>
  return __builtin_clz(value);
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	3201      	adds	r2, #1
 8003930:	f002 021f 	and.w	r2, r2, #31
 8003934:	f04f 0c01 	mov.w	ip, #1
 8003938:	fa0c f202 	lsl.w	r2, ip, r2
 800393c:	e7c9      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x232>
    return 32U;
 800393e:	2220      	movs	r2, #32
 8003940:	e7f5      	b.n	800392e <HAL_ADC_ConfigChannel+0x28e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003946:	b143      	cbz	r3, 800395a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003948:	fab3 f383 	clz	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003956:	051b      	lsls	r3, r3, #20
 8003958:	e7c4      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x244>
    return 32U;
 800395a:	2320      	movs	r3, #32
 800395c:	e7f6      	b.n	800394c <HAL_ADC_ConfigChannel+0x2ac>
 800395e:	b9e6      	cbnz	r6, 800399a <HAL_ADC_ConfigChannel+0x2fa>
 8003960:	0e99      	lsrs	r1, r3, #26
 8003962:	3101      	adds	r1, #1
 8003964:	0689      	lsls	r1, r1, #26
 8003966:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800396a:	bb16      	cbnz	r6, 80039b2 <HAL_ADC_ConfigChannel+0x312>
 800396c:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 8003970:	f10c 0c01 	add.w	ip, ip, #1
 8003974:	f00c 0c1f 	and.w	ip, ip, #31
 8003978:	2201      	movs	r2, #1
 800397a:	fa02 f20c 	lsl.w	r2, r2, ip
 800397e:	4311      	orrs	r1, r2
 8003980:	bb36      	cbnz	r6, 80039d0 <HAL_ADC_ConfigChannel+0x330>
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	3301      	adds	r3, #1
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800398e:	3b1e      	subs	r3, #30
 8003990:	051b      	lsls	r3, r3, #20
 8003992:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003996:	4319      	orrs	r1, r3
 8003998:	e7a5      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800399e:	b131      	cbz	r1, 80039ae <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80039a0:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039a4:	3101      	adds	r1, #1
 80039a6:	0689      	lsls	r1, r1, #26
 80039a8:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 80039ac:	e7dd      	b.n	800396a <HAL_ADC_ConfigChannel+0x2ca>
    return 32U;
 80039ae:	2120      	movs	r1, #32
 80039b0:	e7f8      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 80039b6:	b14a      	cbz	r2, 80039cc <HAL_ADC_ConfigChannel+0x32c>
  return __builtin_clz(value);
 80039b8:	fab2 f282 	clz	r2, r2
 80039bc:	3201      	adds	r2, #1
 80039be:	f002 021f 	and.w	r2, r2, #31
 80039c2:	f04f 0c01 	mov.w	ip, #1
 80039c6:	fa0c f202 	lsl.w	r2, ip, r2
 80039ca:	e7d8      	b.n	800397e <HAL_ADC_ConfigChannel+0x2de>
    return 32U;
 80039cc:	2220      	movs	r2, #32
 80039ce:	e7f5      	b.n	80039bc <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80039d4:	b15b      	cbz	r3, 80039ee <HAL_ADC_ConfigChannel+0x34e>
  return __builtin_clz(value);
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80039e4:	3b1e      	subs	r3, #30
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	e7d3      	b.n	8003996 <HAL_ADC_ConfigChannel+0x2f6>
    return 32U;
 80039ee:	2320      	movs	r3, #32
 80039f0:	e7f3      	b.n	80039da <HAL_ADC_ConfigChannel+0x33a>
 80039f2:	bf00      	nop
 80039f4:	000fffff 	.word	0x000fffff
 80039f8:	47ff0000 	.word	0x47ff0000
 80039fc:	5c001000 	.word	0x5c001000
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	493f      	ldr	r1, [pc, #252]	@ (8003b00 <HAL_ADC_ConfigChannel+0x460>)
 8003a04:	483f      	ldr	r0, [pc, #252]	@ (8003b04 <HAL_ADC_ConfigChannel+0x464>)
 8003a06:	4282      	cmp	r2, r0
 8003a08:	bf18      	it	ne
 8003a0a:	428a      	cmpne	r2, r1
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2101      	moveq	r1, #1
 8003a10:	2100      	movne	r1, #0
 8003a12:	d118      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x3a6>
 8003a14:	4e3c      	ldr	r6, [pc, #240]	@ (8003b08 <HAL_ADC_ConfigChannel+0x468>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a16:	68b5      	ldr	r5, [r6, #8]
 8003a18:	f005 7ce0 	and.w	ip, r5, #29360128	@ 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a1c:	b1a9      	cbz	r1, 8003a4a <HAL_ADC_ConfigChannel+0x3aa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a1e:	4938      	ldr	r1, [pc, #224]	@ (8003b00 <HAL_ADC_ConfigChannel+0x460>)
 8003a20:	6888      	ldr	r0, [r1, #8]
 8003a22:	f010 0001 	ands.w	r0, r0, #1
 8003a26:	d000      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x38a>
 8003a28:	2001      	movs	r0, #1
 8003a2a:	4936      	ldr	r1, [pc, #216]	@ (8003b04 <HAL_ADC_ConfigChannel+0x464>)
 8003a2c:	6889      	ldr	r1, [r1, #8]
 8003a2e:	f011 0101 	ands.w	r1, r1, #1
 8003a32:	d000      	beq.n	8003a36 <HAL_ADC_ConfigChannel+0x396>
 8003a34:	2101      	movs	r1, #1
 8003a36:	4301      	orrs	r1, r0
 8003a38:	d00c      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x3b4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003a3c:	f043 0320 	orr.w	r3, r3, #32
 8003a40:	6563      	str	r3, [r4, #84]	@ 0x54
          tmp_hal_status = HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
 8003a44:	e644      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a46:	4e31      	ldr	r6, [pc, #196]	@ (8003b0c <HAL_ADC_ConfigChannel+0x46c>)
 8003a48:	e7e5      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x376>
 8003a4a:	4931      	ldr	r1, [pc, #196]	@ (8003b10 <HAL_ADC_ConfigChannel+0x470>)
 8003a4c:	6889      	ldr	r1, [r1, #8]
 8003a4e:	f011 0f01 	tst.w	r1, #1
 8003a52:	d1f2      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x39a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a54:	492f      	ldr	r1, [pc, #188]	@ (8003b14 <HAL_ADC_ConfigChannel+0x474>)
 8003a56:	428b      	cmp	r3, r1
 8003a58:	d007      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x3ca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a5a:	492f      	ldr	r1, [pc, #188]	@ (8003b18 <HAL_ADC_ConfigChannel+0x478>)
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	d026      	beq.n	8003aae <HAL_ADC_ConfigChannel+0x40e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a60:	492e      	ldr	r1, [pc, #184]	@ (8003b1c <HAL_ADC_ConfigChannel+0x47c>)
 8003a62:	428b      	cmp	r3, r1
 8003a64:	d034      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2000      	movs	r0, #0
 8003a68:	e632      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a6a:	f415 0f00 	tst.w	r5, #8388608	@ 0x800000
 8003a6e:	d1f4      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x3ba>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a70:	4b27      	ldr	r3, [pc, #156]	@ (8003b10 <HAL_ADC_ConfigChannel+0x470>)
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0x3da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a76:	2000      	movs	r0, #0
 8003a78:	e62a      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a7a:	f44c 0300 	orr.w	r3, ip, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a7e:	68b2      	ldr	r2, [r6, #8]
 8003a80:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60b3      	str	r3, [r6, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_ADC_ConfigChannel+0x480>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	4a25      	ldr	r2, [pc, #148]	@ (8003b24 <HAL_ADC_ConfigChannel+0x484>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003a9c:	e002      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x404>
                wait_loop_index--;
 8003a9e:	9b01      	ldr	r3, [sp, #4]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8003aa4:	9b01      	ldr	r3, [sp, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f9      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x3fe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aaa:	2000      	movs	r0, #0
 8003aac:	e610      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aae:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 8003ab2:	d1d5      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ab4:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <HAL_ADC_ConfigChannel+0x470>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_ADC_ConfigChannel+0x41e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aba:	2000      	movs	r0, #0
 8003abc:	e608      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003abe:	f04c 7380 	orr.w	r3, ip, #16777216	@ 0x1000000
 8003ac2:	68b2      	ldr	r2, [r6, #8]
 8003ac4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003acc:	2000      	movs	r0, #0
}
 8003ace:	e5ff      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ad0:	f415 0f80 	tst.w	r5, #4194304	@ 0x400000
 8003ad4:	d10f      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x456>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <HAL_ADC_ConfigChannel+0x470>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003adc:	2000      	movs	r0, #0
 8003ade:	e5f7      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ae0:	f44c 0380 	orr.w	r3, ip, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ae4:	68b2      	ldr	r2, [r6, #8]
 8003ae6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60b3      	str	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aee:	2000      	movs	r0, #0
}
 8003af0:	e5ee      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
 8003af2:	2000      	movs	r0, #0
 8003af4:	e5ec      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e5ea      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003afa:	2002      	movs	r0, #2
 8003afc:	e5eb      	b.n	80036d6 <HAL_ADC_ConfigChannel+0x36>
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000
 8003b04:	40022100 	.word	0x40022100
 8003b08:	40022300 	.word	0x40022300
 8003b0c:	58026300 	.word	0x58026300
 8003b10:	58026000 	.word	0x58026000
 8003b14:	cb840000 	.word	0xcb840000
 8003b18:	c7520000 	.word	0xc7520000
 8003b1c:	cfb80000 	.word	0xcfb80000
 8003b20:	24000004 	.word	0x24000004
 8003b24:	053e2d63 	.word	0x053e2d63

08003b28 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2c:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b2e:	6882      	ldr	r2, [r0, #8]
 8003b30:	f012 0204 	ands.w	r2, r2, #4
 8003b34:	d000      	beq.n	8003b38 <ADC_ConversionStop+0x10>
 8003b36:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b38:	6883      	ldr	r3, [r0, #8]
 8003b3a:	f013 0308 	ands.w	r3, r3, #8
 8003b3e:	d000      	beq.n	8003b42 <ADC_ConversionStop+0x1a>
 8003b40:	2301      	movs	r3, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d069      	beq.n	8003c1a <ADC_ConversionStop+0xf2>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b46:	68c3      	ldr	r3, [r0, #12]
 8003b48:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003b4c:	d004      	beq.n	8003b58 <ADC_ConversionStop+0x30>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b4e:	8aa2      	ldrh	r2, [r4, #20]
 8003b50:	f240 1301 	movw	r3, #257	@ 0x101
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d04a      	beq.n	8003bee <ADC_ConversionStop+0xc6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b58:	2902      	cmp	r1, #2
 8003b5a:	d010      	beq.n	8003b7e <ADC_ConversionStop+0x56>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b5c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	f012 0f04 	tst.w	r2, #4
 8003b64:	d009      	beq.n	8003b7a <ADC_ConversionStop+0x52>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	f012 0f02 	tst.w	r2, #2
 8003b6c:	d105      	bne.n	8003b7a <ADC_ConversionStop+0x52>
  MODIFY_REG(ADCx->CR,
 8003b6e:	6898      	ldr	r0, [r3, #8]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <ADC_ConversionStop+0xf8>)
 8003b72:	4002      	ands	r2, r0
 8003b74:	f042 0210 	orr.w	r2, r2, #16
 8003b78:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b7a:	2901      	cmp	r1, #1
 8003b7c:	d045      	beq.n	8003c0a <ADC_ConversionStop+0xe2>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b7e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	f012 0f08 	tst.w	r2, #8
 8003b86:	d009      	beq.n	8003b9c <ADC_ConversionStop+0x74>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	f012 0f02 	tst.w	r2, #2
 8003b8e:	d105      	bne.n	8003b9c <ADC_ConversionStop+0x74>
  MODIFY_REG(ADCx->CR,
 8003b90:	6898      	ldr	r0, [r3, #8]
 8003b92:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <ADC_ConversionStop+0xf8>)
 8003b94:	4002      	ands	r2, r0
 8003b96:	f042 0220 	orr.w	r2, r2, #32
 8003b9a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b9c:	2902      	cmp	r1, #2
 8003b9e:	d036      	beq.n	8003c0e <ADC_ConversionStop+0xe6>
 8003ba0:	2903      	cmp	r1, #3
 8003ba2:	d136      	bne.n	8003c12 <ADC_ConversionStop+0xea>
 8003ba4:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ba6:	f7ff fc91 	bl	80034cc <HAL_GetTick>
 8003baa:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	422b      	tst	r3, r5
 8003bb2:	d030      	beq.n	8003c16 <ADC_ConversionStop+0xee>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bb4:	f7ff fc8a 	bl	80034cc <HAL_GetTick>
 8003bb8:	1b83      	subs	r3, r0, r6
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d9f6      	bls.n	8003bac <ADC_ConversionStop+0x84>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	422b      	tst	r3, r5
 8003bc4:	d0f2      	beq.n	8003bac <ADC_ConversionStop+0x84>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bc8:	f043 0310 	orr.w	r3, r3, #16
 8003bcc:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	e020      	b.n	8003c1c <ADC_ConversionStop+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
 8003bec:	e016      	b.n	8003c1c <ADC_ConversionStop+0xf4>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003bee:	2300      	movs	r3, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bf0:	6802      	ldr	r2, [r0, #0]
 8003bf2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003bf6:	d104      	bne.n	8003c02 <ADC_ConversionStop+0xda>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <ADC_ConversionStop+0xfc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d8ed      	bhi.n	8003bda <ADC_ConversionStop+0xb2>
        Conversion_Timeout_CPU_cycles ++;
 8003bfe:	3301      	adds	r3, #1
 8003c00:	e7f6      	b.n	8003bf0 <ADC_ConversionStop+0xc8>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003c02:	2340      	movs	r3, #64	@ 0x40
 8003c04:	6003      	str	r3, [r0, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003c06:	2101      	movs	r1, #1
 8003c08:	e7a8      	b.n	8003b5c <ADC_ConversionStop+0x34>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c0a:	2504      	movs	r5, #4
 8003c0c:	e7cb      	b.n	8003ba6 <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c0e:	2508      	movs	r5, #8
 8003c10:	e7c9      	b.n	8003ba6 <ADC_ConversionStop+0x7e>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c12:	2504      	movs	r5, #4
 8003c14:	e7c7      	b.n	8003ba6 <ADC_ConversionStop+0x7e>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c16:	2000      	movs	r0, #0
 8003c18:	e000      	b.n	8003c1c <ADC_ConversionStop+0xf4>
 8003c1a:	2000      	movs	r0, #0
}
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	bf00      	nop
 8003c20:	7fffffc0 	.word	0x7fffffc0
 8003c24:	000cdbff 	.word	0x000cdbff

08003c28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c28:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	f012 0f01 	tst.w	r2, #1
 8003c32:	d156      	bne.n	8003ce2 <ADC_Enable+0xba>
 8003c34:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c36:	6899      	ldr	r1, [r3, #8]
 8003c38:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce8 <ADC_Enable+0xc0>)
 8003c3a:	4211      	tst	r1, r2
 8003c3c:	d009      	beq.n	8003c52 <ADC_Enable+0x2a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003c40:	f043 0310 	orr.w	r3, r3, #16
 8003c44:	6543      	str	r3, [r0, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c46:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6583      	str	r3, [r0, #88]	@ 0x58

      return HAL_ERROR;
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e048      	b.n	8003ce4 <ADC_Enable+0xbc>
  MODIFY_REG(ADCx->CR,
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	4a25      	ldr	r2, [pc, #148]	@ (8003cec <ADC_Enable+0xc4>)
 8003c56:	400a      	ands	r2, r1
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	609a      	str	r2, [r3, #8]

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c5e:	f7ff fc35 	bl	80034cc <HAL_GetTick>
 8003c62:	4605      	mov	r5, r0

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <ADC_Enable+0xc8>)
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <ADC_Enable+0xcc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	bf18      	it	ne
 8003c6e:	428b      	cmpne	r3, r1
 8003c70:	d10d      	bne.n	8003c8e <ADC_Enable+0x66>
 8003c72:	f502 7200 	add.w	r2, r2, #512	@ 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	f002 021f 	and.w	r2, r2, #31
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c7c:	491d      	ldr	r1, [pc, #116]	@ (8003cf4 <ADC_Enable+0xcc>)
 8003c7e:	428b      	cmp	r3, r1
 8003c80:	d007      	beq.n	8003c92 <ADC_Enable+0x6a>
 8003c82:	4619      	mov	r1, r3
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d007      	beq.n	8003c98 <ADC_Enable+0x70>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c88:	b132      	cbz	r2, 8003c98 <ADC_Enable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e02a      	b.n	8003ce4 <ADC_Enable+0xbc>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf8 <ADC_Enable+0xd0>)
 8003c90:	e7f1      	b.n	8003c76 <ADC_Enable+0x4e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c92:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8003c96:	e7f5      	b.n	8003c84 <ADC_Enable+0x5c>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f012 0f01 	tst.w	r2, #1
 8003ca0:	d11d      	bne.n	8003cde <ADC_Enable+0xb6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	f012 0f01 	tst.w	r2, #1
 8003ca8:	d105      	bne.n	8003cb6 <ADC_Enable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	4a0f      	ldr	r2, [pc, #60]	@ (8003cec <ADC_Enable+0xc4>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cb6:	f7ff fc09 	bl	80034cc <HAL_GetTick>
 8003cba:	1b40      	subs	r0, r0, r5
 8003cbc:	2802      	cmp	r0, #2
 8003cbe:	d9eb      	bls.n	8003c98 <ADC_Enable+0x70>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f013 0f01 	tst.w	r3, #1
 8003cc8:	d1e6      	bne.n	8003c98 <ADC_Enable+0x70>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003ccc:	f043 0310 	orr.w	r3, r3, #16
 8003cd0:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	65a3      	str	r3, [r4, #88]	@ 0x58
            return HAL_ERROR;
 8003cda:	2001      	movs	r0, #1
 8003cdc:	e002      	b.n	8003ce4 <ADC_Enable+0xbc>
  return HAL_OK;
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e000      	b.n	8003ce4 <ADC_Enable+0xbc>
 8003ce2:	2000      	movs	r0, #0
}
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	8000003f 	.word	0x8000003f
 8003cec:	7fffffc0 	.word	0x7fffffc0
 8003cf0:	40022000 	.word	0x40022000
 8003cf4:	40022100 	.word	0x40022100
 8003cf8:	58026300 	.word	0x58026300

08003cfc <HAL_ADC_Start>:
{
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d00:	6803      	ldr	r3, [r0, #0]
 8003d02:	493e      	ldr	r1, [pc, #248]	@ (8003dfc <HAL_ADC_Start+0x100>)
 8003d04:	4a3e      	ldr	r2, [pc, #248]	@ (8003e00 <HAL_ADC_Start+0x104>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bf18      	it	ne
 8003d0a:	428b      	cmpne	r3, r1
 8003d0c:	d152      	bne.n	8003db4 <HAL_ADC_Start+0xb8>
 8003d0e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d12:	6895      	ldr	r5, [r2, #8]
 8003d14:	f005 051f 	and.w	r5, r5, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f013 0f04 	tst.w	r3, #4
 8003d1e:	d169      	bne.n	8003df4 <HAL_ADC_Start+0xf8>
    __HAL_LOCK(hadc);
 8003d20:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d067      	beq.n	8003df8 <HAL_ADC_Start+0xfc>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7ff ff7a 	bl	8003c28 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d159      	bne.n	8003dec <HAL_ADC_Start+0xf0>
      ADC_STATE_CLR_SET(hadc->State,
 8003d38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d3a:	f6a0 7302 	subw	r3, r0, #3842	@ 0xf02
 8003d3e:	4013      	ands	r3, r2
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_ADC_Start+0x104>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d034      	beq.n	8003db8 <HAL_ADC_Start+0xbc>
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d000      	beq.n	8003d56 <HAL_ADC_Start+0x5a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d54:	b91d      	cbnz	r5, 8003d5e <HAL_ADC_Start+0x62>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d58:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003d5c:	6562      	str	r2, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d60:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8003d64:	d02b      	beq.n	8003dbe <HAL_ADC_Start+0xc2>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d66:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003d68:	f022 0206 	bic.w	r2, r2, #6
 8003d6c:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d6e:	221c      	movs	r2, #28
 8003d70:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8003d72:	2300      	movs	r3, #0
 8003d74:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_ADC_Start+0x104>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d021      	beq.n	8003dc4 <HAL_ADC_Start+0xc8>
 8003d80:	461a      	mov	r2, r3
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d021      	beq.n	8003dca <HAL_ADC_Start+0xce>
 8003d86:	2d09      	cmp	r5, #9
 8003d88:	d805      	bhi.n	8003d96 <HAL_ADC_Start+0x9a>
 8003d8a:	f240 2121 	movw	r1, #545	@ 0x221
 8003d8e:	40e9      	lsrs	r1, r5
 8003d90:	f011 0f01 	tst.w	r1, #1
 8003d94:	d119      	bne.n	8003dca <HAL_ADC_Start+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d96:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9c:	6563      	str	r3, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d9e:	68d3      	ldr	r3, [r2, #12]
 8003da0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003da4:	d027      	beq.n	8003df6 <HAL_ADC_Start+0xfa>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003da6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003da8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003db0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003db2:	e020      	b.n	8003df6 <HAL_ADC_Start+0xfa>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003db4:	4a13      	ldr	r2, [pc, #76]	@ (8003e04 <HAL_ADC_Start+0x108>)
 8003db6:	e7ac      	b.n	8003d12 <HAL_ADC_Start+0x16>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003db8:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003dbc:	e7c8      	b.n	8003d50 <HAL_ADC_Start+0x54>
        ADC_CLEAR_ERRORCODE(hadc);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	65a2      	str	r2, [r4, #88]	@ 0x58
 8003dc2:	e7d4      	b.n	8003d6e <HAL_ADC_Start+0x72>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc4:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003dc8:	e7db      	b.n	8003d82 <HAL_ADC_Start+0x86>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003dd0:	d005      	beq.n	8003dde <HAL_ADC_Start+0xe2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dd2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003dd4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ddc:	6562      	str	r2, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <HAL_ADC_Start+0x10c>)
 8003de2:	400a      	ands	r2, r1
 8003de4:	f042 0204 	orr.w	r2, r2, #4
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	e004      	b.n	8003df6 <HAL_ADC_Start+0xfa>
      __HAL_UNLOCK(hadc);
 8003dec:	2300      	movs	r3, #0
 8003dee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_Start+0xfa>
    tmp_hal_status = HAL_BUSY;
 8003df4:	2002      	movs	r0, #2
}
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8003df8:	2002      	movs	r0, #2
 8003dfa:	e7fc      	b.n	8003df6 <HAL_ADC_Start+0xfa>
 8003dfc:	40022000 	.word	0x40022000
 8003e00:	40022100 	.word	0x40022100
 8003e04:	58026300 	.word	0x58026300
 8003e08:	7fffffc0 	.word	0x7fffffc0

08003e0c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e10:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e12:	6893      	ldr	r3, [r2, #8]
 8003e14:	f013 0302 	ands.w	r3, r3, #2
 8003e18:	d000      	beq.n	8003e1c <ADC_Disable+0x10>
 8003e1a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e1c:	6891      	ldr	r1, [r2, #8]
 8003e1e:	f011 0f01 	tst.w	r1, #1
 8003e22:	d037      	beq.n	8003e94 <ADC_Disable+0x88>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d137      	bne.n	8003e98 <ADC_Disable+0x8c>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e28:	6893      	ldr	r3, [r2, #8]
 8003e2a:	f003 030d 	and.w	r3, r3, #13
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d009      	beq.n	8003e46 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e34:	f043 0310 	orr.w	r3, r3, #16
 8003e38:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 8003e42:	2001      	movs	r0, #1
 8003e44:	e027      	b.n	8003e96 <ADC_Disable+0x8a>
  MODIFY_REG(ADCx->CR,
 8003e46:	6891      	ldr	r1, [r2, #8]
 8003e48:	4b14      	ldr	r3, [pc, #80]	@ (8003e9c <ADC_Disable+0x90>)
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	2203      	movs	r2, #3
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e58:	f7ff fb38 	bl	80034cc <HAL_GetTick>
 8003e5c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f013 0f01 	tst.w	r3, #1
 8003e66:	d013      	beq.n	8003e90 <ADC_Disable+0x84>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e68:	f7ff fb30 	bl	80034cc <HAL_GetTick>
 8003e6c:	1b40      	subs	r0, r0, r5
 8003e6e:	2802      	cmp	r0, #2
 8003e70:	d9f5      	bls.n	8003e5e <ADC_Disable+0x52>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f013 0f01 	tst.w	r3, #1
 8003e7a:	d0f0      	beq.n	8003e5e <ADC_Disable+0x52>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e7e:	f043 0310 	orr.w	r3, r3, #16
 8003e82:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	e002      	b.n	8003e96 <ADC_Disable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e90:	2000      	movs	r0, #0
 8003e92:	e000      	b.n	8003e96 <ADC_Disable+0x8a>
 8003e94:	2000      	movs	r0, #0
}
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e7fc      	b.n	8003e96 <ADC_Disable+0x8a>
 8003e9c:	7fffffc0 	.word	0x7fffffc0

08003ea0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003ea0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d018      	beq.n	8003eda <HAL_ADC_Stop+0x3a>
{
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003eac:	2301      	movs	r3, #1
 8003eae:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003eb2:	2103      	movs	r1, #3
 8003eb4:	f7ff fe38 	bl	8003b28 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003eb8:	b118      	cbz	r0, 8003ec2 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003ec0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ffa2 	bl	8003e0c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1f6      	bne.n	8003eba <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8003ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <HAL_ADC_Stop+0x40>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6563      	str	r3, [r4, #84]	@ 0x54
 8003ed8:	e7ef      	b.n	8003eba <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8003eda:	2002      	movs	r0, #2
}
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	ffffeefe 	.word	0xffffeefe

08003ee4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b538      	push	{r3, r4, r5, lr}
 8003ee6:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ee8:	6803      	ldr	r3, [r0, #0]
 8003eea:	494f      	ldr	r1, [pc, #316]	@ (8004028 <ADC_ConfigureBoostMode+0x144>)
 8003eec:	4a4f      	ldr	r2, [pc, #316]	@ (800402c <ADC_ConfigureBoostMode+0x148>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	bf18      	it	ne
 8003ef2:	428b      	cmpne	r3, r1
 8003ef4:	d123      	bne.n	8003f3e <ADC_ConfigureBoostMode+0x5a>
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	@ (8004030 <ADC_ConfigureBoostMode+0x14c>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b34b      	cbz	r3, 8003f5a <ADC_ConfigureBoostMode+0x76>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f06:	f005 fa09 	bl	800931c <HAL_RCC_GetHCLKFreq>
 8003f0a:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003f0c:	6863      	ldr	r3, [r4, #4]
 8003f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f12:	d01c      	beq.n	8003f4e <ADC_ConfigureBoostMode+0x6a>
 8003f14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f18:	d01d      	beq.n	8003f56 <ADC_ConfigureBoostMode+0x72>
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1e:	d016      	beq.n	8003f4e <ADC_ConfigureBoostMode+0x6a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f20:	f7ff faee 	bl	8003500 <HAL_GetREVID>
 8003f24:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003f28:	4298      	cmp	r0, r3
 8003f2a:	d857      	bhi.n	8003fdc <ADC_ConfigureBoostMode+0xf8>
  {
    if (freq > 20000000UL)
 8003f2c:	4b41      	ldr	r3, [pc, #260]	@ (8004034 <ADC_ConfigureBoostMode+0x150>)
 8003f2e:	429d      	cmp	r5, r3
 8003f30:	d94e      	bls.n	8003fd0 <ADC_ConfigureBoostMode+0xec>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	6893      	ldr	r3, [r2, #8]
 8003f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3a:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004038 <ADC_ConfigureBoostMode+0x154>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	e7da      	b.n	8003f04 <ADC_ConfigureBoostMode+0x20>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003f54:	e7e4      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 4UL;
 8003f56:	0885      	lsrs	r5, r0, #2
        break;
 8003f58:	e7e2      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003f5a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f5e:	f006 fb47 	bl	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f62:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003f6a:	d02d      	beq.n	8003fc8 <ADC_ConfigureBoostMode+0xe4>
 8003f6c:	d822      	bhi.n	8003fb4 <ADC_ConfigureBoostMode+0xd0>
 8003f6e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003f72:	d027      	beq.n	8003fc4 <ADC_ConfigureBoostMode+0xe0>
 8003f74:	d904      	bls.n	8003f80 <ADC_ConfigureBoostMode+0x9c>
 8003f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f7a:	d1d1      	bne.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8003f7c:	0945      	lsrs	r5, r0, #5
        break;
 8003f7e:	e7cf      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f84:	d00d      	beq.n	8003fa2 <ADC_ConfigureBoostMode+0xbe>
 8003f86:	d906      	bls.n	8003f96 <ADC_ConfigureBoostMode+0xb2>
 8003f88:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f8c:	d009      	beq.n	8003fa2 <ADC_ConfigureBoostMode+0xbe>
 8003f8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f92:	d006      	beq.n	8003fa2 <ADC_ConfigureBoostMode+0xbe>
 8003f94:	e7c4      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
 8003f96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f9a:	d002      	beq.n	8003fa2 <ADC_ConfigureBoostMode+0xbe>
 8003f9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003fa0:	d104      	bne.n	8003fac <ADC_ConfigureBoostMode+0xc8>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003fa2:	0c9b      	lsrs	r3, r3, #18
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003faa:	e7b9      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 8003fac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fb0:	d0f7      	beq.n	8003fa2 <ADC_ConfigureBoostMode+0xbe>
 8003fb2:	e7b5      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
 8003fb4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003fb8:	d008      	beq.n	8003fcc <ADC_ConfigureBoostMode+0xe8>
 8003fba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003fbe:	d1af      	bne.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 256UL;
 8003fc0:	0a05      	lsrs	r5, r0, #8
        break;
 8003fc2:	e7ad      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 8003fc4:	0905      	lsrs	r5, r0, #4
        break;
 8003fc6:	e7ab      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 64UL;
 8003fc8:	0985      	lsrs	r5, r0, #6
        break;
 8003fca:	e7a9      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
        freq /= 128UL;
 8003fcc:	09c5      	lsrs	r5, r0, #7
        break;
 8003fce:	e7a7      	b.n	8003f20 <ADC_ConfigureBoostMode+0x3c>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fd0:	6822      	ldr	r2, [r4, #0]
 8003fd2:	6893      	ldr	r3, [r2, #8]
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd8:	6093      	str	r3, [r2, #8]
 8003fda:	e7af      	b.n	8003f3c <ADC_ConfigureBoostMode+0x58>
    if (freq <= 6250000UL)
 8003fdc:	4b17      	ldr	r3, [pc, #92]	@ (800403c <ADC_ConfigureBoostMode+0x158>)
 8003fde:	429d      	cmp	r5, r3
 8003fe0:	d805      	bhi.n	8003fee <ADC_ConfigureBoostMode+0x10a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	6893      	ldr	r3, [r2, #8]
 8003fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	e7a6      	b.n	8003f3c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 12500000UL)
 8003fee:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <ADC_ConfigureBoostMode+0x15c>)
 8003ff0:	429d      	cmp	r5, r3
 8003ff2:	d807      	bhi.n	8004004 <ADC_ConfigureBoostMode+0x120>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	6893      	ldr	r3, [r2, #8]
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e79b      	b.n	8003f3c <ADC_ConfigureBoostMode+0x58>
    else if (freq <= 25000000UL)
 8004004:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <ADC_ConfigureBoostMode+0x160>)
 8004006:	429d      	cmp	r5, r3
 8004008:	d807      	bhi.n	800401a <ADC_ConfigureBoostMode+0x136>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800400a:	6822      	ldr	r2, [r4, #0]
 800400c:	6893      	ldr	r3, [r2, #8]
 800400e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004016:	6093      	str	r3, [r2, #8]
 8004018:	e790      	b.n	8003f3c <ADC_ConfigureBoostMode+0x58>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800401a:	6822      	ldr	r2, [r4, #0]
 800401c:	6893      	ldr	r3, [r2, #8]
 800401e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004022:	6093      	str	r3, [r2, #8]
}
 8004024:	e78a      	b.n	8003f3c <ADC_ConfigureBoostMode+0x58>
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40022100 	.word	0x40022100
 8004030:	40022300 	.word	0x40022300
 8004034:	01312d00 	.word	0x01312d00
 8004038:	58026300 	.word	0x58026300
 800403c:	00bebc21 	.word	0x00bebc21
 8004040:	017d7841 	.word	0x017d7841
 8004044:	02faf081 	.word	0x02faf081

08004048 <HAL_ADC_Init>:
{
 8004048:	b530      	push	{r4, r5, lr}
 800404a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800404c:	2300      	movs	r3, #0
 800404e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8004050:	2800      	cmp	r0, #0
 8004052:	f000 810a 	beq.w	800426a <HAL_ADC_Init+0x222>
 8004056:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004058:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800405a:	b1eb      	cbz	r3, 8004098 <HAL_ADC_Init+0x50>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800405c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 8004064:	d003      	beq.n	800406e <HAL_ADC_Init+0x26>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	4a81      	ldr	r2, [pc, #516]	@ (8004270 <HAL_ADC_Init+0x228>)
 800406a:	400a      	ands	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800406e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8004076:	d11c      	bne.n	80040b2 <HAL_ADC_Init+0x6a>
  MODIFY_REG(ADCx->CR,
 8004078:	6899      	ldr	r1, [r3, #8]
 800407a:	4a7e      	ldr	r2, [pc, #504]	@ (8004274 <HAL_ADC_Init+0x22c>)
 800407c:	400a      	ands	r2, r1
 800407e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004082:	609a      	str	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004084:	4b7c      	ldr	r3, [pc, #496]	@ (8004278 <HAL_ADC_Init+0x230>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <HAL_ADC_Init+0x234>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	3301      	adds	r3, #1
 8004094:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004096:	e009      	b.n	80040ac <HAL_ADC_Init+0x64>
    HAL_ADC_MspInit(hadc);
 8004098:	f7fe f9d4 	bl	8002444 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800409c:	2300      	movs	r3, #0
 800409e:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80040a0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 80040a4:	e7da      	b.n	800405c <HAL_ADC_Init+0x14>
      wait_loop_index--;
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80040ac:	9b01      	ldr	r3, [sp, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f9      	bne.n	80040a6 <HAL_ADC_Init+0x5e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040b2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040b4:	6893      	ldr	r3, [r2, #8]
 80040b6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80040ba:	f040 8099 	bne.w	80041f0 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040c0:	f043 0310 	orr.w	r3, r3, #16
 80040c4:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80040ce:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040d0:	6893      	ldr	r3, [r2, #8]
 80040d2:	f013 0304 	ands.w	r3, r3, #4
 80040d6:	d000      	beq.n	80040da <HAL_ADC_Init+0x92>
 80040d8:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040da:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80040dc:	f011 0f10 	tst.w	r1, #16
 80040e0:	f040 80bb 	bne.w	800425a <HAL_ADC_Init+0x212>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 80b8 	bne.w	800425a <HAL_ADC_Init+0x212>
    ADC_STATE_CLR_SET(hadc->State,
 80040ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040f6:	6893      	ldr	r3, [r2, #8]
 80040f8:	f013 0f01 	tst.w	r3, #1
 80040fc:	d11e      	bne.n	800413c <HAL_ADC_Init+0xf4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040fe:	4960      	ldr	r1, [pc, #384]	@ (8004280 <HAL_ADC_Init+0x238>)
 8004100:	4b60      	ldr	r3, [pc, #384]	@ (8004284 <HAL_ADC_Init+0x23c>)
 8004102:	429a      	cmp	r2, r3
 8004104:	bf18      	it	ne
 8004106:	428a      	cmpne	r2, r1
 8004108:	bf0c      	ite	eq
 800410a:	2201      	moveq	r2, #1
 800410c:	2200      	movne	r2, #0
 800410e:	d171      	bne.n	80041f4 <HAL_ADC_Init+0x1ac>
 8004110:	6889      	ldr	r1, [r1, #8]
 8004112:	f011 0101 	ands.w	r1, r1, #1
 8004116:	d000      	beq.n	800411a <HAL_ADC_Init+0xd2>
 8004118:	2101      	movs	r1, #1
 800411a:	4b5a      	ldr	r3, [pc, #360]	@ (8004284 <HAL_ADC_Init+0x23c>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f013 0301 	ands.w	r3, r3, #1
 8004122:	d000      	beq.n	8004126 <HAL_ADC_Init+0xde>
 8004124:	2301      	movs	r3, #1
 8004126:	430b      	orrs	r3, r1
 8004128:	d108      	bne.n	800413c <HAL_ADC_Init+0xf4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800412a:	2a00      	cmp	r2, #0
 800412c:	d068      	beq.n	8004200 <HAL_ADC_Init+0x1b8>
 800412e:	4956      	ldr	r1, [pc, #344]	@ (8004288 <HAL_ADC_Init+0x240>)
 8004130:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004132:	688a      	ldr	r2, [r1, #8]
 8004134:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800413c:	f7ff f9e0 	bl	8003500 <HAL_GetREVID>
 8004140:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004144:	4298      	cmp	r0, r3
 8004146:	d902      	bls.n	800414e <HAL_ADC_Init+0x106>
 8004148:	68a3      	ldr	r3, [r4, #8]
 800414a:	2b10      	cmp	r3, #16
 800414c:	d05a      	beq.n	8004204 <HAL_ADC_Init+0x1bc>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800414e:	7d62      	ldrb	r2, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8004150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004152:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                  hadc->Init.Resolution                                                 |
 8004156:	68a2      	ldr	r2, [r4, #8]
                  hadc->Init.Overrun                                                    |
 8004158:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800415a:	7f22      	ldrb	r2, [r4, #28]
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800415c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004160:	7f22      	ldrb	r2, [r4, #28]
 8004162:	2a01      	cmp	r2, #1
 8004164:	d059      	beq.n	800421a <HAL_ADC_Init+0x1d2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004166:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004168:	b122      	cbz	r2, 8004174 <HAL_ADC_Init+0x12c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800416a:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800416e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004170:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004172:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004174:	6821      	ldr	r1, [r4, #0]
 8004176:	68c8      	ldr	r0, [r1, #12]
 8004178:	4a44      	ldr	r2, [pc, #272]	@ (800428c <HAL_ADC_Init+0x244>)
 800417a:	4002      	ands	r2, r0
 800417c:	431a      	orrs	r2, r3
 800417e:	60ca      	str	r2, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004180:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004182:	688a      	ldr	r2, [r1, #8]
 8004184:	f012 0204 	ands.w	r2, r2, #4
 8004188:	d000      	beq.n	800418c <HAL_ADC_Init+0x144>
 800418a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800418c:	688b      	ldr	r3, [r1, #8]
 800418e:	f013 0308 	ands.w	r3, r3, #8
 8004192:	d000      	beq.n	8004196 <HAL_ADC_Init+0x14e>
 8004194:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004196:	4313      	orrs	r3, r2
 8004198:	d11b      	bne.n	80041d2 <HAL_ADC_Init+0x18a>
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800419a:	7d22      	ldrb	r2, [r4, #20]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800419c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
      tmpCFGR = (
 800419e:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041a2:	68c8      	ldr	r0, [r1, #12]
 80041a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004290 <HAL_ADC_Init+0x248>)
 80041a6:	4003      	ands	r3, r0
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80041ac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d037      	beq.n	8004224 <HAL_ADC_Init+0x1dc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6913      	ldr	r3, [r2, #16]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6913      	ldr	r3, [r2, #16]
 80041c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80041c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff fe89 	bl	8003ee4 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d037      	beq.n	8004248 <HAL_ADC_Init+0x200>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80041dc:	f023 030f 	bic.w	r3, r3, #15
 80041e0:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80041e4:	f023 0303 	bic.w	r3, r3, #3
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6563      	str	r3, [r4, #84]	@ 0x54
 80041ee:	e039      	b.n	8004264 <HAL_ADC_Init+0x21c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f0:	2500      	movs	r5, #0
 80041f2:	e76d      	b.n	80040d0 <HAL_ADC_Init+0x88>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f4:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <HAL_ADC_Init+0x24c>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f013 0f01 	tst.w	r3, #1
 80041fc:	d19e      	bne.n	800413c <HAL_ADC_Init+0xf4>
 80041fe:	e794      	b.n	800412a <HAL_ADC_Init+0xe2>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004200:	4925      	ldr	r1, [pc, #148]	@ (8004298 <HAL_ADC_Init+0x250>)
 8004202:	e795      	b.n	8004130 <HAL_ADC_Init+0xe8>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004204:	7d61      	ldrb	r1, [r4, #21]
                  hadc->Init.Overrun                                                    |
 8004206:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004208:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
                  hadc->Init.Overrun                                                    |
 800420c:	4313      	orrs	r3, r2
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800420e:	7f22      	ldrb	r2, [r4, #28]
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004214:	f043 030c 	orr.w	r3, r3, #12
 8004218:	e7a2      	b.n	8004160 <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800421a:	6a22      	ldr	r2, [r4, #32]
 800421c:	3a01      	subs	r2, #1
 800421e:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004222:	e7a0      	b.n	8004166 <HAL_ADC_Init+0x11e>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	6902      	ldr	r2, [r0, #16]
 8004228:	4b1c      	ldr	r3, [pc, #112]	@ (800429c <HAL_ADC_Init+0x254>)
 800422a:	4013      	ands	r3, r2
 800422c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800422e:	1e51      	subs	r1, r2, #1
 8004230:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004236:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004238:	430a      	orrs	r2, r1
 800423a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800423c:	430a      	orrs	r2, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6103      	str	r3, [r0, #16]
 8004246:	e7ba      	b.n	80041be <HAL_ADC_Init+0x176>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004248:	6821      	ldr	r1, [r4, #0]
 800424a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800424c:	f023 030f 	bic.w	r3, r3, #15
 8004250:	69a2      	ldr	r2, [r4, #24]
 8004252:	3a01      	subs	r2, #1
 8004254:	4313      	orrs	r3, r2
 8004256:	630b      	str	r3, [r1, #48]	@ 0x30
 8004258:	e7c3      	b.n	80041e2 <HAL_ADC_Init+0x19a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800425c:	f043 0310 	orr.w	r3, r3, #16
 8004260:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8004262:	2501      	movs	r5, #1
}
 8004264:	4628      	mov	r0, r5
 8004266:	b003      	add	sp, #12
 8004268:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800426a:	2501      	movs	r5, #1
 800426c:	e7fa      	b.n	8004264 <HAL_ADC_Init+0x21c>
 800426e:	bf00      	nop
 8004270:	5fffffc0 	.word	0x5fffffc0
 8004274:	6fffffc0 	.word	0x6fffffc0
 8004278:	24000004 	.word	0x24000004
 800427c:	053e2d63 	.word	0x053e2d63
 8004280:	40022000 	.word	0x40022000
 8004284:	40022100 	.word	0x40022100
 8004288:	40022300 	.word	0x40022300
 800428c:	fff0c003 	.word	0xfff0c003
 8004290:	ffffbffc 	.word	0xffffbffc
 8004294:	58026000 	.word	0x58026000
 8004298:	58026300 	.word	0x58026300
 800429c:	fc00f81e 	.word	0xfc00f81e

080042a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042a8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d043      	beq.n	8004338 <HAL_ADCEx_Calibration_Start+0x98>
 80042b0:	4604      	mov	r4, r0
 80042b2:	460d      	mov	r5, r1
 80042b4:	4616      	mov	r6, r2
 80042b6:	2301      	movs	r3, #1
 80042b8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042bc:	f7ff fda6 	bl	8003e0c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d130      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042c6:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <HAL_ADCEx_Calibration_Start+0x9c>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80042d0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80042d2:	688a      	ldr	r2, [r1, #8]
 80042d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004340 <HAL_ADCEx_Calibration_Start+0xa0>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	f405 3580 	and.w	r5, r5, #65536	@ 0x10000
 80042dc:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 80042e0:	ea45 0206 	orr.w	r2, r5, r6
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ea:	608b      	str	r3, [r1, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042ec:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db06      	blt.n	8004302 <HAL_ADCEx_Calibration_Start+0x62>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8004300:	e015      	b.n	800432e <HAL_ADCEx_Calibration_Start+0x8e>
      wait_loop_index++;
 8004302:	9b01      	ldr	r3, [sp, #4]
 8004304:	3301      	adds	r3, #1
 8004306:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004308:	9a01      	ldr	r2, [sp, #4]
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <HAL_ADCEx_Calibration_Start+0xa4>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d3ed      	bcc.n	80042ec <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8004310:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004312:	f023 0312 	bic.w	r3, r3, #18
 8004316:	f043 0310 	orr.w	r3, r3, #16
 800431a:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800431c:	2300      	movs	r3, #0
 800431e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
 8004324:	e006      	b.n	8004334 <HAL_ADCEx_Calibration_Start+0x94>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004326:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004328:	f043 0310 	orr.w	r3, r3, #16
 800432c:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800432e:	2300      	movs	r3, #0
 8004330:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004334:	b002      	add	sp, #8
 8004336:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8004338:	2002      	movs	r0, #2
 800433a:	e7fb      	b.n	8004334 <HAL_ADCEx_Calibration_Start+0x94>
 800433c:	ffffeefd 	.word	0xffffeefd
 8004340:	3ffeffc0 	.word	0x3ffeffc0
 8004344:	25c3f800 	.word	0x25c3f800

08004348 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004348:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 800434c:	2a01      	cmp	r2, #1
 800434e:	f000 8096 	beq.w	800447e <HAL_ADCEx_MultiModeConfigChannel+0x136>
{
 8004352:	b430      	push	{r4, r5}
 8004354:	b09a      	sub	sp, #104	@ 0x68
 8004356:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004358:	2201      	movs	r2, #1
 800435a:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800435e:	2200      	movs	r2, #0
 8004360:	9216      	str	r2, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004362:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	4a47      	ldr	r2, [pc, #284]	@ (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004368:	4290      	cmp	r0, r2
 800436a:	d036      	beq.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800436c:	2200      	movs	r2, #0
 800436e:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 8004370:	9a01      	ldr	r2, [sp, #4]
 8004372:	2a00      	cmp	r2, #0
 8004374:	d035      	beq.n	80043e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004376:	6892      	ldr	r2, [r2, #8]
 8004378:	f012 0204 	ands.w	r2, r2, #4
 800437c:	d000      	beq.n	8004380 <HAL_ADCEx_MultiModeConfigChannel+0x38>
 800437e:	2201      	movs	r2, #1
 8004380:	6884      	ldr	r4, [r0, #8]
 8004382:	f014 0f04 	tst.w	r4, #4
 8004386:	d16b      	bne.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004388:	2a00      	cmp	r2, #0
 800438a:	d169      	bne.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0x118>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800438c:	4c3d      	ldr	r4, [pc, #244]	@ (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800438e:	4a3e      	ldr	r2, [pc, #248]	@ (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004390:	4290      	cmp	r0, r2
 8004392:	bf18      	it	ne
 8004394:	42a0      	cmpne	r0, r4
 8004396:	d12d      	bne.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004398:	f502 7200 	add.w	r2, r2, #512	@ 0x200

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800439c:	6808      	ldr	r0, [r1, #0]
 800439e:	2800      	cmp	r0, #0
 80043a0:	d039      	beq.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80043a2:	6890      	ldr	r0, [r2, #8]
 80043a4:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80043a8:	684c      	ldr	r4, [r1, #4]
 80043aa:	4320      	orrs	r0, r4
 80043ac:	6090      	str	r0, [r2, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	4d34      	ldr	r5, [pc, #208]	@ (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80043b2:	4c35      	ldr	r4, [pc, #212]	@ (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	bf18      	it	ne
 80043b8:	42a8      	cmpne	r0, r5
 80043ba:	d11d      	bne.n	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043bc:	68ac      	ldr	r4, [r5, #8]
 80043be:	f014 0401 	ands.w	r4, r4, #1
 80043c2:	d000      	beq.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 80043c4:	2401      	movs	r4, #1
 80043c6:	4830      	ldr	r0, [pc, #192]	@ (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80043c8:	6880      	ldr	r0, [r0, #8]
 80043ca:	f010 0001 	ands.w	r0, r0, #1
 80043ce:	d000      	beq.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 80043d0:	2001      	movs	r0, #1
 80043d2:	4320      	orrs	r0, r4
 80043d4:	d015      	beq.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d6:	2000      	movs	r0, #0
 80043d8:	e047      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043da:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80043de:	9201      	str	r2, [sp, #4]
 80043e0:	e7c6      	b.n	8004370 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
 80043f2:	e03d      	b.n	8004470 <HAL_ADCEx_MultiModeConfigChannel+0x128>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043f4:	4a25      	ldr	r2, [pc, #148]	@ (800448c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80043f6:	e7d1      	b.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80043f8:	4825      	ldr	r0, [pc, #148]	@ (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80043fa:	6880      	ldr	r0, [r0, #8]
 80043fc:	f010 0f01 	tst.w	r0, #1
 8004400:	d139      	bne.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004402:	6894      	ldr	r4, [r2, #8]
 8004404:	4823      	ldr	r0, [pc, #140]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004406:	4020      	ands	r0, r4
 8004408:	680c      	ldr	r4, [r1, #0]
 800440a:	6889      	ldr	r1, [r1, #8]
 800440c:	4321      	orrs	r1, r4
 800440e:	4308      	orrs	r0, r1
 8004410:	6090      	str	r0, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004412:	2000      	movs	r0, #0
 8004414:	e029      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004416:	6891      	ldr	r1, [r2, #8]
 8004418:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 800441c:	6091      	str	r1, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	4c18      	ldr	r4, [pc, #96]	@ (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004422:	4819      	ldr	r0, [pc, #100]	@ (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004424:	4281      	cmp	r1, r0
 8004426:	bf18      	it	ne
 8004428:	42a1      	cmpne	r1, r4
 800442a:	d10e      	bne.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x102>
 800442c:	68a0      	ldr	r0, [r4, #8]
 800442e:	f010 0001 	ands.w	r0, r0, #1
 8004432:	d000      	beq.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004434:	2001      	movs	r0, #1
 8004436:	4914      	ldr	r1, [pc, #80]	@ (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004438:	6889      	ldr	r1, [r1, #8]
 800443a:	f011 0101 	ands.w	r1, r1, #1
 800443e:	d000      	beq.n	8004442 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004440:	2101      	movs	r1, #1
 8004442:	4301      	orrs	r1, r0
 8004444:	d006      	beq.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004446:	2000      	movs	r0, #0
 8004448:	e00f      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
 800444a:	4911      	ldr	r1, [pc, #68]	@ (8004490 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800444c:	6889      	ldr	r1, [r1, #8]
 800444e:	f011 0f01 	tst.w	r1, #1
 8004452:	d112      	bne.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004454:	6890      	ldr	r0, [r2, #8]
 8004456:	490f      	ldr	r1, [pc, #60]	@ (8004494 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004458:	4001      	ands	r1, r0
 800445a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800445c:	2000      	movs	r0, #0
 800445e:	e004      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004468:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004470:	b01a      	add	sp, #104	@ 0x68
 8004472:	bc30      	pop	{r4, r5}
 8004474:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004476:	2000      	movs	r0, #0
 8004478:	e7f7      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
 800447a:	2000      	movs	r0, #0
 800447c:	e7f5      	b.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x122>
  __HAL_LOCK(hadc);
 800447e:	2002      	movs	r0, #2
}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40022000 	.word	0x40022000
 8004488:	40022100 	.word	0x40022100
 800448c:	58026300 	.word	0x58026300
 8004490:	58026000 	.word	0x58026000
 8004494:	fffff0e0 	.word	0xfffff0e0

08004498 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004498:	2800      	cmp	r0, #0
 800449a:	db07      	blt.n	80044ac <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800449c:	f000 021f 	and.w	r2, r0, #31
 80044a0:	0940      	lsrs	r0, r0, #5
 80044a2:	2301      	movs	r3, #1
 80044a4:	4093      	lsls	r3, r2
 80044a6:	4a02      	ldr	r2, [pc, #8]	@ (80044b0 <__NVIC_EnableIRQ+0x18>)
 80044a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80044b4:	2800      	cmp	r0, #0
 80044b6:	db04      	blt.n	80044c2 <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	0109      	lsls	r1, r1, #4
 80044ba:	b2c9      	uxtb	r1, r1
 80044bc:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <__NVIC_SetPriority+0x1c>)
 80044be:	5419      	strb	r1, [r3, r0]
 80044c0:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c2:	f000 000f 	and.w	r0, r0, #15
 80044c6:	0109      	lsls	r1, r1, #4
 80044c8:	b2c9      	uxtb	r1, r1
 80044ca:	4b02      	ldr	r3, [pc, #8]	@ (80044d4 <__NVIC_SetPriority+0x20>)
 80044cc:	5419      	strb	r1, [r3, r0]
  }
}
 80044ce:	4770      	bx	lr
 80044d0:	e000e400 	.word	0xe000e400
 80044d4:	e000ed14 	.word	0xe000ed14

080044d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044da:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044de:	f1c0 0c07 	rsb	ip, r0, #7
 80044e2:	f1bc 0f04 	cmp.w	ip, #4
 80044e6:	bf28      	it	cs
 80044e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ec:	1d03      	adds	r3, r0, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d90f      	bls.n	8004512 <NVIC_EncodePriority+0x3a>
 80044f2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f4:	f04f 3eff 	mov.w	lr, #4294967295
 80044f8:	fa0e f00c 	lsl.w	r0, lr, ip
 80044fc:	ea21 0100 	bic.w	r1, r1, r0
 8004500:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004502:	fa0e fe03 	lsl.w	lr, lr, r3
 8004506:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800450a:	ea41 0002 	orr.w	r0, r1, r2
 800450e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	2300      	movs	r3, #0
 8004514:	e7ee      	b.n	80044f4 <NVIC_EncodePriority+0x1c>
	...

08004518 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004518:	4906      	ldr	r1, [pc, #24]	@ (8004534 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800451a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004524:	0200      	lsls	r0, r0, #8
 8004526:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800452a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800452c:	4a02      	ldr	r2, [pc, #8]	@ (8004538 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800452e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8004530:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00
 8004538:	05fa0000 	.word	0x05fa0000

0800453c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800453c:	b510      	push	{r4, lr}
 800453e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_NVIC_SetPriority+0x1c>)
 8004542:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004544:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004548:	f7ff ffc6 	bl	80044d8 <NVIC_EncodePriority>
 800454c:	4601      	mov	r1, r0
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff ffb0 	bl	80044b4 <__NVIC_SetPriority>
}
 8004554:	bd10      	pop	{r4, pc}
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800455e:	f7ff ff9b 	bl	8004498 <__NVIC_EnableIRQ>
}
 8004562:	bd08      	pop	{r3, pc}

08004564 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004564:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004566:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004568:	6804      	ldr	r4, [r0, #0]
 800456a:	4e66      	ldr	r6, [pc, #408]	@ (8004704 <DMA_SetConfig+0x1a0>)
 800456c:	4d66      	ldr	r5, [pc, #408]	@ (8004708 <DMA_SetConfig+0x1a4>)
 800456e:	42ac      	cmp	r4, r5
 8004570:	bf18      	it	ne
 8004572:	42b4      	cmpne	r4, r6
 8004574:	d042      	beq.n	80045fc <DMA_SetConfig+0x98>
 8004576:	3518      	adds	r5, #24
 8004578:	42ac      	cmp	r4, r5
 800457a:	d03f      	beq.n	80045fc <DMA_SetConfig+0x98>
 800457c:	3518      	adds	r5, #24
 800457e:	42ac      	cmp	r4, r5
 8004580:	d03c      	beq.n	80045fc <DMA_SetConfig+0x98>
 8004582:	3518      	adds	r5, #24
 8004584:	42ac      	cmp	r4, r5
 8004586:	d039      	beq.n	80045fc <DMA_SetConfig+0x98>
 8004588:	3518      	adds	r5, #24
 800458a:	42ac      	cmp	r4, r5
 800458c:	d036      	beq.n	80045fc <DMA_SetConfig+0x98>
 800458e:	3518      	adds	r5, #24
 8004590:	42ac      	cmp	r4, r5
 8004592:	d033      	beq.n	80045fc <DMA_SetConfig+0x98>
 8004594:	3518      	adds	r5, #24
 8004596:	42ac      	cmp	r4, r5
 8004598:	d030      	beq.n	80045fc <DMA_SetConfig+0x98>
 800459a:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 800459e:	42ac      	cmp	r4, r5
 80045a0:	d02c      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045a2:	3518      	adds	r5, #24
 80045a4:	42ac      	cmp	r4, r5
 80045a6:	d029      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045a8:	3518      	adds	r5, #24
 80045aa:	42ac      	cmp	r4, r5
 80045ac:	d026      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045ae:	3518      	adds	r5, #24
 80045b0:	42ac      	cmp	r4, r5
 80045b2:	d023      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045b4:	3518      	adds	r5, #24
 80045b6:	42ac      	cmp	r4, r5
 80045b8:	d020      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045ba:	3518      	adds	r5, #24
 80045bc:	42ac      	cmp	r4, r5
 80045be:	d01d      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045c0:	3518      	adds	r5, #24
 80045c2:	42ac      	cmp	r4, r5
 80045c4:	d01a      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045c6:	3518      	adds	r5, #24
 80045c8:	42ac      	cmp	r4, r5
 80045ca:	d017      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045cc:	4d4f      	ldr	r5, [pc, #316]	@ (800470c <DMA_SetConfig+0x1a8>)
 80045ce:	42ac      	cmp	r4, r5
 80045d0:	d014      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045d2:	3514      	adds	r5, #20
 80045d4:	42ac      	cmp	r4, r5
 80045d6:	d011      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045d8:	3514      	adds	r5, #20
 80045da:	42ac      	cmp	r4, r5
 80045dc:	d00e      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045de:	3514      	adds	r5, #20
 80045e0:	42ac      	cmp	r4, r5
 80045e2:	d00b      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045e4:	3514      	adds	r5, #20
 80045e6:	42ac      	cmp	r4, r5
 80045e8:	d008      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045ea:	3514      	adds	r5, #20
 80045ec:	42ac      	cmp	r4, r5
 80045ee:	d005      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045f0:	3514      	adds	r5, #20
 80045f2:	42ac      	cmp	r4, r5
 80045f4:	d002      	beq.n	80045fc <DMA_SetConfig+0x98>
 80045f6:	3514      	adds	r5, #20
 80045f8:	42ac      	cmp	r4, r5
 80045fa:	d107      	bne.n	800460c <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045fc:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 80045fe:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8004600:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004602:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
 8004604:	b114      	cbz	r4, 800460c <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004606:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8004608:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 800460a:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800460c:	6804      	ldr	r4, [r0, #0]
 800460e:	4e3d      	ldr	r6, [pc, #244]	@ (8004704 <DMA_SetConfig+0x1a0>)
 8004610:	4d3d      	ldr	r5, [pc, #244]	@ (8004708 <DMA_SetConfig+0x1a4>)
 8004612:	42ac      	cmp	r4, r5
 8004614:	bf18      	it	ne
 8004616:	42b4      	cmpne	r4, r6
 8004618:	d052      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800461a:	3518      	adds	r5, #24
 800461c:	42ac      	cmp	r4, r5
 800461e:	d04f      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004620:	3518      	adds	r5, #24
 8004622:	42ac      	cmp	r4, r5
 8004624:	d04c      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004626:	3518      	adds	r5, #24
 8004628:	42ac      	cmp	r4, r5
 800462a:	d049      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800462c:	3518      	adds	r5, #24
 800462e:	42ac      	cmp	r4, r5
 8004630:	d046      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004632:	3518      	adds	r5, #24
 8004634:	42ac      	cmp	r4, r5
 8004636:	d043      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004638:	3518      	adds	r5, #24
 800463a:	42ac      	cmp	r4, r5
 800463c:	d040      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800463e:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004642:	42ac      	cmp	r4, r5
 8004644:	d03c      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004646:	3518      	adds	r5, #24
 8004648:	42ac      	cmp	r4, r5
 800464a:	d039      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800464c:	3518      	adds	r5, #24
 800464e:	42ac      	cmp	r4, r5
 8004650:	d036      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004652:	3518      	adds	r5, #24
 8004654:	42ac      	cmp	r4, r5
 8004656:	d033      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004658:	3518      	adds	r5, #24
 800465a:	42ac      	cmp	r4, r5
 800465c:	d030      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800465e:	3518      	adds	r5, #24
 8004660:	42ac      	cmp	r4, r5
 8004662:	d02d      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 8004664:	3518      	adds	r5, #24
 8004666:	42ac      	cmp	r4, r5
 8004668:	d02a      	beq.n	80046c0 <DMA_SetConfig+0x15c>
 800466a:	3518      	adds	r5, #24
 800466c:	42ac      	cmp	r4, r5
 800466e:	d027      	beq.n	80046c0 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004670:	4e26      	ldr	r6, [pc, #152]	@ (800470c <DMA_SetConfig+0x1a8>)
 8004672:	4d27      	ldr	r5, [pc, #156]	@ (8004710 <DMA_SetConfig+0x1ac>)
 8004674:	42ac      	cmp	r4, r5
 8004676:	bf18      	it	ne
 8004678:	42b4      	cmpne	r4, r6
 800467a:	d011      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 800467c:	4d25      	ldr	r5, [pc, #148]	@ (8004714 <DMA_SetConfig+0x1b0>)
 800467e:	42ac      	cmp	r4, r5
 8004680:	d00e      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 8004682:	3514      	adds	r5, #20
 8004684:	42ac      	cmp	r4, r5
 8004686:	d00b      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 8004688:	3514      	adds	r5, #20
 800468a:	42ac      	cmp	r4, r5
 800468c:	d008      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 800468e:	3514      	adds	r5, #20
 8004690:	42ac      	cmp	r4, r5
 8004692:	d005      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 8004694:	3514      	adds	r5, #20
 8004696:	42ac      	cmp	r4, r5
 8004698:	d002      	beq.n	80046a0 <DMA_SetConfig+0x13c>
 800469a:	3514      	adds	r5, #20
 800469c:	42ac      	cmp	r4, r5
 800469e:	d124      	bne.n	80046ea <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046a0:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80046a2:	f004 051f 	and.w	r5, r4, #31
 80046a6:	2401      	movs	r4, #1
 80046a8:	40ac      	lsls	r4, r5
 80046aa:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80046ac:	6804      	ldr	r4, [r0, #0]
 80046ae:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d020      	beq.n	80046f8 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80046b6:	6803      	ldr	r3, [r0, #0]
 80046b8:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80046ba:	6803      	ldr	r3, [r0, #0]
 80046bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046be:	e014      	b.n	80046ea <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046c0:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 80046c2:	f004 0c1f 	and.w	ip, r4, #31
 80046c6:	243f      	movs	r4, #63	@ 0x3f
 80046c8:	fa04 f40c 	lsl.w	r4, r4, ip
 80046cc:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046ce:	6805      	ldr	r5, [r0, #0]
 80046d0:	682c      	ldr	r4, [r5, #0]
 80046d2:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80046d6:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046d8:	6804      	ldr	r4, [r0, #0]
 80046da:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046dc:	6883      	ldr	r3, [r0, #8]
 80046de:	2b40      	cmp	r3, #64	@ 0x40
 80046e0:	d005      	beq.n	80046ee <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80046e2:	6803      	ldr	r3, [r0, #0]
 80046e4:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80046e6:	6803      	ldr	r3, [r0, #0]
 80046e8:	60da      	str	r2, [r3, #12]
}
 80046ea:	bcf0      	pop	{r4, r5, r6, r7}
 80046ec:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80046ee:	6803      	ldr	r3, [r0, #0]
 80046f0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	60d9      	str	r1, [r3, #12]
 80046f6:	e7f8      	b.n	80046ea <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80046f8:	6803      	ldr	r3, [r0, #0]
 80046fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80046fc:	6803      	ldr	r3, [r0, #0]
 80046fe:	60d9      	str	r1, [r3, #12]
 8004700:	e7f3      	b.n	80046ea <DMA_SetConfig+0x186>
 8004702:	bf00      	nop
 8004704:	40020010 	.word	0x40020010
 8004708:	40020028 	.word	0x40020028
 800470c:	58025408 	.word	0x58025408
 8004710:	5802541c 	.word	0x5802541c
 8004714:	58025430 	.word	0x58025430

08004718 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004718:	6803      	ldr	r3, [r0, #0]
 800471a:	4927      	ldr	r1, [pc, #156]	@ (80047b8 <DMA_CalcBaseAndBitshift+0xa0>)
 800471c:	4a27      	ldr	r2, [pc, #156]	@ (80047bc <DMA_CalcBaseAndBitshift+0xa4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	bf18      	it	ne
 8004722:	428b      	cmpne	r3, r1
 8004724:	d02f      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004726:	3218      	adds	r2, #24
 8004728:	4293      	cmp	r3, r2
 800472a:	d02c      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 800472c:	3218      	adds	r2, #24
 800472e:	4293      	cmp	r3, r2
 8004730:	d029      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004732:	3218      	adds	r2, #24
 8004734:	4293      	cmp	r3, r2
 8004736:	d026      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004738:	3218      	adds	r2, #24
 800473a:	4293      	cmp	r3, r2
 800473c:	d023      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 800473e:	3218      	adds	r2, #24
 8004740:	4293      	cmp	r3, r2
 8004742:	d020      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004744:	3218      	adds	r2, #24
 8004746:	4293      	cmp	r3, r2
 8004748:	d01d      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 800474a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800474e:	4293      	cmp	r3, r2
 8004750:	d019      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004752:	3218      	adds	r2, #24
 8004754:	4293      	cmp	r3, r2
 8004756:	d016      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004758:	3218      	adds	r2, #24
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 800475e:	3218      	adds	r2, #24
 8004760:	4293      	cmp	r3, r2
 8004762:	d010      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004764:	3218      	adds	r2, #24
 8004766:	4293      	cmp	r3, r2
 8004768:	d00d      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 800476a:	3218      	adds	r2, #24
 800476c:	4293      	cmp	r3, r2
 800476e:	d00a      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004770:	3218      	adds	r2, #24
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
 8004776:	3218      	adds	r2, #24
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800477c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004780:	6583      	str	r3, [r0, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 8004782:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8004784:	4770      	bx	lr
{
 8004786:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004788:	b2d9      	uxtb	r1, r3
 800478a:	3910      	subs	r1, #16
 800478c:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <DMA_CalcBaseAndBitshift+0xa8>)
 800478e:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004792:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004796:	4c0b      	ldr	r4, [pc, #44]	@ (80047c4 <DMA_CalcBaseAndBitshift+0xac>)
 8004798:	5ca2      	ldrb	r2, [r4, r2]
 800479a:	65c2      	str	r2, [r0, #92]	@ 0x5c
    if (stream_number > 3U)
 800479c:	295f      	cmp	r1, #95	@ 0x5f
 800479e:	d907      	bls.n	80047b0 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80047a0:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <DMA_CalcBaseAndBitshift+0xb0>)
 80047a2:	401a      	ands	r2, r3
 80047a4:	3204      	adds	r2, #4
 80047a6:	6582      	str	r2, [r0, #88]	@ 0x58
}
 80047a8:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80047aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ae:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80047b0:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <DMA_CalcBaseAndBitshift+0xb0>)
 80047b2:	401a      	ands	r2, r3
 80047b4:	6582      	str	r2, [r0, #88]	@ 0x58
 80047b6:	e7f7      	b.n	80047a8 <DMA_CalcBaseAndBitshift+0x90>
 80047b8:	40020010 	.word	0x40020010
 80047bc:	40020028 	.word	0x40020028
 80047c0:	aaaaaaab 	.word	0xaaaaaaab
 80047c4:	0801df5c 	.word	0x0801df5c
 80047c8:	fffffc00 	.word	0xfffffc00

080047cc <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047cc:	6983      	ldr	r3, [r0, #24]
 80047ce:	b99b      	cbnz	r3, 80047f8 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80047d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d00a      	beq.n	80047ec <DMA_CheckFifoParam+0x20>
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d002      	beq.n	80047e0 <DMA_CheckFifoParam+0x14>
 80047da:	b10b      	cbz	r3, 80047e0 <DMA_CheckFifoParam+0x14>
 80047dc:	2000      	movs	r0, #0
 80047de:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047e0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80047e2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80047e6:	d12a      	bne.n	800483e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2000      	movs	r0, #0
 80047ea:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80047ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047f2:	d026      	beq.n	8004842 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2000      	movs	r0, #0
 80047f6:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d00a      	beq.n	8004814 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	d926      	bls.n	8004852 <DMA_CheckFifoParam+0x86>
 8004804:	2b03      	cmp	r3, #3
 8004806:	d126      	bne.n	8004856 <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004808:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800480a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800480e:	d124      	bne.n	800485a <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	2000      	movs	r0, #0
 8004812:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004814:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004816:	2b03      	cmp	r3, #3
 8004818:	d803      	bhi.n	8004822 <DMA_CheckFifoParam+0x56>
 800481a:	e8df f003 	tbb	[pc, r3]
 800481e:	0414      	.short	0x0414
 8004820:	0a14      	.short	0x0a14
 8004822:	2000      	movs	r0, #0
 8004824:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004826:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004828:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800482c:	d10d      	bne.n	800484a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2000      	movs	r0, #0
 8004830:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004832:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004834:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004838:	d009      	beq.n	800484e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2000      	movs	r0, #0
 800483c:	4770      	bx	lr
          status = HAL_ERROR;
 800483e:	2001      	movs	r0, #1
 8004840:	4770      	bx	lr
          status = HAL_ERROR;
 8004842:	2001      	movs	r0, #1
 8004844:	4770      	bx	lr
        status = HAL_ERROR;
 8004846:	2001      	movs	r0, #1
 8004848:	4770      	bx	lr
          status = HAL_ERROR;
 800484a:	2001      	movs	r0, #1
 800484c:	4770      	bx	lr
          status = HAL_ERROR;
 800484e:	2001      	movs	r0, #1
 8004850:	4770      	bx	lr
        status = HAL_ERROR;
 8004852:	2001      	movs	r0, #1
 8004854:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8004856:	2000      	movs	r0, #0
 8004858:	4770      	bx	lr
        {
          status = HAL_ERROR;
 800485a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 800485c:	4770      	bx	lr
	...

08004860 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004860:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004862:	4921      	ldr	r1, [pc, #132]	@ (80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004864:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	bf18      	it	ne
 800486a:	428b      	cmpne	r3, r1
 800486c:	d027      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800486e:	3214      	adds	r2, #20
 8004870:	4293      	cmp	r3, r2
 8004872:	d024      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004874:	3214      	adds	r2, #20
 8004876:	4293      	cmp	r3, r2
 8004878:	d021      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800487a:	3214      	adds	r2, #20
 800487c:	4293      	cmp	r3, r2
 800487e:	d01e      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004880:	3214      	adds	r2, #20
 8004882:	4293      	cmp	r3, r2
 8004884:	d01b      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004886:	3214      	adds	r2, #20
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800488c:	3214      	adds	r2, #20
 800488e:	4293      	cmp	r3, r2
 8004890:	d015      	beq.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004892:	b2da      	uxtb	r2, r3
 8004894:	3a10      	subs	r2, #16
 8004896:	4916      	ldr	r1, [pc, #88]	@ (80048f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8004898:	fba1 1202 	umull	r1, r2, r1, r2
 800489c:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800489e:	4915      	ldr	r1, [pc, #84]	@ (80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 80048a0:	4419      	add	r1, r3
 80048a2:	29a8      	cmp	r1, #168	@ 0xa8
 80048a4:	d91e      	bls.n	80048e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048a6:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	6603      	str	r3, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048ae:	4b13      	ldr	r3, [pc, #76]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 80048b0:	6643      	str	r3, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048b2:	f002 021f 	and.w	r2, r2, #31
 80048b6:	2301      	movs	r3, #1
 80048b8:	4093      	lsls	r3, r2
 80048ba:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 80048bc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3b08      	subs	r3, #8
 80048c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80048c4:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80048ca:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	6602      	str	r2, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80048d4:	6642      	str	r2, [r0, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048d6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80048da:	2201      	movs	r2, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	6683      	str	r3, [r0, #104]	@ 0x68
 80048e2:	4770      	bx	lr
      stream_number += 8U;
 80048e4:	3208      	adds	r2, #8
 80048e6:	e7de      	b.n	80048a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 80048e8:	58025408 	.word	0x58025408
 80048ec:	5802541c 	.word	0x5802541c
 80048f0:	aaaaaaab 	.word	0xaaaaaaab
 80048f4:	bffdfbf0 	.word	0xbffdfbf0
 80048f8:	10008200 	.word	0x10008200
 80048fc:	40020880 	.word	0x40020880
 8004900:	cccccccd 	.word	0xcccccccd
 8004904:	16009600 	.word	0x16009600
 8004908:	58025880 	.word	0x58025880

0800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800490c:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800490e:	1e4a      	subs	r2, r1, #1
 8004910:	2a07      	cmp	r2, #7
 8004912:	d82b      	bhi.n	800496c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8004914:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004916:	6803      	ldr	r3, [r0, #0]
 8004918:	4d15      	ldr	r5, [pc, #84]	@ (8004970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800491a:	4c16      	ldr	r4, [pc, #88]	@ (8004974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 800491c:	42a3      	cmp	r3, r4
 800491e:	bf18      	it	ne
 8004920:	42ab      	cmpne	r3, r5
 8004922:	d018      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004924:	3414      	adds	r4, #20
 8004926:	42a3      	cmp	r3, r4
 8004928:	d015      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800492a:	3414      	adds	r4, #20
 800492c:	42a3      	cmp	r3, r4
 800492e:	d012      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004930:	3414      	adds	r4, #20
 8004932:	42a3      	cmp	r3, r4
 8004934:	d00f      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004936:	3414      	adds	r4, #20
 8004938:	42a3      	cmp	r3, r4
 800493a:	d00c      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800493c:	3414      	adds	r4, #20
 800493e:	42a3      	cmp	r3, r4
 8004940:	d009      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004942:	3414      	adds	r4, #20
 8004944:	42a3      	cmp	r3, r4
 8004946:	d006      	beq.n	8004956 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800494a:	440b      	add	r3, r1
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	66c3      	str	r3, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004950:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8004952:	6703      	str	r3, [r0, #112]	@ 0x70
 8004954:	e005      	b.n	8004962 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8004958:	440b      	add	r3, r1
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	66c3      	str	r3, [r0, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800495e:	4b09      	ldr	r3, [pc, #36]	@ (8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004960:	6703      	str	r3, [r0, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004962:	2301      	movs	r3, #1
 8004964:	4093      	lsls	r3, r2
 8004966:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 8004968:	bc30      	pop	{r4, r5}
 800496a:	4770      	bx	lr
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58025408 	.word	0x58025408
 8004974:	5802541c 	.word	0x5802541c
 8004978:	1000823f 	.word	0x1000823f
 800497c:	40020940 	.word	0x40020940
 8004980:	1600963f 	.word	0x1600963f
 8004984:	58025940 	.word	0x58025940

08004988 <HAL_DMA_Init>:
{
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7fe fd9e 	bl	80034cc <HAL_GetTick>
  if(hdma == NULL)
 8004990:	2c00      	cmp	r4, #0
 8004992:	f000 81b6 	beq.w	8004d02 <HAL_DMA_Init+0x37a>
 8004996:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	4953      	ldr	r1, [pc, #332]	@ (8004ae8 <HAL_DMA_Init+0x160>)
 800499c:	4a53      	ldr	r2, [pc, #332]	@ (8004aec <HAL_DMA_Init+0x164>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	bf18      	it	ne
 80049a2:	428b      	cmpne	r3, r1
 80049a4:	bf0c      	ite	eq
 80049a6:	2101      	moveq	r1, #1
 80049a8:	2100      	movne	r1, #0
 80049aa:	d050      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049ac:	3218      	adds	r2, #24
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d04d      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049b2:	3218      	adds	r2, #24
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04a      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049b8:	3218      	adds	r2, #24
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d047      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049be:	3218      	adds	r2, #24
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d044      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049c4:	3218      	adds	r2, #24
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d041      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049ca:	3218      	adds	r2, #24
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d03e      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049d0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03a      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049d8:	3218      	adds	r2, #24
 80049da:	4293      	cmp	r3, r2
 80049dc:	d037      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049de:	3218      	adds	r2, #24
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d034      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049e4:	3218      	adds	r2, #24
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d031      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049ea:	3218      	adds	r2, #24
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02e      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049f0:	3218      	adds	r2, #24
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02b      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049f6:	3218      	adds	r2, #24
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d028      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
 80049fc:	3218      	adds	r2, #24
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d025      	beq.n	8004a4e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a02:	493b      	ldr	r1, [pc, #236]	@ (8004af0 <HAL_DMA_Init+0x168>)
 8004a04:	4a3b      	ldr	r2, [pc, #236]	@ (8004af4 <HAL_DMA_Init+0x16c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bf18      	it	ne
 8004a0a:	428b      	cmpne	r3, r1
 8004a0c:	f000 8131 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a10:	4a39      	ldr	r2, [pc, #228]	@ (8004af8 <HAL_DMA_Init+0x170>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	f000 812d 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a18:	3214      	adds	r2, #20
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	f000 8129 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a20:	3214      	adds	r2, #20
 8004a22:	4293      	cmp	r3, r2
 8004a24:	f000 8125 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a28:	3214      	adds	r2, #20
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	f000 8121 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a30:	3214      	adds	r2, #20
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f000 811d 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
 8004a38:	3214      	adds	r2, #20
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f000 8119 	beq.w	8004c72 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a40:	2340      	movs	r3, #64	@ 0x40
 8004a42:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004a44:	2303      	movs	r3, #3
 8004a46:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	e04a      	b.n	8004ae4 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004a54:	2200      	movs	r2, #0
 8004a56:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8004a5a:	bb79      	cbnz	r1, 8004abc <HAL_DMA_Init+0x134>
 8004a5c:	4a27      	ldr	r2, [pc, #156]	@ (8004afc <HAL_DMA_Init+0x174>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d02c      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a62:	3218      	adds	r2, #24
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d029      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a68:	3218      	adds	r2, #24
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d026      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a6e:	3218      	adds	r2, #24
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d023      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a74:	3218      	adds	r2, #24
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d020      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a7a:	3218      	adds	r2, #24
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d01d      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a80:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d019      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a88:	3218      	adds	r2, #24
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d016      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a8e:	3218      	adds	r2, #24
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a94:	3218      	adds	r2, #24
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d010      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004a9a:	3218      	adds	r2, #24
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00d      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004aa0:	3218      	adds	r2, #24
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00a      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004aa6:	3218      	adds	r2, #24
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004aac:	3218      	adds	r2, #24
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_DMA_Init+0x134>
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e003      	b.n	8004ac4 <HAL_DMA_Init+0x13c>
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	f012 0f01 	tst.w	r2, #1
 8004acc:	d018      	beq.n	8004b00 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ace:	f7fe fcfd 	bl	80034cc <HAL_GetTick>
 8004ad2:	1b43      	subs	r3, r0, r5
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d9f5      	bls.n	8004ac4 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004adc:	2303      	movs	r3, #3
 8004ade:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8004ae2:	2001      	movs	r0, #1
}
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40020010 	.word	0x40020010
 8004aec:	40020028 	.word	0x40020028
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b00:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b02:	4981      	ldr	r1, [pc, #516]	@ (8004d08 <HAL_DMA_Init+0x380>)
 8004b04:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8004b06:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b08:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b0a:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0c:	6920      	ldr	r0, [r4, #16]
 8004b0e:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b10:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b12:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b14:	69a0      	ldr	r0, [r4, #24]
 8004b16:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b18:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b1c:	6a20      	ldr	r0, [r4, #32]
 8004b1e:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8004b20:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004b24:	2904      	cmp	r1, #4
 8004b26:	f000 8099 	beq.w	8004c5c <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b2a:	4978      	ldr	r1, [pc, #480]	@ (8004d0c <HAL_DMA_Init+0x384>)
 8004b2c:	6808      	ldr	r0, [r1, #0]
 8004b2e:	4978      	ldr	r1, [pc, #480]	@ (8004d10 <HAL_DMA_Init+0x388>)
 8004b30:	4001      	ands	r1, r0
 8004b32:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004b36:	d311      	bcc.n	8004b5c <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b38:	6861      	ldr	r1, [r4, #4]
 8004b3a:	f1a1 0529 	sub.w	r5, r1, #41	@ 0x29
 8004b3e:	f1a1 003f 	sub.w	r0, r1, #63	@ 0x3f
 8004b42:	2803      	cmp	r0, #3
 8004b44:	bf88      	it	hi
 8004b46:	2d05      	cmphi	r5, #5
 8004b48:	d906      	bls.n	8004b58 <HAL_DMA_Init+0x1d0>
 8004b4a:	f1a1 0047 	sub.w	r0, r1, #71	@ 0x47
 8004b4e:	2801      	cmp	r0, #1
 8004b50:	d902      	bls.n	8004b58 <HAL_DMA_Init+0x1d0>
 8004b52:	394f      	subs	r1, #79	@ 0x4f
 8004b54:	2903      	cmp	r1, #3
 8004b56:	d801      	bhi.n	8004b5c <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004b58:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b5c:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b5e:	6826      	ldr	r6, [r4, #0]
 8004b60:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b62:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8004b66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b68:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d108      	bne.n	8004b80 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004b6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b70:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b74:	b123      	cbz	r3, 8004b80 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff fe28 	bl	80047cc <DMA_CheckFifoParam>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d172      	bne.n	8004c66 <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b80:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b82:	4620      	mov	r0, r4
 8004b84:	f7ff fdc8 	bl	8004718 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b88:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004b8a:	f003 021f 	and.w	r2, r3, #31
 8004b8e:	233f      	movs	r3, #63	@ 0x3f
 8004b90:	4093      	lsls	r3, r2
 8004b92:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	495f      	ldr	r1, [pc, #380]	@ (8004d14 <HAL_DMA_Init+0x38c>)
 8004b98:	4a5f      	ldr	r2, [pc, #380]	@ (8004d18 <HAL_DMA_Init+0x390>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bf18      	it	ne
 8004b9e:	428b      	cmpne	r3, r1
 8004ba0:	d042      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004ba2:	3218      	adds	r2, #24
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d03f      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004ba8:	3218      	adds	r2, #24
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03c      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bae:	3218      	adds	r2, #24
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d039      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bb4:	3218      	adds	r2, #24
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bba:	3218      	adds	r2, #24
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d033      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bc0:	3218      	adds	r2, #24
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d030      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bc6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bce:	3218      	adds	r2, #24
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d029      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bd4:	3218      	adds	r2, #24
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d026      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bda:	3218      	adds	r2, #24
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d023      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004be0:	3218      	adds	r2, #24
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d020      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004be6:	3218      	adds	r2, #24
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bec:	3218      	adds	r2, #24
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01a      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bf2:	3218      	adds	r2, #24
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d017      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bf8:	4a48      	ldr	r2, [pc, #288]	@ (8004d1c <HAL_DMA_Init+0x394>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d014      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004bfe:	3214      	adds	r2, #20
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d011      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c04:	3214      	adds	r2, #20
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c0a:	3214      	adds	r2, #20
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c10:	3214      	adds	r2, #20
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d008      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c16:	3214      	adds	r2, #20
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d005      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c1c:	3214      	adds	r2, #20
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d002      	beq.n	8004c28 <HAL_DMA_Init+0x2a0>
 8004c22:	3214      	adds	r2, #20
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d113      	bne.n	8004c50 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff fe19 	bl	8004860 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c2e:	68a3      	ldr	r3, [r4, #8]
 8004c30:	2b80      	cmp	r3, #128	@ 0x80
 8004c32:	d059      	beq.n	8004ce8 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c34:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004c36:	7922      	ldrb	r2, [r4, #4]
 8004c38:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c3c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8004c3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d952      	bls.n	8004cee <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	66e3      	str	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c4c:	6723      	str	r3, [r4, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c4e:	6763      	str	r3, [r4, #116]	@ 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c50:	2000      	movs	r0, #0
 8004c52:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8004c5a:	e743      	b.n	8004ae4 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004c60:	4301      	orrs	r1, r0
 8004c62:	430a      	orrs	r2, r1
 8004c64:	e761      	b.n	8004b2a <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c66:	2340      	movs	r3, #64	@ 0x40
 8004c68:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
          return HAL_ERROR;
 8004c70:	e738      	b.n	8004ae4 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c72:	2202      	movs	r2, #2
 8004c74:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c7e:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c80:	4927      	ldr	r1, [pc, #156]	@ (8004d20 <HAL_DMA_Init+0x398>)
 8004c82:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c84:	68a2      	ldr	r2, [r4, #8]
 8004c86:	2a40      	cmp	r2, #64	@ 0x40
 8004c88:	d02c      	beq.n	8004ce4 <HAL_DMA_Init+0x35c>
 8004c8a:	2a80      	cmp	r2, #128	@ 0x80
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_Init+0x356>
 8004c8e:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c90:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c92:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c96:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c98:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c9c:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c9e:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ca2:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ca4:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ca8:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004caa:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cae:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cb0:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cb4:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cb6:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cb8:	6822      	ldr	r2, [r4, #0]
 8004cba:	4b1a      	ldr	r3, [pc, #104]	@ (8004d24 <HAL_DMA_Init+0x39c>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004d28 <HAL_DMA_Init+0x3a0>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff fd24 	bl	8004718 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cd0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004cd2:	f002 011f 	and.w	r1, r2, #31
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	408a      	lsls	r2, r1
 8004cda:	6042      	str	r2, [r0, #4]
 8004cdc:	e75a      	b.n	8004b94 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ce2:	e7d5      	b.n	8004c90 <HAL_DMA_Init+0x308>
 8004ce4:	2210      	movs	r2, #16
 8004ce6:	e7d3      	b.n	8004c90 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	e7a2      	b.n	8004c34 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff fe0c 	bl	800490c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cf4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cfa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004cfc:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	e7a6      	b.n	8004c50 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004d02:	2001      	movs	r0, #1
 8004d04:	e6ee      	b.n	8004ae4 <HAL_DMA_Init+0x15c>
 8004d06:	bf00      	nop
 8004d08:	fe10803f 	.word	0xfe10803f
 8004d0c:	5c001000 	.word	0x5c001000
 8004d10:	ffff0000 	.word	0xffff0000
 8004d14:	40020010 	.word	0x40020010
 8004d18:	40020028 	.word	0x40020028
 8004d1c:	58025408 	.word	0x58025408
 8004d20:	fffe000f 	.word	0xfffe000f
 8004d24:	a7fdabf8 	.word	0xa7fdabf8
 8004d28:	cccccccd 	.word	0xcccccccd

08004d2c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f000 813e 	beq.w	8004fae <HAL_DMA_Start_IT+0x282>
{
 8004d32:	b570      	push	{r4, r5, r6, lr}
 8004d34:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004d36:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8004d3a:	2801      	cmp	r0, #1
 8004d3c:	f000 8139 	beq.w	8004fb2 <HAL_DMA_Start_IT+0x286>
 8004d40:	2001      	movs	r0, #1
 8004d42:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d46:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8004d4a:	b2c0      	uxtb	r0, r0
 8004d4c:	2801      	cmp	r0, #1
 8004d4e:	d007      	beq.n	8004d60 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d54:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004d56:	2300      	movs	r3, #0
 8004d58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
}
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d60:	2002      	movs	r0, #2
 8004d62:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d66:	2000      	movs	r0, #0
 8004d68:	6560      	str	r0, [r4, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004d6a:	6820      	ldr	r0, [r4, #0]
 8004d6c:	4e92      	ldr	r6, [pc, #584]	@ (8004fb8 <HAL_DMA_Start_IT+0x28c>)
 8004d6e:	4d93      	ldr	r5, [pc, #588]	@ (8004fbc <HAL_DMA_Start_IT+0x290>)
 8004d70:	42a8      	cmp	r0, r5
 8004d72:	bf18      	it	ne
 8004d74:	42b0      	cmpne	r0, r6
 8004d76:	d02f      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d78:	3518      	adds	r5, #24
 8004d7a:	42a8      	cmp	r0, r5
 8004d7c:	d02c      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d7e:	3518      	adds	r5, #24
 8004d80:	42a8      	cmp	r0, r5
 8004d82:	d029      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d84:	3518      	adds	r5, #24
 8004d86:	42a8      	cmp	r0, r5
 8004d88:	d026      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d8a:	3518      	adds	r5, #24
 8004d8c:	42a8      	cmp	r0, r5
 8004d8e:	d023      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d90:	3518      	adds	r5, #24
 8004d92:	42a8      	cmp	r0, r5
 8004d94:	d020      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d96:	3518      	adds	r5, #24
 8004d98:	42a8      	cmp	r0, r5
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004d9c:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 8004da0:	42a8      	cmp	r0, r5
 8004da2:	d019      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004da4:	3518      	adds	r5, #24
 8004da6:	42a8      	cmp	r0, r5
 8004da8:	d016      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004daa:	3518      	adds	r5, #24
 8004dac:	42a8      	cmp	r0, r5
 8004dae:	d013      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004db0:	3518      	adds	r5, #24
 8004db2:	42a8      	cmp	r0, r5
 8004db4:	d010      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004db6:	3518      	adds	r5, #24
 8004db8:	42a8      	cmp	r0, r5
 8004dba:	d00d      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004dbc:	3518      	adds	r5, #24
 8004dbe:	42a8      	cmp	r0, r5
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004dc2:	3518      	adds	r5, #24
 8004dc4:	42a8      	cmp	r0, r5
 8004dc6:	d007      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004dc8:	3518      	adds	r5, #24
 8004dca:	42a8      	cmp	r0, r5
 8004dcc:	d004      	beq.n	8004dd8 <HAL_DMA_Start_IT+0xac>
 8004dce:	6805      	ldr	r5, [r0, #0]
 8004dd0:	f025 0501 	bic.w	r5, r5, #1
 8004dd4:	6005      	str	r5, [r0, #0]
 8004dd6:	e003      	b.n	8004de0 <HAL_DMA_Start_IT+0xb4>
 8004dd8:	6805      	ldr	r5, [r0, #0]
 8004dda:	f025 0501 	bic.w	r5, r5, #1
 8004dde:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff fbbf 	bl	8004564 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	4973      	ldr	r1, [pc, #460]	@ (8004fb8 <HAL_DMA_Start_IT+0x28c>)
 8004dea:	4a74      	ldr	r2, [pc, #464]	@ (8004fbc <HAL_DMA_Start_IT+0x290>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bf18      	it	ne
 8004df0:	428b      	cmpne	r3, r1
 8004df2:	d038      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004df4:	3218      	adds	r2, #24
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d035      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004dfa:	3218      	adds	r2, #24
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d032      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e00:	3218      	adds	r2, #24
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02f      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e06:	3218      	adds	r2, #24
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d02c      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e0c:	3218      	adds	r2, #24
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d029      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e12:	3218      	adds	r2, #24
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d026      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e18:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d022      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e20:	3218      	adds	r2, #24
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e26:	3218      	adds	r2, #24
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d01c      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e2c:	3218      	adds	r2, #24
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d019      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e32:	3218      	adds	r2, #24
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d016      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e38:	3218      	adds	r2, #24
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e3e:	3218      	adds	r2, #24
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d010      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
 8004e44:	3218      	adds	r2, #24
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00d      	beq.n	8004e66 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	f022 020e 	bic.w	r2, r2, #14
 8004e50:	f042 020a 	orr.w	r2, r2, #10
 8004e54:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e58:	b193      	cbz	r3, 8004e80 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	6813      	ldr	r3, [r2, #0]
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e00c      	b.n	8004e80 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f022 021e 	bic.w	r2, r2, #30
 8004e6c:	f042 0216 	orr.w	r2, r2, #22
 8004e70:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e74:	b123      	cbz	r3, 8004e80 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	6813      	ldr	r3, [r2, #0]
 8004e7a:	f043 0308 	orr.w	r3, r3, #8
 8004e7e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	494d      	ldr	r1, [pc, #308]	@ (8004fb8 <HAL_DMA_Start_IT+0x28c>)
 8004e84:	4a4d      	ldr	r2, [pc, #308]	@ (8004fbc <HAL_DMA_Start_IT+0x290>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bf18      	it	ne
 8004e8a:	428b      	cmpne	r3, r1
 8004e8c:	d042      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004e8e:	3218      	adds	r2, #24
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d03f      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004e94:	3218      	adds	r2, #24
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d03c      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004e9a:	3218      	adds	r2, #24
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d039      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ea0:	3218      	adds	r2, #24
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d036      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ea6:	3218      	adds	r2, #24
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d033      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004eac:	3218      	adds	r2, #24
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d030      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004eb2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d02c      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004eba:	3218      	adds	r2, #24
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d029      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ec0:	3218      	adds	r2, #24
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d026      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ec6:	3218      	adds	r2, #24
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d023      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ecc:	3218      	adds	r2, #24
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d020      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ed2:	3218      	adds	r2, #24
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ed8:	3218      	adds	r2, #24
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01a      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ede:	3218      	adds	r2, #24
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d017      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ee4:	4a36      	ldr	r2, [pc, #216]	@ (8004fc0 <HAL_DMA_Start_IT+0x294>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d014      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004eea:	3214      	adds	r2, #20
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d011      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ef0:	3214      	adds	r2, #20
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004ef6:	3214      	adds	r2, #20
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00b      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004efc:	3214      	adds	r2, #20
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004f02:	3214      	adds	r2, #20
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d005      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004f08:	3214      	adds	r2, #20
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d002      	beq.n	8004f14 <HAL_DMA_Start_IT+0x1e8>
 8004f0e:	3214      	adds	r2, #20
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10e      	bne.n	8004f32 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f14:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004f1c:	d003      	beq.n	8004f26 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f24:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004f26:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004f28:	b11b      	cbz	r3, 8004f32 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f30:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4920      	ldr	r1, [pc, #128]	@ (8004fb8 <HAL_DMA_Start_IT+0x28c>)
 8004f36:	4a21      	ldr	r2, [pc, #132]	@ (8004fbc <HAL_DMA_Start_IT+0x290>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	bf18      	it	ne
 8004f3c:	428b      	cmpne	r3, r1
 8004f3e:	d030      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f40:	3218      	adds	r2, #24
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02d      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f46:	3218      	adds	r2, #24
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d02a      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f4c:	3218      	adds	r2, #24
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f52:	3218      	adds	r2, #24
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d024      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f58:	3218      	adds	r2, #24
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d021      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f5e:	3218      	adds	r2, #24
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01e      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f64:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01a      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f6c:	3218      	adds	r2, #24
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f72:	3218      	adds	r2, #24
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d014      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f78:	3218      	adds	r2, #24
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d011      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f7e:	3218      	adds	r2, #24
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f84:	3218      	adds	r2, #24
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f8a:	3218      	adds	r2, #24
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d008      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f90:	3218      	adds	r2, #24
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d005      	beq.n	8004fa2 <HAL_DMA_Start_IT+0x276>
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e6dd      	b.n	8004d5e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004fac:	e6d7      	b.n	8004d5e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
}
 8004fb0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	e6d3      	b.n	8004d5e <HAL_DMA_Start_IT+0x32>
 8004fb6:	bf00      	nop
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	58025408 	.word	0x58025408

08004fc4 <HAL_DMA_Abort>:
{
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004fc8:	f7fe fa80 	bl	80034cc <HAL_GetTick>
  if(hdma == NULL)
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	f000 8191 	beq.w	80052f4 <HAL_DMA_Abort+0x330>
 8004fd2:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fd4:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d006      	beq.n	8004fec <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fde:	2380      	movs	r3, #128	@ 0x80
 8004fe0:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8004fe8:	2001      	movs	r0, #1
}
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	498c      	ldr	r1, [pc, #560]	@ (8005220 <HAL_DMA_Abort+0x25c>)
 8004ff0:	4a8c      	ldr	r2, [pc, #560]	@ (8005224 <HAL_DMA_Abort+0x260>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf18      	it	ne
 8004ff6:	428b      	cmpne	r3, r1
 8004ff8:	d030      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8004ffa:	3218      	adds	r2, #24
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d02d      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005000:	3218      	adds	r2, #24
 8005002:	4293      	cmp	r3, r2
 8005004:	d02a      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005006:	3218      	adds	r2, #24
 8005008:	4293      	cmp	r3, r2
 800500a:	d027      	beq.n	800505c <HAL_DMA_Abort+0x98>
 800500c:	3218      	adds	r2, #24
 800500e:	4293      	cmp	r3, r2
 8005010:	d024      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005012:	3218      	adds	r2, #24
 8005014:	4293      	cmp	r3, r2
 8005016:	d021      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005018:	3218      	adds	r2, #24
 800501a:	4293      	cmp	r3, r2
 800501c:	d01e      	beq.n	800505c <HAL_DMA_Abort+0x98>
 800501e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005022:	4293      	cmp	r3, r2
 8005024:	d01a      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005026:	3218      	adds	r2, #24
 8005028:	4293      	cmp	r3, r2
 800502a:	d017      	beq.n	800505c <HAL_DMA_Abort+0x98>
 800502c:	3218      	adds	r2, #24
 800502e:	4293      	cmp	r3, r2
 8005030:	d014      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005032:	3218      	adds	r2, #24
 8005034:	4293      	cmp	r3, r2
 8005036:	d011      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005038:	3218      	adds	r2, #24
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <HAL_DMA_Abort+0x98>
 800503e:	3218      	adds	r2, #24
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <HAL_DMA_Abort+0x98>
 8005044:	3218      	adds	r2, #24
 8005046:	4293      	cmp	r3, r2
 8005048:	d008      	beq.n	800505c <HAL_DMA_Abort+0x98>
 800504a:	3218      	adds	r2, #24
 800504c:	4293      	cmp	r3, r2
 800504e:	d005      	beq.n	800505c <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f022 020e 	bic.w	r2, r2, #14
 8005056:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005058:	6826      	ldr	r6, [r4, #0]
 800505a:	e009      	b.n	8005070 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	f022 021e 	bic.w	r2, r2, #30
 8005062:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	6953      	ldr	r3, [r2, #20]
 8005068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800506e:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	496b      	ldr	r1, [pc, #428]	@ (8005220 <HAL_DMA_Abort+0x25c>)
 8005074:	4a6b      	ldr	r2, [pc, #428]	@ (8005224 <HAL_DMA_Abort+0x260>)
 8005076:	4293      	cmp	r3, r2
 8005078:	bf18      	it	ne
 800507a:	428b      	cmpne	r3, r1
 800507c:	d042      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 800507e:	3218      	adds	r2, #24
 8005080:	4293      	cmp	r3, r2
 8005082:	d03f      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 8005084:	3218      	adds	r2, #24
 8005086:	4293      	cmp	r3, r2
 8005088:	d03c      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 800508a:	3218      	adds	r2, #24
 800508c:	4293      	cmp	r3, r2
 800508e:	d039      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 8005090:	3218      	adds	r2, #24
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 8005096:	3218      	adds	r2, #24
 8005098:	4293      	cmp	r3, r2
 800509a:	d033      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 800509c:	3218      	adds	r2, #24
 800509e:	4293      	cmp	r3, r2
 80050a0:	d030      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050a2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050aa:	3218      	adds	r2, #24
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d029      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050b0:	3218      	adds	r2, #24
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d026      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050b6:	3218      	adds	r2, #24
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d023      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050bc:	3218      	adds	r2, #24
 80050be:	4293      	cmp	r3, r2
 80050c0:	d020      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050c2:	3218      	adds	r2, #24
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050c8:	3218      	adds	r2, #24
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01a      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050ce:	3218      	adds	r2, #24
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d017      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050d4:	4a54      	ldr	r2, [pc, #336]	@ (8005228 <HAL_DMA_Abort+0x264>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d014      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050da:	3214      	adds	r2, #20
 80050dc:	4293      	cmp	r3, r2
 80050de:	d011      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050e0:	3214      	adds	r2, #20
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050e6:	3214      	adds	r2, #20
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050ec:	3214      	adds	r2, #20
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d008      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050f2:	3214      	adds	r2, #20
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d005      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050f8:	3214      	adds	r2, #20
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d002      	beq.n	8005104 <HAL_DMA_Abort+0x140>
 80050fe:	3214      	adds	r2, #20
 8005100:	4293      	cmp	r3, r2
 8005102:	d104      	bne.n	800510e <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005104:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800510c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4943      	ldr	r1, [pc, #268]	@ (8005220 <HAL_DMA_Abort+0x25c>)
 8005112:	4a44      	ldr	r2, [pc, #272]	@ (8005224 <HAL_DMA_Abort+0x260>)
 8005114:	4293      	cmp	r3, r2
 8005116:	bf18      	it	ne
 8005118:	428b      	cmpne	r3, r1
 800511a:	d02f      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800511c:	3218      	adds	r2, #24
 800511e:	4293      	cmp	r3, r2
 8005120:	d02c      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005122:	3218      	adds	r2, #24
 8005124:	4293      	cmp	r3, r2
 8005126:	d029      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005128:	3218      	adds	r2, #24
 800512a:	4293      	cmp	r3, r2
 800512c:	d026      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800512e:	3218      	adds	r2, #24
 8005130:	4293      	cmp	r3, r2
 8005132:	d023      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005134:	3218      	adds	r2, #24
 8005136:	4293      	cmp	r3, r2
 8005138:	d020      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800513a:	3218      	adds	r2, #24
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005140:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005144:	4293      	cmp	r3, r2
 8005146:	d019      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005148:	3218      	adds	r2, #24
 800514a:	4293      	cmp	r3, r2
 800514c:	d016      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800514e:	3218      	adds	r2, #24
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005154:	3218      	adds	r2, #24
 8005156:	4293      	cmp	r3, r2
 8005158:	d010      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800515a:	3218      	adds	r2, #24
 800515c:	4293      	cmp	r3, r2
 800515e:	d00d      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005160:	3218      	adds	r2, #24
 8005162:	4293      	cmp	r3, r2
 8005164:	d00a      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005166:	3218      	adds	r2, #24
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 800516c:	3218      	adds	r2, #24
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_DMA_Abort+0x1b8>
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e003      	b.n	8005184 <HAL_DMA_Abort+0x1c0>
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005184:	6833      	ldr	r3, [r6, #0]
 8005186:	f013 0f01 	tst.w	r3, #1
 800518a:	d00e      	beq.n	80051aa <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800518c:	f7fe f99e 	bl	80034cc <HAL_GetTick>
 8005190:	1b43      	subs	r3, r0, r5
 8005192:	2b05      	cmp	r3, #5
 8005194:	d9f6      	bls.n	8005184 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005196:	2320      	movs	r3, #32
 8005198:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800519a:	2303      	movs	r3, #3
 800519c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80051a0:	2300      	movs	r3, #0
 80051a2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_ERROR;
 80051a6:	2001      	movs	r0, #1
 80051a8:	e71f      	b.n	8004fea <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	491c      	ldr	r1, [pc, #112]	@ (8005220 <HAL_DMA_Abort+0x25c>)
 80051ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005224 <HAL_DMA_Abort+0x260>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bf18      	it	ne
 80051b4:	428b      	cmpne	r3, r1
 80051b6:	d039      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051b8:	3218      	adds	r2, #24
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d036      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051be:	3218      	adds	r2, #24
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d033      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051c4:	3218      	adds	r2, #24
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d030      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051ca:	3218      	adds	r2, #24
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d02d      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051d0:	3218      	adds	r2, #24
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02a      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051d6:	3218      	adds	r2, #24
 80051d8:	4293      	cmp	r3, r2
 80051da:	d027      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051dc:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d023      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051e4:	3218      	adds	r2, #24
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d020      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051ea:	3218      	adds	r2, #24
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d01d      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051f0:	3218      	adds	r2, #24
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01a      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051f6:	3218      	adds	r2, #24
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d017      	beq.n	800522c <HAL_DMA_Abort+0x268>
 80051fc:	3218      	adds	r2, #24
 80051fe:	4293      	cmp	r3, r2
 8005200:	d014      	beq.n	800522c <HAL_DMA_Abort+0x268>
 8005202:	3218      	adds	r2, #24
 8005204:	4293      	cmp	r3, r2
 8005206:	d011      	beq.n	800522c <HAL_DMA_Abort+0x268>
 8005208:	3218      	adds	r2, #24
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800520e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005210:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005212:	f003 021f 	and.w	r2, r3, #31
 8005216:	2301      	movs	r3, #1
 8005218:	4093      	lsls	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	e00d      	b.n	800523a <HAL_DMA_Abort+0x276>
 800521e:	bf00      	nop
 8005220:	40020010 	.word	0x40020010
 8005224:	40020028 	.word	0x40020028
 8005228:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800522e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005230:	f003 021f 	and.w	r2, r3, #31
 8005234:	233f      	movs	r3, #63	@ 0x3f
 8005236:	4093      	lsls	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	492e      	ldr	r1, [pc, #184]	@ (80052f8 <HAL_DMA_Abort+0x334>)
 800523e:	4a2f      	ldr	r2, [pc, #188]	@ (80052fc <HAL_DMA_Abort+0x338>)
 8005240:	4293      	cmp	r3, r2
 8005242:	bf18      	it	ne
 8005244:	428b      	cmpne	r3, r1
 8005246:	d042      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005248:	3218      	adds	r2, #24
 800524a:	4293      	cmp	r3, r2
 800524c:	d03f      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800524e:	3218      	adds	r2, #24
 8005250:	4293      	cmp	r3, r2
 8005252:	d03c      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005254:	3218      	adds	r2, #24
 8005256:	4293      	cmp	r3, r2
 8005258:	d039      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800525a:	3218      	adds	r2, #24
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005260:	3218      	adds	r2, #24
 8005262:	4293      	cmp	r3, r2
 8005264:	d033      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005266:	3218      	adds	r2, #24
 8005268:	4293      	cmp	r3, r2
 800526a:	d030      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800526c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005274:	3218      	adds	r2, #24
 8005276:	4293      	cmp	r3, r2
 8005278:	d029      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800527a:	3218      	adds	r2, #24
 800527c:	4293      	cmp	r3, r2
 800527e:	d026      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005280:	3218      	adds	r2, #24
 8005282:	4293      	cmp	r3, r2
 8005284:	d023      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005286:	3218      	adds	r2, #24
 8005288:	4293      	cmp	r3, r2
 800528a:	d020      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800528c:	3218      	adds	r2, #24
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005292:	3218      	adds	r2, #24
 8005294:	4293      	cmp	r3, r2
 8005296:	d01a      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 8005298:	3218      	adds	r2, #24
 800529a:	4293      	cmp	r3, r2
 800529c:	d017      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 800529e:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_DMA_Abort+0x33c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d014      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052a4:	3214      	adds	r2, #20
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d011      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052aa:	3214      	adds	r2, #20
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052b0:	3214      	adds	r2, #20
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052b6:	3214      	adds	r2, #20
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d008      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052bc:	3214      	adds	r2, #20
 80052be:	4293      	cmp	r3, r2
 80052c0:	d005      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052c2:	3214      	adds	r2, #20
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d002      	beq.n	80052ce <HAL_DMA_Abort+0x30a>
 80052c8:	3214      	adds	r2, #20
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10b      	bne.n	80052e6 <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052d0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80052d2:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80052d4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80052d6:	b133      	cbz	r3, 80052e6 <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052de:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80052e2:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 80052e4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80052f2:	e67a      	b.n	8004fea <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 80052f4:	2001      	movs	r0, #1
 80052f6:	e678      	b.n	8004fea <HAL_DMA_Abort+0x26>
 80052f8:	40020010 	.word	0x40020010
 80052fc:	40020028 	.word	0x40020028
 8005300:	58025408 	.word	0x58025408

08005304 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005304:	2800      	cmp	r0, #0
 8005306:	f000 8128 	beq.w	800555a <HAL_DMA_Abort_IT+0x256>
{
 800530a:	b508      	push	{r3, lr}
 800530c:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800530e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d003      	beq.n	8005320 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005318:	2380      	movs	r3, #128	@ 0x80
 800531a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800531c:	2001      	movs	r0, #1
}
 800531e:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	4890      	ldr	r0, [pc, #576]	@ (8005564 <HAL_DMA_Abort_IT+0x260>)
 8005324:	4990      	ldr	r1, [pc, #576]	@ (8005568 <HAL_DMA_Abort_IT+0x264>)
 8005326:	428b      	cmp	r3, r1
 8005328:	bf18      	it	ne
 800532a:	4283      	cmpne	r3, r0
 800532c:	bf0c      	ite	eq
 800532e:	2001      	moveq	r0, #1
 8005330:	2000      	movne	r0, #0
 8005332:	d065      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005334:	3118      	adds	r1, #24
 8005336:	428b      	cmp	r3, r1
 8005338:	d062      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 800533a:	3118      	adds	r1, #24
 800533c:	428b      	cmp	r3, r1
 800533e:	d05f      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005340:	3118      	adds	r1, #24
 8005342:	428b      	cmp	r3, r1
 8005344:	d05c      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005346:	3118      	adds	r1, #24
 8005348:	428b      	cmp	r3, r1
 800534a:	d059      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 800534c:	3118      	adds	r1, #24
 800534e:	428b      	cmp	r3, r1
 8005350:	d056      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005352:	3118      	adds	r1, #24
 8005354:	428b      	cmp	r3, r1
 8005356:	d053      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005358:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800535c:	428b      	cmp	r3, r1
 800535e:	d04f      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005360:	3118      	adds	r1, #24
 8005362:	428b      	cmp	r3, r1
 8005364:	d04c      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005366:	3118      	adds	r1, #24
 8005368:	428b      	cmp	r3, r1
 800536a:	d049      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 800536c:	3118      	adds	r1, #24
 800536e:	428b      	cmp	r3, r1
 8005370:	d046      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005372:	3118      	adds	r1, #24
 8005374:	428b      	cmp	r3, r1
 8005376:	d043      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005378:	3118      	adds	r1, #24
 800537a:	428b      	cmp	r3, r1
 800537c:	d040      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 800537e:	3118      	adds	r1, #24
 8005380:	428b      	cmp	r3, r1
 8005382:	d03d      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
 8005384:	3118      	adds	r1, #24
 8005386:	428b      	cmp	r3, r1
 8005388:	d03a      	beq.n	8005400 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800538a:	6819      	ldr	r1, [r3, #0]
 800538c:	f021 010e 	bic.w	r1, r1, #14
 8005390:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	4873      	ldr	r0, [pc, #460]	@ (8005564 <HAL_DMA_Abort_IT+0x260>)
 8005396:	4974      	ldr	r1, [pc, #464]	@ (8005568 <HAL_DMA_Abort_IT+0x264>)
 8005398:	428b      	cmp	r3, r1
 800539a:	bf18      	it	ne
 800539c:	4283      	cmpne	r3, r0
 800539e:	d06a      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053a0:	4972      	ldr	r1, [pc, #456]	@ (800556c <HAL_DMA_Abort_IT+0x268>)
 80053a2:	428b      	cmp	r3, r1
 80053a4:	d067      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053a6:	3118      	adds	r1, #24
 80053a8:	428b      	cmp	r3, r1
 80053aa:	d064      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053ac:	3118      	adds	r1, #24
 80053ae:	428b      	cmp	r3, r1
 80053b0:	d061      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053b2:	3118      	adds	r1, #24
 80053b4:	428b      	cmp	r3, r1
 80053b6:	d05e      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053b8:	3118      	adds	r1, #24
 80053ba:	428b      	cmp	r3, r1
 80053bc:	d05b      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053be:	3118      	adds	r1, #24
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d058      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053c4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80053c8:	428b      	cmp	r3, r1
 80053ca:	d054      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053cc:	3118      	adds	r1, #24
 80053ce:	428b      	cmp	r3, r1
 80053d0:	d051      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053d2:	3118      	adds	r1, #24
 80053d4:	428b      	cmp	r3, r1
 80053d6:	d04e      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053d8:	3118      	adds	r1, #24
 80053da:	428b      	cmp	r3, r1
 80053dc:	d04b      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053de:	3118      	adds	r1, #24
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d048      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053e4:	3118      	adds	r1, #24
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d045      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053ea:	3118      	adds	r1, #24
 80053ec:	428b      	cmp	r3, r1
 80053ee:	d042      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053f0:	3118      	adds	r1, #24
 80053f2:	428b      	cmp	r3, r1
 80053f4:	d03f      	beq.n	8005476 <HAL_DMA_Abort_IT+0x172>
 80053f6:	6819      	ldr	r1, [r3, #0]
 80053f8:	f021 0101 	bic.w	r1, r1, #1
 80053fc:	6019      	str	r1, [r3, #0]
 80053fe:	e03e      	b.n	800547e <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005400:	2104      	movs	r1, #4
 8005402:	f882 1035 	strb.w	r1, [r2, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005406:	bb80      	cbnz	r0, 800546a <HAL_DMA_Abort_IT+0x166>
 8005408:	4a58      	ldr	r2, [pc, #352]	@ (800556c <HAL_DMA_Abort_IT+0x268>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d02d      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800540e:	3218      	adds	r2, #24
 8005410:	4293      	cmp	r3, r2
 8005412:	d02a      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005414:	3218      	adds	r2, #24
 8005416:	4293      	cmp	r3, r2
 8005418:	d027      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800541a:	3218      	adds	r2, #24
 800541c:	4293      	cmp	r3, r2
 800541e:	d024      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005420:	3218      	adds	r2, #24
 8005422:	4293      	cmp	r3, r2
 8005424:	d021      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005426:	3218      	adds	r2, #24
 8005428:	4293      	cmp	r3, r2
 800542a:	d01e      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800542c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005430:	4293      	cmp	r3, r2
 8005432:	d01a      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005434:	3218      	adds	r2, #24
 8005436:	4293      	cmp	r3, r2
 8005438:	d017      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800543a:	3218      	adds	r2, #24
 800543c:	4293      	cmp	r3, r2
 800543e:	d014      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005440:	3218      	adds	r2, #24
 8005442:	4293      	cmp	r3, r2
 8005444:	d011      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005446:	3218      	adds	r2, #24
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800544c:	3218      	adds	r2, #24
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005452:	3218      	adds	r2, #24
 8005454:	4293      	cmp	r3, r2
 8005456:	d008      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 8005458:	3218      	adds	r2, #24
 800545a:	4293      	cmp	r3, r2
 800545c:	d005      	beq.n	800546a <HAL_DMA_Abort_IT+0x166>
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005466:	2000      	movs	r0, #0
 8005468:	e759      	b.n	800531e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005472:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8005474:	e753      	b.n	800531e <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	f021 0101 	bic.w	r1, r1, #1
 800547c:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	4838      	ldr	r0, [pc, #224]	@ (8005564 <HAL_DMA_Abort_IT+0x260>)
 8005482:	4939      	ldr	r1, [pc, #228]	@ (8005568 <HAL_DMA_Abort_IT+0x264>)
 8005484:	428b      	cmp	r3, r1
 8005486:	bf18      	it	ne
 8005488:	4283      	cmpne	r3, r0
 800548a:	d042      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 800548c:	3118      	adds	r1, #24
 800548e:	428b      	cmp	r3, r1
 8005490:	d03f      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 8005492:	3118      	adds	r1, #24
 8005494:	428b      	cmp	r3, r1
 8005496:	d03c      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 8005498:	3118      	adds	r1, #24
 800549a:	428b      	cmp	r3, r1
 800549c:	d039      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 800549e:	3118      	adds	r1, #24
 80054a0:	428b      	cmp	r3, r1
 80054a2:	d036      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054a4:	3118      	adds	r1, #24
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d033      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054aa:	3118      	adds	r1, #24
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d030      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054b0:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80054b4:	428b      	cmp	r3, r1
 80054b6:	d02c      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054b8:	3118      	adds	r1, #24
 80054ba:	428b      	cmp	r3, r1
 80054bc:	d029      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054be:	3118      	adds	r1, #24
 80054c0:	428b      	cmp	r3, r1
 80054c2:	d026      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054c4:	3118      	adds	r1, #24
 80054c6:	428b      	cmp	r3, r1
 80054c8:	d023      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054ca:	3118      	adds	r1, #24
 80054cc:	428b      	cmp	r3, r1
 80054ce:	d020      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054d0:	3118      	adds	r1, #24
 80054d2:	428b      	cmp	r3, r1
 80054d4:	d01d      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054d6:	3118      	adds	r1, #24
 80054d8:	428b      	cmp	r3, r1
 80054da:	d01a      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054dc:	3118      	adds	r1, #24
 80054de:	428b      	cmp	r3, r1
 80054e0:	d017      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054e2:	4923      	ldr	r1, [pc, #140]	@ (8005570 <HAL_DMA_Abort_IT+0x26c>)
 80054e4:	428b      	cmp	r3, r1
 80054e6:	d014      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054e8:	3114      	adds	r1, #20
 80054ea:	428b      	cmp	r3, r1
 80054ec:	d011      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054ee:	3114      	adds	r1, #20
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d00e      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054f4:	3114      	adds	r1, #20
 80054f6:	428b      	cmp	r3, r1
 80054f8:	d00b      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 80054fa:	3114      	adds	r1, #20
 80054fc:	428b      	cmp	r3, r1
 80054fe:	d008      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 8005500:	3114      	adds	r1, #20
 8005502:	428b      	cmp	r3, r1
 8005504:	d005      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 8005506:	3114      	adds	r1, #20
 8005508:	428b      	cmp	r3, r1
 800550a:	d002      	beq.n	8005512 <HAL_DMA_Abort_IT+0x20e>
 800550c:	3114      	adds	r1, #20
 800550e:	428b      	cmp	r3, r1
 8005510:	d117      	bne.n	8005542 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005512:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8005514:	680b      	ldr	r3, [r1, #0]
 8005516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800551a:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800551c:	6d90      	ldr	r0, [r2, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800551e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8005520:	f003 011f 	and.w	r1, r3, #31
 8005524:	2301      	movs	r3, #1
 8005526:	408b      	lsls	r3, r1
 8005528:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800552a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800552c:	6e91      	ldr	r1, [r2, #104]	@ 0x68
 800552e:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005530:	6ed3      	ldr	r3, [r2, #108]	@ 0x6c
 8005532:	b133      	cbz	r3, 8005542 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 800553a:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800553c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800553e:	6f51      	ldr	r1, [r2, #116]	@ 0x74
 8005540:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005542:	2301      	movs	r3, #1
 8005544:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005548:	2300      	movs	r3, #0
 800554a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800554e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005550:	b12b      	cbz	r3, 800555e <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8005552:	4610      	mov	r0, r2
 8005554:	4798      	blx	r3
  return HAL_OK;
 8005556:	2000      	movs	r0, #0
 8005558:	e6e1      	b.n	800531e <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800555a:	2001      	movs	r0, #1
}
 800555c:	4770      	bx	lr
  return HAL_OK;
 800555e:	2000      	movs	r0, #0
 8005560:	e6dd      	b.n	800531e <HAL_DMA_Abort_IT+0x1a>
 8005562:	bf00      	nop
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020040 	.word	0x40020040
 8005570:	58025408 	.word	0x58025408

08005574 <HAL_DMA_IRQHandler>:
{
 8005574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005576:	b083      	sub	sp, #12
 8005578:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800557e:	4b7d      	ldr	r3, [pc, #500]	@ (8005774 <HAL_DMA_IRQHandler+0x200>)
 8005580:	681d      	ldr	r5, [r3, #0]
 8005582:	4b7d      	ldr	r3, [pc, #500]	@ (8005778 <HAL_DMA_IRQHandler+0x204>)
 8005584:	fba3 3505 	umull	r3, r5, r3, r5
 8005588:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800558a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr_dma  = regs_dma->ISR;
 800558c:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 800558e:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005592:	6803      	ldr	r3, [r0, #0]
 8005594:	4979      	ldr	r1, [pc, #484]	@ (800577c <HAL_DMA_IRQHandler+0x208>)
 8005596:	487a      	ldr	r0, [pc, #488]	@ (8005780 <HAL_DMA_IRQHandler+0x20c>)
 8005598:	4283      	cmp	r3, r0
 800559a:	bf18      	it	ne
 800559c:	428b      	cmpne	r3, r1
 800559e:	bf0c      	ite	eq
 80055a0:	2001      	moveq	r0, #1
 80055a2:	2000      	movne	r0, #0
 80055a4:	d061      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055a6:	4a77      	ldr	r2, [pc, #476]	@ (8005784 <HAL_DMA_IRQHandler+0x210>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d05e      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055ac:	3218      	adds	r2, #24
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d05b      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055b2:	3218      	adds	r2, #24
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d058      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055b8:	3218      	adds	r2, #24
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d055      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055be:	3218      	adds	r2, #24
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d052      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055c4:	3218      	adds	r2, #24
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d04f      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055ca:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d04b      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055d2:	3218      	adds	r2, #24
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d048      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055d8:	3218      	adds	r2, #24
 80055da:	4293      	cmp	r3, r2
 80055dc:	d045      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055de:	3218      	adds	r2, #24
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d042      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055e4:	3218      	adds	r2, #24
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d03f      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055ea:	3218      	adds	r2, #24
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d03c      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055f0:	3218      	adds	r2, #24
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d039      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
 80055f6:	3218      	adds	r2, #24
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d036      	beq.n	800566a <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055fc:	4962      	ldr	r1, [pc, #392]	@ (8005788 <HAL_DMA_IRQHandler+0x214>)
 80055fe:	4a63      	ldr	r2, [pc, #396]	@ (800578c <HAL_DMA_IRQHandler+0x218>)
 8005600:	4293      	cmp	r3, r2
 8005602:	bf18      	it	ne
 8005604:	428b      	cmpne	r3, r1
 8005606:	d012      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 8005608:	4a61      	ldr	r2, [pc, #388]	@ (8005790 <HAL_DMA_IRQHandler+0x21c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00f      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 800560e:	3214      	adds	r2, #20
 8005610:	4293      	cmp	r3, r2
 8005612:	d00c      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 8005614:	3214      	adds	r2, #20
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 800561a:	3214      	adds	r2, #20
 800561c:	4293      	cmp	r3, r2
 800561e:	d006      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 8005620:	3214      	adds	r2, #20
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <HAL_DMA_IRQHandler+0xba>
 8005626:	3214      	adds	r2, #20
 8005628:	4293      	cmp	r3, r2
 800562a:	f040 8261 	bne.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800562e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005630:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8005632:	f001 011f 	and.w	r1, r1, #31
 8005636:	2004      	movs	r0, #4
 8005638:	4088      	lsls	r0, r1
 800563a:	ea10 0f0c 	tst.w	r0, ip
 800563e:	f000 82a7 	beq.w	8005b90 <HAL_DMA_IRQHandler+0x61c>
 8005642:	f012 0f04 	tst.w	r2, #4
 8005646:	f000 82a3 	beq.w	8005b90 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800564a:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564c:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005650:	f000 825a 	beq.w	8005b08 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005654:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005658:	f040 8250 	bne.w	8005afc <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800565c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8246 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8005664:	4620      	mov	r0, r4
 8005666:	4798      	blx	r3
 8005668:	e242      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800566a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800566c:	f002 011f 	and.w	r1, r2, #31
 8005670:	2208      	movs	r2, #8
 8005672:	408a      	lsls	r2, r1
 8005674:	4232      	tst	r2, r6
 8005676:	d041      	beq.n	80056fc <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005678:	bb70      	cbnz	r0, 80056d8 <HAL_DMA_IRQHandler+0x164>
 800567a:	4a42      	ldr	r2, [pc, #264]	@ (8005784 <HAL_DMA_IRQHandler+0x210>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 8005680:	3218      	adds	r2, #24
 8005682:	4293      	cmp	r3, r2
 8005684:	d028      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 8005686:	3218      	adds	r2, #24
 8005688:	4293      	cmp	r3, r2
 800568a:	d025      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 800568c:	3218      	adds	r2, #24
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 8005692:	3218      	adds	r2, #24
 8005694:	4293      	cmp	r3, r2
 8005696:	d01f      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 8005698:	3218      	adds	r2, #24
 800569a:	4293      	cmp	r3, r2
 800569c:	d01c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 800569e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056a6:	3218      	adds	r2, #24
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d015      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056ac:	3218      	adds	r2, #24
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d012      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056b2:	3218      	adds	r2, #24
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00f      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056b8:	3218      	adds	r2, #24
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056be:	3218      	adds	r2, #24
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056c4:	3218      	adds	r2, #24
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d006      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056ca:	3218      	adds	r2, #24
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x164>
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80056d6:	e002      	b.n	80056de <HAL_DMA_IRQHandler+0x16a>
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80056de:	b16a      	cbz	r2, 80056fc <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f022 0204 	bic.w	r2, r2, #4
 80056e6:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056e8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80056ea:	f003 021f 	and.w	r2, r3, #31
 80056ee:	2308      	movs	r3, #8
 80056f0:	4093      	lsls	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6563      	str	r3, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056fc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80056fe:	f002 021f 	and.w	r2, r2, #31
 8005702:	fa26 f302 	lsr.w	r3, r6, r2
 8005706:	f013 0f01 	tst.w	r3, #1
 800570a:	d047      	beq.n	800579c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	481b      	ldr	r0, [pc, #108]	@ (800577c <HAL_DMA_IRQHandler+0x208>)
 8005710:	491b      	ldr	r1, [pc, #108]	@ (8005780 <HAL_DMA_IRQHandler+0x20c>)
 8005712:	428b      	cmp	r3, r1
 8005714:	bf18      	it	ne
 8005716:	4283      	cmpne	r3, r0
 8005718:	d03c      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800571a:	3118      	adds	r1, #24
 800571c:	428b      	cmp	r3, r1
 800571e:	d039      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005720:	3118      	adds	r1, #24
 8005722:	428b      	cmp	r3, r1
 8005724:	d036      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005726:	3118      	adds	r1, #24
 8005728:	428b      	cmp	r3, r1
 800572a:	d033      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800572c:	3118      	adds	r1, #24
 800572e:	428b      	cmp	r3, r1
 8005730:	d030      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005732:	3118      	adds	r1, #24
 8005734:	428b      	cmp	r3, r1
 8005736:	d02d      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005738:	3118      	adds	r1, #24
 800573a:	428b      	cmp	r3, r1
 800573c:	d02a      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800573e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005742:	428b      	cmp	r3, r1
 8005744:	d026      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005746:	3118      	adds	r1, #24
 8005748:	428b      	cmp	r3, r1
 800574a:	d023      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800574c:	3118      	adds	r1, #24
 800574e:	428b      	cmp	r3, r1
 8005750:	d020      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005752:	3118      	adds	r1, #24
 8005754:	428b      	cmp	r3, r1
 8005756:	d01d      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005758:	3118      	adds	r1, #24
 800575a:	428b      	cmp	r3, r1
 800575c:	d01a      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800575e:	3118      	adds	r1, #24
 8005760:	428b      	cmp	r3, r1
 8005762:	d017      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005764:	3118      	adds	r1, #24
 8005766:	428b      	cmp	r3, r1
 8005768:	d014      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 800576a:	3118      	adds	r1, #24
 800576c:	428b      	cmp	r3, r1
 800576e:	d011      	beq.n	8005794 <HAL_DMA_IRQHandler+0x220>
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	e013      	b.n	800579c <HAL_DMA_IRQHandler+0x228>
 8005774:	24000004 	.word	0x24000004
 8005778:	1b4e81b5 	.word	0x1b4e81b5
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	58025408 	.word	0x58025408
 800578c:	5802541c 	.word	0x5802541c
 8005790:	58025430 	.word	0x58025430
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800579a:	d13b      	bne.n	8005814 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800579c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2204      	movs	r2, #4
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	4233      	tst	r3, r6
 80057aa:	d03f      	beq.n	800582c <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057ac:	6822      	ldr	r2, [r4, #0]
 80057ae:	4896      	ldr	r0, [pc, #600]	@ (8005a08 <HAL_DMA_IRQHandler+0x494>)
 80057b0:	4996      	ldr	r1, [pc, #600]	@ (8005a0c <HAL_DMA_IRQHandler+0x498>)
 80057b2:	428a      	cmp	r2, r1
 80057b4:	bf18      	it	ne
 80057b6:	4282      	cmpne	r2, r0
 80057b8:	d034      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057ba:	3118      	adds	r1, #24
 80057bc:	428a      	cmp	r2, r1
 80057be:	d031      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057c0:	3118      	adds	r1, #24
 80057c2:	428a      	cmp	r2, r1
 80057c4:	d02e      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057c6:	3118      	adds	r1, #24
 80057c8:	428a      	cmp	r2, r1
 80057ca:	d02b      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057cc:	3118      	adds	r1, #24
 80057ce:	428a      	cmp	r2, r1
 80057d0:	d028      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057d2:	3118      	adds	r1, #24
 80057d4:	428a      	cmp	r2, r1
 80057d6:	d025      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057d8:	3118      	adds	r1, #24
 80057da:	428a      	cmp	r2, r1
 80057dc:	d022      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057de:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80057e2:	428a      	cmp	r2, r1
 80057e4:	d01e      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057e6:	3118      	adds	r1, #24
 80057e8:	428a      	cmp	r2, r1
 80057ea:	d01b      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057ec:	3118      	adds	r1, #24
 80057ee:	428a      	cmp	r2, r1
 80057f0:	d018      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057f2:	3118      	adds	r1, #24
 80057f4:	428a      	cmp	r2, r1
 80057f6:	d015      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057f8:	3118      	adds	r1, #24
 80057fa:	428a      	cmp	r2, r1
 80057fc:	d012      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 80057fe:	3118      	adds	r1, #24
 8005800:	428a      	cmp	r2, r1
 8005802:	d00f      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 8005804:	3118      	adds	r1, #24
 8005806:	428a      	cmp	r2, r1
 8005808:	d00c      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 800580a:	3118      	adds	r1, #24
 800580c:	428a      	cmp	r2, r1
 800580e:	d009      	beq.n	8005824 <HAL_DMA_IRQHandler+0x2b0>
 8005810:	6813      	ldr	r3, [r2, #0]
 8005812:	e00b      	b.n	800582c <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005814:	2301      	movs	r3, #1
 8005816:	4093      	lsls	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800581a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	6563      	str	r3, [r4, #84]	@ 0x54
 8005822:	e7bb      	b.n	800579c <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	f012 0f02 	tst.w	r2, #2
 800582a:	d13d      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800582c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2210      	movs	r2, #16
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	4233      	tst	r3, r6
 800583a:	d05f      	beq.n	80058fc <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	4872      	ldr	r0, [pc, #456]	@ (8005a08 <HAL_DMA_IRQHandler+0x494>)
 8005840:	4972      	ldr	r1, [pc, #456]	@ (8005a0c <HAL_DMA_IRQHandler+0x498>)
 8005842:	428a      	cmp	r2, r1
 8005844:	bf18      	it	ne
 8005846:	4282      	cmpne	r2, r0
 8005848:	d034      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800584a:	3118      	adds	r1, #24
 800584c:	428a      	cmp	r2, r1
 800584e:	d031      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005850:	3118      	adds	r1, #24
 8005852:	428a      	cmp	r2, r1
 8005854:	d02e      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005856:	3118      	adds	r1, #24
 8005858:	428a      	cmp	r2, r1
 800585a:	d02b      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800585c:	3118      	adds	r1, #24
 800585e:	428a      	cmp	r2, r1
 8005860:	d028      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005862:	3118      	adds	r1, #24
 8005864:	428a      	cmp	r2, r1
 8005866:	d025      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005868:	3118      	adds	r1, #24
 800586a:	428a      	cmp	r2, r1
 800586c:	d022      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800586e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005872:	428a      	cmp	r2, r1
 8005874:	d01e      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005876:	3118      	adds	r1, #24
 8005878:	428a      	cmp	r2, r1
 800587a:	d01b      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800587c:	3118      	adds	r1, #24
 800587e:	428a      	cmp	r2, r1
 8005880:	d018      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005882:	3118      	adds	r1, #24
 8005884:	428a      	cmp	r2, r1
 8005886:	d015      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005888:	3118      	adds	r1, #24
 800588a:	428a      	cmp	r2, r1
 800588c:	d012      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800588e:	3118      	adds	r1, #24
 8005890:	428a      	cmp	r2, r1
 8005892:	d00f      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 8005894:	3118      	adds	r1, #24
 8005896:	428a      	cmp	r2, r1
 8005898:	d00c      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 800589a:	3118      	adds	r1, #24
 800589c:	428a      	cmp	r2, r1
 800589e:	d009      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x340>
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80058a6:	e008      	b.n	80058ba <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058a8:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	6563      	str	r3, [r4, #84]	@ 0x54
 80058b2:	e7bb      	b.n	800582c <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80058ba:	b1fa      	cbz	r2, 80058fc <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058bc:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80058c6:	d00d      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80058ce:	d104      	bne.n	80058da <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 80058d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058d2:	b19b      	cbz	r3, 80058fc <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 80058d4:	4620      	mov	r0, r4
 80058d6:	4798      	blx	r3
 80058d8:	e010      	b.n	80058fc <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80058dc:	b173      	cbz	r3, 80058fc <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 80058de:	4620      	mov	r0, r4
 80058e0:	4798      	blx	r3
 80058e2:	e00b      	b.n	80058fc <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80058ea:	d103      	bne.n	80058f4 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	f022 0208 	bic.w	r2, r2, #8
 80058f2:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80058f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058f6:	b10b      	cbz	r3, 80058fc <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 80058f8:	4620      	mov	r0, r4
 80058fa:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058fc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2220      	movs	r2, #32
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	4233      	tst	r3, r6
 800590a:	f000 8093 	beq.w	8005a34 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800590e:	6822      	ldr	r2, [r4, #0]
 8005910:	483d      	ldr	r0, [pc, #244]	@ (8005a08 <HAL_DMA_IRQHandler+0x494>)
 8005912:	493e      	ldr	r1, [pc, #248]	@ (8005a0c <HAL_DMA_IRQHandler+0x498>)
 8005914:	428a      	cmp	r2, r1
 8005916:	bf18      	it	ne
 8005918:	4282      	cmpne	r2, r0
 800591a:	d02e      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800591c:	3118      	adds	r1, #24
 800591e:	428a      	cmp	r2, r1
 8005920:	d02b      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005922:	3118      	adds	r1, #24
 8005924:	428a      	cmp	r2, r1
 8005926:	d028      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005928:	3118      	adds	r1, #24
 800592a:	428a      	cmp	r2, r1
 800592c:	d025      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800592e:	3118      	adds	r1, #24
 8005930:	428a      	cmp	r2, r1
 8005932:	d022      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005934:	3118      	adds	r1, #24
 8005936:	428a      	cmp	r2, r1
 8005938:	d01f      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800593a:	3118      	adds	r1, #24
 800593c:	428a      	cmp	r2, r1
 800593e:	d01c      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005940:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8005944:	428a      	cmp	r2, r1
 8005946:	d018      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005948:	3118      	adds	r1, #24
 800594a:	428a      	cmp	r2, r1
 800594c:	d015      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800594e:	3118      	adds	r1, #24
 8005950:	428a      	cmp	r2, r1
 8005952:	d012      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005954:	3118      	adds	r1, #24
 8005956:	428a      	cmp	r2, r1
 8005958:	d00f      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800595a:	3118      	adds	r1, #24
 800595c:	428a      	cmp	r2, r1
 800595e:	d00c      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005960:	3118      	adds	r1, #24
 8005962:	428a      	cmp	r2, r1
 8005964:	d009      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005966:	3118      	adds	r1, #24
 8005968:	428a      	cmp	r2, r1
 800596a:	d006      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 800596c:	3118      	adds	r1, #24
 800596e:	428a      	cmp	r2, r1
 8005970:	d003      	beq.n	800597a <HAL_DMA_IRQHandler+0x406>
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005978:	e002      	b.n	8005980 <HAL_DMA_IRQHandler+0x40c>
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005980:	2a00      	cmp	r2, #0
 8005982:	d057      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005984:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005986:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b04      	cmp	r3, #4
 800598e:	d00e      	beq.n	80059ae <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005998:	d03a      	beq.n	8005a10 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80059a0:	d12d      	bne.n	80059fe <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 80059a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d045      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 80059a8:	4620      	mov	r0, r4
 80059aa:	4798      	blx	r3
 80059ac:	e042      	b.n	8005a34 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	6813      	ldr	r3, [r2, #0]
 80059b2:	f023 0316 	bic.w	r3, r3, #22
 80059b6:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	6953      	ldr	r3, [r2, #20]
 80059bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c0:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059c4:	b1bb      	cbz	r3, 80059f6 <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	f023 0308 	bic.w	r3, r3, #8
 80059ce:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80059d2:	f003 021f 	and.w	r2, r3, #31
 80059d6:	233f      	movs	r3, #63	@ 0x3f
 80059d8:	4093      	lsls	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80059dc:	2301      	movs	r3, #1
 80059de:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80059e2:	2300      	movs	r3, #0
 80059e4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80059e8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 8080 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 80059f0:	4620      	mov	r0, r4
 80059f2:	4798      	blx	r3
          return;
 80059f4:	e07c      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059f6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e4      	bne.n	80059c6 <HAL_DMA_IRQHandler+0x452>
 80059fc:	e7e8      	b.n	80059d0 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 80059fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a00:	b1c3      	cbz	r3, 8005a34 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8005a02:	4620      	mov	r0, r4
 8005a04:	4798      	blx	r3
 8005a06:	e015      	b.n	8005a34 <HAL_DMA_IRQHandler+0x4c0>
 8005a08:	40020010 	.word	0x40020010
 8005a0c:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8005a16:	d109      	bne.n	8005a2c <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	f022 0210 	bic.w	r2, r2, #16
 8005a1e:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 8005a2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a2e:	b10b      	cbz	r3, 8005a34 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005a30:	4620      	mov	r0, r4
 8005a32:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d05a      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005a3c:	f013 0f01 	tst.w	r3, #1
 8005a40:	d052      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a42:	2304      	movs	r3, #4
 8005a44:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	4996      	ldr	r1, [pc, #600]	@ (8005ca4 <HAL_DMA_IRQHandler+0x730>)
 8005a4c:	4a96      	ldr	r2, [pc, #600]	@ (8005ca8 <HAL_DMA_IRQHandler+0x734>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bf18      	it	ne
 8005a52:	428b      	cmpne	r3, r1
 8005a54:	d02f      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a56:	3218      	adds	r2, #24
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d02c      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a5c:	3218      	adds	r2, #24
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d029      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a62:	3218      	adds	r2, #24
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d026      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a68:	3218      	adds	r2, #24
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d023      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a6e:	3218      	adds	r2, #24
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d020      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a74:	3218      	adds	r2, #24
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a7a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a82:	3218      	adds	r2, #24
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d016      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a88:	3218      	adds	r2, #24
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a8e:	3218      	adds	r2, #24
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d010      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a94:	3218      	adds	r2, #24
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00d      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005a9a:	3218      	adds	r2, #24
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005aa0:	3218      	adds	r2, #24
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005aa6:	3218      	adds	r2, #24
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x542>
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e003      	b.n	8005abe <HAL_DMA_IRQHandler+0x54a>
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	d804      	bhi.n	8005ad2 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f013 0f01 	tst.w	r3, #1
 8005ad0:	d1f5      	bne.n	8005abe <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f013 0f01 	tst.w	r3, #1
 8005ada:	d00b      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8005adc:	2303      	movs	r3, #3
 8005ade:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005ae8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005aea:	b10b      	cbz	r3, 8005af0 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005aec:	4620      	mov	r0, r4
 8005aee:	4798      	blx	r3
}
 8005af0:	b003      	add	sp, #12
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
 8005afa:	e7f2      	b.n	8005ae2 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8005afc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f6      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8005b02:	4620      	mov	r0, r4
 8005b04:	4798      	blx	r3
 8005b06:	e7f3      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b08:	f012 0f20 	tst.w	r2, #32
 8005b0c:	d13a      	bne.n	8005b84 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	4964      	ldr	r1, [pc, #400]	@ (8005ca4 <HAL_DMA_IRQHandler+0x730>)
 8005b12:	4a65      	ldr	r2, [pc, #404]	@ (8005ca8 <HAL_DMA_IRQHandler+0x734>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	bf18      	it	ne
 8005b18:	428b      	cmpne	r3, r1
 8005b1a:	d02f      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b1c:	3218      	adds	r2, #24
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b22:	3218      	adds	r2, #24
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d029      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b28:	3218      	adds	r2, #24
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d026      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b2e:	3218      	adds	r2, #24
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d023      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b34:	3218      	adds	r2, #24
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d020      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b3a:	3218      	adds	r2, #24
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d01d      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b40:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d019      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b48:	3218      	adds	r2, #24
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d016      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b4e:	3218      	adds	r2, #24
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b54:	3218      	adds	r2, #24
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d010      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b5a:	3218      	adds	r2, #24
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00d      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b60:	3218      	adds	r2, #24
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00a      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b66:	3218      	adds	r2, #24
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b6c:	3218      	adds	r2, #24
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x608>
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	f022 0204 	bic.w	r2, r2, #4
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e003      	b.n	8005b84 <HAL_DMA_IRQHandler+0x610>
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f022 0208 	bic.w	r2, r2, #8
 8005b82:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005b84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0b2      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4798      	blx	r3
 8005b8e:	e7af      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b90:	2002      	movs	r0, #2
 8005b92:	4088      	lsls	r0, r1
 8005b94:	ea10 0f0c 	tst.w	r0, ip
 8005b98:	d060      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x6e8>
 8005b9a:	f012 0f02 	tst.w	r2, #2
 8005b9e:	d05d      	beq.n	8005c5c <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ba0:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ba2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ba8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8005bac:	d105      	bne.n	8005bba <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8005bae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d09d      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	4798      	blx	r3
 8005bb8:	e79a      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8005bba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d097      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	4798      	blx	r3
 8005bc4:	e794      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bc6:	f012 0f20 	tst.w	r2, #32
 8005bca:	d140      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	4935      	ldr	r1, [pc, #212]	@ (8005ca4 <HAL_DMA_IRQHandler+0x730>)
 8005bd0:	4a35      	ldr	r2, [pc, #212]	@ (8005ca8 <HAL_DMA_IRQHandler+0x734>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bf18      	it	ne
 8005bd6:	428b      	cmpne	r3, r1
 8005bd8:	d02f      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005bda:	3218      	adds	r2, #24
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d02c      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005be0:	3218      	adds	r2, #24
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d029      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005be6:	3218      	adds	r2, #24
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d026      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005bec:	3218      	adds	r2, #24
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d023      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005bf2:	3218      	adds	r2, #24
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d020      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005bf8:	3218      	adds	r2, #24
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01d      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005bfe:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d019      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c06:	3218      	adds	r2, #24
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d016      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c0c:	3218      	adds	r2, #24
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c12:	3218      	adds	r2, #24
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d010      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c18:	3218      	adds	r2, #24
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00d      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c1e:	3218      	adds	r2, #24
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00a      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c24:	3218      	adds	r2, #24
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c2a:	3218      	adds	r2, #24
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x6c6>
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	f022 020a 	bic.w	r2, r2, #10
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	e003      	b.n	8005c42 <HAL_DMA_IRQHandler+0x6ce>
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f022 0214 	bic.w	r2, r2, #20
 8005c40:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005c4e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f43f af4d 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 8005c56:	4620      	mov	r0, r4
 8005c58:	4798      	blx	r3
 8005c5a:	e749      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005c5c:	2008      	movs	r0, #8
 8005c5e:	fa00 f101 	lsl.w	r1, r0, r1
 8005c62:	ea11 0f0c 	tst.w	r1, ip
 8005c66:	f43f af43 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
 8005c6a:	f012 0f08 	tst.w	r2, #8
 8005c6e:	f43f af3f 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	f022 020e 	bic.w	r2, r2, #14
 8005c78:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c88:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_READY;
 8005c8a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8005c94:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f43f af2a 	beq.w	8005af0 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	4798      	blx	r3
  }
 8005ca0:	e726      	b.n	8005af0 <HAL_DMA_IRQHandler+0x57c>
 8005ca2:	bf00      	nop
 8005ca4:	40020010 	.word	0x40020010
 8005ca8:	40020028 	.word	0x40020028

08005cac <HAL_DMA_GetState>:
  return hdma->State;
 8005cac:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005cb2:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 8005cb4:	4770      	bx	lr
	...

08005cb8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005cb8:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005cba:	6b41      	ldr	r1, [r0, #52]	@ 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005cbc:	6804      	ldr	r4, [r0, #0]
 8005cbe:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005cc2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e80 <FDCAN_CalcultateRamBlockAddresses+0x1c8>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8005cca:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005cce:	6804      	ldr	r4, [r0, #0]
 8005cd0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005cd4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005cd8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005cda:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8005cde:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005ce2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005ce4:	440b      	add	r3, r1
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005ce6:	6804      	ldr	r4, [r0, #0]
 8005ce8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005cec:	4011      	ands	r1, r2
 8005cee:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005cf2:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005cf6:	6804      	ldr	r4, [r0, #0]
 8005cf8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005cfc:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d00:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8005d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d06:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005d0a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005d0c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005d10:	6804      	ldr	r4, [r0, #0]
 8005d12:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005d16:	4011      	ands	r1, r2
 8005d18:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d1c:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005d20:	6804      	ldr	r4, [r0, #0]
 8005d22:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005d26:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d2a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8005d2c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d30:	f8c4 10a0 	str.w	r1, [r4, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005d34:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005d36:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005d38:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d3c:	6804      	ldr	r4, [r0, #0]
 8005d3e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005d42:	4011      	ands	r1, r2
 8005d44:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d48:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d4c:	6804      	ldr	r4, [r0, #0]
 8005d4e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005d52:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
 8005d56:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8005d58:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005d5c:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d60:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005d62:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005d64:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d68:	6804      	ldr	r4, [r0, #0]
 8005d6a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005d6e:	4011      	ands	r1, r2
 8005d70:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d74:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d78:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005d7a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005d7c:	fb04 3301 	mla	r3, r4, r1, r3
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d80:	6804      	ldr	r4, [r0, #0]
 8005d82:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005d86:	4011      	ands	r1, r2
 8005d88:	ea41 0183 	orr.w	r1, r1, r3, lsl #2
 8005d8c:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d90:	6804      	ldr	r4, [r0, #0]
 8005d92:	f8d4 10f0 	ldr.w	r1, [r4, #240]	@ 0xf0
 8005d96:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
 8005d9a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8005d9c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005da0:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005da4:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005da6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005daa:	6804      	ldr	r4, [r0, #0]
 8005dac:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8005db0:	400a      	ands	r2, r1
 8005db2:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 8005db6:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005dba:	6802      	ldr	r2, [r0, #0]
 8005dbc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005dc0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005dc4:	6dc1      	ldr	r1, [r0, #92]	@ 0x5c
 8005dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005dca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005dce:	6802      	ldr	r2, [r0, #0]
 8005dd0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005dd4:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005dd8:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 8005dda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005dde:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005de2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005de4:	4a27      	ldr	r2, [pc, #156]	@ (8005e84 <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 8005de6:	441a      	add	r2, r3
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	66c2      	str	r2, [r0, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005dec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005dee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005df2:	6703      	str	r3, [r0, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005df4:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8005df6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005dfa:	6743      	str	r3, [r0, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005dfc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005dfe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005e00:	fb04 f101 	mul.w	r1, r4, r1
 8005e04:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e08:	6783      	str	r3, [r0, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e0a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005e0c:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005e0e:	fb04 f101 	mul.w	r1, r4, r1
 8005e12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e16:	67c3      	str	r3, [r0, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e18:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005e1a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8005e1c:	fb04 f101 	mul.w	r1, r4, r1
 8005e20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e24:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e28:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005e2a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005e2e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e32:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005e34:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
 8005e36:	fb01 fc04 	mul.w	ip, r1, r4
 8005e3a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8005e3e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e42:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8005e44:	fb04 f101 	mul.w	r1, r4, r1
 8005e48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005e4c:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e50:	490d      	ldr	r1, [pc, #52]	@ (8005e88 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8005e52:	428b      	cmp	r3, r1
 8005e54:	d90d      	bls.n	8005e72 <FDCAN_CalcultateRamBlockAddresses+0x1ba>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e56:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e5a:	f043 0320 	orr.w	r3, r3, #32
 8005e5e:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e62:	2303      	movs	r3, #3
 8005e64:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98

    return HAL_ERROR;
 8005e68:	2001      	movs	r0, #1
 8005e6a:	e007      	b.n	8005e7c <FDCAN_CalcultateRamBlockAddresses+0x1c4>
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e72:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d8f8      	bhi.n	8005e6c <FDCAN_CalcultateRamBlockAddresses+0x1b4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e7a:	2000      	movs	r0, #0
}
 8005e7c:	bc30      	pop	{r4, r5}
 8005e7e:	4770      	bx	lr
 8005e80:	ffff0003 	.word	0xffff0003
 8005e84:	10002b00 	.word	0x10002b00
 8005e88:	4000d3fc 	.word	0x4000d3fc

08005e8c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005e8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005e8e:	684c      	ldr	r4, [r1, #4]
 8005e90:	b9f4      	cbnz	r4, 8005ed0 <FDCAN_CopyMessageToRAM+0x44>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e92:	690d      	ldr	r5, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005e94:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 8005e96:	4325      	orrs	r5, r4
                   (pTxHeader->Identifier << 18));
 8005e98:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005e9a:	ea45 4584 	orr.w	r5, r5, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005e9e:	6a0e      	ldr	r6, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 8005ea0:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005ea2:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
                 pTxHeader->FDFormat |
 8005ea6:	698e      	ldr	r6, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 8005ea8:	4334      	orrs	r4, r6
                 pTxHeader->BitRateSwitch |
 8005eaa:	694e      	ldr	r6, [r1, #20]
                 pTxHeader->FDFormat |
 8005eac:	4334      	orrs	r4, r6
                 pTxHeader->DataLength);
 8005eae:	68ce      	ldr	r6, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005eb0:	4334      	orrs	r4, r6

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005eb2:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8005eb6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005eb8:	fb00 f303 	mul.w	r3, r0, r3
 8005ebc:	eb06 0e83 	add.w	lr, r6, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005ec0:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 8005ec4:	f8ce 4004 	str.w	r4, [lr, #4]
  TxAddress++;
 8005ec8:	f10e 0e08 	add.w	lr, lr, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005ecc:	2000      	movs	r0, #0
 8005ece:	e019      	b.n	8005f04 <FDCAN_CopyMessageToRAM+0x78>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ed0:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8005ed2:	688d      	ldr	r5, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8005ed4:	4325      	orrs	r5, r4
                   pTxHeader->Identifier);
 8005ed6:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8005ed8:	4325      	orrs	r5, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005eda:	f045 4580 	orr.w	r5, r5, #1073741824	@ 0x40000000
 8005ede:	e7de      	b.n	8005e9e <FDCAN_CopyMessageToRAM+0x12>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005ee0:	eb02 0c00 	add.w	ip, r2, r0
 8005ee4:	f89c 4003 	ldrb.w	r4, [ip, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005ee8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8005eec:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005eee:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005ef2:	f89c 4001 	ldrb.w	r4, [ip, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005ef6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8005efa:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005efc:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005efe:	f84e 3b04 	str.w	r3, [lr], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005f02:	3004      	adds	r0, #4
 8005f04:	89cb      	ldrh	r3, [r1, #14]
 8005f06:	4c02      	ldr	r4, [pc, #8]	@ (8005f10 <FDCAN_CopyMessageToRAM+0x84>)
 8005f08:	5ce3      	ldrb	r3, [r4, r3]
 8005f0a:	4283      	cmp	r3, r0
 8005f0c:	d8e8      	bhi.n	8005ee0 <FDCAN_CopyMessageToRAM+0x54>
    TxAddress++;
  }
}
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	0801df64 	.word	0x0801df64

08005f14 <HAL_FDCAN_Init>:
{
 8005f14:	b530      	push	{r4, r5, lr}
 8005f16:	b095      	sub	sp, #84	@ 0x54
 8005f18:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005f1a:	224c      	movs	r2, #76	@ 0x4c
 8005f1c:	49a0      	ldr	r1, [pc, #640]	@ (80061a0 <HAL_FDCAN_Init+0x28c>)
 8005f1e:	a801      	add	r0, sp, #4
 8005f20:	f017 fe9c 	bl	801dc5c <memcpy>
  if (hfdcan == NULL)
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	f000 8138 	beq.w	800619a <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4a9d      	ldr	r2, [pc, #628]	@ (80061a4 <HAL_FDCAN_Init+0x290>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d020      	beq.n	8005f74 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f32:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
 8005f36:	b30b      	cbz	r3, 8005f7c <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	6993      	ldr	r3, [r2, #24]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8005f42:	f7fd fac3 	bl	80034cc <HAL_GetTick>
 8005f46:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	f012 0f08 	tst.w	r2, #8
 8005f50:	d01a      	beq.n	8005f88 <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f52:	f7fd fabb 	bl	80034cc <HAL_GetTick>
 8005f56:	1b43      	subs	r3, r0, r5
 8005f58:	2b0a      	cmp	r3, #10
 8005f5a:	d9f5      	bls.n	8005f48 <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f5c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005f6e:	2001      	movs	r0, #1
}
 8005f70:	b015      	add	sp, #84	@ 0x54
 8005f72:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005f74:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	e7da      	b.n	8005f32 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8005f7c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7fc fae5 	bl	8002550 <HAL_FDCAN_MspInit>
 8005f86:	e7d7      	b.n	8005f38 <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8005f90:	f7fd fa9c 	bl	80034cc <HAL_GetTick>
 8005f94:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	f012 0f01 	tst.w	r2, #1
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fa0:	f7fd fa94 	bl	80034cc <HAL_GetTick>
 8005fa4:	1b40      	subs	r0, r0, r5
 8005fa6:	280a      	cmp	r0, #10
 8005fa8:	d9f5      	bls.n	8005f96 <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005faa:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      return HAL_ERROR;
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	e7d7      	b.n	8005f70 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	f042 0202 	orr.w	r2, r2, #2
 8005fc6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005fc8:	7c23      	ldrb	r3, [r4, #16]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d040      	beq.n	8006050 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	6993      	ldr	r3, [r2, #24]
 8005fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fd6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005fd8:	7c63      	ldrb	r3, [r4, #17]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d03e      	beq.n	800605c <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	6993      	ldr	r3, [r2, #24]
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005fe8:	7ca3      	ldrb	r3, [r4, #18]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d03c      	beq.n	8006068 <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	6993      	ldr	r3, [r2, #24]
 8005ff2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ff6:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	6993      	ldr	r3, [r2, #24]
 8005ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006000:	68a1      	ldr	r1, [r4, #8]
 8006002:	430b      	orrs	r3, r1
 8006004:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	6993      	ldr	r3, [r2, #24]
 800600a:	f023 03a4 	bic.w	r3, r3, #164	@ 0xa4
 800600e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	6913      	ldr	r3, [r2, #16]
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d029      	beq.n	8006074 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02c      	beq.n	800607e <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006024:	2b02      	cmp	r3, #2
 8006026:	f000 809b 	beq.w	8006160 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	6993      	ldr	r3, [r2, #24]
 800602e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006032:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	6913      	ldr	r3, [r2, #16]
 8006038:	f043 0310 	orr.w	r3, r3, #16
 800603c:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800603e:	68e3      	ldr	r3, [r4, #12]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d11c      	bne.n	800607e <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	6993      	ldr	r3, [r2, #24]
 8006048:	f043 0320 	orr.w	r3, r3, #32
 800604c:	6193      	str	r3, [r2, #24]
 800604e:	e016      	b.n	800607e <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	6993      	ldr	r3, [r2, #24]
 8006054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006058:	6193      	str	r3, [r2, #24]
 800605a:	e7bd      	b.n	8005fd8 <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	6993      	ldr	r3, [r2, #24]
 8006060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006064:	6193      	str	r3, [r2, #24]
 8006066:	e7bf      	b.n	8005fe8 <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	6993      	ldr	r3, [r2, #24]
 800606c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006070:	6193      	str	r3, [r2, #24]
 8006072:	e7c1      	b.n	8005ff8 <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	6993      	ldr	r3, [r2, #24]
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800607e:	69a3      	ldr	r3, [r4, #24]
 8006080:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006082:	69e3      	ldr	r3, [r4, #28]
 8006084:	3b01      	subs	r3, #1
 8006086:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006088:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800608c:	6a22      	ldr	r2, [r4, #32]
 800608e:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006090:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006092:	6962      	ldr	r2, [r4, #20]
 8006094:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006096:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800609c:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060a4:	d062      	beq.n	800616c <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80060a6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80060a8:	b133      	cbz	r3, 80060b8 <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80060b0:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80060b2:	430b      	orrs	r3, r1
 80060b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80060b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80060ba:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80060bc:	42d3      	cmn	r3, r2
 80060be:	d00d      	beq.n	80060dc <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80060c0:	6821      	ldr	r1, [r4, #0]
 80060c2:	f8d1 30c8 	ldr.w	r3, [r1, #200]	@ 0xc8
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 80060cc:	a814      	add	r0, sp, #80	@ 0x50
 80060ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80060d2:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80060dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060de:	b16b      	cbz	r3, 80060fc <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80060e0:	6821      	ldr	r1, [r4, #0]
 80060e2:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 80060e6:	f023 0307 	bic.w	r3, r3, #7
 80060ea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80060ec:	a814      	add	r0, sp, #80	@ 0x50
 80060ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80060f2:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80060fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80060fe:	b173      	cbz	r3, 800611e <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006100:	6821      	ldr	r1, [r4, #0]
 8006102:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8006106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800610c:	a814      	add	r0, sp, #80	@ 0x50
 800610e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006112:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006116:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800611a:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800611e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006120:	b173      	cbz	r3, 8006140 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	f8d1 30bc 	ldr.w	r3, [r1, #188]	@ 0xbc
 8006128:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800612c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800612e:	a814      	add	r0, sp, #80	@ 0x50
 8006130:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006134:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800613c:	f8c1 30bc 	str.w	r3, [r1, #188]	@ 0xbc
  if (hfdcan->Instance == FDCAN1)
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	4b18      	ldr	r3, [pc, #96]	@ (80061a4 <HAL_FDCAN_Init+0x290>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d022      	beq.n	800618e <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800614e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006152:	2301      	movs	r3, #1
 8006154:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff fdad 	bl	8005cb8 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 800615e:	e707      	b.n	8005f70 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	6993      	ldr	r3, [r2, #24]
 8006164:	f043 0320 	orr.w	r3, r3, #32
 8006168:	6193      	str	r3, [r2, #24]
 800616a:	e788      	b.n	800607e <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800616c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800616e:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006170:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006172:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006178:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800617a:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800617c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006180:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006182:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006184:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800618a:	60cb      	str	r3, [r1, #12]
 800618c:	e78b      	b.n	80060a6 <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800618e:	6862      	ldr	r2, [r4, #4]
 8006190:	6893      	ldr	r3, [r2, #8]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	6093      	str	r3, [r2, #8]
 8006198:	e7d6      	b.n	8006148 <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 800619a:	2001      	movs	r0, #1
 800619c:	e6e8      	b.n	8005f70 <HAL_FDCAN_Init+0x5c>
 800619e:	bf00      	nop
 80061a0:	0801dd28 	.word	0x0801dd28
 80061a4:	4000a000 	.word	0x4000a000

080061a8 <HAL_FDCAN_ConfigGlobalFilter>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80061a8:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 80061ac:	fa5f fc8c 	uxtb.w	ip, ip
 80061b0:	f1bc 0f01 	cmp.w	ip, #1
 80061b4:	d007      	beq.n	80061c6 <HAL_FDCAN_ConfigGlobalFilter+0x1e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80061b6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80061ba:	f043 0304 	orr.w	r3, r3, #4
 80061be:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80061c2:	2001      	movs	r0, #1
}
 80061c4:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80061c6:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80061c8:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80061cc:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80061d0:	6801      	ldr	r1, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80061d2:	9a00      	ldr	r2, [sp, #0]
 80061d4:	431a      	orrs	r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80061d6:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80
    return HAL_OK;
 80061da:	2000      	movs	r0, #0
 80061dc:	4770      	bx	lr

080061de <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80061de:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d007      	beq.n	80061f8 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80061e8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80061ec:	f043 0304 	orr.w	r3, r3, #4
 80061f0:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 80061f4:	2001      	movs	r0, #1
}
 80061f6:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80061f8:	2302      	movs	r3, #2
 80061fa:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80061fe:	6802      	ldr	r2, [r0, #0]
 8006200:	6993      	ldr	r3, [r2, #24]
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006208:	2300      	movs	r3, #0
 800620a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_OK;
 800620e:	4618      	mov	r0, r3
 8006210:	4770      	bx	lr

08006212 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006212:	b538      	push	{r3, r4, r5, lr}
 8006214:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006216:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d12b      	bne.n	8006278 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006220:	6803      	ldr	r3, [r0, #0]
 8006222:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8006226:	f010 5f7c 	tst.w	r0, #1056964608	@ 0x3f000000
 800622a:	d00c      	beq.n	8006246 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800622c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006230:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8006234:	d00f      	beq.n	8006256 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006236:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800623a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800623e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8006242:	2001      	movs	r0, #1
 8006244:	e01f      	b.n	8006286 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006246:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800624a:	f043 0320 	orr.w	r3, r3, #32
 800624e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      return HAL_ERROR;
 8006252:	2001      	movs	r0, #1
 8006254:	e017      	b.n	8006286 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006256:	f8d3 50c4 	ldr.w	r5, [r3, #196]	@ 0xc4
 800625a:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800625e:	462b      	mov	r3, r5
 8006260:	4620      	mov	r0, r4
 8006262:	f7ff fe13 	bl	8005e8c <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	40ab      	lsls	r3, r5
 800626c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006270:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    return HAL_OK;
 8006274:	2000      	movs	r0, #0
 8006276:	e006      	b.n	8006286 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006278:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800627c:	f043 0308 	orr.w	r3, r3, #8
 8006280:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 8006284:	2001      	movs	r0, #1
}
 8006286:	bd38      	pop	{r3, r4, r5, pc}

08006288 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006288:	f890 c098 	ldrb.w	ip, [r0, #152]	@ 0x98
 800628c:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006290:	f1bc 0f02 	cmp.w	ip, #2
 8006294:	f040 80db 	bne.w	800644e <HAL_FDCAN_GetRxMessage+0x1c6>
{
 8006298:	b570      	push	{r4, r5, r6, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800629a:	2940      	cmp	r1, #64	@ 0x40
 800629c:	d00c      	beq.n	80062b8 <HAL_FDCAN_GetRxMessage+0x30>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800629e:	2941      	cmp	r1, #65	@ 0x41
 80062a0:	d03b      	beq.n	800631a <HAL_FDCAN_GetRxMessage+0x92>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80062a2:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80062a4:	428c      	cmp	r4, r1
 80062a6:	d869      	bhi.n	800637c <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80062a8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80062ac:	f043 0320 	orr.w	r3, r3, #32
 80062b0:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80062b4:	2001      	movs	r0, #1
 80062b6:	e0bd      	b.n	8006434 <HAL_FDCAN_GetRxMessage+0x1ac>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80062b8:	6804      	ldr	r4, [r0, #0]
 80062ba:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
 80062be:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 80062c2:	d00c      	beq.n	80062de <HAL_FDCAN_GetRxMessage+0x56>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80062c4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 80062c8:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 80062cc:	d10f      	bne.n	80062ee <HAL_FDCAN_GetRxMessage+0x66>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80062ce:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80062d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d6:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80062da:	2001      	movs	r0, #1
 80062dc:	e0aa      	b.n	8006434 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80062de:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80062e2:	f043 0320 	orr.w	r3, r3, #32
 80062e6:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 80062ea:	2001      	movs	r0, #1
 80062ec:	e0a2      	b.n	8006434 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80062ee:	f8d4 50a4 	ldr.w	r5, [r4, #164]	@ 0xa4
 80062f2:	f3c5 6600 	ubfx	r6, r5, #24, #1
 80062f6:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 80062fa:	d002      	beq.n	8006302 <HAL_FDCAN_GetRxMessage+0x7a>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80062fc:	f8d4 50a0 	ldr.w	r5, [r4, #160]	@ 0xa0
  uint32_t GetIndex = 0;
 8006300:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006302:	f8d4 40a4 	ldr.w	r4, [r4, #164]	@ 0xa4
 8006306:	f3c4 2405 	ubfx	r4, r4, #8, #6
 800630a:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800630c:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 800630e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006310:	fb06 f404 	mul.w	r4, r6, r4
 8006314:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 8006318:	e037      	b.n	800638a <HAL_FDCAN_GetRxMessage+0x102>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800631a:	6804      	ldr	r4, [r0, #0]
 800631c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8006320:	f415 0ffe 	tst.w	r5, #8323072	@ 0x7f0000
 8006324:	d00c      	beq.n	8006340 <HAL_FDCAN_GetRxMessage+0xb8>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006326:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 800632a:	f015 0f7f 	tst.w	r5, #127	@ 0x7f
 800632e:	d10f      	bne.n	8006350 <HAL_FDCAN_GetRxMessage+0xc8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006330:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006338:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 800633c:	2001      	movs	r0, #1
 800633e:	e079      	b.n	8006434 <HAL_FDCAN_GetRxMessage+0x1ac>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006340:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006344:	f043 0320 	orr.w	r3, r3, #32
 8006348:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
        return HAL_ERROR;
 800634c:	2001      	movs	r0, #1
 800634e:	e071      	b.n	8006434 <HAL_FDCAN_GetRxMessage+0x1ac>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006350:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 8006354:	f3c5 6600 	ubfx	r6, r5, #24, #1
 8006358:	f015 7f80 	tst.w	r5, #16777216	@ 0x1000000
 800635c:	d002      	beq.n	8006364 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800635e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
  uint32_t GetIndex = 0;
 8006362:	2600      	movs	r6, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006364:	f8d4 40b4 	ldr.w	r4, [r4, #180]	@ 0xb4
 8006368:	f3c4 2405 	ubfx	r4, r4, #8, #6
 800636c:	4426      	add	r6, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800636e:	6f85      	ldr	r5, [r0, #120]	@ 0x78
 8006370:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8006372:	fb06 f404 	mul.w	r4, r6, r4
 8006376:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
 800637a:	e006      	b.n	800638a <HAL_FDCAN_GetRxMessage+0x102>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800637c:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 800637e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8006380:	fb01 f404 	mul.w	r4, r1, r4
 8006384:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
  uint32_t GetIndex = 0;
 8006388:	2600      	movs	r6, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800638a:	f8de 4000 	ldr.w	r4, [lr]
 800638e:	f004 4480 	and.w	r4, r4, #1073741824	@ 0x40000000
 8006392:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006394:	bb64      	cbnz	r4, 80063f0 <HAL_FDCAN_GetRxMessage+0x168>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8006396:	f8de 4000 	ldr.w	r4, [lr]
 800639a:	f3c4 448a 	ubfx	r4, r4, #18, #11
 800639e:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80063a0:	f8de 4000 	ldr.w	r4, [lr]
 80063a4:	f004 5400 	and.w	r4, r4, #536870912	@ 0x20000000
 80063a8:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80063aa:	f8de 4000 	ldr.w	r4, [lr]
 80063ae:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 80063b2:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80063b4:	f8be 4004 	ldrh.w	r4, [lr, #4]
 80063b8:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80063ba:	f8de 4004 	ldr.w	r4, [lr, #4]
 80063be:	f404 2470 	and.w	r4, r4, #983040	@ 0xf0000
 80063c2:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80063c4:	f8de 4004 	ldr.w	r4, [lr, #4]
 80063c8:	f404 1480 	and.w	r4, r4, #1048576	@ 0x100000
 80063cc:	6154      	str	r4, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80063ce:	f8de 4004 	ldr.w	r4, [lr, #4]
 80063d2:	f404 1400 	and.w	r4, r4, #2097152	@ 0x200000
 80063d6:	6194      	str	r4, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80063d8:	f89e 4007 	ldrb.w	r4, [lr, #7]
 80063dc:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
 80063e0:	6214      	str	r4, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80063e2:	f8de 4004 	ldr.w	r4, [lr, #4]
 80063e6:	0fe4      	lsrs	r4, r4, #31
 80063e8:	6254      	str	r4, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80063ea:	f04f 0c00 	mov.w	ip, #0
 80063ee:	e00c      	b.n	800640a <HAL_FDCAN_GetRxMessage+0x182>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80063f0:	f8de 4000 	ldr.w	r4, [lr]
 80063f4:	f024 4460 	bic.w	r4, r4, #3758096384	@ 0xe0000000
 80063f8:	6014      	str	r4, [r2, #0]
 80063fa:	e7d1      	b.n	80063a0 <HAL_FDCAN_GetRxMessage+0x118>
      pRxData[ByteCounter] = pData[ByteCounter];
 80063fc:	eb0e 040c 	add.w	r4, lr, ip
 8006400:	7a24      	ldrb	r4, [r4, #8]
 8006402:	f803 400c 	strb.w	r4, [r3, ip]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8006406:	f10c 0c01 	add.w	ip, ip, #1
 800640a:	89d4      	ldrh	r4, [r2, #14]
 800640c:	4d14      	ldr	r5, [pc, #80]	@ (8006460 <HAL_FDCAN_GetRxMessage+0x1d8>)
 800640e:	5d2c      	ldrb	r4, [r5, r4]
 8006410:	4564      	cmp	r4, ip
 8006412:	d8f3      	bhi.n	80063fc <HAL_FDCAN_GetRxMessage+0x174>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006414:	2940      	cmp	r1, #64	@ 0x40
 8006416:	d009      	beq.n	800642c <HAL_FDCAN_GetRxMessage+0x1a4>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006418:	2941      	cmp	r1, #65	@ 0x41
 800641a:	d00c      	beq.n	8006436 <HAL_FDCAN_GetRxMessage+0x1ae>
      if (RxLocation < FDCAN_RX_BUFFER32)
 800641c:	291f      	cmp	r1, #31
 800641e:	d80e      	bhi.n	800643e <HAL_FDCAN_GetRxMessage+0x1b6>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8006420:	6802      	ldr	r2, [r0, #0]
 8006422:	2301      	movs	r3, #1
 8006424:	408b      	lsls	r3, r1
 8006426:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 800642a:	e002      	b.n	8006432 <HAL_FDCAN_GetRxMessage+0x1aa>
      hfdcan->Instance->RXF0A = GetIndex;
 800642c:	6803      	ldr	r3, [r0, #0]
 800642e:	f8c3 60a8 	str.w	r6, [r3, #168]	@ 0xa8
    return HAL_OK;
 8006432:	2000      	movs	r0, #0
}
 8006434:	bd70      	pop	{r4, r5, r6, pc}
      hfdcan->Instance->RXF1A = GetIndex;
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	f8c3 60b8 	str.w	r6, [r3, #184]	@ 0xb8
 800643c:	e7f9      	b.n	8006432 <HAL_FDCAN_GetRxMessage+0x1aa>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 800643e:	f001 011f 	and.w	r1, r1, #31
 8006442:	6802      	ldr	r2, [r0, #0]
 8006444:	2301      	movs	r3, #1
 8006446:	408b      	lsls	r3, r1
 8006448:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800644c:	e7f1      	b.n	8006432 <HAL_FDCAN_GetRxMessage+0x1aa>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800644e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006452:	f043 0308 	orr.w	r3, r3, #8
 8006456:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800645a:	2001      	movs	r0, #1
}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	0801df64 	.word	0x0801df64

08006464 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006464:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006468:	3b01      	subs	r3, #1
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d907      	bls.n	8006480 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006470:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
    return HAL_ERROR;
 800647c:	2001      	movs	r0, #1
}
 800647e:	4770      	bx	lr
{
 8006480:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006482:	6803      	ldr	r3, [r0, #0]
 8006484:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8006486:	420c      	tst	r4, r1
 8006488:	d124      	bne.n	80064d4 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800648a:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 800648c:	f044 0401 	orr.w	r4, r4, #1
 8006490:	65dc      	str	r4, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006492:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8006496:	d005      	beq.n	80064a4 <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006498:	6804      	ldr	r4, [r0, #0]
 800649a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80064a4:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 80064a8:	d005      	beq.n	80064b6 <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80064aa:	6804      	ldr	r4, [r0, #0]
 80064ac:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80064b6:	6800      	ldr	r0, [r0, #0]
 80064b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80064ba:	4a0c      	ldr	r2, [pc, #48]	@ (80064ec <HAL_FDCAN_ActivateNotification+0x88>)
 80064bc:	400a      	ands	r2, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	6543      	str	r3, [r0, #84]	@ 0x54
 80064c2:	4a0b      	ldr	r2, [pc, #44]	@ (80064f0 <HAL_FDCAN_ActivateNotification+0x8c>)
 80064c4:	6953      	ldr	r3, [r2, #20]
 80064c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ca:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80064cc:	2000      	movs	r0, #0
}
 80064ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d2:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80064d4:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 80064d6:	ea31 0404 	bics.w	r4, r1, r4
 80064da:	d002      	beq.n	80064e2 <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80064dc:	2403      	movs	r4, #3
 80064de:	65dc      	str	r4, [r3, #92]	@ 0x5c
 80064e0:	e7d7      	b.n	8006492 <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80064e2:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 80064e4:	f044 0402 	orr.w	r4, r4, #2
 80064e8:	65dc      	str	r4, [r3, #92]	@ 0x5c
 80064ea:	e7d2      	b.n	8006492 <HAL_FDCAN_ActivateNotification+0x2e>
 80064ec:	3fcfffff 	.word	0x3fcfffff
 80064f0:	4000a800 	.word	0x4000a800

080064f4 <HAL_FDCAN_ClockCalibrationCallback>:
}
 80064f4:	4770      	bx	lr

080064f6 <HAL_FDCAN_TxEventFifoCallback>:
}
 80064f6:	4770      	bx	lr

080064f8 <HAL_FDCAN_RxFifo1Callback>:
}
 80064f8:	4770      	bx	lr

080064fa <HAL_FDCAN_TxFifoEmptyCallback>:
}
 80064fa:	4770      	bx	lr

080064fc <HAL_FDCAN_TxBufferCompleteCallback>:
}
 80064fc:	4770      	bx	lr

080064fe <HAL_FDCAN_TxBufferAbortCallback>:
}
 80064fe:	4770      	bx	lr

08006500 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8006500:	4770      	bx	lr

08006502 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8006502:	4770      	bx	lr

08006504 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006504:	4770      	bx	lr

08006506 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8006506:	4770      	bx	lr

08006508 <HAL_FDCAN_ErrorStatusCallback>:
}
 8006508:	4770      	bx	lr

0800650a <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 800650a:	4770      	bx	lr

0800650c <HAL_FDCAN_TT_TimeMarkCallback>:
}
 800650c:	4770      	bx	lr

0800650e <HAL_FDCAN_TT_StopWatchCallback>:
}
 800650e:	4770      	bx	lr

08006510 <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 8006510:	4770      	bx	lr
	...

08006514 <HAL_FDCAN_IRQHandler>:
{
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	b083      	sub	sp, #12
 800651a:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800651c:	4bb0      	ldr	r3, [pc, #704]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 800651e:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	ea03 7382 	and.w	r3, r3, r2, lsl #30
 8006528:	9301      	str	r3, [sp, #4]
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800652a:	6803      	ldr	r3, [r0, #0]
 800652c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800652e:	f402 4a70 	and.w	sl, r2, #61440	@ 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006532:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006534:	ea0a 0a02 	and.w	sl, sl, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800653a:	f002 090f 	and.w	r9, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 800653e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006540:	ea09 0902 	and.w	r9, r9, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006546:	f002 08f0 	and.w	r8, r2, #240	@ 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 800654a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800654c:	ea08 0802 	and.w	r8, r8, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006550:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
 8006552:	f006 5671 	and.w	r6, r6, #1010827264	@ 0x3c400000
  Errors &= hfdcan->Instance->IE;
 8006556:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006558:	4016      	ands	r6, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800655a:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
 800655c:	f007 7760 	and.w	r7, r7, #58720256	@ 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006562:	4017      	ands	r7, r2
  itsourceIE = hfdcan->Instance->IE;
 8006564:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  itflagIR = hfdcan->Instance->IR;
 8006566:	f8d3 b050 	ldr.w	fp, [r3, #80]	@ 0x50
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800656a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800656e:	d002      	beq.n	8006576 <HAL_FDCAN_IRQHandler+0x62>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006570:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8006574:	d164      	bne.n	8006640 <HAL_FDCAN_IRQHandler+0x12c>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006576:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 800657a:	d002      	beq.n	8006582 <HAL_FDCAN_IRQHandler+0x6e>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800657c:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8006580:	d167      	bne.n	8006652 <HAL_FDCAN_IRQHandler+0x13e>
  if (ClkCalibrationITs != 0U)
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d174      	bne.n	8006672 <HAL_FDCAN_IRQHandler+0x15e>
  if (TxEventFifoITs != 0U)
 8006588:	f1ba 0f00 	cmp.w	sl, #0
 800658c:	d17c      	bne.n	8006688 <HAL_FDCAN_IRQHandler+0x174>
  if (RxFifo0ITs != 0U)
 800658e:	f1b9 0f00 	cmp.w	r9, #0
 8006592:	f040 8085 	bne.w	80066a0 <HAL_FDCAN_IRQHandler+0x18c>
  if (RxFifo1ITs != 0U)
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	f040 808d 	bne.w	80066b8 <HAL_FDCAN_IRQHandler+0x1a4>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800659e:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 80065a2:	d003      	beq.n	80065ac <HAL_FDCAN_IRQHandler+0x98>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80065a4:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 80065a8:	f040 8092 	bne.w	80066d0 <HAL_FDCAN_IRQHandler+0x1bc>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80065ac:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80065b0:	d003      	beq.n	80065ba <HAL_FDCAN_IRQHandler+0xa6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80065b2:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 80065b6:	f040 8096 	bne.w	80066e6 <HAL_FDCAN_IRQHandler+0x1d2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80065ba:	f415 2f00 	tst.w	r5, #524288	@ 0x80000
 80065be:	d003      	beq.n	80065c8 <HAL_FDCAN_IRQHandler+0xb4>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80065c0:	f41b 2f00 	tst.w	fp, #524288	@ 0x80000
 80065c4:	f040 809f 	bne.w	8006706 <HAL_FDCAN_IRQHandler+0x1f2>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80065c8:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80065cc:	d003      	beq.n	80065d6 <HAL_FDCAN_IRQHandler+0xc2>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80065ce:	f41b 3f80 	tst.w	fp, #65536	@ 0x10000
 80065d2:	f040 80a3 	bne.w	800671c <HAL_FDCAN_IRQHandler+0x208>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80065d6:	f415 2f80 	tst.w	r5, #262144	@ 0x40000
 80065da:	d003      	beq.n	80065e4 <HAL_FDCAN_IRQHandler+0xd0>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80065dc:	f41b 2f80 	tst.w	fp, #262144	@ 0x40000
 80065e0:	f040 80a7 	bne.w	8006732 <HAL_FDCAN_IRQHandler+0x21e>
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80065e4:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
 80065e8:	d00f      	beq.n	800660a <HAL_FDCAN_IRQHandler+0xf6>
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80065ea:	f41b 3f00 	tst.w	fp, #131072	@ 0x20000
 80065ee:	d00c      	beq.n	800660a <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80065f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80065f8:	4b79      	ldr	r3, [pc, #484]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80065fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006606:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (ErrorStatusITs != 0U)
 800660a:	2f00      	cmp	r7, #0
 800660c:	f040 809c 	bne.w	8006748 <HAL_FDCAN_IRQHandler+0x234>
  if (Errors != 0U)
 8006610:	b14e      	cbz	r6, 8006626 <HAL_FDCAN_IRQHandler+0x112>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	651e      	str	r6, [r3, #80]	@ 0x50
 8006616:	0fb2      	lsrs	r2, r6, #30
 8006618:	4b71      	ldr	r3, [pc, #452]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 800661a:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 800661c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006620:	4333      	orrs	r3, r6
 8006622:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
  if (hfdcan->Instance == FDCAN1)
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	4b6e      	ldr	r3, [pc, #440]	@ (80067e4 <HAL_FDCAN_IRQHandler+0x2d0>)
 800662a:	429a      	cmp	r2, r3
 800662c:	f000 8096 	beq.w	800675c <HAL_FDCAN_IRQHandler+0x248>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006630:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 80f7 	bne.w	8006828 <HAL_FDCAN_IRQHandler+0x314>
}
 800663a:	b003      	add	sp, #12
 800663c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006644:	651a      	str	r2, [r3, #80]	@ 0x50
 8006646:	4b66      	ldr	r3, [pc, #408]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800664c:	f7ff ff5b 	bl	8006506 <HAL_FDCAN_HighPriorityMessageCallback>
 8006650:	e791      	b.n	8006576 <HAL_FDCAN_IRQHandler+0x62>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006658:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800665c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006660:	6518      	str	r0, [r3, #80]	@ 0x50
 8006662:	4b5f      	ldr	r3, [pc, #380]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006664:	2000      	movs	r0, #0
 8006666:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006668:	4011      	ands	r1, r2
 800666a:	4620      	mov	r0, r4
 800666c:	f7ff ff47 	bl	80064fe <HAL_FDCAN_TxBufferAbortCallback>
 8006670:	e787      	b.n	8006582 <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	651a      	str	r2, [r3, #80]	@ 0x50
 8006678:	9901      	ldr	r1, [sp, #4]
 800667a:	0f8a      	lsrs	r2, r1, #30
 800667c:	4b58      	ldr	r3, [pc, #352]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 800667e:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ff37 	bl	80064f4 <HAL_FDCAN_ClockCalibrationCallback>
 8006686:	e77f      	b.n	8006588 <HAL_FDCAN_IRQHandler+0x74>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 800668e:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8006692:	4b53      	ldr	r3, [pc, #332]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006694:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006696:	4651      	mov	r1, sl
 8006698:	4620      	mov	r0, r4
 800669a:	f7ff ff2c 	bl	80064f6 <HAL_FDCAN_TxEventFifoCallback>
 800669e:	e776      	b.n	800658e <HAL_FDCAN_IRQHandler+0x7a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
 80066a6:	ea4f 7299 	mov.w	r2, r9, lsr #30
 80066aa:	4b4d      	ldr	r3, [pc, #308]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 80066ac:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80066ae:	4649      	mov	r1, r9
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fa fadf 	bl	8000c74 <HAL_FDCAN_RxFifo0Callback>
 80066b6:	e76e      	b.n	8006596 <HAL_FDCAN_IRQHandler+0x82>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 80066be:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80066c2:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 80066c4:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80066c6:	4641      	mov	r1, r8
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff15 	bl	80064f8 <HAL_FDCAN_RxFifo1Callback>
 80066ce:	e766      	b.n	800659e <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80066d8:	4b41      	ldr	r3, [pc, #260]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff ff0b 	bl	80064fa <HAL_FDCAN_TxFifoEmptyCallback>
 80066e4:	e762      	b.n	80065ac <HAL_FDCAN_IRQHandler+0x98>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80066ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80066f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80066f4:	6518      	str	r0, [r3, #80]	@ 0x50
 80066f6:	4b3a      	ldr	r3, [pc, #232]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 80066f8:	2000      	movs	r0, #0
 80066fa:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80066fc:	4011      	ands	r1, r2
 80066fe:	4620      	mov	r0, r4
 8006700:	f7ff fefc 	bl	80064fc <HAL_FDCAN_TxBufferCompleteCallback>
 8006704:	e759      	b.n	80065ba <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800670c:	651a      	str	r2, [r3, #80]	@ 0x50
 800670e:	4b34      	ldr	r3, [pc, #208]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006710:	2200      	movs	r2, #0
 8006712:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff fef3 	bl	8006500 <HAL_FDCAN_RxBufferNewMessageCallback>
 800671a:	e755      	b.n	80065c8 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006722:	651a      	str	r2, [r3, #80]	@ 0x50
 8006724:	4b2e      	ldr	r3, [pc, #184]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff fee9 	bl	8006502 <HAL_FDCAN_TimestampWraparoundCallback>
 8006730:	e751      	b.n	80065d6 <HAL_FDCAN_IRQHandler+0xc2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006738:	651a      	str	r2, [r3, #80]	@ 0x50
 800673a:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fedf 	bl	8006504 <HAL_FDCAN_TimeoutOccurredCallback>
 8006746:	e74d      	b.n	80065e4 <HAL_FDCAN_IRQHandler+0xd0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	651f      	str	r7, [r3, #80]	@ 0x50
 800674c:	0fba      	lsrs	r2, r7, #30
 800674e:	4b24      	ldr	r3, [pc, #144]	@ (80067e0 <HAL_FDCAN_IRQHandler+0x2cc>)
 8006750:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006752:	4639      	mov	r1, r7
 8006754:	4620      	mov	r0, r4
 8006756:	f7ff fed7 	bl	8006508 <HAL_FDCAN_ErrorStatusCallback>
 800675a:	e759      	b.n	8006610 <HAL_FDCAN_IRQHandler+0xfc>
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	f012 0f03 	tst.w	r2, #3
 8006764:	f43f af64 	beq.w	8006630 <HAL_FDCAN_IRQHandler+0x11c>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8006768:	6a19      	ldr	r1, [r3, #32]
 800676a:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800676e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8006770:	6a18      	ldr	r0, [r3, #32]
 8006772:	f000 0830 	and.w	r8, r0, #48	@ 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8006776:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006778:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800677c:	6a1f      	ldr	r7, [r3, #32]
 800677e:	f407 77c0 	and.w	r7, r7, #384	@ 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006782:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006784:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006786:	6a1e      	ldr	r6, [r3, #32]
 8006788:	f406 46fc 	and.w	r6, r6, #32256	@ 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800678c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800678e:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006790:	6a1d      	ldr	r5, [r3, #32]
 8006792:	f405 25f0 	and.w	r5, r5, #491520	@ 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006796:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006798:	4005      	ands	r5, r0
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800679a:	f8d3 9024 	ldr.w	r9, [r3, #36]	@ 0x24
      itflagTTIR = hfdcan->ttcan->TTIR;
 800679e:	f8d3 a020 	ldr.w	sl, [r3, #32]
      if (TTSchedSyncITs != 0U)
 80067a2:	4011      	ands	r1, r2
 80067a4:	d120      	bne.n	80067e8 <HAL_FDCAN_IRQHandler+0x2d4>
      if (TTTimeMarkITs != 0U)
 80067a6:	f1b8 0f00 	cmp.w	r8, #0
 80067aa:	d122      	bne.n	80067f2 <HAL_FDCAN_IRQHandler+0x2de>
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80067ac:	f019 0f40 	tst.w	r9, #64	@ 0x40
 80067b0:	d002      	beq.n	80067b8 <HAL_FDCAN_IRQHandler+0x2a4>
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80067b2:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80067b6:	d124      	bne.n	8006802 <HAL_FDCAN_IRQHandler+0x2ee>
      if (TTGlobTimeITs != 0U)
 80067b8:	bb7f      	cbnz	r7, 800681a <HAL_FDCAN_IRQHandler+0x306>
      if (TTDistErrors != 0U)
 80067ba:	b136      	cbz	r6, 80067ca <HAL_FDCAN_IRQHandler+0x2b6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 80067c0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80067c4:	4333      	orrs	r3, r6
 80067c6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
      if (TTFatalErrors != 0U)
 80067ca:	2d00      	cmp	r5, #0
 80067cc:	f43f af30 	beq.w	8006630 <HAL_FDCAN_IRQHandler+0x11c>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 80067d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80067d8:	432b      	orrs	r3, r5
 80067da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80067de:	e727      	b.n	8006630 <HAL_FDCAN_IRQHandler+0x11c>
 80067e0:	4000a800 	.word	0x4000a800
 80067e4:	4000a000 	.word	0x4000a000
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80067e8:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff fe8d 	bl	800650a <HAL_FDCAN_TT_ScheduleSyncCallback>
 80067f0:	e7d9      	b.n	80067a6 <HAL_FDCAN_IRQHandler+0x292>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80067f8:	4641      	mov	r1, r8
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fe86 	bl	800650c <HAL_FDCAN_TT_TimeMarkCallback>
 8006800:	e7d4      	b.n	80067ac <HAL_FDCAN_IRQHandler+0x298>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8006808:	2040      	movs	r0, #64	@ 0x40
 800680a:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800680c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006810:	0c09      	lsrs	r1, r1, #16
 8006812:	4620      	mov	r0, r4
 8006814:	f7ff fe7b 	bl	800650e <HAL_FDCAN_TT_StopWatchCallback>
 8006818:	e7ce      	b.n	80067b8 <HAL_FDCAN_IRQHandler+0x2a4>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800681e:	4639      	mov	r1, r7
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff fe75 	bl	8006510 <HAL_FDCAN_TT_GlobalTimeCallback>
 8006826:	e7c8      	b.n	80067ba <HAL_FDCAN_IRQHandler+0x2a6>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006828:	4620      	mov	r0, r4
 800682a:	f7fa f863 	bl	80008f4 <HAL_FDCAN_ErrorCallback>
}
 800682e:	e704      	b.n	800663a <HAL_FDCAN_IRQHandler+0x126>

08006830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006832:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8006834:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006836:	e06b      	b.n	8006910 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006838:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800683a:	005e      	lsls	r6, r3, #1
 800683c:	2403      	movs	r4, #3
 800683e:	40b4      	lsls	r4, r6
 8006840:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006844:	68cc      	ldr	r4, [r1, #12]
 8006846:	40b4      	lsls	r4, r6
 8006848:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800684a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800684c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800684e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006852:	684c      	ldr	r4, [r1, #4]
 8006854:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8006858:	409c      	lsls	r4, r3
 800685a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800685c:	6044      	str	r4, [r0, #4]
 800685e:	e069      	b.n	8006934 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006860:	08dd      	lsrs	r5, r3, #3
 8006862:	3508      	adds	r5, #8
 8006864:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006868:	f003 0c07 	and.w	ip, r3, #7
 800686c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006870:	f04f 0e0f 	mov.w	lr, #15
 8006874:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006878:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800687c:	690c      	ldr	r4, [r1, #16]
 800687e:	fa04 f40c 	lsl.w	r4, r4, ip
 8006882:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006886:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800688a:	e06b      	b.n	8006964 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800688c:	2409      	movs	r4, #9
 800688e:	e000      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006890:	2400      	movs	r4, #0
 8006892:	fa04 f40e 	lsl.w	r4, r4, lr
 8006896:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006898:	f10c 0c02 	add.w	ip, ip, #2
 800689c:	4d69      	ldr	r5, [pc, #420]	@ (8006a44 <HAL_GPIO_Init+0x214>)
 800689e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068a2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80068a6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80068a8:	43d4      	mvns	r4, r2
 80068aa:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ae:	684f      	ldr	r7, [r1, #4]
 80068b0:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80068b4:	d001      	beq.n	80068ba <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80068b6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80068ba:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80068be:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80068c0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80068c2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068c6:	684f      	ldr	r7, [r1, #4]
 80068c8:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 80068cc:	d001      	beq.n	80068d2 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 80068ce:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80068d2:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80068d6:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80068d8:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 80068dc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068e0:	684f      	ldr	r7, [r1, #4]
 80068e2:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 80068e6:	d001      	beq.n	80068ec <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80068e8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80068ec:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80068f0:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80068f4:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 80068f8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068fa:	684e      	ldr	r6, [r1, #4]
 80068fc:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8006900:	d001      	beq.n	8006906 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8006902:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006906:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800690a:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 800690e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006910:	680a      	ldr	r2, [r1, #0]
 8006912:	fa32 f403 	lsrs.w	r4, r2, r3
 8006916:	f000 8092 	beq.w	8006a3e <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800691a:	f04f 0c01 	mov.w	ip, #1
 800691e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8006922:	ea1c 0202 	ands.w	r2, ip, r2
 8006926:	d0f2      	beq.n	800690e <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006928:	684c      	ldr	r4, [r1, #4]
 800692a:	f004 0403 	and.w	r4, r4, #3
 800692e:	3c01      	subs	r4, #1
 8006930:	2c01      	cmp	r4, #1
 8006932:	d981      	bls.n	8006838 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006934:	684c      	ldr	r4, [r1, #4]
 8006936:	f004 0403 	and.w	r4, r4, #3
 800693a:	2c03      	cmp	r4, #3
 800693c:	d00c      	beq.n	8006958 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800693e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006940:	005d      	lsls	r5, r3, #1
 8006942:	f04f 0c03 	mov.w	ip, #3
 8006946:	fa0c fc05 	lsl.w	ip, ip, r5
 800694a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800694e:	688c      	ldr	r4, [r1, #8]
 8006950:	40ac      	lsls	r4, r5
 8006952:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8006956:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006958:	684c      	ldr	r4, [r1, #4]
 800695a:	f004 0403 	and.w	r4, r4, #3
 800695e:	2c02      	cmp	r4, #2
 8006960:	f43f af7e 	beq.w	8006860 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8006964:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006966:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800696a:	f04f 0c03 	mov.w	ip, #3
 800696e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006972:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006976:	684c      	ldr	r4, [r1, #4]
 8006978:	f004 0403 	and.w	r4, r4, #3
 800697c:	fa04 f40e 	lsl.w	r4, r4, lr
 8006980:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006984:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006986:	684c      	ldr	r4, [r1, #4]
 8006988:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800698c:	d0bf      	beq.n	800690e <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800698e:	4c2e      	ldr	r4, [pc, #184]	@ (8006a48 <HAL_GPIO_Init+0x218>)
 8006990:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 8006994:	f045 0502 	orr.w	r5, r5, #2
 8006998:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 800699c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80069a0:	f004 0402 	and.w	r4, r4, #2
 80069a4:	9401      	str	r4, [sp, #4]
 80069a6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80069a8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80069ac:	f10c 0502 	add.w	r5, ip, #2
 80069b0:	4c24      	ldr	r4, [pc, #144]	@ (8006a44 <HAL_GPIO_Init+0x214>)
 80069b2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069b6:	f003 0e03 	and.w	lr, r3, #3
 80069ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80069be:	240f      	movs	r4, #15
 80069c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80069c4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069c8:	4c20      	ldr	r4, [pc, #128]	@ (8006a4c <HAL_GPIO_Init+0x21c>)
 80069ca:	42a0      	cmp	r0, r4
 80069cc:	f43f af60 	beq.w	8006890 <HAL_GPIO_Init+0x60>
 80069d0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069d4:	42a0      	cmp	r0, r4
 80069d6:	d022      	beq.n	8006a1e <HAL_GPIO_Init+0x1ee>
 80069d8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069dc:	42a0      	cmp	r0, r4
 80069de:	d020      	beq.n	8006a22 <HAL_GPIO_Init+0x1f2>
 80069e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069e4:	42a0      	cmp	r0, r4
 80069e6:	d01e      	beq.n	8006a26 <HAL_GPIO_Init+0x1f6>
 80069e8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069ec:	42a0      	cmp	r0, r4
 80069ee:	d01c      	beq.n	8006a2a <HAL_GPIO_Init+0x1fa>
 80069f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d01a      	beq.n	8006a2e <HAL_GPIO_Init+0x1fe>
 80069f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80069fc:	42a0      	cmp	r0, r4
 80069fe:	d018      	beq.n	8006a32 <HAL_GPIO_Init+0x202>
 8006a00:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d016      	beq.n	8006a36 <HAL_GPIO_Init+0x206>
 8006a08:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d014      	beq.n	8006a3a <HAL_GPIO_Init+0x20a>
 8006a10:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	f43f af39 	beq.w	800688c <HAL_GPIO_Init+0x5c>
 8006a1a:	240a      	movs	r4, #10
 8006a1c:	e739      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a1e:	2401      	movs	r4, #1
 8006a20:	e737      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a22:	2402      	movs	r4, #2
 8006a24:	e735      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a26:	2403      	movs	r4, #3
 8006a28:	e733      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a2a:	2404      	movs	r4, #4
 8006a2c:	e731      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a2e:	2405      	movs	r4, #5
 8006a30:	e72f      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a32:	2406      	movs	r4, #6
 8006a34:	e72d      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a36:	2407      	movs	r4, #7
 8006a38:	e72b      	b.n	8006892 <HAL_GPIO_Init+0x62>
 8006a3a:	2408      	movs	r4, #8
 8006a3c:	e729      	b.n	8006892 <HAL_GPIO_Init+0x62>
  }
}
 8006a3e:	b003      	add	sp, #12
 8006a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a42:	bf00      	nop
 8006a44:	58000400 	.word	0x58000400
 8006a48:	58024400 	.word	0x58024400
 8006a4c:	58020000 	.word	0x58020000

08006a50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a50:	6903      	ldr	r3, [r0, #16]
 8006a52:	4219      	tst	r1, r3
 8006a54:	d001      	beq.n	8006a5a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006a56:	2001      	movs	r0, #1
 8006a58:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a5a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006a5c:	4770      	bx	lr

08006a5e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a5e:	b10a      	cbz	r2, 8006a64 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a60:	6181      	str	r1, [r0, #24]
 8006a62:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a64:	0409      	lsls	r1, r1, #16
 8006a66:	6181      	str	r1, [r0, #24]
  }
}
 8006a68:	4770      	bx	lr

08006a6a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a6a:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a74:	4203      	tst	r3, r0
 8006a76:	d100      	bne.n	8006a7a <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8006a78:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7e:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a82:	f7f9 ff55 	bl	8000930 <HAL_GPIO_EXTI_Callback>
}
 8006a86:	e7f7      	b.n	8006a78 <HAL_GPIO_EXTI_IRQHandler+0xe>

08006a88 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a88:	6803      	ldr	r3, [r0, #0]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	f012 0f02 	tst.w	r2, #2
 8006a90:	d001      	beq.n	8006a96 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a92:	2200      	movs	r2, #0
 8006a94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a96:	6803      	ldr	r3, [r0, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	f012 0f01 	tst.w	r2, #1
 8006a9e:	d103      	bne.n	8006aa8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	619a      	str	r2, [r3, #24]
  }
}
 8006aa8:	4770      	bx	lr

08006aaa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006aaa:	b410      	push	{r4}
 8006aac:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006ab2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ab6:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ab8:	4321      	orrs	r1, r4
 8006aba:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006abe:	6802      	ldr	r2, [r0, #0]
 8006ac0:	6853      	ldr	r3, [r2, #4]
 8006ac2:	0d64      	lsrs	r4, r4, #21
 8006ac4:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8006ac8:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8006acc:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8006ad0:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8006ad4:	f044 0403 	orr.w	r4, r4, #3
 8006ad8:	ea23 0304 	bic.w	r3, r3, r4
 8006adc:	430b      	orrs	r3, r1
 8006ade:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ae8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006aea:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <I2C_Enable_IRQ+0x6c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d015      	beq.n	8006b1c <I2C_Enable_IRQ+0x34>
 8006af0:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <I2C_Enable_IRQ+0x70>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d012      	beq.n	8006b1c <I2C_Enable_IRQ+0x34>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006af6:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006afa:	d128      	bne.n	8006b4e <I2C_Enable_IRQ+0x66>
  uint32_t tmpisr = 0U;
 8006afc:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006afe:	f011 0f01 	tst.w	r1, #1
 8006b02:	d001      	beq.n	8006b08 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b04:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b08:	f011 0f02 	tst.w	r1, #2
 8006b0c:	d001      	beq.n	8006b12 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b0e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b12:	2920      	cmp	r1, #32
 8006b14:	d10e      	bne.n	8006b34 <I2C_Enable_IRQ+0x4c>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b16:	f043 0320 	orr.w	r3, r3, #32
 8006b1a:	e00b      	b.n	8006b34 <I2C_Enable_IRQ+0x4c>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b1c:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006b20:	d103      	bne.n	8006b2a <I2C_Enable_IRQ+0x42>
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b22:	2910      	cmp	r1, #16
 8006b24:	d00b      	beq.n	8006b3e <I2C_Enable_IRQ+0x56>
  uint32_t tmpisr = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b2a:	23b8      	movs	r3, #184	@ 0xb8
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b2c:	2920      	cmp	r1, #32
 8006b2e:	d008      	beq.n	8006b42 <I2C_Enable_IRQ+0x5a>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b30:	2940      	cmp	r1, #64	@ 0x40
 8006b32:	d009      	beq.n	8006b48 <I2C_Enable_IRQ+0x60>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b34:	6801      	ldr	r1, [r0, #0]
 8006b36:	680a      	ldr	r2, [r1, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	600b      	str	r3, [r1, #0]
}
 8006b3c:	4770      	bx	lr
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b3e:	2390      	movs	r3, #144	@ 0x90
 8006b40:	e7f4      	b.n	8006b2c <I2C_Enable_IRQ+0x44>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006b42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006b46:	e7f3      	b.n	8006b30 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_TCI;
 8006b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4c:	e7f2      	b.n	8006b34 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b4e:	23b8      	movs	r3, #184	@ 0xb8
 8006b50:	e7d5      	b.n	8006afe <I2C_Enable_IRQ+0x16>
 8006b52:	bf00      	nop
 8006b54:	080083cd 	.word	0x080083cd
 8006b58:	080081b1 	.word	0x080081b1

08006b5c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b5c:	f011 0f01 	tst.w	r1, #1
 8006b60:	d009      	beq.n	8006b76 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006b66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b6a:	2b28      	cmp	r3, #40	@ 0x28
 8006b6c:	d001      	beq.n	8006b72 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b6e:	23f2      	movs	r3, #242	@ 0xf2
 8006b70:	e002      	b.n	8006b78 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006b72:	2342      	movs	r3, #66	@ 0x42
 8006b74:	e000      	b.n	8006b78 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8006b76:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b78:	f011 0f02 	tst.w	r1, #2
 8006b7c:	d009      	beq.n	8006b92 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006b7e:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b82:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006b86:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8006b8a:	2a28      	cmp	r2, #40	@ 0x28
 8006b8c:	d010      	beq.n	8006bb0 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b8e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b92:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8006b96:	d10d      	bne.n	8006bb4 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b98:	2910      	cmp	r1, #16
 8006b9a:	d00e      	beq.n	8006bba <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b9c:	2920      	cmp	r1, #32
 8006b9e:	d00f      	beq.n	8006bc0 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006ba0:	2940      	cmp	r1, #64	@ 0x40
 8006ba2:	d010      	beq.n	8006bc6 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ba4:	6801      	ldr	r1, [r0, #0]
 8006ba6:	680a      	ldr	r2, [r1, #0]
 8006ba8:	ea22 0303 	bic.w	r3, r2, r3
 8006bac:	600b      	str	r3, [r1, #0]
}
 8006bae:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bb0:	4663      	mov	r3, ip
 8006bb2:	e7ee      	b.n	8006b92 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bb4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006bb8:	e7ee      	b.n	8006b98 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bba:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006bbe:	e7ed      	b.n	8006b9c <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8006bc0:	f043 0320 	orr.w	r3, r3, #32
 8006bc4:	e7ec      	b.n	8006ba0 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bca:	e7eb      	b.n	8006ba4 <I2C_Disable_IRQ+0x48>

08006bcc <I2C_IsErrorOccurred>:
{
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8006bd2:	6803      	ldr	r3, [r0, #0]
 8006bd4:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bd6:	f017 0710 	ands.w	r7, r7, #16
 8006bda:	d04e      	beq.n	8006c7a <I2C_IsErrorOccurred+0xae>
 8006bdc:	460e      	mov	r6, r1
 8006bde:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be0:	2210      	movs	r2, #16
 8006be2:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006be4:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	6998      	ldr	r0, [r3, #24]
 8006bea:	f010 0f20 	tst.w	r0, #32
 8006bee:	d13d      	bne.n	8006c6c <I2C_IsErrorOccurred+0xa0>
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	d13b      	bne.n	8006c6c <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8006bf4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006bf8:	d0f5      	beq.n	8006be6 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bfa:	f7fc fc67 	bl	80034cc <HAL_GetTick>
 8006bfe:	eba0 0008 	sub.w	r0, r0, r8
 8006c02:	42b0      	cmp	r0, r6
 8006c04:	d801      	bhi.n	8006c0a <I2C_IsErrorOccurred+0x3e>
 8006c06:	2e00      	cmp	r6, #0
 8006c08:	d1ed      	bne.n	8006be6 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c0a:	6821      	ldr	r1, [r4, #0]
 8006c0c:	684a      	ldr	r2, [r1, #4]
 8006c0e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8006c12:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8006c16:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c18:	6988      	ldr	r0, [r1, #24]
 8006c1a:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8006c1e:	d004      	beq.n	8006c2a <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8006c20:	3b20      	subs	r3, #32
 8006c22:	bf18      	it	ne
 8006c24:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8006c26:	b902      	cbnz	r2, 8006c2a <I2C_IsErrorOccurred+0x5e>
 8006c28:	b9c3      	cbnz	r3, 8006c5c <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f013 0f20 	tst.w	r3, #32
 8006c32:	d1d8      	bne.n	8006be6 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c34:	f7fc fc4a 	bl	80034cc <HAL_GetTick>
 8006c38:	eba0 0008 	sub.w	r0, r0, r8
 8006c3c:	2819      	cmp	r0, #25
 8006c3e:	d9f4      	bls.n	8006c2a <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006c42:	f043 0320 	orr.w	r3, r3, #32
 8006c46:	6463      	str	r3, [r4, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
              __HAL_UNLOCK(hi2c);
 8006c54:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
              status = HAL_ERROR;
 8006c58:	2501      	movs	r5, #1
 8006c5a:	e7e6      	b.n	8006c2a <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c5c:	684b      	ldr	r3, [r1, #4]
 8006c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c62:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8006c64:	f7fc fc32 	bl	80034cc <HAL_GetTick>
 8006c68:	4680      	mov	r8, r0
 8006c6a:	e7de      	b.n	8006c2a <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	d140      	bne.n	8006cf2 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c70:	2220      	movs	r2, #32
 8006c72:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8006c74:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8006c76:	2501      	movs	r5, #1
 8006c78:	e000      	b.n	8006c7c <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c80:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006c84:	d005      	beq.n	8006c92 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8006c86:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c8e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006c90:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c92:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006c96:	d006      	beq.n	8006ca6 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8006c98:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ca2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8006ca4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ca6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006caa:	d024      	beq.n	8006cf6 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8006cac:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cb6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8006cb8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fee4 	bl	8006a88 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8006cc0:	6822      	ldr	r2, [r4, #0]
 8006cc2:	6853      	ldr	r3, [r2, #4]
 8006cc4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8006cc8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8006ccc:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8006cd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006cd8:	433b      	orrs	r3, r7
 8006cda:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8006ce8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8006cec:	4628      	mov	r0, r5
 8006cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 8006cf2:	2704      	movs	r7, #4
 8006cf4:	e7c2      	b.n	8006c7c <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 8006cf6:	2d00      	cmp	r5, #0
 8006cf8:	d0f8      	beq.n	8006cec <I2C_IsErrorOccurred+0x120>
 8006cfa:	e7de      	b.n	8006cba <I2C_IsErrorOccurred+0xee>

08006cfc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	460d      	mov	r5, r1
 8006d02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f013 0f02 	tst.w	r3, #2
 8006d0c:	d11d      	bne.n	8006d4a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0e:	4632      	mov	r2, r6
 8006d10:	4629      	mov	r1, r5
 8006d12:	4620      	mov	r0, r4
 8006d14:	f7ff ff5a 	bl	8006bcc <I2C_IsErrorOccurred>
 8006d18:	b9c8      	cbnz	r0, 8006d4e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8006d1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006d1e:	d0f1      	beq.n	8006d04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d20:	f7fc fbd4 	bl	80034cc <HAL_GetTick>
 8006d24:	1b80      	subs	r0, r0, r6
 8006d26:	42a8      	cmp	r0, r5
 8006d28:	d801      	bhi.n	8006d2e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8006d2a:	2d00      	cmp	r5, #0
 8006d2c:	d1ea      	bne.n	8006d04 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d2e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006d30:	f043 0320 	orr.w	r3, r3, #32
 8006d34:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	2320      	movs	r3, #32
 8006d38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006d42:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8006d46:	2001      	movs	r0, #1
 8006d48:	e000      	b.n	8006d4c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8006d4a:	2000      	movs	r0, #0
}
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006d4e:	2001      	movs	r0, #1
 8006d50:	e7fc      	b.n	8006d4c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08006d52 <I2C_WaitOnFlagUntilTimeout>:
{
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	4606      	mov	r6, r0
 8006d58:	4688      	mov	r8, r1
 8006d5a:	4617      	mov	r7, r2
 8006d5c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d5e:	6834      	ldr	r4, [r6, #0]
 8006d60:	69a4      	ldr	r4, [r4, #24]
 8006d62:	ea38 0404 	bics.w	r4, r8, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	2401      	moveq	r4, #1
 8006d6a:	2400      	movne	r4, #0
 8006d6c:	42bc      	cmp	r4, r7
 8006d6e:	d118      	bne.n	8006da2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8006d70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006d74:	d0f3      	beq.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fc fba9 	bl	80034cc <HAL_GetTick>
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	1ac0      	subs	r0, r0, r3
 8006d7e:	42a8      	cmp	r0, r5
 8006d80:	d801      	bhi.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x34>
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	d1eb      	bne.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d86:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8006d88:	f043 0320 	orr.w	r3, r3, #32
 8006d8c:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d8e:	2320      	movs	r3, #32
 8006d90:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8006d9a:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e000      	b.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8006da2:	2000      	movs	r0, #0
}
 8006da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006da8 <I2C_RequestMemoryWrite>:
{
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	4604      	mov	r4, r0
 8006db0:	4690      	mov	r8, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	9e08      	ldr	r6, [sp, #32]
 8006db6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006db8:	4b19      	ldr	r3, [pc, #100]	@ (8006e20 <I2C_RequestMemoryWrite+0x78>)
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dc0:	b2ea      	uxtb	r2, r5
 8006dc2:	f7ff fe72 	bl	8006aaa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc6:	463a      	mov	r2, r7
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff ff96 	bl	8006cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd0:	b9f8      	cbnz	r0, 8006e12 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dd2:	2d01      	cmp	r5, #1
 8006dd4:	d10e      	bne.n	8006df4 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	fa5f f288 	uxtb.w	r2, r8
 8006ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dde:	9700      	str	r7, [sp, #0]
 8006de0:	4633      	mov	r3, r6
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	@ 0x80
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff ffb3 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 8006dec:	b9a8      	cbnz	r0, 8006e1a <I2C_RequestMemoryWrite+0x72>
}
 8006dee:	b002      	add	sp, #8
 8006df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dfc:	463a      	mov	r2, r7
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7ff ff7b 	bl	8006cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e06:	b930      	cbnz	r0, 8006e16 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	fa5f f288 	uxtb.w	r2, r8
 8006e0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e10:	e7e5      	b.n	8006dde <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8006e12:	2001      	movs	r0, #1
 8006e14:	e7eb      	b.n	8006dee <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7e9      	b.n	8006dee <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e7e7      	b.n	8006dee <I2C_RequestMemoryWrite+0x46>
 8006e1e:	bf00      	nop
 8006e20:	80002000 	.word	0x80002000

08006e24 <I2C_RequestMemoryRead>:
{
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4690      	mov	r8, r2
 8006e2e:	461d      	mov	r5, r3
 8006e30:	9e08      	ldr	r6, [sp, #32]
 8006e32:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e34:	4b18      	ldr	r3, [pc, #96]	@ (8006e98 <I2C_RequestMemoryRead+0x74>)
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b2ea      	uxtb	r2, r5
 8006e3c:	f7ff fe35 	bl	8006aaa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e40:	463a      	mov	r2, r7
 8006e42:	4631      	mov	r1, r6
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7ff ff59 	bl	8006cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e4a:	b9f8      	cbnz	r0, 8006e8c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4c:	2d01      	cmp	r5, #1
 8006e4e:	d10e      	bne.n	8006e6e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	fa5f f288 	uxtb.w	r2, r8
 8006e56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e58:	9700      	str	r7, [sp, #0]
 8006e5a:	4633      	mov	r3, r6
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2140      	movs	r1, #64	@ 0x40
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff ff76 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 8006e66:	b9a8      	cbnz	r0, 8006e94 <I2C_RequestMemoryRead+0x70>
}
 8006e68:	b002      	add	sp, #8
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8006e74:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e76:	463a      	mov	r2, r7
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7ff ff3e 	bl	8006cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8006e80:	b930      	cbnz	r0, 8006e90 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	fa5f f288 	uxtb.w	r2, r8
 8006e88:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e8a:	e7e5      	b.n	8006e58 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	e7eb      	b.n	8006e68 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8006e90:	2001      	movs	r0, #1
 8006e92:	e7e9      	b.n	8006e68 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8006e94:	2001      	movs	r0, #1
 8006e96:	e7e7      	b.n	8006e68 <I2C_RequestMemoryRead+0x44>
 8006e98:	80002000 	.word	0x80002000

08006e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f013 0f20 	tst.w	r3, #32
 8006eac:	d11a      	bne.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eae:	4632      	mov	r2, r6
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f7ff fe8a 	bl	8006bcc <I2C_IsErrorOccurred>
 8006eb8:	b9b0      	cbnz	r0, 8006ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fc fb07 	bl	80034cc <HAL_GetTick>
 8006ebe:	1b80      	subs	r0, r0, r6
 8006ec0:	42a0      	cmp	r0, r4
 8006ec2:	d801      	bhi.n	8006ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8006ec4:	2c00      	cmp	r4, #0
 8006ec6:	d1ed      	bne.n	8006ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ed0:	2320      	movs	r3, #32
 8006ed2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006edc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8006ee0:	2001      	movs	r0, #1
}
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e7fc      	b.n	8006ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8006ee8:	2001      	movs	r0, #1
 8006eea:	e7fa      	b.n	8006ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08006eec <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d057      	beq.n	8006fa0 <HAL_I2C_Init+0xb4>
{
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ef4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d041      	beq.n	8006f80 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006efc:	2324      	movs	r3, #36	@ 0x24
 8006efe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8006f02:	6822      	ldr	r2, [r4, #0]
 8006f04:	6813      	ldr	r3, [r2, #0]
 8006f06:	f023 0301 	bic.w	r3, r3, #1
 8006f0a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8006f14:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	6893      	ldr	r3, [r2, #8]
 8006f1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f1e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f20:	68e3      	ldr	r3, [r4, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d031      	beq.n	8006f8a <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	6822      	ldr	r2, [r4, #0]
 8006f2a:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8006f2e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d02f      	beq.n	8006f96 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	6851      	ldr	r1, [r2, #4]
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_I2C_Init+0xb8>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f40:	6822      	ldr	r2, [r4, #0]
 8006f42:	68d3      	ldr	r3, [r2, #12]
 8006f44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f48:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	6962      	ldr	r2, [r4, #20]
 8006f4e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f50:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f58:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f5a:	69e3      	ldr	r3, [r4, #28]
 8006f5c:	6a21      	ldr	r1, [r4, #32]
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f6e:	2000      	movs	r0, #0
 8006f70:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	2320      	movs	r3, #32
 8006f74:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f78:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8006f7e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006f80:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8006f84:	f7fb fb70 	bl	8002668 <HAL_I2C_MspInit>
 8006f88:	e7b8      	b.n	8006efc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f8a:	68a3      	ldr	r3, [r4, #8]
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f92:	6093      	str	r3, [r2, #8]
 8006f94:	e7cc      	b.n	8006f30 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	e7ca      	b.n	8006f36 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8006fa0:	2001      	movs	r0, #1
}
 8006fa2:	4770      	bx	lr
 8006fa4:	02008000 	.word	0x02008000

08006fa8 <HAL_I2C_Master_Transmit_DMA>:
{
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fae:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8006fb2:	b2c0      	uxtb	r0, r0
 8006fb4:	2820      	cmp	r0, #32
 8006fb6:	f040 808d 	bne.w	80070d4 <HAL_I2C_Master_Transmit_DMA+0x12c>
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4611      	mov	r1, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	6992      	ldr	r2, [r2, #24]
 8006fc2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8006fc6:	f040 8088 	bne.w	80070da <HAL_I2C_Master_Transmit_DMA+0x132>
    __HAL_LOCK(hi2c);
 8006fca:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8006fce:	2a01      	cmp	r2, #1
 8006fd0:	f000 8085 	beq.w	80070de <HAL_I2C_Master_Transmit_DMA+0x136>
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006fda:	2221      	movs	r2, #33	@ 0x21
 8006fdc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8006fea:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fec:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fee:	4b3d      	ldr	r3, [pc, #244]	@ (80070e4 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 8006ff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80070e8 <HAL_I2C_Master_Transmit_DMA+0x140>)
 8006ff4:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ff6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	2bff      	cmp	r3, #255	@ 0xff
 8006ffc:	d927      	bls.n	800704e <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ffe:	23ff      	movs	r3, #255	@ 0xff
 8007000:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007002:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 8007006:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8007008:	2a00      	cmp	r2, #0
 800700a:	d04f      	beq.n	80070ac <HAL_I2C_Master_Transmit_DMA+0x104>
      if (hi2c->hdmatx != NULL)
 800700c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800700e:	b31b      	cbz	r3, 8007058 <HAL_I2C_Master_Transmit_DMA+0xb0>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007010:	4a36      	ldr	r2, [pc, #216]	@ (80070ec <HAL_I2C_Master_Transmit_DMA+0x144>)
 8007012:	63da      	str	r2, [r3, #60]	@ 0x3c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007014:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007016:	4a36      	ldr	r2, [pc, #216]	@ (80070f0 <HAL_I2C_Master_Transmit_DMA+0x148>)
 8007018:	64da      	str	r2, [r3, #76]	@ 0x4c
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800701a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800701c:	2300      	movs	r3, #0
 800701e:	6413      	str	r3, [r2, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007020:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007022:	6513      	str	r3, [r2, #80]	@ 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007028:	3228      	adds	r2, #40	@ 0x28
 800702a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800702c:	f7fd fe7e 	bl	8004d2c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8007030:	b300      	cbz	r0, 8007074 <HAL_I2C_Master_Transmit_DMA+0xcc>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007032:	2320      	movs	r3, #32
 8007034:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007038:	2200      	movs	r2, #0
 800703a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800703e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007040:	f043 0310 	orr.w	r3, r3, #16
 8007044:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007046:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800704a:	2001      	movs	r0, #1
 800704c:	e043      	b.n	80070d6 <HAL_I2C_Master_Transmit_DMA+0x12e>
      hi2c->XferSize = hi2c->XferCount;
 800704e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007050:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007052:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 8007056:	e7d6      	b.n	8007006 <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007058:	2320      	movs	r3, #32
 800705a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800705e:	2200      	movs	r2, #0
 8007060:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007064:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800706c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8007070:	2001      	movs	r0, #1
 8007072:	e030      	b.n	80070d6 <HAL_I2C_Master_Transmit_DMA+0x12e>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8007074:	4b1f      	ldr	r3, [pc, #124]	@ (80070f4 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4633      	mov	r3, r6
 800707a:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800707e:	4629      	mov	r1, r5
 8007080:	4620      	mov	r0, r4
 8007082:	f7ff fd12 	bl	8006aaa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8007086:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	b29b      	uxth	r3, r3
 8007090:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 8007092:	2300      	movs	r3, #0
 8007094:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007098:	2110      	movs	r1, #16
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff fd24 	bl	8006ae8 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	e011      	b.n	80070d0 <HAL_I2C_Master_Transmit_DMA+0x128>
      hi2c->XferISR = I2C_Master_ISR_IT;
 80070ac:	4b12      	ldr	r3, [pc, #72]	@ (80070f8 <HAL_I2C_Master_Transmit_DMA+0x150>)
 80070ae:	6363      	str	r3, [r4, #52]	@ 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <HAL_I2C_Master_Transmit_DMA+0x14c>)
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	4629      	mov	r1, r5
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff fcf4 	bl	8006aaa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 80070c2:	2300      	movs	r3, #0
 80070c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070c8:	2101      	movs	r1, #1
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff fd0c 	bl	8006ae8 <I2C_Enable_IRQ>
    return HAL_OK;
 80070d0:	2000      	movs	r0, #0
 80070d2:	e000      	b.n	80070d6 <HAL_I2C_Master_Transmit_DMA+0x12e>
    return HAL_BUSY;
 80070d4:	2002      	movs	r0, #2
}
 80070d6:	b002      	add	sp, #8
 80070d8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_BUSY;
 80070da:	2002      	movs	r0, #2
 80070dc:	e7fb      	b.n	80070d6 <HAL_I2C_Master_Transmit_DMA+0x12e>
    __HAL_LOCK(hi2c);
 80070de:	2002      	movs	r0, #2
 80070e0:	e7f9      	b.n	80070d6 <HAL_I2C_Master_Transmit_DMA+0x12e>
 80070e2:	bf00      	nop
 80070e4:	ffff0000 	.word	0xffff0000
 80070e8:	080083cd 	.word	0x080083cd
 80070ec:	08008649 	.word	0x08008649
 80070f0:	08008511 	.word	0x08008511
 80070f4:	80002000 	.word	0x80002000
 80070f8:	0800802f 	.word	0x0800802f

080070fc <HAL_I2C_Master_Receive_DMA>:
{
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007102:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007106:	b2c0      	uxtb	r0, r0
 8007108:	2820      	cmp	r0, #32
 800710a:	f040 808c 	bne.w	8007226 <HAL_I2C_Master_Receive_DMA+0x12a>
 800710e:	460d      	mov	r5, r1
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007110:	6821      	ldr	r1, [r4, #0]
 8007112:	6989      	ldr	r1, [r1, #24]
 8007114:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8007118:	f040 8088 	bne.w	800722c <HAL_I2C_Master_Receive_DMA+0x130>
    __HAL_LOCK(hi2c);
 800711c:	f894 1040 	ldrb.w	r1, [r4, #64]	@ 0x40
 8007120:	2901      	cmp	r1, #1
 8007122:	f000 8085 	beq.w	8007230 <HAL_I2C_Master_Receive_DMA+0x134>
 8007126:	2101      	movs	r1, #1
 8007128:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800712c:	2122      	movs	r1, #34	@ 0x22
 800712e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007132:	2110      	movs	r1, #16
 8007134:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007138:	2100      	movs	r1, #0
 800713a:	6461      	str	r1, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 800713c:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800713e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007140:	4b3c      	ldr	r3, [pc, #240]	@ (8007234 <HAL_I2C_Master_Receive_DMA+0x138>)
 8007142:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007144:	4b3c      	ldr	r3, [pc, #240]	@ (8007238 <HAL_I2C_Master_Receive_DMA+0x13c>)
 8007146:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007148:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800714a:	b29b      	uxth	r3, r3
 800714c:	2bff      	cmp	r3, #255	@ 0xff
 800714e:	d927      	bls.n	80071a0 <HAL_I2C_Master_Receive_DMA+0xa4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007150:	23ff      	movs	r3, #255	@ 0xff
 8007152:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007154:	f04f 7680 	mov.w	r6, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 8007158:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800715a:	2900      	cmp	r1, #0
 800715c:	d04f      	beq.n	80071fe <HAL_I2C_Master_Receive_DMA+0x102>
      if (hi2c->hdmarx != NULL)
 800715e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007160:	b31b      	cbz	r3, 80071aa <HAL_I2C_Master_Receive_DMA+0xae>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007162:	4936      	ldr	r1, [pc, #216]	@ (800723c <HAL_I2C_Master_Receive_DMA+0x140>)
 8007164:	63d9      	str	r1, [r3, #60]	@ 0x3c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007166:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007168:	4935      	ldr	r1, [pc, #212]	@ (8007240 <HAL_I2C_Master_Receive_DMA+0x144>)
 800716a:	64d9      	str	r1, [r3, #76]	@ 0x4c
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800716c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800716e:	2300      	movs	r3, #0
 8007170:	640b      	str	r3, [r1, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007172:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007174:	650b      	str	r3, [r1, #80]	@ 0x50
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007176:	6821      	ldr	r1, [r4, #0]
 8007178:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800717a:	3124      	adds	r1, #36	@ 0x24
 800717c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800717e:	f7fd fdd5 	bl	8004d2c <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8007182:	b300      	cbz	r0, 80071c6 <HAL_I2C_Master_Receive_DMA+0xca>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007184:	2320      	movs	r3, #32
 8007186:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800718a:	2200      	movs	r2, #0
 800718c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007190:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007192:	f043 0310 	orr.w	r3, r3, #16
 8007196:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007198:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800719c:	2001      	movs	r0, #1
 800719e:	e043      	b.n	8007228 <HAL_I2C_Master_Receive_DMA+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 80071a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80071a2:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80071a4:	f04f 7600 	mov.w	r6, #33554432	@ 0x2000000
 80071a8:	e7d6      	b.n	8007158 <HAL_I2C_Master_Receive_DMA+0x5c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80071aa:	2320      	movs	r3, #32
 80071ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80071b0:	2200      	movs	r2, #0
 80071b2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80071b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80071b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071bc:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80071be:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80071c2:	2001      	movs	r0, #1
 80071c4:	e030      	b.n	8007228 <HAL_I2C_Master_Receive_DMA+0x12c>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80071c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007244 <HAL_I2C_Master_Receive_DMA+0x148>)
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	4633      	mov	r3, r6
 80071cc:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80071d0:	4629      	mov	r1, r5
 80071d2:	4620      	mov	r0, r4
 80071d4:	f7ff fc69 	bl	8006aaa <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 80071d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 80071e4:	2300      	movs	r3, #0
 80071e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80071ea:	2110      	movs	r1, #16
 80071ec:	4620      	mov	r0, r4
 80071ee:	f7ff fc7b 	bl	8006ae8 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	6813      	ldr	r3, [r2, #0]
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e011      	b.n	8007222 <HAL_I2C_Master_Receive_DMA+0x126>
      hi2c->XferISR = I2C_Master_ISR_IT;
 80071fe:	4b12      	ldr	r3, [pc, #72]	@ (8007248 <HAL_I2C_Master_Receive_DMA+0x14c>)
 8007200:	6363      	str	r3, [r4, #52]	@ 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007202:	4b10      	ldr	r3, [pc, #64]	@ (8007244 <HAL_I2C_Master_Receive_DMA+0x148>)
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800720a:	b2ca      	uxtb	r2, r1
 800720c:	4629      	mov	r1, r5
 800720e:	4620      	mov	r0, r4
 8007210:	f7ff fc4b 	bl	8006aaa <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8007214:	2300      	movs	r3, #0
 8007216:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800721a:	2101      	movs	r1, #1
 800721c:	4620      	mov	r0, r4
 800721e:	f7ff fc63 	bl	8006ae8 <I2C_Enable_IRQ>
    return HAL_OK;
 8007222:	2000      	movs	r0, #0
 8007224:	e000      	b.n	8007228 <HAL_I2C_Master_Receive_DMA+0x12c>
    return HAL_BUSY;
 8007226:	2002      	movs	r0, #2
}
 8007228:	b002      	add	sp, #8
 800722a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_BUSY;
 800722c:	2002      	movs	r0, #2
 800722e:	e7fb      	b.n	8007228 <HAL_I2C_Master_Receive_DMA+0x12c>
    __HAL_LOCK(hi2c);
 8007230:	2002      	movs	r0, #2
 8007232:	e7f9      	b.n	8007228 <HAL_I2C_Master_Receive_DMA+0x12c>
 8007234:	ffff0000 	.word	0xffff0000
 8007238:	080083cd 	.word	0x080083cd
 800723c:	080086a3 	.word	0x080086a3
 8007240:	08008511 	.word	0x08008511
 8007244:	80002400 	.word	0x80002400
 8007248:	0800802f 	.word	0x0800802f

0800724c <HAL_I2C_Mem_Write>:
{
 800724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	b083      	sub	sp, #12
 8007252:	460d      	mov	r5, r1
 8007254:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007258:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800725a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800725e:	b2c9      	uxtb	r1, r1
 8007260:	2920      	cmp	r1, #32
 8007262:	f040 80bc 	bne.w	80073de <HAL_I2C_Mem_Write+0x192>
 8007266:	4604      	mov	r4, r0
 8007268:	4690      	mov	r8, r2
 800726a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800726c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800726e:	f1ba 0f00 	cmp.w	sl, #0
 8007272:	bf18      	it	ne
 8007274:	2b00      	cmpne	r3, #0
 8007276:	d016      	beq.n	80072a6 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8007278:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800727c:	2b01      	cmp	r3, #1
 800727e:	f000 80b2 	beq.w	80073e6 <HAL_I2C_Mem_Write+0x19a>
 8007282:	f04f 0b01 	mov.w	fp, #1
 8007286:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800728a:	f7fc f91f 	bl	80034cc <HAL_GetTick>
 800728e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007290:	9000      	str	r0, [sp, #0]
 8007292:	2319      	movs	r3, #25
 8007294:	465a      	mov	r2, fp
 8007296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff fd59 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 80072a0:	b130      	cbz	r0, 80072b0 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80072a2:	2001      	movs	r0, #1
 80072a4:	e09c      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072aa:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 80072ac:	2001      	movs	r0, #1
 80072ae:	e097      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072b0:	2321      	movs	r3, #33	@ 0x21
 80072b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072b6:	2340      	movs	r3, #64	@ 0x40
 80072b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072bc:	2300      	movs	r3, #0
 80072be:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80072c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072c2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072c4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072c8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072ca:	9601      	str	r6, [sp, #4]
 80072cc:	9700      	str	r7, [sp, #0]
 80072ce:	464b      	mov	r3, r9
 80072d0:	4642      	mov	r2, r8
 80072d2:	4629      	mov	r1, r5
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff fd67 	bl	8006da8 <I2C_RequestMemoryWrite>
 80072da:	b970      	cbnz	r0, 80072fa <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2bff      	cmp	r3, #255	@ 0xff
 80072e2:	d90f      	bls.n	8007304 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072e4:	22ff      	movs	r2, #255	@ 0xff
 80072e6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072e8:	2300      	movs	r3, #0
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072f0:	4629      	mov	r1, r5
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff fbd9 	bl	8006aaa <I2C_TransferConfig>
 80072f8:	e021      	b.n	800733e <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 80072fa:	2300      	movs	r3, #0
 80072fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007300:	4658      	mov	r0, fp
 8007302:	e06d      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8007304:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007306:	b292      	uxth	r2, r2
 8007308:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800730a:	2300      	movs	r3, #0
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	4629      	mov	r1, r5
 8007316:	4620      	mov	r0, r4
 8007318:	f7ff fbc7 	bl	8006aaa <I2C_TransferConfig>
 800731c:	e00f      	b.n	800733e <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800731e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007320:	b292      	uxth	r2, r2
 8007322:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007324:	2300      	movs	r3, #0
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	4629      	mov	r1, r5
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff fbba 	bl	8006aaa <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007336:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d033      	beq.n	80073a6 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800733e:	4632      	mov	r2, r6
 8007340:	4639      	mov	r1, r7
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff fcda 	bl	8006cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8007348:	2800      	cmp	r0, #0
 800734a:	d14e      	bne.n	80073ea <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800734c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007354:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007356:	3301      	adds	r3, #1
 8007358:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800735a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29b      	uxth	r3, r3
 8007362:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007364:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007366:	3b01      	subs	r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800736c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800736e:	b292      	uxth	r2, r2
 8007370:	2a00      	cmp	r2, #0
 8007372:	d0e0      	beq.n	8007336 <HAL_I2C_Mem_Write+0xea>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1de      	bne.n	8007336 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007378:	9600      	str	r6, [sp, #0]
 800737a:	463b      	mov	r3, r7
 800737c:	2200      	movs	r2, #0
 800737e:	2180      	movs	r1, #128	@ 0x80
 8007380:	4620      	mov	r0, r4
 8007382:	f7ff fce6 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 8007386:	bb90      	cbnz	r0, 80073ee <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007388:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	2bff      	cmp	r3, #255	@ 0xff
 800738e:	d9c6      	bls.n	800731e <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007390:	22ff      	movs	r2, #255	@ 0xff
 8007392:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007394:	2300      	movs	r3, #0
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800739c:	4629      	mov	r1, r5
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff fb83 	bl	8006aaa <I2C_TransferConfig>
 80073a4:	e7c7      	b.n	8007336 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a6:	4632      	mov	r2, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	4620      	mov	r0, r4
 80073ac:	f7ff fd76 	bl	8006e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80073b0:	b9f8      	cbnz	r0, 80073f2 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	2220      	movs	r2, #32
 80073b6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80073b8:	6821      	ldr	r1, [r4, #0]
 80073ba:	684b      	ldr	r3, [r1, #4]
 80073bc:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80073c0:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80073c4:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80073ce:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80073d8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80073dc:	e000      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 80073de:	2002      	movs	r0, #2
}
 80073e0:	b003      	add	sp, #12
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80073e6:	2002      	movs	r0, #2
 80073e8:	e7fa      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7f8      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7f6      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 80073f2:	2001      	movs	r0, #1
 80073f4:	e7f4      	b.n	80073e0 <HAL_I2C_Mem_Write+0x194>
	...

080073f8 <HAL_I2C_Mem_Write_DMA>:
{
 80073f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073fc:	b083      	sub	sp, #12
 80073fe:	4604      	mov	r4, r0
 8007400:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007402:	f8bd 902c 	ldrh.w	r9, [sp, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007406:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800740a:	b2c0      	uxtb	r0, r0
 800740c:	2820      	cmp	r0, #32
 800740e:	f040 8097 	bne.w	8007540 <HAL_I2C_Mem_Write_DMA+0x148>
 8007412:	460e      	mov	r6, r1
 8007414:	4690      	mov	r8, r2
 8007416:	461f      	mov	r7, r3
    if ((pData == NULL) || (Size == 0U))
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	bf18      	it	ne
 800741e:	2d00      	cmpne	r5, #0
 8007420:	d056      	beq.n	80074d0 <HAL_I2C_Mem_Write_DMA+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800742a:	f040 808e 	bne.w	800754a <HAL_I2C_Mem_Write_DMA+0x152>
    __HAL_LOCK(hi2c);
 800742e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8007432:	2b01      	cmp	r3, #1
 8007434:	f000 808b 	beq.w	800754e <HAL_I2C_Mem_Write_DMA+0x156>
 8007438:	2301      	movs	r3, #1
 800743a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800743e:	f7fc f845 	bl	80034cc <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007442:	2321      	movs	r3, #33	@ 0x21
 8007444:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007448:	2340      	movs	r3, #64	@ 0x40
 800744a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
 8007450:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8007452:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007454:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007458:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800745c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800745e:	4b3d      	ldr	r3, [pc, #244]	@ (8007554 <HAL_I2C_Mem_Write_DMA+0x15c>)
 8007460:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007462:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007464:	b29b      	uxth	r3, r3
 8007466:	2bff      	cmp	r3, #255	@ 0xff
 8007468:	d937      	bls.n	80074da <HAL_I2C_Mem_Write_DMA+0xe2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800746a:	23ff      	movs	r3, #255	@ 0xff
 800746c:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800746e:	f04f 7980 	mov.w	r9, #16777216	@ 0x1000000
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8007472:	9001      	str	r0, [sp, #4]
 8007474:	2319      	movs	r3, #25
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	463b      	mov	r3, r7
 800747a:	4642      	mov	r2, r8
 800747c:	4631      	mov	r1, r6
 800747e:	4620      	mov	r0, r4
 8007480:	f7ff fc92 	bl	8006da8 <I2C_RequestMemoryWrite>
 8007484:	2800      	cmp	r0, #0
 8007486:	d12d      	bne.n	80074e4 <HAL_I2C_Mem_Write_DMA+0xec>
    if (hi2c->hdmatx != NULL)
 8007488:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800748a:	2b00      	cmp	r3, #0
 800748c:	d02f      	beq.n	80074ee <HAL_I2C_Mem_Write_DMA+0xf6>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800748e:	4a32      	ldr	r2, [pc, #200]	@ (8007558 <HAL_I2C_Mem_Write_DMA+0x160>)
 8007490:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007492:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007494:	4a31      	ldr	r2, [pc, #196]	@ (800755c <HAL_I2C_Mem_Write_DMA+0x164>)
 8007496:	64da      	str	r2, [r3, #76]	@ 0x4c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007498:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800749a:	2300      	movs	r3, #0
 800749c:	6413      	str	r3, [r2, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800749e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80074a0:	6513      	str	r3, [r2, #80]	@ 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80074a6:	3228      	adds	r2, #40	@ 0x28
 80074a8:	4629      	mov	r1, r5
 80074aa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80074ac:	f7fd fc3e 	bl	8004d2c <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80074b0:	4605      	mov	r5, r0
 80074b2:	b350      	cbz	r0, 800750a <HAL_I2C_Mem_Write_DMA+0x112>
      hi2c->State     = HAL_I2C_STATE_READY;
 80074b4:	2320      	movs	r3, #32
 80074b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074ba:	2200      	movs	r2, #0
 80074bc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80074c2:	f043 0310 	orr.w	r3, r3, #16
 80074c6:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80074c8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80074cc:	2501      	movs	r5, #1
 80074ce:	e038      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074d4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80074d6:	2501      	movs	r5, #1
 80074d8:	e033      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->XferSize = hi2c->XferCount;
 80074da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80074dc:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80074de:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
 80074e2:	e7c6      	b.n	8007472 <HAL_I2C_Mem_Write_DMA+0x7a>
      __HAL_UNLOCK(hi2c);
 80074e4:	2300      	movs	r3, #0
 80074e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80074ea:	2501      	movs	r5, #1
 80074ec:	e029      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80074ee:	2320      	movs	r3, #32
 80074f0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074f4:	2200      	movs	r2, #0
 80074f6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80074fa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80074fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007500:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8007502:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007506:	2501      	movs	r5, #1
 8007508:	e01b      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800750a:	2700      	movs	r7, #0
 800750c:	9700      	str	r7, [sp, #0]
 800750e:	464b      	mov	r3, r9
 8007510:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8007514:	4631      	mov	r1, r6
 8007516:	4620      	mov	r0, r4
 8007518:	f7ff fac7 	bl	8006aaa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800751c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800751e:	b29b      	uxth	r3, r3
 8007520:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8007522:	1a9b      	subs	r3, r3, r2
 8007524:	b29b      	uxth	r3, r3
 8007526:	8563      	strh	r3, [r4, #42]	@ 0x2a
      __HAL_UNLOCK(hi2c);
 8007528:	f884 7040 	strb.w	r7, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800752c:	2110      	movs	r1, #16
 800752e:	4620      	mov	r0, r4
 8007530:	f7ff fada 	bl	8006ae8 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800753c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800753e:	e000      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
    return HAL_BUSY;
 8007540:	2502      	movs	r5, #2
}
 8007542:	4628      	mov	r0, r5
 8007544:	b003      	add	sp, #12
 8007546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 800754a:	2502      	movs	r5, #2
 800754c:	e7f9      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
    __HAL_LOCK(hi2c);
 800754e:	2502      	movs	r5, #2
 8007550:	e7f7      	b.n	8007542 <HAL_I2C_Mem_Write_DMA+0x14a>
 8007552:	bf00      	nop
 8007554:	080083cd 	.word	0x080083cd
 8007558:	08008649 	.word	0x08008649
 800755c:	08008511 	.word	0x08008511

08007560 <HAL_I2C_Mem_Read_DMA>:
{
 8007560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007564:	b083      	sub	sp, #12
 8007566:	4604      	mov	r4, r0
 8007568:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800756a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 800756e:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8007572:	b2c0      	uxtb	r0, r0
 8007574:	2820      	cmp	r0, #32
 8007576:	f040 8098 	bne.w	80076aa <HAL_I2C_Mem_Read_DMA+0x14a>
 800757a:	460e      	mov	r6, r1
 800757c:	4690      	mov	r8, r2
 800757e:	461f      	mov	r7, r3
    if ((pData == NULL) || (Size == 0U))
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	bf18      	it	ne
 8007586:	2d00      	cmpne	r5, #0
 8007588:	d056      	beq.n	8007638 <HAL_I2C_Mem_Read_DMA+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007592:	f040 808f 	bne.w	80076b4 <HAL_I2C_Mem_Read_DMA+0x154>
    __HAL_LOCK(hi2c);
 8007596:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800759a:	2b01      	cmp	r3, #1
 800759c:	f000 808c 	beq.w	80076b8 <HAL_I2C_Mem_Read_DMA+0x158>
 80075a0:	2301      	movs	r3, #1
 80075a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80075a6:	f7fb ff91 	bl	80034cc <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80075aa:	2322      	movs	r3, #34	@ 0x22
 80075ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80075b0:	2340      	movs	r3, #64	@ 0x40
 80075b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 80075ba:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80075bc:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075c0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80075c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80075c6:	4b3d      	ldr	r3, [pc, #244]	@ (80076bc <HAL_I2C_Mem_Read_DMA+0x15c>)
 80075c8:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2bff      	cmp	r3, #255	@ 0xff
 80075d0:	d937      	bls.n	8007642 <HAL_I2C_Mem_Read_DMA+0xe2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075d2:	23ff      	movs	r3, #255	@ 0xff
 80075d4:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80075d6:	f04f 7980 	mov.w	r9, #16777216	@ 0x1000000
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80075da:	9001      	str	r0, [sp, #4]
 80075dc:	2319      	movs	r3, #25
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	463b      	mov	r3, r7
 80075e2:	4642      	mov	r2, r8
 80075e4:	4631      	mov	r1, r6
 80075e6:	4620      	mov	r0, r4
 80075e8:	f7ff fc1c 	bl	8006e24 <I2C_RequestMemoryRead>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d12d      	bne.n	800764c <HAL_I2C_Mem_Read_DMA+0xec>
    if (hi2c->hdmarx != NULL)
 80075f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d02f      	beq.n	8007656 <HAL_I2C_Mem_Read_DMA+0xf6>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80075f6:	4a32      	ldr	r2, [pc, #200]	@ (80076c0 <HAL_I2C_Mem_Read_DMA+0x160>)
 80075f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80075fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80075fc:	4a31      	ldr	r2, [pc, #196]	@ (80076c4 <HAL_I2C_Mem_Read_DMA+0x164>)
 80075fe:	64da      	str	r2, [r3, #76]	@ 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007600:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007602:	2300      	movs	r3, #0
 8007604:	6413      	str	r3, [r2, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007606:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007608:	6513      	str	r3, [r2, #80]	@ 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800760a:	6821      	ldr	r1, [r4, #0]
 800760c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800760e:	462a      	mov	r2, r5
 8007610:	3124      	adds	r1, #36	@ 0x24
 8007612:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007614:	f7fd fb8a 	bl	8004d2c <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8007618:	4605      	mov	r5, r0
 800761a:	b350      	cbz	r0, 8007672 <HAL_I2C_Mem_Read_DMA+0x112>
      hi2c->State     = HAL_I2C_STATE_READY;
 800761c:	2320      	movs	r3, #32
 800761e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007622:	2200      	movs	r2, #0
 8007624:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007628:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800762a:	f043 0310 	orr.w	r3, r3, #16
 800762e:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8007630:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007634:	2501      	movs	r5, #1
 8007636:	e039      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800763c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800763e:	2501      	movs	r5, #1
 8007640:	e034      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->XferSize = hi2c->XferCount;
 8007642:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007644:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007646:	f04f 7900 	mov.w	r9, #33554432	@ 0x2000000
 800764a:	e7c6      	b.n	80075da <HAL_I2C_Mem_Read_DMA+0x7a>
      __HAL_UNLOCK(hi2c);
 800764c:	2300      	movs	r3, #0
 800764e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007652:	2501      	movs	r5, #1
 8007654:	e02a      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007656:	2320      	movs	r3, #32
 8007658:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800765c:	2200      	movs	r2, #0
 800765e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007662:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007668:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800766a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800766e:	2501      	movs	r5, #1
 8007670:	e01c      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007672:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <HAL_I2C_Mem_Read_DMA+0x168>)
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	464b      	mov	r3, r9
 8007678:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800767c:	4631      	mov	r1, r6
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fa13 	bl	8006aaa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8007684:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	b29b      	uxth	r3, r3
 800768e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      __HAL_UNLOCK(hi2c);
 8007690:	2300      	movs	r3, #0
 8007692:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007696:	2110      	movs	r1, #16
 8007698:	4620      	mov	r0, r4
 800769a:	f7ff fa25 	bl	8006ae8 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	6813      	ldr	r3, [r2, #0]
 80076a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076a6:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80076a8:	e000      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
    return HAL_BUSY;
 80076aa:	2502      	movs	r5, #2
}
 80076ac:	4628      	mov	r0, r5
 80076ae:	b003      	add	sp, #12
 80076b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_BUSY;
 80076b4:	2502      	movs	r5, #2
 80076b6:	e7f9      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
    __HAL_LOCK(hi2c);
 80076b8:	2502      	movs	r5, #2
 80076ba:	e7f7      	b.n	80076ac <HAL_I2C_Mem_Read_DMA+0x14c>
 80076bc:	080083cd 	.word	0x080083cd
 80076c0:	080086a3 	.word	0x080086a3
 80076c4:	08008511 	.word	0x08008511
 80076c8:	80002400 	.word	0x80002400

080076cc <HAL_I2C_IsDeviceReady>:
{
 80076cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076d0:	b085      	sub	sp, #20
 80076d2:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b20      	cmp	r3, #32
 80076e0:	f040 809c 	bne.w	800781c <HAL_I2C_IsDeviceReady+0x150>
 80076e4:	4606      	mov	r6, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80076ea:	6803      	ldr	r3, [r0, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80076f2:	f040 8095 	bne.w	8007820 <HAL_I2C_IsDeviceReady+0x154>
    __HAL_LOCK(hi2c);
 80076f6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	f000 8092 	beq.w	8007824 <HAL_I2C_IsDeviceReady+0x158>
 8007700:	2301      	movs	r3, #1
 8007702:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007706:	2324      	movs	r3, #36	@ 0x24
 8007708:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800770c:	2300      	movs	r3, #0
 800770e:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007710:	68f3      	ldr	r3, [r6, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d010      	beq.n	8007738 <HAL_I2C_IsDeviceReady+0x6c>
 8007716:	f3c9 0309 	ubfx	r3, r9, #0, #10
 800771a:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800771e:	6832      	ldr	r2, [r6, #0]
 8007720:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8007722:	f7fb fed3 	bl	80034cc <HAL_GetTick>
 8007726:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	6993      	ldr	r3, [r2, #24]
 800772c:	f3c3 1c40 	ubfx	ip, r3, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007730:	6993      	ldr	r3, [r2, #24]
 8007732:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007736:	e00b      	b.n	8007750 <HAL_I2C_IsDeviceReady+0x84>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007738:	f3c9 0209 	ubfx	r2, r9, #0, #10
 800773c:	4b3d      	ldr	r3, [pc, #244]	@ (8007834 <HAL_I2C_IsDeviceReady+0x168>)
 800773e:	4313      	orrs	r3, r2
 8007740:	e7ed      	b.n	800771e <HAL_I2C_IsDeviceReady+0x52>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007742:	6833      	ldr	r3, [r6, #0]
 8007744:	699c      	ldr	r4, [r3, #24]
 8007746:	f3c4 1c40 	ubfx	ip, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007750:	ea5c 0c03 	orrs.w	ip, ip, r3
 8007754:	d117      	bne.n	8007786 <HAL_I2C_IsDeviceReady+0xba>
        if (Timeout != HAL_MAX_DELAY)
 8007756:	f1b5 3fff 	cmp.w	r5, #4294967295
 800775a:	d0f2      	beq.n	8007742 <HAL_I2C_IsDeviceReady+0x76>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800775c:	f7fb feb6 	bl	80034cc <HAL_GetTick>
 8007760:	1bc0      	subs	r0, r0, r7
 8007762:	42a8      	cmp	r0, r5
 8007764:	d801      	bhi.n	800776a <HAL_I2C_IsDeviceReady+0x9e>
 8007766:	2d00      	cmp	r5, #0
 8007768:	d1eb      	bne.n	8007742 <HAL_I2C_IsDeviceReady+0x76>
            hi2c->State = HAL_I2C_STATE_READY;
 800776a:	2320      	movs	r3, #32
 800776c:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007770:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8007772:	f043 0320 	orr.w	r3, r3, #32
 8007776:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800777e:	2001      	movs	r0, #1
}
 8007780:	b005      	add	sp, #20
 8007782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007786:	6833      	ldr	r3, [r6, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f013 0f10 	tst.w	r3, #16
 800778e:	d023      	beq.n	80077d8 <HAL_I2C_IsDeviceReady+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007790:	9700      	str	r7, [sp, #0]
 8007792:	462b      	mov	r3, r5
 8007794:	2200      	movs	r2, #0
 8007796:	2120      	movs	r1, #32
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff fada 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d144      	bne.n	800782c <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a2:	6833      	ldr	r3, [r6, #0]
 80077a4:	2210      	movs	r2, #16
 80077a6:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	2220      	movs	r2, #32
 80077ac:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	4543      	cmp	r3, r8
 80077b2:	d022      	beq.n	80077fa <HAL_I2C_IsDeviceReady+0x12e>
      I2C_Trials++;
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	4543      	cmp	r3, r8
 80077be:	d3a7      	bcc.n	8007710 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	2320      	movs	r3, #32
 80077c2:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077c6:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80077c8:	f043 0320 	orr.w	r3, r3, #32
 80077cc:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80077ce:	2300      	movs	r3, #0
 80077d0:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 80077d4:	2001      	movs	r0, #1
 80077d6:	e7d3      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80077d8:	9700      	str	r7, [sp, #0]
 80077da:	462b      	mov	r3, r5
 80077dc:	2200      	movs	r2, #0
 80077de:	2120      	movs	r1, #32
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff fab6 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 80077e6:	b9f8      	cbnz	r0, 8007828 <HAL_I2C_IsDeviceReady+0x15c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077e8:	6832      	ldr	r2, [r6, #0]
 80077ea:	2320      	movs	r3, #32
 80077ec:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80077ee:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80077f2:	2300      	movs	r3, #0
 80077f4:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 80077f8:	e7c2      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077fa:	6832      	ldr	r2, [r6, #0]
 80077fc:	6853      	ldr	r3, [r2, #4]
 80077fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007802:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007804:	9700      	str	r7, [sp, #0]
 8007806:	462b      	mov	r3, r5
 8007808:	2200      	movs	r2, #0
 800780a:	2120      	movs	r1, #32
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff faa0 	bl	8006d52 <I2C_WaitOnFlagUntilTimeout>
 8007812:	b968      	cbnz	r0, 8007830 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	2220      	movs	r2, #32
 8007818:	61da      	str	r2, [r3, #28]
 800781a:	e7cb      	b.n	80077b4 <HAL_I2C_IsDeviceReady+0xe8>
    return HAL_BUSY;
 800781c:	2002      	movs	r0, #2
 800781e:	e7af      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
      return HAL_BUSY;
 8007820:	2002      	movs	r0, #2
 8007822:	e7ad      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
    __HAL_LOCK(hi2c);
 8007824:	2002      	movs	r0, #2
 8007826:	e7ab      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8007828:	2001      	movs	r0, #1
 800782a:	e7a9      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 800782c:	2001      	movs	r0, #1
 800782e:	e7a7      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
          return HAL_ERROR;
 8007830:	2001      	movs	r0, #1
 8007832:	e7a5      	b.n	8007780 <HAL_I2C_IsDeviceReady+0xb4>
 8007834:	02002000 	.word	0x02002000

08007838 <HAL_I2C_EV_IRQHandler>:
{
 8007838:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800783a:	6803      	ldr	r3, [r0, #0]
 800783c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800783e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8007840:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007842:	b103      	cbz	r3, 8007846 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8007844:	4798      	blx	r3
}
 8007846:	bd08      	pop	{r3, pc}

08007848 <I2C_ITMasterSeqCplt>:
{
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800784c:	2300      	movs	r3, #0
 800784e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007852:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b21      	cmp	r3, #33	@ 0x21
 800785a:	d00f      	beq.n	800787c <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 800785c:	2320      	movs	r3, #32
 800785e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007862:	2312      	movs	r3, #18
 8007864:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007866:	2500      	movs	r5, #0
 8007868:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800786a:	2102      	movs	r1, #2
 800786c:	f7ff f976 	bl	8006b5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007870:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007874:	4620      	mov	r0, r4
 8007876:	f7f9 f859 	bl	800092c <HAL_I2C_MasterRxCpltCallback>
}
 800787a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 800787c:	2320      	movs	r3, #32
 800787e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007882:	2311      	movs	r3, #17
 8007884:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007886:	2500      	movs	r5, #0
 8007888:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800788a:	2101      	movs	r1, #1
 800788c:	f7ff f966 	bl	8006b5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007890:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007894:	4620      	mov	r0, r4
 8007896:	f7f9 f841 	bl	800091c <HAL_I2C_MasterTxCpltCallback>
 800789a:	e7ee      	b.n	800787a <I2C_ITMasterSeqCplt+0x32>

0800789c <HAL_I2C_SlaveTxCpltCallback>:
}
 800789c:	4770      	bx	lr

0800789e <HAL_I2C_SlaveRxCpltCallback>:
}
 800789e:	4770      	bx	lr

080078a0 <I2C_ITSlaveSeqCplt>:
{
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078a4:	6803      	ldr	r3, [r0, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a8:	2100      	movs	r1, #0
 80078aa:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078ae:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80078b2:	d00e      	beq.n	80078d2 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078ba:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078bc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b29      	cmp	r3, #41	@ 0x29
 80078c4:	d00d      	beq.n	80078e2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078c6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ce:	d018      	beq.n	8007902 <I2C_ITSlaveSeqCplt+0x62>
}
 80078d0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078d2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80078d6:	d0f1      	beq.n	80078bc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e7ec      	b.n	80078bc <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078e2:	2328      	movs	r3, #40	@ 0x28
 80078e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078e8:	2321      	movs	r3, #33	@ 0x21
 80078ea:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80078ec:	2101      	movs	r1, #1
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff f934 	bl	8006b5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7ff ffce 	bl	800789c <HAL_I2C_SlaveTxCpltCallback>
 8007900:	e7e6      	b.n	80078d0 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007902:	2328      	movs	r3, #40	@ 0x28
 8007904:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007908:	2322      	movs	r3, #34	@ 0x22
 800790a:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800790c:	2102      	movs	r1, #2
 800790e:	4620      	mov	r0, r4
 8007910:	f7ff f924 	bl	8006b5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007914:	2300      	movs	r3, #0
 8007916:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800791a:	4620      	mov	r0, r4
 800791c:	f7ff ffbf 	bl	800789e <HAL_I2C_SlaveRxCpltCallback>
}
 8007920:	e7d6      	b.n	80078d0 <I2C_ITSlaveSeqCplt+0x30>

08007922 <HAL_I2C_AddrCallback>:
}
 8007922:	4770      	bx	lr

08007924 <I2C_ITAddrCplt>:
{
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007928:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800792c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007930:	2b28      	cmp	r3, #40	@ 0x28
 8007932:	d006      	beq.n	8007942 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007934:	6803      	ldr	r3, [r0, #0]
 8007936:	2208      	movs	r2, #8
 8007938:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800793a:	2300      	movs	r3, #0
 800793c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 8007940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8007942:	6803      	ldr	r3, [r0, #0]
 8007944:	699e      	ldr	r6, [r3, #24]
 8007946:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	0c12      	lsrs	r2, r2, #16
 800794e:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007958:	68df      	ldr	r7, [r3, #12]
 800795a:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800795e:	68c1      	ldr	r1, [r0, #12]
 8007960:	2902      	cmp	r1, #2
 8007962:	d122      	bne.n	80079aa <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007964:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8007968:	f015 0f06 	tst.w	r5, #6
 800796c:	d110      	bne.n	8007990 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800796e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007970:	3101      	adds	r1, #1
 8007972:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007974:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007976:	2902      	cmp	r1, #2
 8007978:	d1e2      	bne.n	8007940 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800797a:	2100      	movs	r1, #0
 800797c:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800797e:	2008      	movs	r0, #8
 8007980:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8007982:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007986:	4631      	mov	r1, r6
 8007988:	4620      	mov	r0, r4
 800798a:	f7ff ffca 	bl	8007922 <HAL_I2C_AddrCallback>
 800798e:	e7d7      	b.n	8007940 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007994:	f7ff f8e2 	bl	8006b5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007998:	2300      	movs	r3, #0
 800799a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800799e:	463a      	mov	r2, r7
 80079a0:	4631      	mov	r1, r6
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7ff ffbd 	bl	8007922 <HAL_I2C_AddrCallback>
 80079a8:	e7ca      	b.n	8007940 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80079aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079ae:	f7ff f8d5 	bl	8006b5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80079b2:	2300      	movs	r3, #0
 80079b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80079b8:	462a      	mov	r2, r5
 80079ba:	4631      	mov	r1, r6
 80079bc:	4620      	mov	r0, r4
 80079be:	f7ff ffb0 	bl	8007922 <HAL_I2C_AddrCallback>
 80079c2:	e7bd      	b.n	8007940 <I2C_ITAddrCplt+0x1c>

080079c4 <HAL_I2C_ListenCpltCallback>:
}
 80079c4:	4770      	bx	lr
	...

080079c8 <I2C_ITListenCplt>:
{
 80079c8:	b510      	push	{r4, lr}
 80079ca:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079cc:	4b17      	ldr	r3, [pc, #92]	@ (8007a2c <I2C_ITListenCplt+0x64>)
 80079ce:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80079d4:	2220      	movs	r2, #32
 80079d6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079da:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80079de:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80079e0:	f011 0f04 	tst.w	r1, #4
 80079e4:	d013      	beq.n	8007a0e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079e6:	6803      	ldr	r3, [r0, #0]
 80079e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80079ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80079f0:	3301      	adds	r3, #1
 80079f2:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80079f4:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 80079f6:	b153      	cbz	r3, 8007a0e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80079f8:	3b01      	subs	r3, #1
 80079fa:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 80079fc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a06:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007a08:	f043 0304 	orr.w	r3, r3, #4
 8007a0c:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a0e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7ff f8a2 	bl	8006b5c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a24:	4620      	mov	r0, r4
 8007a26:	f7ff ffcd 	bl	80079c4 <HAL_I2C_ListenCpltCallback>
}
 8007a2a:	bd10      	pop	{r4, pc}
 8007a2c:	ffff0000 	.word	0xffff0000

08007a30 <HAL_I2C_MemTxCpltCallback>:
}
 8007a30:	4770      	bx	lr

08007a32 <HAL_I2C_ErrorCallback>:
}
 8007a32:	4770      	bx	lr

08007a34 <HAL_I2C_AbortCpltCallback>:
}
 8007a34:	4770      	bx	lr

08007a36 <I2C_TreatErrorCallback>:
{
 8007a36:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a38:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b60      	cmp	r3, #96	@ 0x60
 8007a40:	d006      	beq.n	8007a50 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a46:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007a4a:	f7ff fff2 	bl	8007a32 <HAL_I2C_ErrorCallback>
}
 8007a4e:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	2320      	movs	r3, #32
 8007a52:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a5a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8007a5e:	f7ff ffe9 	bl	8007a34 <HAL_I2C_AbortCpltCallback>
 8007a62:	e7f4      	b.n	8007a4e <I2C_TreatErrorCallback+0x18>

08007a64 <I2C_ITError>:
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a68:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a72:	483b      	ldr	r0, [pc, #236]	@ (8007b60 <I2C_ITError+0xfc>)
 8007a74:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a76:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8007a78:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a7e:	3b28      	subs	r3, #40	@ 0x28
 8007a80:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d82d      	bhi.n	8007ae2 <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a86:	2103      	movs	r1, #3
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f7ff f867 	bl	8006b5c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a8e:	2328      	movs	r3, #40	@ 0x28
 8007a90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a94:	4b33      	ldr	r3, [pc, #204]	@ (8007b64 <I2C_ITError+0x100>)
 8007a96:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8007a98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007a9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	d034      	beq.n	8007b0a <I2C_ITError+0xa6>
 8007aa0:	2b21      	cmp	r3, #33	@ 0x21
 8007aa2:	bf18      	it	ne
 8007aa4:	2b11      	cmpne	r3, #17
 8007aa6:	d130      	bne.n	8007b0a <I2C_ITError+0xa6>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8007ab0:	d003      	beq.n	8007aba <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ab8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007aba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007abc:	f7fe f8f6 	bl	8005cac <HAL_DMA_GetState>
 8007ac0:	2801      	cmp	r0, #1
 8007ac2:	d01e      	beq.n	8007b02 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ac4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ac6:	4a28      	ldr	r2, [pc, #160]	@ (8007b68 <I2C_ITError+0x104>)
 8007ac8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8007aca:	2300      	movs	r3, #0
 8007acc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ad0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007ad2:	f7fd fc17 	bl	8005304 <HAL_DMA_Abort_IT>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d040      	beq.n	8007b5c <I2C_ITError+0xf8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ada:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8007adc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007ade:	4798      	blx	r3
 8007ae0:	e03c      	b.n	8007b5c <I2C_ITError+0xf8>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007ae2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f7ff f838 	bl	8006b5c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007aec:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b60      	cmp	r3, #96	@ 0x60
 8007af4:	d002      	beq.n	8007afc <I2C_ITError+0x98>
      hi2c->State         = HAL_I2C_STATE_READY;
 8007af6:	2320      	movs	r3, #32
 8007af8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b00:	e7ca      	b.n	8007a98 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8007b02:	4620      	mov	r0, r4
 8007b04:	f7ff ff97 	bl	8007a36 <I2C_TreatErrorCallback>
 8007b08:	e028      	b.n	8007b5c <I2C_ITError+0xf8>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b0a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8007b0c:	b31a      	cbz	r2, 8007b56 <I2C_ITError+0xf2>
 8007b0e:	2b22      	cmp	r3, #34	@ 0x22
 8007b10:	bf18      	it	ne
 8007b12:	2b12      	cmpne	r3, #18
 8007b14:	d11f      	bne.n	8007b56 <I2C_ITError+0xf2>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8007b1e:	d003      	beq.n	8007b28 <I2C_ITError+0xc4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b26:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b28:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b2a:	f7fe f8bf 	bl	8005cac <HAL_DMA_GetState>
 8007b2e:	2801      	cmp	r0, #1
 8007b30:	d00d      	beq.n	8007b4e <I2C_ITError+0xea>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007b34:	4a0c      	ldr	r2, [pc, #48]	@ (8007b68 <I2C_ITError+0x104>)
 8007b36:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_UNLOCK(hi2c);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b3e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b40:	f7fd fbe0 	bl	8005304 <HAL_DMA_Abort_IT>
 8007b44:	b150      	cbz	r0, 8007b5c <I2C_ITError+0xf8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b46:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007b48:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007b4a:	4798      	blx	r3
 8007b4c:	e006      	b.n	8007b5c <I2C_ITError+0xf8>
      I2C_TreatErrorCallback(hi2c);
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7ff ff71 	bl	8007a36 <I2C_TreatErrorCallback>
 8007b54:	e002      	b.n	8007b5c <I2C_ITError+0xf8>
    I2C_TreatErrorCallback(hi2c);
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff ff6d 	bl	8007a36 <I2C_TreatErrorCallback>
}
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	bf00      	nop
 8007b60:	ffff0000 	.word	0xffff0000
 8007b64:	08007db1 	.word	0x08007db1
 8007b68:	080086fd 	.word	0x080086fd

08007b6c <I2C_ITSlaveCplt>:
{
 8007b6c:	b570      	push	{r4, r5, r6, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007b72:	6802      	ldr	r2, [r0, #0]
 8007b74:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b76:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007b7a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b80:	2b29      	cmp	r3, #41	@ 0x29
 8007b82:	bf18      	it	ne
 8007b84:	2b21      	cmpne	r3, #33	@ 0x21
 8007b86:	d057      	beq.n	8007c38 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b8a:	bf18      	it	ne
 8007b8c:	2b22      	cmpne	r3, #34	@ 0x22
 8007b8e:	d05a      	beq.n	8007c46 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	6853      	ldr	r3, [r2, #4]
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b98:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	6853      	ldr	r3, [r2, #4]
 8007b9e:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007ba2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007ba6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007baa:	f023 0301 	bic.w	r3, r3, #1
 8007bae:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7fe ff69 	bl	8006a88 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007bb6:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8007bba:	f000 8085 	beq.w	8007cc8 <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	6813      	ldr	r3, [r2, #0]
 8007bc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bc6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8007bc8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d045      	beq.n	8007c5a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4974      	ldr	r1, [pc, #464]	@ (8007da4 <I2C_ITSlaveCplt+0x238>)
 8007bd2:	4a75      	ldr	r2, [pc, #468]	@ (8007da8 <I2C_ITSlaveCplt+0x23c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	bf18      	it	ne
 8007bd8:	428b      	cmpne	r3, r1
 8007bda:	d03b      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007bdc:	3218      	adds	r2, #24
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d038      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007be2:	3218      	adds	r2, #24
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d035      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007be8:	3218      	adds	r2, #24
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d032      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007bee:	3218      	adds	r2, #24
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d02f      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007bf4:	3218      	adds	r2, #24
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007bfa:	3218      	adds	r2, #24
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d029      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c00:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d025      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c08:	3218      	adds	r2, #24
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c0e:	3218      	adds	r2, #24
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d01f      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c14:	3218      	adds	r2, #24
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01c      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c1a:	3218      	adds	r2, #24
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d019      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c20:	3218      	adds	r2, #24
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d016      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c26:	3218      	adds	r2, #24
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c2c:	3218      	adds	r2, #24
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d010      	beq.n	8007c54 <I2C_ITSlaveCplt+0xe8>
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	e00f      	b.n	8007c58 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007c38:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007c3c:	f7fe ff8e 	bl	8006b5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c40:	2321      	movs	r3, #33	@ 0x21
 8007c42:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c44:	e7a4      	b.n	8007b90 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007c46:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007c4a:	f7fe ff87 	bl	8006b5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007c4e:	2322      	movs	r3, #34	@ 0x22
 8007c50:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c52:	e79d      	b.n	8007b90 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007c5a:	f015 0f04 	tst.w	r5, #4
 8007c5e:	d011      	beq.n	8007c84 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007c60:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c6e:	3301      	adds	r3, #1
 8007c70:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8007c72:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007c74:	b133      	cbz	r3, 8007c84 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
 8007c76:	3b01      	subs	r3, #1
 8007c78:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007c7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8007c84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	b11b      	cbz	r3, 8007c92 <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c8a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c8c:	f043 0304 	orr.w	r3, r3, #4
 8007c90:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007c98:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d157      	bne.n	8007d50 <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007ca0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007ca2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ca6:	d161      	bne.n	8007d6c <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ca8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b22      	cmp	r3, #34	@ 0x22
 8007cb0:	d06c      	beq.n	8007d8c <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 8007cb2:	2320      	movs	r3, #32
 8007cb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007cbc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f7ff fdeb 	bl	800789c <HAL_I2C_SlaveTxCpltCallback>
}
 8007cc6:	e060      	b.n	8007d8a <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007cc8:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8007ccc:	d0c5      	beq.n	8007c5a <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	6813      	ldr	r3, [r2, #0]
 8007cd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cd6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8007cd8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0bd      	beq.n	8007c5a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4930      	ldr	r1, [pc, #192]	@ (8007da4 <I2C_ITSlaveCplt+0x238>)
 8007ce2:	4a31      	ldr	r2, [pc, #196]	@ (8007da8 <I2C_ITSlaveCplt+0x23c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bf18      	it	ne
 8007ce8:	428b      	cmpne	r3, r1
 8007cea:	d02d      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007cec:	3218      	adds	r2, #24
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d02a      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007cf2:	3218      	adds	r2, #24
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d027      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007cf8:	3218      	adds	r2, #24
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d024      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007cfe:	3218      	adds	r2, #24
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d021      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d04:	3218      	adds	r2, #24
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d01e      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d0a:	3218      	adds	r2, #24
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d01b      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d10:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d017      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d18:	3218      	adds	r2, #24
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d014      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d1e:	3218      	adds	r2, #24
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d011      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d24:	3218      	adds	r2, #24
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d2a:	3218      	adds	r2, #24
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d30:	3218      	adds	r2, #24
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d008      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d36:	3218      	adds	r2, #24
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d005      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d3c:	3218      	adds	r2, #24
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d002      	beq.n	8007d48 <I2C_ITSlaveCplt+0x1dc>
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	e001      	b.n	8007d4c <I2C_ITSlaveCplt+0x1e0>
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8007d4e:	e784      	b.n	8007c5a <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007d50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d52:	4620      	mov	r0, r4
 8007d54:	f7ff fe86 	bl	8007a64 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d58:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b28      	cmp	r3, #40	@ 0x28
 8007d60:	d113      	bne.n	8007d8a <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007d62:	4629      	mov	r1, r5
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff fe2f 	bl	80079c8 <I2C_ITListenCplt>
 8007d6a:	e00e      	b.n	8007d8a <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fd97 	bl	80078a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d72:	4b0e      	ldr	r3, [pc, #56]	@ (8007dac <I2C_ITSlaveCplt+0x240>)
 8007d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007d76:	2320      	movs	r3, #32
 8007d78:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007d80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7ff fe1d 	bl	80079c4 <HAL_I2C_ListenCpltCallback>
}
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007d96:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff fd7f 	bl	800789e <HAL_I2C_SlaveRxCpltCallback>
 8007da0:	e7f3      	b.n	8007d8a <I2C_ITSlaveCplt+0x21e>
 8007da2:	bf00      	nop
 8007da4:	40020010 	.word	0x40020010
 8007da8:	40020028 	.word	0x40020028
 8007dac:	ffff0000 	.word	0xffff0000

08007db0 <I2C_Slave_ISR_IT>:
{
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8007db2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8007db4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	f000 809f 	beq.w	8007efc <I2C_Slave_ISR_IT+0x14c>
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	4616      	mov	r6, r2
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dca:	f011 0f20 	tst.w	r1, #32
 8007dce:	d002      	beq.n	8007dd6 <I2C_Slave_ISR_IT+0x26>
 8007dd0:	f012 0f20 	tst.w	r2, #32
 8007dd4:	d119      	bne.n	8007e0a <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007dd6:	f015 0f10 	tst.w	r5, #16
 8007dda:	d03f      	beq.n	8007e5c <I2C_Slave_ISR_IT+0xac>
 8007ddc:	f016 0f10 	tst.w	r6, #16
 8007de0:	d03c      	beq.n	8007e5c <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
 8007de2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	bb43      	cbnz	r3, 8007e3a <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007de8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b28      	cmp	r3, #40	@ 0x28
 8007df0:	d00e      	beq.n	8007e10 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007df2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b29      	cmp	r3, #41	@ 0x29
 8007dfa:	d011      	beq.n	8007e20 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8007e02:	2000      	movs	r0, #0
 8007e04:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8007e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007e0a:	f7ff feaf 	bl	8007b6c <I2C_ITSlaveCplt>
 8007e0e:	e7e2      	b.n	8007dd6 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007e10:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8007e14:	d1ed      	bne.n	8007df2 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007e16:	4629      	mov	r1, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff fdd5 	bl	80079c8 <I2C_ITListenCplt>
 8007e1e:	e7f0      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e20:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8007e24:	d0ea      	beq.n	8007dfc <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	2210      	movs	r2, #16
 8007e2a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7fe fe2b 	bl	8006a88 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff fd34 	bl	80078a0 <I2C_ITSlaveSeqCplt>
 8007e38:	e7e3      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	2210      	movs	r2, #16
 8007e3e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e40:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007e42:	f043 0304 	orr.w	r3, r3, #4
 8007e46:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e48:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8007e4c:	bf18      	it	ne
 8007e4e:	2f00      	cmpne	r7, #0
 8007e50:	d1d7      	bne.n	8007e02 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007e52:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff fe05 	bl	8007a64 <I2C_ITError>
 8007e5a:	e7d2      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007e5c:	f015 0f04 	tst.w	r5, #4
 8007e60:	d01f      	beq.n	8007ea2 <I2C_Slave_ISR_IT+0xf2>
 8007e62:	f016 0f04 	tst.w	r6, #4
 8007e66:	d01c      	beq.n	8007ea2 <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
 8007e68:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	b173      	cbz	r3, 8007e8c <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e74:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007e76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e78:	3301      	adds	r3, #1
 8007e7a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007e7c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007e82:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8007e8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1b6      	bne.n	8007e02 <I2C_Slave_ISR_IT+0x52>
 8007e94:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8007e98:	d0b3      	beq.n	8007e02 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f7ff fd00 	bl	80078a0 <I2C_ITSlaveSeqCplt>
 8007ea0:	e7af      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ea2:	f015 0f08 	tst.w	r5, #8
 8007ea6:	d002      	beq.n	8007eae <I2C_Slave_ISR_IT+0xfe>
 8007ea8:	f016 0f08 	tst.w	r6, #8
 8007eac:	d118      	bne.n	8007ee0 <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007eae:	f015 0f02 	tst.w	r5, #2
 8007eb2:	d0a6      	beq.n	8007e02 <I2C_Slave_ISR_IT+0x52>
 8007eb4:	f016 0f02 	tst.w	r6, #2
 8007eb8:	d0a3      	beq.n	8007e02 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8007eba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	b1a3      	cbz	r3, 8007eea <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ec0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	7812      	ldrb	r2, [r2, #0]
 8007ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007ec8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007eca:	3301      	adds	r3, #1
 8007ecc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007ece:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ed8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8007eda:	3b01      	subs	r3, #1
 8007edc:	8523      	strh	r3, [r4, #40]	@ 0x28
 8007ede:	e790      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff fd1e 	bl	8007924 <I2C_ITAddrCplt>
 8007ee8:	e78b      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	bf18      	it	ne
 8007eee:	f1b7 7f80 	cmpne.w	r7, #16777216	@ 0x1000000
 8007ef2:	d186      	bne.n	8007e02 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff fcd3 	bl	80078a0 <I2C_ITSlaveSeqCplt>
 8007efa:	e782      	b.n	8007e02 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8007efc:	2002      	movs	r0, #2
 8007efe:	e783      	b.n	8007e08 <I2C_Slave_ISR_IT+0x58>

08007f00 <I2C_ITMasterCplt>:
{
 8007f00:	b530      	push	{r4, r5, lr}
 8007f02:	b083      	sub	sp, #12
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f08:	6803      	ldr	r3, [r0, #0]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f0e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b21      	cmp	r3, #33	@ 0x21
 8007f16:	d033      	beq.n	8007f80 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f18:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b22      	cmp	r3, #34	@ 0x22
 8007f20:	d034      	beq.n	8007f8c <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	6853      	ldr	r3, [r2, #4]
 8007f26:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007f2a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007f2e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007f32:	f023 0301 	bic.w	r3, r3, #1
 8007f36:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f3c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8007f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007f42:	f015 0f10 	tst.w	r5, #16
 8007f46:	d006      	beq.n	8007f56 <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007f50:	f043 0304 	orr.w	r3, r3, #4
 8007f54:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007f56:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b60      	cmp	r3, #96	@ 0x60
 8007f5e:	d01b      	beq.n	8007f98 <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
 8007f60:	4620      	mov	r0, r4
 8007f62:	f7fe fd91 	bl	8006a88 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 8007f66:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007f68:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b60      	cmp	r3, #96	@ 0x60
 8007f70:	d000      	beq.n	8007f74 <I2C_ITMasterCplt+0x74>
 8007f72:	b1d2      	cbz	r2, 8007faa <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff fd74 	bl	8007a64 <I2C_ITError>
}
 8007f7c:	b003      	add	sp, #12
 8007f7e:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f80:	2101      	movs	r1, #1
 8007f82:	f7fe fdeb 	bl	8006b5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f86:	2311      	movs	r3, #17
 8007f88:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f8a:	e7ca      	b.n	8007f22 <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	f7fe fde5 	bl	8006b5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f92:	2312      	movs	r3, #18
 8007f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f96:	e7c4      	b.n	8007f22 <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007f98:	f015 0f04 	tst.w	r5, #4
 8007f9c:	d0e0      	beq.n	8007f60 <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	e7da      	b.n	8007f60 <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007faa:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b21      	cmp	r3, #33	@ 0x21
 8007fb2:	d017      	beq.n	8007fe4 <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fb4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b22      	cmp	r3, #34	@ 0x22
 8007fbc:	d1de      	bne.n	8007f7c <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fbe:	2320      	movs	r3, #32
 8007fc0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fc8:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b40      	cmp	r3, #64	@ 0x40
 8007fd0:	d024      	beq.n	800801c <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007fd8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7f8 fca5 	bl	800092c <HAL_I2C_MasterRxCpltCallback>
}
 8007fe2:	e7cb      	b.n	8007f7c <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fee:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b40      	cmp	r3, #64	@ 0x40
 8007ff6:	d008      	beq.n	800800a <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007ffe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008002:	4620      	mov	r0, r4
 8008004:	f7f8 fc8a 	bl	800091c <HAL_I2C_MasterTxCpltCallback>
 8008008:	e7b8      	b.n	8007f7c <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800a:	2300      	movs	r3, #0
 800800c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008010:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008014:	4620      	mov	r0, r4
 8008016:	f7ff fd0b 	bl	8007a30 <HAL_I2C_MemTxCpltCallback>
 800801a:	e7af      	b.n	8007f7c <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801c:	2300      	movs	r3, #0
 800801e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008022:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008026:	4620      	mov	r0, r4
 8008028:	f7f8 fc7e 	bl	8000928 <HAL_I2C_MemRxCpltCallback>
 800802c:	e7a6      	b.n	8007f7c <I2C_ITMasterCplt+0x7c>

0800802e <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 800802e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008032:	2b01      	cmp	r3, #1
 8008034:	f000 80b9 	beq.w	80081aa <I2C_Master_ISR_IT+0x17c>
{
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	4604      	mov	r4, r0
 800803e:	460d      	mov	r5, r1
 8008040:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8008042:	2301      	movs	r3, #1
 8008044:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008048:	f011 0f10 	tst.w	r1, #16
 800804c:	d002      	beq.n	8008054 <I2C_Master_ISR_IT+0x26>
 800804e:	f012 0f10 	tst.w	r2, #16
 8008052:	d122      	bne.n	800809a <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008054:	f015 0f04 	tst.w	r5, #4
 8008058:	d029      	beq.n	80080ae <I2C_Master_ISR_IT+0x80>
 800805a:	f016 0f04 	tst.w	r6, #4
 800805e:	d026      	beq.n	80080ae <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008060:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008068:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800806a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800806c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800806e:	3301      	adds	r3, #1
 8008070:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8008072:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008074:	3b01      	subs	r3, #1
 8008076:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8008078:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29b      	uxth	r3, r3
 8008080:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008082:	f015 0f20 	tst.w	r5, #32
 8008086:	d003      	beq.n	8008090 <I2C_Master_ISR_IT+0x62>
 8008088:	f016 0f20 	tst.w	r6, #32
 800808c:	f040 8088 	bne.w	80081a0 <I2C_Master_ISR_IT+0x172>
  __HAL_UNLOCK(hi2c);
 8008090:	2000      	movs	r0, #0
 8008092:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8008096:	b002      	add	sp, #8
 8008098:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800809a:	6803      	ldr	r3, [r0, #0]
 800809c:	2210      	movs	r2, #16
 800809e:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80080a2:	f043 0304 	orr.w	r3, r3, #4
 80080a6:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Flush_TXDR(hi2c);
 80080a8:	f7fe fcee 	bl	8006a88 <I2C_Flush_TXDR>
 80080ac:	e7e9      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080ae:	f015 0f02 	tst.w	r5, #2
 80080b2:	d012      	beq.n	80080da <I2C_Master_ISR_IT+0xac>
 80080b4:	f016 0f02 	tst.w	r6, #2
 80080b8:	d00f      	beq.n	80080da <I2C_Master_ISR_IT+0xac>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080bc:	6823      	ldr	r3, [r4, #0]
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr++;
 80080c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080c4:	3301      	adds	r3, #1
 80080c6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 80080c8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80080ca:	3b01      	subs	r3, #1
 80080cc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 80080ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80080d8:	e7d3      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80080da:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80080de:	d03f      	beq.n	8008160 <I2C_Master_ISR_IT+0x132>
 80080e0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80080e4:	d03c      	beq.n	8008160 <I2C_Master_ISR_IT+0x132>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	b35b      	cbz	r3, 8008144 <I2C_Master_ISR_IT+0x116>
 80080ec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80080ee:	bb4b      	cbnz	r3, 8008144 <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2bff      	cmp	r3, #255	@ 0xff
 80080fe:	d80e      	bhi.n	800811e <I2C_Master_ISR_IT+0xf0>
        hi2c->XferSize = hi2c->XferCount;
 8008100:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008102:	b292      	uxth	r2, r2
 8008104:	8522      	strh	r2, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008106:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800810c:	d011      	beq.n	8008132 <I2C_Master_ISR_IT+0x104>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800810e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008110:	2000      	movs	r0, #0
 8008112:	9000      	str	r0, [sp, #0]
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	4620      	mov	r0, r4
 8008118:	f7fe fcc7 	bl	8006aaa <I2C_TransferConfig>
 800811c:	e7b1      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800811e:	22ff      	movs	r2, #255	@ 0xff
 8008120:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800812a:	4620      	mov	r0, r4
 800812c:	f7fe fcbd 	bl	8006aaa <I2C_TransferConfig>
 8008130:	e7a7      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008132:	2300      	movs	r3, #0
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	4620      	mov	r0, r4
 800813e:	f7fe fcb4 	bl	8006aaa <I2C_TransferConfig>
 8008142:	e79e      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800814c:	d103      	bne.n	8008156 <I2C_Master_ISR_IT+0x128>
        I2C_ITMasterSeqCplt(hi2c);
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff fb7a 	bl	8007848 <I2C_ITMasterSeqCplt>
 8008154:	e795      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008156:	2140      	movs	r1, #64	@ 0x40
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff fc83 	bl	8007a64 <I2C_ITError>
 800815e:	e790      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008160:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8008164:	d08d      	beq.n	8008082 <I2C_Master_ISR_IT+0x54>
 8008166:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800816a:	d08a      	beq.n	8008082 <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 800816c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	b98b      	cbnz	r3, 8008196 <I2C_Master_ISR_IT+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800817a:	d182      	bne.n	8008082 <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800817c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800817e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8008182:	d104      	bne.n	800818e <I2C_Master_ISR_IT+0x160>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800818a:	605a      	str	r2, [r3, #4]
 800818c:	e779      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
          I2C_ITMasterSeqCplt(hi2c);
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff fb5a 	bl	8007848 <I2C_ITMasterSeqCplt>
 8008194:	e775      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008196:	2140      	movs	r1, #64	@ 0x40
 8008198:	4620      	mov	r0, r4
 800819a:	f7ff fc63 	bl	8007a64 <I2C_ITError>
 800819e:	e770      	b.n	8008082 <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80081a0:	4629      	mov	r1, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff feac 	bl	8007f00 <I2C_ITMasterCplt>
 80081a8:	e772      	b.n	8008090 <I2C_Master_ISR_IT+0x62>
  __HAL_LOCK(hi2c);
 80081aa:	2002      	movs	r0, #2
}
 80081ac:	4770      	bx	lr
	...

080081b0 <I2C_Slave_ISR_DMA>:
{
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80081b2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 80081b4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	f000 8100 	beq.w	80083be <I2C_Slave_ISR_DMA+0x20e>
 80081be:	4604      	mov	r4, r0
 80081c0:	460d      	mov	r5, r1
 80081c2:	4616      	mov	r6, r2
 80081c4:	2301      	movs	r3, #1
 80081c6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80081ca:	f011 0f20 	tst.w	r1, #32
 80081ce:	d002      	beq.n	80081d6 <I2C_Slave_ISR_DMA+0x26>
 80081d0:	f012 0f20 	tst.w	r2, #32
 80081d4:	d148      	bne.n	8008268 <I2C_Slave_ISR_DMA+0xb8>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081d6:	f015 0f10 	tst.w	r5, #16
 80081da:	f000 80e1 	beq.w	80083a0 <I2C_Slave_ISR_DMA+0x1f0>
 80081de:	f016 0f10 	tst.w	r6, #16
 80081e2:	f000 80dd 	beq.w	80083a0 <I2C_Slave_ISR_DMA+0x1f0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80081e6:	f416 4f40 	tst.w	r6, #49152	@ 0xc000
 80081ea:	f000 80d5 	beq.w	8008398 <I2C_Slave_ISR_DMA+0x1e8>
      if (hi2c->hdmarx != NULL)
 80081ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d044      	beq.n	800827e <I2C_Slave_ISR_DMA+0xce>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80081f4:	f416 4200 	ands.w	r2, r6, #32768	@ 0x8000
 80081f8:	d042      	beq.n	8008280 <I2C_Slave_ISR_DMA+0xd0>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4971      	ldr	r1, [pc, #452]	@ (80083c4 <I2C_Slave_ISR_DMA+0x214>)
 80081fe:	4a72      	ldr	r2, [pc, #456]	@ (80083c8 <I2C_Slave_ISR_DMA+0x218>)
 8008200:	4293      	cmp	r3, r2
 8008202:	bf18      	it	ne
 8008204:	428b      	cmpne	r3, r1
 8008206:	d032      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008208:	3218      	adds	r2, #24
 800820a:	4293      	cmp	r3, r2
 800820c:	d02f      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800820e:	3218      	adds	r2, #24
 8008210:	4293      	cmp	r3, r2
 8008212:	d02c      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008214:	3218      	adds	r2, #24
 8008216:	4293      	cmp	r3, r2
 8008218:	d029      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800821a:	3218      	adds	r2, #24
 800821c:	4293      	cmp	r3, r2
 800821e:	d026      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008220:	3218      	adds	r2, #24
 8008222:	4293      	cmp	r3, r2
 8008224:	d023      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008226:	3218      	adds	r2, #24
 8008228:	4293      	cmp	r3, r2
 800822a:	d020      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800822c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008230:	4293      	cmp	r3, r2
 8008232:	d01c      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008234:	3218      	adds	r2, #24
 8008236:	4293      	cmp	r3, r2
 8008238:	d019      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800823a:	3218      	adds	r2, #24
 800823c:	4293      	cmp	r3, r2
 800823e:	d016      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008240:	3218      	adds	r2, #24
 8008242:	4293      	cmp	r3, r2
 8008244:	d013      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008246:	3218      	adds	r2, #24
 8008248:	4293      	cmp	r3, r2
 800824a:	d010      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800824c:	3218      	adds	r2, #24
 800824e:	4293      	cmp	r3, r2
 8008250:	d00d      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008252:	3218      	adds	r2, #24
 8008254:	4293      	cmp	r3, r2
 8008256:	d00a      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 8008258:	3218      	adds	r2, #24
 800825a:	4293      	cmp	r3, r2
 800825c:	d007      	beq.n	800826e <I2C_Slave_ISR_DMA+0xbe>
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	fab3 f383 	clz	r3, r3
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	e006      	b.n	8008276 <I2C_Slave_ISR_DMA+0xc6>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008268:	f7ff fc80 	bl	8007b6c <I2C_ITSlaveCplt>
 800826c:	e7b3      	b.n	80081d6 <I2C_Slave_ISR_DMA+0x26>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	fab3 f383 	clz	r3, r3
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	2b00      	cmp	r3, #0
 8008278:	d13f      	bne.n	80082fa <I2C_Slave_ISR_DMA+0x14a>
  uint32_t treatdmanack = 0U;
 800827a:	2200      	movs	r2, #0
 800827c:	e000      	b.n	8008280 <I2C_Slave_ISR_DMA+0xd0>
 800827e:	2200      	movs	r2, #0
      if (hi2c->hdmatx != NULL)
 8008280:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d040      	beq.n	8008308 <I2C_Slave_ISR_DMA+0x158>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008286:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 800828a:	d03d      	beq.n	8008308 <I2C_Slave_ISR_DMA+0x158>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	484d      	ldr	r0, [pc, #308]	@ (80083c4 <I2C_Slave_ISR_DMA+0x214>)
 8008290:	494d      	ldr	r1, [pc, #308]	@ (80083c8 <I2C_Slave_ISR_DMA+0x218>)
 8008292:	428b      	cmp	r3, r1
 8008294:	bf18      	it	ne
 8008296:	4283      	cmpne	r3, r0
 8008298:	d031      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 800829a:	3118      	adds	r1, #24
 800829c:	428b      	cmp	r3, r1
 800829e:	d02e      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082a0:	3118      	adds	r1, #24
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d02b      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082a6:	3118      	adds	r1, #24
 80082a8:	428b      	cmp	r3, r1
 80082aa:	d028      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082ac:	3118      	adds	r1, #24
 80082ae:	428b      	cmp	r3, r1
 80082b0:	d025      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082b2:	3118      	adds	r1, #24
 80082b4:	428b      	cmp	r3, r1
 80082b6:	d022      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082b8:	3118      	adds	r1, #24
 80082ba:	428b      	cmp	r3, r1
 80082bc:	d01f      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082be:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d01b      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082c6:	3118      	adds	r1, #24
 80082c8:	428b      	cmp	r3, r1
 80082ca:	d018      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082cc:	3118      	adds	r1, #24
 80082ce:	428b      	cmp	r3, r1
 80082d0:	d015      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082d2:	3118      	adds	r1, #24
 80082d4:	428b      	cmp	r3, r1
 80082d6:	d012      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082d8:	3118      	adds	r1, #24
 80082da:	428b      	cmp	r3, r1
 80082dc:	d00f      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082de:	3118      	adds	r1, #24
 80082e0:	428b      	cmp	r3, r1
 80082e2:	d00c      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082e4:	3118      	adds	r1, #24
 80082e6:	428b      	cmp	r3, r1
 80082e8:	d009      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082ea:	3118      	adds	r1, #24
 80082ec:	428b      	cmp	r3, r1
 80082ee:	d006      	beq.n	80082fe <I2C_Slave_ISR_DMA+0x14e>
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	e005      	b.n	8008306 <I2C_Slave_ISR_DMA+0x156>
            treatdmanack = 1U;
 80082fa:	2201      	movs	r2, #1
 80082fc:	e7c0      	b.n	8008280 <I2C_Slave_ISR_DMA+0xd0>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	fab3 f383 	clz	r3, r3
 8008304:	095b      	lsrs	r3, r3, #5
 8008306:	b9d3      	cbnz	r3, 800833e <I2C_Slave_ISR_DMA+0x18e>
      if (treatdmanack == 1U)
 8008308:	2a01      	cmp	r2, #1
 800830a:	d018      	beq.n	800833e <I2C_Slave_ISR_DMA+0x18e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	2210      	movs	r2, #16
 8008310:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008312:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008314:	f043 0304 	orr.w	r3, r3, #4
 8008318:	6463      	str	r3, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 800831a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800831e:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008320:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8008324:	bf18      	it	ne
 8008326:	2f00      	cmpne	r7, #0
 8008328:	d140      	bne.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800832a:	3b21      	subs	r3, #33	@ 0x21
 800832c:	2b09      	cmp	r3, #9
 800832e:	d82b      	bhi.n	8008388 <I2C_Slave_ISR_DMA+0x1d8>
 8008330:	e8df f003 	tbb	[pc, r3]
 8008334:	2a2a2f28 	.word	0x2a2a2f28
 8008338:	2a2a2a2a 	.word	0x2a2a2a2a
 800833c:	2f28      	.short	0x2f28
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800833e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b28      	cmp	r3, #40	@ 0x28
 8008346:	d008      	beq.n	800835a <I2C_Slave_ISR_DMA+0x1aa>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008348:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b29      	cmp	r3, #41	@ 0x29
 8008350:	d00b      	beq.n	800836a <I2C_Slave_ISR_DMA+0x1ba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	2210      	movs	r2, #16
 8008356:	61da      	str	r2, [r3, #28]
 8008358:	e028      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800835a:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 800835e:	d1f3      	bne.n	8008348 <I2C_Slave_ISR_DMA+0x198>
          I2C_ITListenCplt(hi2c, ITFlags);
 8008360:	4629      	mov	r1, r5
 8008362:	4620      	mov	r0, r4
 8008364:	f7ff fb30 	bl	80079c8 <I2C_ITListenCplt>
 8008368:	e020      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800836a:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 800836e:	d0f0      	beq.n	8008352 <I2C_Slave_ISR_DMA+0x1a2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	2210      	movs	r2, #16
 8008374:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8008376:	4620      	mov	r0, r4
 8008378:	f7fe fb86 	bl	8006a88 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 800837c:	4620      	mov	r0, r4
 800837e:	f7ff fa8f 	bl	80078a0 <I2C_ITSlaveSeqCplt>
 8008382:	e013      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008384:	2321      	movs	r3, #33	@ 0x21
 8008386:	6323      	str	r3, [r4, #48]	@ 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008388:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800838a:	4620      	mov	r0, r4
 800838c:	f7ff fb6a 	bl	8007a64 <I2C_ITError>
 8008390:	e00c      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008392:	2322      	movs	r3, #34	@ 0x22
 8008394:	6323      	str	r3, [r4, #48]	@ 0x30
 8008396:	e7f7      	b.n	8008388 <I2C_Slave_ISR_DMA+0x1d8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	61da      	str	r2, [r3, #28]
 800839e:	e005      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80083a0:	f015 0f08 	tst.w	r5, #8
 80083a4:	d002      	beq.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
 80083a6:	f016 0f08 	tst.w	r6, #8
 80083aa:	d103      	bne.n	80083b4 <I2C_Slave_ISR_DMA+0x204>
  __HAL_UNLOCK(hi2c);
 80083ac:	2000      	movs	r0, #0
 80083ae:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 80083b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80083b4:	4629      	mov	r1, r5
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7ff fab4 	bl	8007924 <I2C_ITAddrCplt>
 80083bc:	e7f6      	b.n	80083ac <I2C_Slave_ISR_DMA+0x1fc>
  __HAL_LOCK(hi2c);
 80083be:	2002      	movs	r0, #2
 80083c0:	e7f7      	b.n	80083b2 <I2C_Slave_ISR_DMA+0x202>
 80083c2:	bf00      	nop
 80083c4:	40020010 	.word	0x40020010
 80083c8:	40020028 	.word	0x40020028

080083cc <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80083cc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	f000 809a 	beq.w	800850a <I2C_Master_ISR_DMA+0x13e>
{
 80083d6:	b510      	push	{r4, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80083dc:	2301      	movs	r3, #1
 80083de:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80083e2:	f011 0f10 	tst.w	r1, #16
 80083e6:	d002      	beq.n	80083ee <I2C_Master_ISR_DMA+0x22>
 80083e8:	f012 0f10 	tst.w	r2, #16
 80083ec:	d132      	bne.n	8008454 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80083ee:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80083f2:	d060      	beq.n	80084b6 <I2C_Master_ISR_DMA+0xea>
 80083f4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80083f8:	d05d      	beq.n	80084b6 <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80083fa:	6822      	ldr	r2, [r4, #0]
 80083fc:	6813      	ldr	r3, [r2, #0]
 80083fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008402:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8008404:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d046      	beq.n	800849a <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	6859      	ldr	r1, [r3, #4]
 8008410:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008414:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	2bff      	cmp	r3, #255	@ 0xff
 800841a:	d92d      	bls.n	8008478 <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800841c:	23ff      	movs	r3, #255	@ 0xff
 800841e:	8523      	strh	r3, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008420:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008424:	2200      	movs	r2, #0
 8008426:	9200      	str	r2, [sp, #0]
 8008428:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800842c:	4620      	mov	r0, r4
 800842e:	f7fe fb3c 	bl	8006aaa <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8008432:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	b29b      	uxth	r3, r3
 800843c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800843e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b22      	cmp	r3, #34	@ 0x22
 8008446:	d022      	beq.n	800848e <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e00c      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008454:	6803      	ldr	r3, [r0, #0]
 8008456:	2210      	movs	r2, #16
 8008458:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800845a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800845c:	f043 0304 	orr.w	r3, r3, #4
 8008460:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008462:	2120      	movs	r1, #32
 8008464:	f7fe fb40 	bl	8006ae8 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8008468:	4620      	mov	r0, r4
 800846a:	f7fe fb0d 	bl	8006a88 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 800846e:	2000      	movs	r0, #0
 8008470:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8008474:	b002      	add	sp, #8
 8008476:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8008478:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800847a:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800847c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800847e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008482:	d001      	beq.n	8008488 <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
 8008484:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008486:	e7cd      	b.n	8008424 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8008488:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800848c:	e7ca      	b.n	8008424 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	6813      	ldr	r3, [r2, #0]
 8008492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	e7e9      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80084a2:	d103      	bne.n	80084ac <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff f9cf 	bl	8007848 <I2C_ITMasterSeqCplt>
 80084aa:	e7e0      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084ac:	2140      	movs	r1, #64	@ 0x40
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff fad8 	bl	8007a64 <I2C_ITError>
 80084b4:	e7db      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80084b6:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80084ba:	d01c      	beq.n	80084f6 <I2C_Master_ISR_DMA+0x12a>
 80084bc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80084c0:	d019      	beq.n	80084f6 <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
 80084c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	b98b      	cbnz	r3, 80084ec <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80084d0:	d1cd      	bne.n	800846e <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80084d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80084d4:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80084d8:	d104      	bne.n	80084e4 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084e0:	605a      	str	r2, [r3, #4]
 80084e2:	e7c4      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
 80084e4:	4620      	mov	r0, r4
 80084e6:	f7ff f9af 	bl	8007848 <I2C_ITMasterSeqCplt>
 80084ea:	e7c0      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084ec:	2140      	movs	r1, #64	@ 0x40
 80084ee:	4620      	mov	r0, r4
 80084f0:	f7ff fab8 	bl	8007a64 <I2C_ITError>
 80084f4:	e7bb      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80084f6:	f011 0f20 	tst.w	r1, #32
 80084fa:	d0b8      	beq.n	800846e <I2C_Master_ISR_DMA+0xa2>
 80084fc:	f012 0f20 	tst.w	r2, #32
 8008500:	d0b5      	beq.n	800846e <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008502:	4620      	mov	r0, r4
 8008504:	f7ff fcfc 	bl	8007f00 <I2C_ITMasterCplt>
 8008508:	e7b1      	b.n	800846e <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
 800850a:	2002      	movs	r0, #2
}
 800850c:	4770      	bx	lr
	...

08008510 <I2C_DMAError>:
{
 8008510:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008512:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 8008514:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008516:	2b00      	cmp	r3, #0
 8008518:	d077      	beq.n	800860a <I2C_DMAError+0xfa>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4948      	ldr	r1, [pc, #288]	@ (8008640 <I2C_DMAError+0x130>)
 800851e:	4a49      	ldr	r2, [pc, #292]	@ (8008644 <I2C_DMAError+0x134>)
 8008520:	4293      	cmp	r3, r2
 8008522:	bf18      	it	ne
 8008524:	428b      	cmpne	r3, r1
 8008526:	d02f      	beq.n	8008588 <I2C_DMAError+0x78>
 8008528:	3218      	adds	r2, #24
 800852a:	4293      	cmp	r3, r2
 800852c:	d02c      	beq.n	8008588 <I2C_DMAError+0x78>
 800852e:	3218      	adds	r2, #24
 8008530:	4293      	cmp	r3, r2
 8008532:	d029      	beq.n	8008588 <I2C_DMAError+0x78>
 8008534:	3218      	adds	r2, #24
 8008536:	4293      	cmp	r3, r2
 8008538:	d026      	beq.n	8008588 <I2C_DMAError+0x78>
 800853a:	3218      	adds	r2, #24
 800853c:	4293      	cmp	r3, r2
 800853e:	d023      	beq.n	8008588 <I2C_DMAError+0x78>
 8008540:	3218      	adds	r2, #24
 8008542:	4293      	cmp	r3, r2
 8008544:	d020      	beq.n	8008588 <I2C_DMAError+0x78>
 8008546:	3218      	adds	r2, #24
 8008548:	4293      	cmp	r3, r2
 800854a:	d01d      	beq.n	8008588 <I2C_DMAError+0x78>
 800854c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8008550:	4293      	cmp	r3, r2
 8008552:	d019      	beq.n	8008588 <I2C_DMAError+0x78>
 8008554:	3218      	adds	r2, #24
 8008556:	4293      	cmp	r3, r2
 8008558:	d016      	beq.n	8008588 <I2C_DMAError+0x78>
 800855a:	3218      	adds	r2, #24
 800855c:	4293      	cmp	r3, r2
 800855e:	d013      	beq.n	8008588 <I2C_DMAError+0x78>
 8008560:	3218      	adds	r2, #24
 8008562:	4293      	cmp	r3, r2
 8008564:	d010      	beq.n	8008588 <I2C_DMAError+0x78>
 8008566:	3218      	adds	r2, #24
 8008568:	4293      	cmp	r3, r2
 800856a:	d00d      	beq.n	8008588 <I2C_DMAError+0x78>
 800856c:	3218      	adds	r2, #24
 800856e:	4293      	cmp	r3, r2
 8008570:	d00a      	beq.n	8008588 <I2C_DMAError+0x78>
 8008572:	3218      	adds	r2, #24
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <I2C_DMAError+0x78>
 8008578:	3218      	adds	r2, #24
 800857a:	4293      	cmp	r3, r2
 800857c:	d004      	beq.n	8008588 <I2C_DMAError+0x78>
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	fab3 f383 	clz	r3, r3
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	e003      	b.n	8008590 <I2C_DMAError+0x80>
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	fab3 f383 	clz	r3, r3
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	2b00      	cmp	r3, #0
 8008592:	d13c      	bne.n	800860e <I2C_DMAError+0xfe>
  uint32_t treatdmaerror = 0U;
 8008594:	2500      	movs	r5, #0
  if (hi2c->hdmarx != NULL)
 8008596:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d040      	beq.n	800861e <I2C_DMAError+0x10e>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4928      	ldr	r1, [pc, #160]	@ (8008640 <I2C_DMAError+0x130>)
 80085a0:	4a28      	ldr	r2, [pc, #160]	@ (8008644 <I2C_DMAError+0x134>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bf18      	it	ne
 80085a6:	428b      	cmpne	r3, r1
 80085a8:	d033      	beq.n	8008612 <I2C_DMAError+0x102>
 80085aa:	3218      	adds	r2, #24
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d030      	beq.n	8008612 <I2C_DMAError+0x102>
 80085b0:	3218      	adds	r2, #24
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d02d      	beq.n	8008612 <I2C_DMAError+0x102>
 80085b6:	3218      	adds	r2, #24
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d02a      	beq.n	8008612 <I2C_DMAError+0x102>
 80085bc:	3218      	adds	r2, #24
 80085be:	4293      	cmp	r3, r2
 80085c0:	d027      	beq.n	8008612 <I2C_DMAError+0x102>
 80085c2:	3218      	adds	r2, #24
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d024      	beq.n	8008612 <I2C_DMAError+0x102>
 80085c8:	3218      	adds	r2, #24
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d021      	beq.n	8008612 <I2C_DMAError+0x102>
 80085ce:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01d      	beq.n	8008612 <I2C_DMAError+0x102>
 80085d6:	3218      	adds	r2, #24
 80085d8:	4293      	cmp	r3, r2
 80085da:	d01a      	beq.n	8008612 <I2C_DMAError+0x102>
 80085dc:	3218      	adds	r2, #24
 80085de:	4293      	cmp	r3, r2
 80085e0:	d017      	beq.n	8008612 <I2C_DMAError+0x102>
 80085e2:	3218      	adds	r2, #24
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d014      	beq.n	8008612 <I2C_DMAError+0x102>
 80085e8:	3218      	adds	r2, #24
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d011      	beq.n	8008612 <I2C_DMAError+0x102>
 80085ee:	3218      	adds	r2, #24
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d00e      	beq.n	8008612 <I2C_DMAError+0x102>
 80085f4:	3218      	adds	r2, #24
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00b      	beq.n	8008612 <I2C_DMAError+0x102>
 80085fa:	3218      	adds	r2, #24
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d008      	beq.n	8008612 <I2C_DMAError+0x102>
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	fab3 f383 	clz	r3, r3
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	e007      	b.n	800861a <I2C_DMAError+0x10a>
  uint32_t treatdmaerror = 0U;
 800860a:	2500      	movs	r5, #0
 800860c:	e7c3      	b.n	8008596 <I2C_DMAError+0x86>
      treatdmaerror = 1U;
 800860e:	2501      	movs	r5, #1
 8008610:	e7c1      	b.n	8008596 <I2C_DMAError+0x86>
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	fab3 f383 	clz	r3, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	b103      	cbz	r3, 800861e <I2C_DMAError+0x10e>
      treatdmaerror = 1U;
 800861c:	2501      	movs	r5, #1
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800861e:	f7fd fb48 	bl	8005cb2 <HAL_DMA_GetError>
 8008622:	2802      	cmp	r0, #2
 8008624:	d000      	beq.n	8008628 <I2C_DMAError+0x118>
 8008626:	b905      	cbnz	r5, 800862a <I2C_DMAError+0x11a>
}
 8008628:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6853      	ldr	r3, [r2, #4]
 800862e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008632:	6053      	str	r3, [r2, #4]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008634:	2110      	movs	r1, #16
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff fa14 	bl	8007a64 <I2C_ITError>
}
 800863c:	e7f4      	b.n	8008628 <I2C_DMAError+0x118>
 800863e:	bf00      	nop
 8008640:	40020010 	.word	0x40020010
 8008644:	40020028 	.word	0x40020028

08008648 <I2C_DMAMasterTransmitCplt>:
{
 8008648:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800864a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800864c:	6822      	ldr	r2, [r4, #0]
 800864e:	6813      	ldr	r3, [r2, #0]
 8008650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008654:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8008656:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008658:	b29b      	uxth	r3, r3
 800865a:	b1ab      	cbz	r3, 8008688 <I2C_DMAMasterTransmitCplt+0x40>
    hi2c->pBuffPtr += hi2c->XferSize;
 800865c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800865e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008660:	4419      	add	r1, r3
 8008662:	6261      	str	r1, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008664:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	2bff      	cmp	r3, #255	@ 0xff
 800866a:	d912      	bls.n	8008692 <I2C_DMAMasterTransmitCplt+0x4a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800866c:	23ff      	movs	r3, #255	@ 0xff
 800866e:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8008674:	3228      	adds	r2, #40	@ 0x28
 8008676:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8008678:	f7fc fb58 	bl	8004d2c <HAL_DMA_Start_IT>
 800867c:	b160      	cbz	r0, 8008698 <I2C_DMAMasterTransmitCplt+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800867e:	2110      	movs	r1, #16
 8008680:	4620      	mov	r0, r4
 8008682:	f7ff f9ef 	bl	8007a64 <I2C_ITError>
}
 8008686:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008688:	2120      	movs	r1, #32
 800868a:	4620      	mov	r0, r4
 800868c:	f7fe fa2c 	bl	8006ae8 <I2C_Enable_IRQ>
 8008690:	e7f9      	b.n	8008686 <I2C_DMAMasterTransmitCplt+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8008692:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008694:	8523      	strh	r3, [r4, #40]	@ 0x28
 8008696:	e7eb      	b.n	8008670 <I2C_DMAMasterTransmitCplt+0x28>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008698:	2140      	movs	r1, #64	@ 0x40
 800869a:	4620      	mov	r0, r4
 800869c:	f7fe fa24 	bl	8006ae8 <I2C_Enable_IRQ>
}
 80086a0:	e7f1      	b.n	8008686 <I2C_DMAMasterTransmitCplt+0x3e>

080086a2 <I2C_DMAMasterReceiveCplt>:
{
 80086a2:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086a4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	6813      	ldr	r3, [r2, #0]
 80086aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086ae:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80086b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	b1ab      	cbz	r3, 80086e2 <I2C_DMAMasterReceiveCplt+0x40>
    hi2c->pBuffPtr += hi2c->XferSize;
 80086b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086b8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80086ba:	441a      	add	r2, r3
 80086bc:	6262      	str	r2, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2bff      	cmp	r3, #255	@ 0xff
 80086c4:	d912      	bls.n	80086ec <I2C_DMAMasterReceiveCplt+0x4a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086c6:	23ff      	movs	r3, #255	@ 0xff
 80086c8:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80086ca:	6821      	ldr	r1, [r4, #0]
 80086cc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80086ce:	3124      	adds	r1, #36	@ 0x24
 80086d0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80086d2:	f7fc fb2b 	bl	8004d2c <HAL_DMA_Start_IT>
 80086d6:	b160      	cbz	r0, 80086f2 <I2C_DMAMasterReceiveCplt+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80086d8:	2110      	movs	r1, #16
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff f9c2 	bl	8007a64 <I2C_ITError>
}
 80086e0:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80086e2:	2120      	movs	r1, #32
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7fe f9ff 	bl	8006ae8 <I2C_Enable_IRQ>
 80086ea:	e7f9      	b.n	80086e0 <I2C_DMAMasterReceiveCplt+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80086ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086ee:	8523      	strh	r3, [r4, #40]	@ 0x28
 80086f0:	e7eb      	b.n	80086ca <I2C_DMAMasterReceiveCplt+0x28>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80086f2:	2140      	movs	r1, #64	@ 0x40
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7fe f9f7 	bl	8006ae8 <I2C_Enable_IRQ>
}
 80086fa:	e7f1      	b.n	80086e0 <I2C_DMAMasterReceiveCplt+0x3e>

080086fc <I2C_DMAAbort>:
{
 80086fc:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80086fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hi2c->hdmatx != NULL)
 8008700:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8008702:	b10b      	cbz	r3, 8008708 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008704:	2200      	movs	r2, #0
 8008706:	651a      	str	r2, [r3, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8008708:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800870a:	b10b      	cbz	r3, 8008710 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800870c:	2200      	movs	r2, #0
 800870e:	651a      	str	r2, [r3, #80]	@ 0x50
  I2C_TreatErrorCallback(hi2c);
 8008710:	f7ff f991 	bl	8007a36 <I2C_TreatErrorCallback>
}
 8008714:	bd08      	pop	{r3, pc}

08008716 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008716:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008718:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	2a20      	cmp	r2, #32
 8008720:	d123      	bne.n	800876a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008722:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008726:	2a01      	cmp	r2, #1
 8008728:	d021      	beq.n	800876e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800872a:	2201      	movs	r2, #1
 800872c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008730:	2224      	movs	r2, #36	@ 0x24
 8008732:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008736:	6800      	ldr	r0, [r0, #0]
 8008738:	6802      	ldr	r2, [r0, #0]
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	6802      	ldr	r2, [r0, #0]
 8008744:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008748:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	6802      	ldr	r2, [r0, #0]
 800874e:	4311      	orrs	r1, r2
 8008750:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	680a      	ldr	r2, [r1, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800875c:	2220      	movs	r2, #32
 800875e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008762:	2000      	movs	r0, #0
 8008764:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8008768:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800876a:	2002      	movs	r0, #2
 800876c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800876e:	2002      	movs	r0, #2
  }
}
 8008770:	4770      	bx	lr

08008772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008772:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008774:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	2a20      	cmp	r2, #32
 800877c:	d121      	bne.n	80087c2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008782:	2a01      	cmp	r2, #1
 8008784:	d01f      	beq.n	80087c6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8008786:	2201      	movs	r2, #1
 8008788:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800878c:	2224      	movs	r2, #36	@ 0x24
 800878e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	6802      	ldr	r2, [r0, #0]
 8008796:	f022 0201 	bic.w	r2, r2, #1
 800879a:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087a0:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087a8:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087aa:	6819      	ldr	r1, [r3, #0]
 80087ac:	680a      	ldr	r2, [r1, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087b4:	2220      	movs	r2, #32
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087ba:	2000      	movs	r0, #0
 80087bc:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80087c0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80087c2:	2002      	movs	r0, #2
 80087c4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80087c6:	2002      	movs	r0, #2
  }
}
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80087cc:	4b13      	ldr	r3, [pc, #76]	@ (800881c <HAL_PWREx_ConfigSupply+0x50>)
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f013 0f04 	tst.w	r3, #4
 80087d4:	d107      	bne.n	80087e6 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087d6:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_PWREx_ConfigSupply+0x50>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	4283      	cmp	r3, r0
 80087e0:	d01a      	beq.n	8008818 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087e2:	2001      	movs	r0, #1
 80087e4:	4770      	bx	lr
{
 80087e6:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087e8:	4a0c      	ldr	r2, [pc, #48]	@ (800881c <HAL_PWREx_ConfigSupply+0x50>)
 80087ea:	68d3      	ldr	r3, [r2, #12]
 80087ec:	f023 0307 	bic.w	r3, r3, #7
 80087f0:	4303      	orrs	r3, r0
 80087f2:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087f4:	f7fa fe6a 	bl	80034cc <HAL_GetTick>
 80087f8:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087fa:	4b08      	ldr	r3, [pc, #32]	@ (800881c <HAL_PWREx_ConfigSupply+0x50>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008802:	d107      	bne.n	8008814 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008804:	f7fa fe62 	bl	80034cc <HAL_GetTick>
 8008808:	1b00      	subs	r0, r0, r4
 800880a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800880e:	d9f4      	bls.n	80087fa <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8008810:	2001      	movs	r0, #1
 8008812:	e000      	b.n	8008816 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008814:	2000      	movs	r0, #0
}
 8008816:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8008818:	2000      	movs	r0, #0
}
 800881a:	4770      	bx	lr
 800881c:	58024800 	.word	0x58024800

08008820 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008820:	2800      	cmp	r0, #0
 8008822:	f000 8318 	beq.w	8008e56 <HAL_RCC_OscConfig+0x636>
{
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800882a:	6803      	ldr	r3, [r0, #0]
 800882c:	f013 0f01 	tst.w	r3, #1
 8008830:	d025      	beq.n	800887e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008832:	4a94      	ldr	r2, [pc, #592]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008834:	6913      	ldr	r3, [r2, #16]
 8008836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800883a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800883c:	2b10      	cmp	r3, #16
 800883e:	d015      	beq.n	800886c <HAL_RCC_OscConfig+0x4c>
 8008840:	2b18      	cmp	r3, #24
 8008842:	d00f      	beq.n	8008864 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800884a:	d03f      	beq.n	80088cc <HAL_RCC_OscConfig+0xac>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d153      	bne.n	80088f8 <HAL_RCC_OscConfig+0xd8>
 8008850:	4b8c      	ldr	r3, [pc, #560]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	e038      	b.n	80088d6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008864:	f002 0203 	and.w	r2, r2, #3
 8008868:	2a02      	cmp	r2, #2
 800886a:	d1eb      	bne.n	8008844 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800886c:	4b85      	ldr	r3, [pc, #532]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008874:	d003      	beq.n	800887e <HAL_RCC_OscConfig+0x5e>
 8008876:	6863      	ldr	r3, [r4, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 82ee 	beq.w	8008e5a <HAL_RCC_OscConfig+0x63a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f013 0f02 	tst.w	r3, #2
 8008884:	f000 80a1 	beq.w	80089ca <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008888:	4a7e      	ldr	r2, [pc, #504]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800888a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800888c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800888e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8008892:	d05a      	beq.n	800894a <HAL_RCC_OscConfig+0x12a>
 8008894:	2b18      	cmp	r3, #24
 8008896:	d055      	beq.n	8008944 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008898:	68e3      	ldr	r3, [r4, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80de 	beq.w	8008a5c <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088a0:	4978      	ldr	r1, [pc, #480]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80088a2:	680a      	ldr	r2, [r1, #0]
 80088a4:	f022 0219 	bic.w	r2, r2, #25
 80088a8:	4313      	orrs	r3, r2
 80088aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fa fe0e 	bl	80034cc <HAL_GetTick>
 80088b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088b2:	4b74      	ldr	r3, [pc, #464]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f013 0f04 	tst.w	r3, #4
 80088ba:	f040 80ad 	bne.w	8008a18 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088be:	f7fa fe05 	bl	80034cc <HAL_GetTick>
 80088c2:	1b40      	subs	r0, r0, r5
 80088c4:	2802      	cmp	r0, #2
 80088c6:	d9f4      	bls.n	80088b2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 80088c8:	2003      	movs	r0, #3
 80088ca:	e2cd      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80088ce:	6813      	ldr	r3, [r2, #0]
 80088d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	b32b      	cbz	r3, 8008926 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 80088da:	f7fa fdf7 	bl	80034cc <HAL_GetTick>
 80088de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088e0:	4b68      	ldr	r3, [pc, #416]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80088e8:	d1c9      	bne.n	800887e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088ea:	f7fa fdef 	bl	80034cc <HAL_GetTick>
 80088ee:	1b40      	subs	r0, r0, r5
 80088f0:	2864      	cmp	r0, #100	@ 0x64
 80088f2:	d9f5      	bls.n	80088e0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 80088f4:	2003      	movs	r0, #3
 80088f6:	e2b7      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088fc:	d009      	beq.n	8008912 <HAL_RCC_OscConfig+0xf2>
 80088fe:	4b61      	ldr	r3, [pc, #388]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	e7e1      	b.n	80088d6 <HAL_RCC_OscConfig+0xb6>
 8008912:	4b5c      	ldr	r3, [pc, #368]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e7d7      	b.n	80088d6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8008926:	f7fa fdd1 	bl	80034cc <HAL_GetTick>
 800892a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800892c:	4b55      	ldr	r3, [pc, #340]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8008934:	d0a3      	beq.n	800887e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008936:	f7fa fdc9 	bl	80034cc <HAL_GetTick>
 800893a:	1b40      	subs	r0, r0, r5
 800893c:	2864      	cmp	r0, #100	@ 0x64
 800893e:	d9f5      	bls.n	800892c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8008940:	2003      	movs	r0, #3
 8008942:	e291      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008944:	f012 0f03 	tst.w	r2, #3
 8008948:	d1a6      	bne.n	8008898 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800894a:	4b4e      	ldr	r3, [pc, #312]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f013 0f04 	tst.w	r3, #4
 8008952:	d003      	beq.n	800895c <HAL_RCC_OscConfig+0x13c>
 8008954:	68e3      	ldr	r3, [r4, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 8281 	beq.w	8008e5e <HAL_RCC_OscConfig+0x63e>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800895c:	4a49      	ldr	r2, [pc, #292]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	f023 0319 	bic.w	r3, r3, #25
 8008964:	68e1      	ldr	r1, [r4, #12]
 8008966:	430b      	orrs	r3, r1
 8008968:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800896a:	f7fa fdaf 	bl	80034cc <HAL_GetTick>
 800896e:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008970:	4b44      	ldr	r3, [pc, #272]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f013 0f04 	tst.w	r3, #4
 8008978:	d106      	bne.n	8008988 <HAL_RCC_OscConfig+0x168>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800897a:	f7fa fda7 	bl	80034cc <HAL_GetTick>
 800897e:	1b40      	subs	r0, r0, r5
 8008980:	2802      	cmp	r0, #2
 8008982:	d9f5      	bls.n	8008970 <HAL_RCC_OscConfig+0x150>
              return HAL_TIMEOUT;
 8008984:	2003      	movs	r0, #3
 8008986:	e26f      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008988:	f7fa fdba 	bl	8003500 <HAL_GetREVID>
 800898c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008990:	4298      	cmp	r0, r3
 8008992:	d812      	bhi.n	80089ba <HAL_RCC_OscConfig+0x19a>
 8008994:	6922      	ldr	r2, [r4, #16]
 8008996:	2a40      	cmp	r2, #64	@ 0x40
 8008998:	d007      	beq.n	80089aa <HAL_RCC_OscConfig+0x18a>
 800899a:	493a      	ldr	r1, [pc, #232]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 800899c:	684b      	ldr	r3, [r1, #4]
 800899e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80089a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80089a6:	604b      	str	r3, [r1, #4]
 80089a8:	e00f      	b.n	80089ca <HAL_RCC_OscConfig+0x1aa>
 80089aa:	4a36      	ldr	r2, [pc, #216]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80089ac:	6853      	ldr	r3, [r2, #4]
 80089ae:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80089b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089b6:	6053      	str	r3, [r2, #4]
 80089b8:	e007      	b.n	80089ca <HAL_RCC_OscConfig+0x1aa>
 80089ba:	4a32      	ldr	r2, [pc, #200]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80089bc:	6853      	ldr	r3, [r2, #4]
 80089be:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80089c2:	6921      	ldr	r1, [r4, #16]
 80089c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80089c8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f013 0f10 	tst.w	r3, #16
 80089d0:	f000 8088 	beq.w	8008ae4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80089d6:	6913      	ldr	r3, [r2, #16]
 80089d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d056      	beq.n	8008a90 <HAL_RCC_OscConfig+0x270>
 80089e2:	2b18      	cmp	r3, #24
 80089e4:	d050      	beq.n	8008a88 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80089e6:	69e3      	ldr	r3, [r4, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 80b8 	beq.w	8008b5e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089ee:	4a25      	ldr	r2, [pc, #148]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 80089f0:	6813      	ldr	r3, [r2, #0]
 80089f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f8:	f7fa fd68 	bl	80034cc <HAL_GetTick>
 80089fc:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089fe:	4b21      	ldr	r3, [pc, #132]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008a06:	f040 8088 	bne.w	8008b1a <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008a0a:	f7fa fd5f 	bl	80034cc <HAL_GetTick>
 8008a0e:	1b40      	subs	r0, r0, r5
 8008a10:	2802      	cmp	r0, #2
 8008a12:	d9f4      	bls.n	80089fe <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8008a14:	2003      	movs	r0, #3
 8008a16:	e227      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a18:	f7fa fd72 	bl	8003500 <HAL_GetREVID>
 8008a1c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008a20:	4298      	cmp	r0, r3
 8008a22:	d812      	bhi.n	8008a4a <HAL_RCC_OscConfig+0x22a>
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	2a40      	cmp	r2, #64	@ 0x40
 8008a28:	d007      	beq.n	8008a3a <HAL_RCC_OscConfig+0x21a>
 8008a2a:	4916      	ldr	r1, [pc, #88]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a2c:	684b      	ldr	r3, [r1, #4]
 8008a2e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a32:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008a36:	604b      	str	r3, [r1, #4]
 8008a38:	e7c7      	b.n	80089ca <HAL_RCC_OscConfig+0x1aa>
 8008a3a:	4a12      	ldr	r2, [pc, #72]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a3c:	6853      	ldr	r3, [r2, #4]
 8008a3e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a46:	6053      	str	r3, [r2, #4]
 8008a48:	e7bf      	b.n	80089ca <HAL_RCC_OscConfig+0x1aa>
 8008a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a4c:	6853      	ldr	r3, [r2, #4]
 8008a4e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008a52:	6921      	ldr	r1, [r4, #16]
 8008a54:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008a58:	6053      	str	r3, [r2, #4]
 8008a5a:	e7b6      	b.n	80089ca <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 8008a5c:	4a09      	ldr	r2, [pc, #36]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	f023 0301 	bic.w	r3, r3, #1
 8008a64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008a66:	f7fa fd31 	bl	80034cc <HAL_GetTick>
 8008a6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a6c:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <HAL_RCC_OscConfig+0x264>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f013 0f04 	tst.w	r3, #4
 8008a74:	d0a9      	beq.n	80089ca <HAL_RCC_OscConfig+0x1aa>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a76:	f7fa fd29 	bl	80034cc <HAL_GetTick>
 8008a7a:	1b40      	subs	r0, r0, r5
 8008a7c:	2802      	cmp	r0, #2
 8008a7e:	d9f5      	bls.n	8008a6c <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 8008a80:	2003      	movs	r0, #3
 8008a82:	e1f1      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008a84:	58024400 	.word	0x58024400
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a88:	f002 0203 	and.w	r2, r2, #3
 8008a8c:	2a01      	cmp	r2, #1
 8008a8e:	d1aa      	bne.n	80089e6 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a90:	4ba1      	ldr	r3, [pc, #644]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008a98:	d003      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x282>
 8008a9a:	69e3      	ldr	r3, [r4, #28]
 8008a9c:	2b80      	cmp	r3, #128	@ 0x80
 8008a9e:	f040 81e0 	bne.w	8008e62 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aa2:	f7fa fd2d 	bl	8003500 <HAL_GetREVID>
 8008aa6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008aaa:	4298      	cmp	r0, r3
 8008aac:	d812      	bhi.n	8008ad4 <HAL_RCC_OscConfig+0x2b4>
 8008aae:	6a22      	ldr	r2, [r4, #32]
 8008ab0:	2a20      	cmp	r2, #32
 8008ab2:	d007      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x2a4>
 8008ab4:	4998      	ldr	r1, [pc, #608]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008ab6:	684b      	ldr	r3, [r1, #4]
 8008ab8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008abc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008ac0:	604b      	str	r3, [r1, #4]
 8008ac2:	e00f      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
 8008ac4:	4a94      	ldr	r2, [pc, #592]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008ac6:	6853      	ldr	r3, [r2, #4]
 8008ac8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008acc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ad0:	6053      	str	r3, [r2, #4]
 8008ad2:	e007      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
 8008ad4:	4a90      	ldr	r2, [pc, #576]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008ad6:	68d3      	ldr	r3, [r2, #12]
 8008ad8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008adc:	6a21      	ldr	r1, [r4, #32]
 8008ade:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008ae2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	f013 0f08 	tst.w	r3, #8
 8008aea:	d060      	beq.n	8008bae <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008aec:	6963      	ldr	r3, [r4, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d049      	beq.n	8008b86 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008af2:	4a89      	ldr	r2, [pc, #548]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008af4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008afc:	f7fa fce6 	bl	80034cc <HAL_GetTick>
 8008b00:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b02:	4b85      	ldr	r3, [pc, #532]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b06:	f013 0f02 	tst.w	r3, #2
 8008b0a:	d150      	bne.n	8008bae <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b0c:	f7fa fcde 	bl	80034cc <HAL_GetTick>
 8008b10:	1b40      	subs	r0, r0, r5
 8008b12:	2802      	cmp	r0, #2
 8008b14:	d9f5      	bls.n	8008b02 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8008b16:	2003      	movs	r0, #3
 8008b18:	e1a6      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b1a:	f7fa fcf1 	bl	8003500 <HAL_GetREVID>
 8008b1e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8008b22:	4298      	cmp	r0, r3
 8008b24:	d812      	bhi.n	8008b4c <HAL_RCC_OscConfig+0x32c>
 8008b26:	6a22      	ldr	r2, [r4, #32]
 8008b28:	2a20      	cmp	r2, #32
 8008b2a:	d007      	beq.n	8008b3c <HAL_RCC_OscConfig+0x31c>
 8008b2c:	497a      	ldr	r1, [pc, #488]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b2e:	684b      	ldr	r3, [r1, #4]
 8008b30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b34:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8008b38:	604b      	str	r3, [r1, #4]
 8008b3a:	e7d3      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
 8008b3c:	4a76      	ldr	r2, [pc, #472]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b3e:	6853      	ldr	r3, [r2, #4]
 8008b40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b48:	6053      	str	r3, [r2, #4]
 8008b4a:	e7cb      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
 8008b4c:	4a72      	ldr	r2, [pc, #456]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b4e:	68d3      	ldr	r3, [r2, #12]
 8008b50:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8008b54:	6a21      	ldr	r1, [r4, #32]
 8008b56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008b5a:	60d3      	str	r3, [r2, #12]
 8008b5c:	e7c2      	b.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8008b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	6813      	ldr	r3, [r2, #0]
 8008b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008b68:	f7fa fcb0 	bl	80034cc <HAL_GetTick>
 8008b6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008b76:	d0b5      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x2c4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008b78:	f7fa fca8 	bl	80034cc <HAL_GetTick>
 8008b7c:	1b40      	subs	r0, r0, r5
 8008b7e:	2802      	cmp	r0, #2
 8008b80:	d9f5      	bls.n	8008b6e <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8008b82:	2003      	movs	r0, #3
 8008b84:	e170      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b86:	4a64      	ldr	r2, [pc, #400]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b88:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b90:	f7fa fc9c 	bl	80034cc <HAL_GetTick>
 8008b94:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b96:	4b60      	ldr	r3, [pc, #384]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b9a:	f013 0f02 	tst.w	r3, #2
 8008b9e:	d006      	beq.n	8008bae <HAL_RCC_OscConfig+0x38e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ba0:	f7fa fc94 	bl	80034cc <HAL_GetTick>
 8008ba4:	1b40      	subs	r0, r0, r5
 8008ba6:	2802      	cmp	r0, #2
 8008ba8:	d9f5      	bls.n	8008b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008baa:	2003      	movs	r0, #3
 8008bac:	e15c      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f013 0f20 	tst.w	r3, #32
 8008bb4:	d029      	beq.n	8008c0a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008bb6:	69a3      	ldr	r3, [r4, #24]
 8008bb8:	b19b      	cbz	r3, 8008be2 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bba:	4a57      	ldr	r2, [pc, #348]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008bbc:	6813      	ldr	r3, [r2, #0]
 8008bbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bc4:	f7fa fc82 	bl	80034cc <HAL_GetTick>
 8008bc8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bca:	4b53      	ldr	r3, [pc, #332]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008bd2:	d11a      	bne.n	8008c0a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bd4:	f7fa fc7a 	bl	80034cc <HAL_GetTick>
 8008bd8:	1b40      	subs	r0, r0, r5
 8008bda:	2802      	cmp	r0, #2
 8008bdc:	d9f5      	bls.n	8008bca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008bde:	2003      	movs	r0, #3
 8008be0:	e142      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008be2:	4a4d      	ldr	r2, [pc, #308]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008be4:	6813      	ldr	r3, [r2, #0]
 8008be6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008bec:	f7fa fc6e 	bl	80034cc <HAL_GetTick>
 8008bf0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bf2:	4b49      	ldr	r3, [pc, #292]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8008bfa:	d006      	beq.n	8008c0a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008bfc:	f7fa fc66 	bl	80034cc <HAL_GetTick>
 8008c00:	1b40      	subs	r0, r0, r5
 8008c02:	2802      	cmp	r0, #2
 8008c04:	d9f5      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008c06:	2003      	movs	r0, #3
 8008c08:	e12e      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	f013 0f04 	tst.w	r3, #4
 8008c10:	d121      	bne.n	8008c56 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8126 	beq.w	8008e66 <HAL_RCC_OscConfig+0x646>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008c1c:	6912      	ldr	r2, [r2, #16]
 8008c1e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008c22:	2a18      	cmp	r2, #24
 8008c24:	f000 80ee 	beq.w	8008e04 <HAL_RCC_OscConfig+0x5e4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d079      	beq.n	8008d20 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008c2e:	6813      	ldr	r3, [r2, #0]
 8008c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c36:	f7fa fc49 	bl	80034cc <HAL_GetTick>
 8008c3a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c3c:	4b36      	ldr	r3, [pc, #216]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008c44:	f000 80dc 	beq.w	8008e00 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c48:	f7fa fc40 	bl	80034cc <HAL_GetTick>
 8008c4c:	1b00      	subs	r0, r0, r4
 8008c4e:	2802      	cmp	r0, #2
 8008c50:	d9f4      	bls.n	8008c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008c52:	2003      	movs	r0, #3
 8008c54:	e108      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
    PWR->CR1 |= PWR_CR1_DBP;
 8008c56:	4a31      	ldr	r2, [pc, #196]	@ (8008d1c <HAL_RCC_OscConfig+0x4fc>)
 8008c58:	6813      	ldr	r3, [r2, #0]
 8008c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c5e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c60:	f7fa fc34 	bl	80034cc <HAL_GetTick>
 8008c64:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c66:	4b2d      	ldr	r3, [pc, #180]	@ (8008d1c <HAL_RCC_OscConfig+0x4fc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8008c6e:	d106      	bne.n	8008c7e <HAL_RCC_OscConfig+0x45e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008c70:	f7fa fc2c 	bl	80034cc <HAL_GetTick>
 8008c74:	1b40      	subs	r0, r0, r5
 8008c76:	2864      	cmp	r0, #100	@ 0x64
 8008c78:	d9f5      	bls.n	8008c66 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8008c7a:	2003      	movs	r0, #3
 8008c7c:	e0f4      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d00a      	beq.n	8008c9a <HAL_RCC_OscConfig+0x47a>
 8008c84:	bb0b      	cbnz	r3, 8008cca <HAL_RCC_OscConfig+0x4aa>
 8008c86:	4b24      	ldr	r3, [pc, #144]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008c88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c8a:	f022 0201 	bic.w	r2, r2, #1
 8008c8e:	671a      	str	r2, [r3, #112]	@ 0x70
 8008c90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008c92:	f022 0204 	bic.w	r2, r2, #4
 8008c96:	671a      	str	r2, [r3, #112]	@ 0x70
 8008c98:	e004      	b.n	8008ca4 <HAL_RCC_OscConfig+0x484>
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008c9c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	b333      	cbz	r3, 8008cf6 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8008ca8:	f7fa fc10 	bl	80034cc <HAL_GetTick>
 8008cac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cae:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb2:	f013 0f02 	tst.w	r3, #2
 8008cb6:	d1ac      	bne.n	8008c12 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cb8:	f7fa fc08 	bl	80034cc <HAL_GetTick>
 8008cbc:	1b40      	subs	r0, r0, r5
 8008cbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008cc2:	4298      	cmp	r0, r3
 8008cc4:	d9f3      	bls.n	8008cae <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8008cc6:	2003      	movs	r0, #3
 8008cc8:	e0ce      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d009      	beq.n	8008ce2 <HAL_RCC_OscConfig+0x4c2>
 8008cce:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cda:	f022 0204 	bic.w	r2, r2, #4
 8008cde:	671a      	str	r2, [r3, #112]	@ 0x70
 8008ce0:	e7e0      	b.n	8008ca4 <HAL_RCC_OscConfig+0x484>
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008ce4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ce6:	f042 0204 	orr.w	r2, r2, #4
 8008cea:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cee:	f042 0201 	orr.w	r2, r2, #1
 8008cf2:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cf4:	e7d6      	b.n	8008ca4 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8008cf6:	f7fa fbe9 	bl	80034cc <HAL_GetTick>
 8008cfa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cfc:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d00:	f013 0f02 	tst.w	r3, #2
 8008d04:	d085      	beq.n	8008c12 <HAL_RCC_OscConfig+0x3f2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d06:	f7fa fbe1 	bl	80034cc <HAL_GetTick>
 8008d0a:	1b40      	subs	r0, r0, r5
 8008d0c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008d10:	4298      	cmp	r0, r3
 8008d12:	d9f3      	bls.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8008d14:	2003      	movs	r0, #3
 8008d16:	e0a7      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8008d20:	4a59      	ldr	r2, [pc, #356]	@ (8008e88 <HAL_RCC_OscConfig+0x668>)
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008d2a:	f7fa fbcf 	bl	80034cc <HAL_GetTick>
 8008d2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d30:	4b55      	ldr	r3, [pc, #340]	@ (8008e88 <HAL_RCC_OscConfig+0x668>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008d38:	d006      	beq.n	8008d48 <HAL_RCC_OscConfig+0x528>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d3a:	f7fa fbc7 	bl	80034cc <HAL_GetTick>
 8008d3e:	1b40      	subs	r0, r0, r5
 8008d40:	2802      	cmp	r0, #2
 8008d42:	d9f5      	bls.n	8008d30 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8008d44:	2003      	movs	r0, #3
 8008d46:	e08f      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d48:	4b4f      	ldr	r3, [pc, #316]	@ (8008e88 <HAL_RCC_OscConfig+0x668>)
 8008d4a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8008e8c <HAL_RCC_OscConfig+0x66c>)
 8008d4e:	400a      	ands	r2, r1
 8008d50:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008d52:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008d54:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008d5e:	3a01      	subs	r2, #1
 8008d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d66:	3901      	subs	r1, #1
 8008d68:	0249      	lsls	r1, r1, #9
 8008d6a:	b289      	uxth	r1, r1
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008d70:	3901      	subs	r1, #1
 8008d72:	0409      	lsls	r1, r1, #16
 8008d74:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8008d7c:	3901      	subs	r1, #1
 8008d7e:	0609      	lsls	r1, r1, #24
 8008d80:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8008d84:	430a      	orrs	r2, r1
 8008d86:	631a      	str	r2, [r3, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8008d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8a:	f022 0201 	bic.w	r2, r2, #1
 8008d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008d92:	4a3f      	ldr	r2, [pc, #252]	@ (8008e90 <HAL_RCC_OscConfig+0x670>)
 8008d94:	400a      	ands	r2, r1
 8008d96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008d98:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008d9c:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	f022 020c 	bic.w	r2, r2, #12
 8008da4:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8008da6:	430a      	orrs	r2, r1
 8008da8:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	f022 0202 	bic.w	r2, r2, #2
 8008db0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008db2:	430a      	orrs	r2, r1
 8008db4:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dc8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8008dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008dde:	f7fa fb75 	bl	80034cc <HAL_GetTick>
 8008de2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008de4:	4b28      	ldr	r3, [pc, #160]	@ (8008e88 <HAL_RCC_OscConfig+0x668>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008dec:	d106      	bne.n	8008dfc <HAL_RCC_OscConfig+0x5dc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dee:	f7fa fb6d 	bl	80034cc <HAL_GetTick>
 8008df2:	1b00      	subs	r0, r0, r4
 8008df4:	2802      	cmp	r0, #2
 8008df6:	d9f5      	bls.n	8008de4 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8008df8:	2003      	movs	r0, #3
 8008dfa:	e035      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e033      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e00:	2000      	movs	r0, #0
 8008e02:	e031      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e04:	4a20      	ldr	r2, [pc, #128]	@ (8008e88 <HAL_RCC_OscConfig+0x668>)
 8008e06:	6a91      	ldr	r1, [r2, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e08:	6b10      	ldr	r0, [r2, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d02d      	beq.n	8008e6a <HAL_RCC_OscConfig+0x64a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e0e:	f001 0303 	and.w	r3, r1, #3
 8008e12:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d12a      	bne.n	8008e6e <HAL_RCC_OscConfig+0x64e>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e18:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8008e1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1e:	4299      	cmp	r1, r3
 8008e20:	d127      	bne.n	8008e72 <HAL_RCC_OscConfig+0x652>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e22:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8008e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d123      	bne.n	8008e76 <HAL_RCC_OscConfig+0x656>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e2e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8008e32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e34:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d11f      	bne.n	8008e7a <HAL_RCC_OscConfig+0x65a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e3a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8008e3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008e40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d11b      	bne.n	8008e7e <HAL_RCC_OscConfig+0x65e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e46:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8008e4a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008e4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e4e:	4298      	cmp	r0, r3
 8008e50:	d117      	bne.n	8008e82 <HAL_RCC_OscConfig+0x662>
  return HAL_OK;
 8008e52:	2000      	movs	r0, #0
 8008e54:	e008      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
    return HAL_ERROR;
 8008e56:	2001      	movs	r0, #1
}
 8008e58:	4770      	bx	lr
        return HAL_ERROR;
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	e004      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8008e5e:	2001      	movs	r0, #1
 8008e60:	e002      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
        return HAL_ERROR;
 8008e62:	2001      	movs	r0, #1
 8008e64:	e000      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
  return HAL_OK;
 8008e66:	2000      	movs	r0, #0
}
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8008e6a:	2001      	movs	r0, #1
 8008e6c:	e7fc      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e6e:	2001      	movs	r0, #1
 8008e70:	e7fa      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7f8      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e76:	2001      	movs	r0, #1
 8008e78:	e7f6      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	e7f4      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e7e:	2001      	movs	r0, #1
 8008e80:	e7f2      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e82:	2001      	movs	r0, #1
 8008e84:	e7f0      	b.n	8008e68 <HAL_RCC_OscConfig+0x648>
 8008e86:	bf00      	nop
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	fffffc0c 	.word	0xfffffc0c
 8008e90:	ffff0007 	.word	0xffff0007

08008e94 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e94:	4b74      	ldr	r3, [pc, #464]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e9c:	2b10      	cmp	r3, #16
 8008e9e:	f000 80de 	beq.w	800905e <HAL_RCC_GetSysClockFreq+0x1ca>
 8008ea2:	2b18      	cmp	r3, #24
 8008ea4:	d00f      	beq.n	8008ec6 <HAL_RCC_GetSysClockFreq+0x32>
 8008ea6:	b10b      	cbz	r3, 8008eac <HAL_RCC_GetSysClockFreq+0x18>
 8008ea8:	4870      	ldr	r0, [pc, #448]	@ (800906c <HAL_RCC_GetSysClockFreq+0x1d8>)
 8008eaa:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eac:	4b6e      	ldr	r3, [pc, #440]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f013 0f20 	tst.w	r3, #32
 8008eb4:	f000 80d5 	beq.w	8009062 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ec0:	486b      	ldr	r0, [pc, #428]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008ec2:	40d8      	lsrs	r0, r3
 8008ec4:	4770      	bx	lr
{
 8008ec6:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ec8:	4b67      	ldr	r3, [pc, #412]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ecc:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ed0:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008ed2:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ed6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ed8:	f001 0101 	and.w	r1, r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ede:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8008ee2:	fb01 f303 	mul.w	r3, r1, r3
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8008eee:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 8008ef2:	f000 8094 	beq.w	800901e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 8008ef6:	2a01      	cmp	r2, #1
 8008ef8:	d066      	beq.n	8008fc8 <HAL_RCC_GetSysClockFreq+0x134>
 8008efa:	2a02      	cmp	r2, #2
 8008efc:	f000 8092 	beq.w	8009024 <HAL_RCC_GetSysClockFreq+0x190>
 8008f00:	b1e2      	cbz	r2, 8008f3c <HAL_RCC_GetSysClockFreq+0xa8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f02:	ee07 0a10 	vmov	s14, r0
 8008f06:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f0a:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x1e0>
 8008f0e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008f12:	4b55      	ldr	r3, [pc, #340]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1a:	ee06 3a90 	vmov	s13, r3
 8008f1e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008f22:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008f26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f36:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8008f3a:	e061      	b.n	8009000 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f013 0f20 	tst.w	r3, #32
 8008f44:	d023      	beq.n	8008f8e <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f46:	4948      	ldr	r1, [pc, #288]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008f48:	680a      	ldr	r2, [r1, #0]
 8008f4a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008f4e:	4b48      	ldr	r3, [pc, #288]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8008f50:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f52:	ee07 3a10 	vmov	s14, r3
 8008f56:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f5a:	ee07 0a10 	vmov	s14, r0
 8008f5e:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008f62:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008f66:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8008f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6c:	ee06 3a90 	vmov	s13, r3
 8008f70:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008f74:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008f78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f8c:	e038      	b.n	8009000 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f8e:	ee07 0a10 	vmov	s14, r0
 8008f92:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008f96:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 800907c <HAL_RCC_GetSysClockFreq+0x1e8>
 8008f9a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008f9e:	4b32      	ldr	r3, [pc, #200]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	ee06 3a90 	vmov	s13, r3
 8008faa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008fae:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008fb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fc6:	e01b      	b.n	8009000 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fc8:	ee07 0a10 	vmov	s14, r0
 8008fcc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008fd0:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x1e0>
 8008fd4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008fd8:	4b23      	ldr	r3, [pc, #140]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe0:	ee06 3a90 	vmov	s13, r3
 8008fe4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008fe8:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x1e4>
 8008fec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009000:	4b19      	ldr	r3, [pc, #100]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009008:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800900a:	ee07 3a90 	vmov	s15, r3
 800900e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009012:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009016:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800901a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800901e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009022:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009024:	ee07 0a10 	vmov	s14, r0
 8009028:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800902c:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009030:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009034:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8009036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903c:	ee06 3a90 	vmov	s13, r3
 8009040:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009044:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x1e4>
 8009048:	ee67 7a86 	vmul.f32	s15, s15, s12
 800904c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009058:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800905c:	e7d0      	b.n	8009000 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800905e:	4809      	ldr	r0, [pc, #36]	@ (8009084 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009060:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009062:	4803      	ldr	r0, [pc, #12]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	58024400 	.word	0x58024400
 800906c:	003d0900 	.word	0x003d0900
 8009070:	03d09000 	.word	0x03d09000
 8009074:	4a742400 	.word	0x4a742400
 8009078:	39000000 	.word	0x39000000
 800907c:	4c742400 	.word	0x4c742400
 8009080:	4bb71b00 	.word	0x4bb71b00
 8009084:	016e3600 	.word	0x016e3600

08009088 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009088:	2800      	cmp	r0, #0
 800908a:	f000 8132 	beq.w	80092f2 <HAL_RCC_ClockConfig+0x26a>
{
 800908e:	b570      	push	{r4, r5, r6, lr}
 8009090:	460d      	mov	r5, r1
 8009092:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009094:	4b9b      	ldr	r3, [pc, #620]	@ (8009304 <HAL_RCC_ClockConfig+0x27c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	428b      	cmp	r3, r1
 800909e:	d20b      	bcs.n	80090b8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090a0:	4a98      	ldr	r2, [pc, #608]	@ (8009304 <HAL_RCC_ClockConfig+0x27c>)
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	f023 030f 	bic.w	r3, r3, #15
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ac:	6813      	ldr	r3, [r2, #0]
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	428b      	cmp	r3, r1
 80090b4:	f040 811f 	bne.w	80092f6 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	f013 0f04 	tst.w	r3, #4
 80090be:	d00c      	beq.n	80090da <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090c0:	6922      	ldr	r2, [r4, #16]
 80090c2:	4b91      	ldr	r3, [pc, #580]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d905      	bls.n	80090da <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090ce:	498e      	ldr	r1, [pc, #568]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80090d0:	698b      	ldr	r3, [r1, #24]
 80090d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d6:	431a      	orrs	r2, r3
 80090d8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f013 0f08 	tst.w	r3, #8
 80090e0:	d00c      	beq.n	80090fc <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090e2:	6962      	ldr	r2, [r4, #20]
 80090e4:	4b88      	ldr	r3, [pc, #544]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d905      	bls.n	80090fc <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090f0:	4985      	ldr	r1, [pc, #532]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80090f2:	69cb      	ldr	r3, [r1, #28]
 80090f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f8:	431a      	orrs	r2, r3
 80090fa:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	f013 0f10 	tst.w	r3, #16
 8009102:	d00c      	beq.n	800911e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009104:	69a2      	ldr	r2, [r4, #24]
 8009106:	4b80      	ldr	r3, [pc, #512]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800910e:	429a      	cmp	r2, r3
 8009110:	d905      	bls.n	800911e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009112:	497d      	ldr	r1, [pc, #500]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009114:	69cb      	ldr	r3, [r1, #28]
 8009116:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800911a:	431a      	orrs	r2, r3
 800911c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	f013 0f20 	tst.w	r3, #32
 8009124:	d00c      	beq.n	8009140 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009126:	69e2      	ldr	r2, [r4, #28]
 8009128:	4b77      	ldr	r3, [pc, #476]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009130:	429a      	cmp	r2, r3
 8009132:	d905      	bls.n	8009140 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009134:	4974      	ldr	r1, [pc, #464]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009136:	6a0b      	ldr	r3, [r1, #32]
 8009138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800913c:	431a      	orrs	r2, r3
 800913e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	f013 0f02 	tst.w	r3, #2
 8009146:	d00c      	beq.n	8009162 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009148:	68e2      	ldr	r2, [r4, #12]
 800914a:	4b6f      	ldr	r3, [pc, #444]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	429a      	cmp	r2, r3
 8009154:	d905      	bls.n	8009162 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009156:	496c      	ldr	r1, [pc, #432]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009158:	698b      	ldr	r3, [r1, #24]
 800915a:	f023 030f 	bic.w	r3, r3, #15
 800915e:	431a      	orrs	r2, r3
 8009160:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f013 0f01 	tst.w	r3, #1
 8009168:	d041      	beq.n	80091ee <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800916a:	4a67      	ldr	r2, [pc, #412]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800916c:	6993      	ldr	r3, [r2, #24]
 800916e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009172:	68a1      	ldr	r1, [r4, #8]
 8009174:	430b      	orrs	r3, r1
 8009176:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d00a      	beq.n	8009194 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800917e:	2b03      	cmp	r3, #3
 8009180:	d027      	beq.n	80091d2 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009182:	2b01      	cmp	r3, #1
 8009184:	d02c      	beq.n	80091e0 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009186:	4a60      	ldr	r2, [pc, #384]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	f012 0f04 	tst.w	r2, #4
 800918e:	d106      	bne.n	800919e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8009190:	2001      	movs	r0, #1
 8009192:	e0ad      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009194:	6812      	ldr	r2, [r2, #0]
 8009196:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800919a:	f000 80ae 	beq.w	80092fa <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800919e:	495a      	ldr	r1, [pc, #360]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80091a0:	690a      	ldr	r2, [r1, #16]
 80091a2:	f022 0207 	bic.w	r2, r2, #7
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80091aa:	f7fa f98f 	bl	80034cc <HAL_GetTick>
 80091ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b0:	4b55      	ldr	r3, [pc, #340]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091b8:	6862      	ldr	r2, [r4, #4]
 80091ba:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80091be:	d016      	beq.n	80091ee <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091c0:	f7fa f984 	bl	80034cc <HAL_GetTick>
 80091c4:	1b80      	subs	r0, r0, r6
 80091c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80091ca:	4298      	cmp	r0, r3
 80091cc:	d9f0      	bls.n	80091b0 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80091ce:	2003      	movs	r0, #3
 80091d0:	e08e      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091d2:	4a4d      	ldr	r2, [pc, #308]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80091da:	d1e0      	bne.n	800919e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80091dc:	2001      	movs	r0, #1
 80091de:	e087      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091e0:	4a49      	ldr	r2, [pc, #292]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80091e2:	6812      	ldr	r2, [r2, #0]
 80091e4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80091e8:	d1d9      	bne.n	800919e <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80091ea:	2001      	movs	r0, #1
 80091ec:	e080      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f013 0f02 	tst.w	r3, #2
 80091f4:	d00c      	beq.n	8009210 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091f6:	68e2      	ldr	r2, [r4, #12]
 80091f8:	4b43      	ldr	r3, [pc, #268]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	429a      	cmp	r2, r3
 8009202:	d205      	bcs.n	8009210 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009204:	4940      	ldr	r1, [pc, #256]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009206:	698b      	ldr	r3, [r1, #24]
 8009208:	f023 030f 	bic.w	r3, r3, #15
 800920c:	431a      	orrs	r2, r3
 800920e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009210:	4b3c      	ldr	r3, [pc, #240]	@ (8009304 <HAL_RCC_ClockConfig+0x27c>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	42ab      	cmp	r3, r5
 800921a:	d90a      	bls.n	8009232 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800921c:	4a39      	ldr	r2, [pc, #228]	@ (8009304 <HAL_RCC_ClockConfig+0x27c>)
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	f023 030f 	bic.w	r3, r3, #15
 8009224:	432b      	orrs	r3, r5
 8009226:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009228:	6813      	ldr	r3, [r2, #0]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	42ab      	cmp	r3, r5
 8009230:	d165      	bne.n	80092fe <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f013 0f04 	tst.w	r3, #4
 8009238:	d00c      	beq.n	8009254 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800923a:	6922      	ldr	r2, [r4, #16]
 800923c:	4b32      	ldr	r3, [pc, #200]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009244:	429a      	cmp	r2, r3
 8009246:	d205      	bcs.n	8009254 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009248:	492f      	ldr	r1, [pc, #188]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800924a:	698b      	ldr	r3, [r1, #24]
 800924c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009250:	431a      	orrs	r2, r3
 8009252:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	f013 0f08 	tst.w	r3, #8
 800925a:	d00c      	beq.n	8009276 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800925c:	6962      	ldr	r2, [r4, #20]
 800925e:	4b2a      	ldr	r3, [pc, #168]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009266:	429a      	cmp	r2, r3
 8009268:	d205      	bcs.n	8009276 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800926a:	4927      	ldr	r1, [pc, #156]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800926c:	69cb      	ldr	r3, [r1, #28]
 800926e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009272:	431a      	orrs	r2, r3
 8009274:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	f013 0f10 	tst.w	r3, #16
 800927c:	d00c      	beq.n	8009298 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800927e:	69a2      	ldr	r2, [r4, #24]
 8009280:	4b21      	ldr	r3, [pc, #132]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009288:	429a      	cmp	r2, r3
 800928a:	d205      	bcs.n	8009298 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800928c:	491e      	ldr	r1, [pc, #120]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 800928e:	69cb      	ldr	r3, [r1, #28]
 8009290:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009294:	431a      	orrs	r2, r3
 8009296:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f013 0f20 	tst.w	r3, #32
 800929e:	d00c      	beq.n	80092ba <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092a0:	69e2      	ldr	r2, [r4, #28]
 80092a2:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d205      	bcs.n	80092ba <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092ae:	4916      	ldr	r1, [pc, #88]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80092b0:	6a0b      	ldr	r3, [r1, #32]
 80092b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b6:	431a      	orrs	r2, r3
 80092b8:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092ba:	f7ff fdeb 	bl	8008e94 <HAL_RCC_GetSysClockFreq>
 80092be:	4912      	ldr	r1, [pc, #72]	@ (8009308 <HAL_RCC_ClockConfig+0x280>)
 80092c0:	698b      	ldr	r3, [r1, #24]
 80092c2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80092c6:	4a11      	ldr	r2, [pc, #68]	@ (800930c <HAL_RCC_ClockConfig+0x284>)
 80092c8:	5cd3      	ldrb	r3, [r2, r3]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092d0:	698b      	ldr	r3, [r1, #24]
 80092d2:	f003 030f 	and.w	r3, r3, #15
 80092d6:	5cd3      	ldrb	r3, [r2, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	fa20 f303 	lsr.w	r3, r0, r3
 80092e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009310 <HAL_RCC_ClockConfig+0x288>)
 80092e2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80092e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009314 <HAL_RCC_ClockConfig+0x28c>)
 80092e6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80092e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009318 <HAL_RCC_ClockConfig+0x290>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	f7f9 febc 	bl	8003068 <HAL_InitTick>
}
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80092f2:	2001      	movs	r0, #1
}
 80092f4:	4770      	bx	lr
      return HAL_ERROR;
 80092f6:	2001      	movs	r0, #1
 80092f8:	e7fa      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80092fa:	2001      	movs	r0, #1
 80092fc:	e7f8      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80092fe:	2001      	movs	r0, #1
 8009300:	e7f6      	b.n	80092f0 <HAL_RCC_ClockConfig+0x268>
 8009302:	bf00      	nop
 8009304:	52002000 	.word	0x52002000
 8009308:	58024400 	.word	0x58024400
 800930c:	0801df4c 	.word	0x0801df4c
 8009310:	24000000 	.word	0x24000000
 8009314:	24000004 	.word	0x24000004
 8009318:	2400000c 	.word	0x2400000c

0800931c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800931c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800931e:	f7ff fdb9 	bl	8008e94 <HAL_RCC_GetSysClockFreq>
 8009322:	4a0b      	ldr	r2, [pc, #44]	@ (8009350 <HAL_RCC_GetHCLKFreq+0x34>)
 8009324:	6993      	ldr	r3, [r2, #24]
 8009326:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800932a:	490a      	ldr	r1, [pc, #40]	@ (8009354 <HAL_RCC_GetHCLKFreq+0x38>)
 800932c:	5ccb      	ldrb	r3, [r1, r3]
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009336:	6992      	ldr	r2, [r2, #24]
 8009338:	f002 020f 	and.w	r2, r2, #15
 800933c:	5c88      	ldrb	r0, [r1, r2]
 800933e:	f000 001f 	and.w	r0, r0, #31
 8009342:	fa23 f000 	lsr.w	r0, r3, r0
 8009346:	4a04      	ldr	r2, [pc, #16]	@ (8009358 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009348:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800934a:	4a04      	ldr	r2, [pc, #16]	@ (800935c <HAL_RCC_GetHCLKFreq+0x40>)
 800934c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800934e:	bd08      	pop	{r3, pc}
 8009350:	58024400 	.word	0x58024400
 8009354:	0801df4c 	.word	0x0801df4c
 8009358:	24000000 	.word	0x24000000
 800935c:	24000004 	.word	0x24000004

08009360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009360:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009362:	f7ff ffdb 	bl	800931c <HAL_RCC_GetHCLKFreq>
 8009366:	4b05      	ldr	r3, [pc, #20]	@ (800937c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800936e:	4a04      	ldr	r2, [pc, #16]	@ (8009380 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009370:	5cd3      	ldrb	r3, [r2, r3]
 8009372:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009376:	40d8      	lsrs	r0, r3
 8009378:	bd08      	pop	{r3, pc}
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	0801df4c 	.word	0x0801df4c

08009384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009384:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009386:	f7ff ffc9 	bl	800931c <HAL_RCC_GetHCLKFreq>
 800938a:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009392:	4a04      	ldr	r2, [pc, #16]	@ (80093a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009394:	5cd3      	ldrb	r3, [r2, r3]
 8009396:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800939a:	40d8      	lsrs	r0, r3
 800939c:	bd08      	pop	{r3, pc}
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
 80093a4:	0801df4c 	.word	0x0801df4c

080093a8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80093a8:	233f      	movs	r3, #63	@ 0x3f
 80093aa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093ac:	4b11      	ldr	r3, [pc, #68]	@ (80093f4 <HAL_RCC_GetClockConfig+0x4c>)
 80093ae:	691a      	ldr	r2, [r3, #16]
 80093b0:	f002 0207 	and.w	r2, r2, #7
 80093b4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80093b6:	699a      	ldr	r2, [r3, #24]
 80093b8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80093bc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	f002 020f 	and.w	r2, r2, #15
 80093c4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80093c6:	699a      	ldr	r2, [r3, #24]
 80093c8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80093cc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80093d4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80093d6:	69da      	ldr	r2, [r3, #28]
 80093d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80093dc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093e4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80093e6:	4b04      	ldr	r3, [pc, #16]	@ (80093f8 <HAL_RCC_GetClockConfig+0x50>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 030f 	and.w	r3, r3, #15
 80093ee:	600b      	str	r3, [r1, #0]
}
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	58024400 	.word	0x58024400
 80093f8:	52002000 	.word	0x52002000

080093fc <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093fc:	4b40      	ldr	r3, [pc, #256]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	f003 0303 	and.w	r3, r3, #3
 8009404:	2b03      	cmp	r3, #3
 8009406:	d079      	beq.n	80094fc <RCCEx_PLL2_Config+0x100>
{
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4605      	mov	r5, r0
 800940c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800940e:	4a3c      	ldr	r2, [pc, #240]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 8009410:	6813      	ldr	r3, [r2, #0]
 8009412:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009418:	f7fa f858 	bl	80034cc <HAL_GetTick>
 800941c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800941e:	4b38      	ldr	r3, [pc, #224]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8009426:	d006      	beq.n	8009436 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009428:	f7fa f850 	bl	80034cc <HAL_GetTick>
 800942c:	1b03      	subs	r3, r0, r4
 800942e:	2b02      	cmp	r3, #2
 8009430:	d9f5      	bls.n	800941e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8009432:	2003      	movs	r0, #3

  }


  return status;
}
 8009434:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009436:	4b32      	ldr	r3, [pc, #200]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 8009438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800943a:	f422 327c 	bic.w	r2, r2, #258048	@ 0x3f000
 800943e:	6829      	ldr	r1, [r5, #0]
 8009440:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8009444:	629a      	str	r2, [r3, #40]	@ 0x28
 8009446:	686a      	ldr	r2, [r5, #4]
 8009448:	3a01      	subs	r2, #1
 800944a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800944e:	68a9      	ldr	r1, [r5, #8]
 8009450:	3901      	subs	r1, #1
 8009452:	0249      	lsls	r1, r1, #9
 8009454:	b289      	uxth	r1, r1
 8009456:	430a      	orrs	r2, r1
 8009458:	68e9      	ldr	r1, [r5, #12]
 800945a:	3901      	subs	r1, #1
 800945c:	0409      	lsls	r1, r1, #16
 800945e:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8009462:	430a      	orrs	r2, r1
 8009464:	6929      	ldr	r1, [r5, #16]
 8009466:	3901      	subs	r1, #1
 8009468:	0609      	lsls	r1, r1, #24
 800946a:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800946e:	430a      	orrs	r2, r1
 8009470:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009474:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8009478:	6969      	ldr	r1, [r5, #20]
 800947a:	430a      	orrs	r2, r1
 800947c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800947e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009480:	f022 0220 	bic.w	r2, r2, #32
 8009484:	69a9      	ldr	r1, [r5, #24]
 8009486:	430a      	orrs	r2, r1
 8009488:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800948a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948c:	f022 0210 	bic.w	r2, r2, #16
 8009490:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009492:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009494:	4a1b      	ldr	r2, [pc, #108]	@ (8009504 <RCCEx_PLL2_Config+0x108>)
 8009496:	400a      	ands	r2, r1
 8009498:	69e9      	ldr	r1, [r5, #28]
 800949a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800949e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80094a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a2:	f042 0210 	orr.w	r2, r2, #16
 80094a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80094a8:	b9c6      	cbnz	r6, 80094dc <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80094aa:	461a      	mov	r2, r3
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80094b4:	4a12      	ldr	r2, [pc, #72]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80094be:	f7fa f805 	bl	80034cc <HAL_GetTick>
 80094c2:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80094cc:	d114      	bne.n	80094f8 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80094ce:	f7f9 fffd 	bl	80034cc <HAL_GetTick>
 80094d2:	1b00      	subs	r0, r0, r4
 80094d4:	2802      	cmp	r0, #2
 80094d6:	d9f5      	bls.n	80094c4 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80094d8:	2003      	movs	r0, #3
 80094da:	e7ab      	b.n	8009434 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80094dc:	2e01      	cmp	r6, #1
 80094de:	d005      	beq.n	80094ec <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094e0:	4a07      	ldr	r2, [pc, #28]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 80094e2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80094e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094ea:	e7e3      	b.n	80094b4 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80094ec:	4a04      	ldr	r2, [pc, #16]	@ (8009500 <RCCEx_PLL2_Config+0x104>)
 80094ee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80094f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094f6:	e7dd      	b.n	80094b4 <RCCEx_PLL2_Config+0xb8>
  return status;
 80094f8:	2000      	movs	r0, #0
 80094fa:	e79b      	b.n	8009434 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80094fc:	2001      	movs	r0, #1
}
 80094fe:	4770      	bx	lr
 8009500:	58024400 	.word	0x58024400
 8009504:	ffff0007 	.word	0xffff0007

08009508 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009508:	4b40      	ldr	r3, [pc, #256]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 800950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	2b03      	cmp	r3, #3
 8009512:	d079      	beq.n	8009608 <RCCEx_PLL3_Config+0x100>
{
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4605      	mov	r5, r0
 8009518:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800951a:	4a3c      	ldr	r2, [pc, #240]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 800951c:	6813      	ldr	r3, [r2, #0]
 800951e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009524:	f7f9 ffd2 	bl	80034cc <HAL_GetTick>
 8009528:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800952a:	4b38      	ldr	r3, [pc, #224]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8009532:	d006      	beq.n	8009542 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009534:	f7f9 ffca 	bl	80034cc <HAL_GetTick>
 8009538:	1b03      	subs	r3, r0, r4
 800953a:	2b02      	cmp	r3, #2
 800953c:	d9f5      	bls.n	800952a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800953e:	2003      	movs	r0, #3

  }


  return status;
}
 8009540:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009542:	4b32      	ldr	r3, [pc, #200]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 8009544:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009546:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 800954a:	6829      	ldr	r1, [r5, #0]
 800954c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009550:	629a      	str	r2, [r3, #40]	@ 0x28
 8009552:	686a      	ldr	r2, [r5, #4]
 8009554:	3a01      	subs	r2, #1
 8009556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800955a:	68a9      	ldr	r1, [r5, #8]
 800955c:	3901      	subs	r1, #1
 800955e:	0249      	lsls	r1, r1, #9
 8009560:	b289      	uxth	r1, r1
 8009562:	430a      	orrs	r2, r1
 8009564:	68e9      	ldr	r1, [r5, #12]
 8009566:	3901      	subs	r1, #1
 8009568:	0409      	lsls	r1, r1, #16
 800956a:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 800956e:	430a      	orrs	r2, r1
 8009570:	6929      	ldr	r1, [r5, #16]
 8009572:	3901      	subs	r1, #1
 8009574:	0609      	lsls	r1, r1, #24
 8009576:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 800957a:	430a      	orrs	r2, r1
 800957c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800957e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009580:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009584:	6969      	ldr	r1, [r5, #20]
 8009586:	430a      	orrs	r2, r1
 8009588:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800958a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009590:	69a9      	ldr	r1, [r5, #24]
 8009592:	430a      	orrs	r2, r1
 8009594:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800959c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800959e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80095a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009610 <RCCEx_PLL3_Config+0x108>)
 80095a2:	400a      	ands	r2, r1
 80095a4:	69e9      	ldr	r1, [r5, #28]
 80095a6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80095aa:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80095b4:	b9c6      	cbnz	r6, 80095e8 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095b6:	461a      	mov	r2, r3
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095be:	62d3      	str	r3, [r2, #44]	@ 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80095c0:	4a12      	ldr	r2, [pc, #72]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80095ca:	f7f9 ff7f 	bl	80034cc <HAL_GetTick>
 80095ce:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095d0:	4b0e      	ldr	r3, [pc, #56]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80095d8:	d114      	bne.n	8009604 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095da:	f7f9 ff77 	bl	80034cc <HAL_GetTick>
 80095de:	1b00      	subs	r0, r0, r4
 80095e0:	2802      	cmp	r0, #2
 80095e2:	d9f5      	bls.n	80095d0 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80095e4:	2003      	movs	r0, #3
 80095e6:	e7ab      	b.n	8009540 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80095e8:	2e01      	cmp	r6, #1
 80095ea:	d005      	beq.n	80095f8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095ec:	4a07      	ldr	r2, [pc, #28]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 80095ee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80095f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095f6:	e7e3      	b.n	80095c0 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095f8:	4a04      	ldr	r2, [pc, #16]	@ (800960c <RCCEx_PLL3_Config+0x104>)
 80095fa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80095fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009600:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009602:	e7dd      	b.n	80095c0 <RCCEx_PLL3_Config+0xb8>
  return status;
 8009604:	2000      	movs	r0, #0
 8009606:	e79b      	b.n	8009540 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8009608:	2001      	movs	r0, #1
}
 800960a:	4770      	bx	lr
 800960c:	58024400 	.word	0x58024400
 8009610:	ffff0007 	.word	0xffff0007

08009614 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009618:	6803      	ldr	r3, [r0, #0]
 800961a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800961e:	d030      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009620:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8009622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009626:	d026      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009628:	d80e      	bhi.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800962a:	b1eb      	cbz	r3, 8009668 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800962c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009630:	d107      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009632:	2102      	movs	r1, #2
 8009634:	3004      	adds	r0, #4
 8009636:	f7ff fee1 	bl	80093fc <RCCEx_PLL2_Config>
 800963a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800963c:	b145      	cbz	r5, 8009650 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800963e:	462e      	mov	r6, r5
 8009640:	e021      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009642:	2601      	movs	r6, #1
 8009644:	4635      	mov	r5, r6
 8009646:	e01e      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8009648:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800964c:	d109      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800964e:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009650:	4a95      	ldr	r2, [pc, #596]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009652:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009654:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009658:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800965a:	430b      	orrs	r3, r1
 800965c:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800965e:	2600      	movs	r6, #0
 8009660:	e011      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009662:	2601      	movs	r6, #1
 8009664:	4635      	mov	r5, r6
 8009666:	e00e      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4a8f      	ldr	r2, [pc, #572]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800966a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800966c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009670:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009672:	2500      	movs	r5, #0
 8009674:	e7ec      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009676:	2102      	movs	r1, #2
 8009678:	3024      	adds	r0, #36	@ 0x24
 800967a:	f7ff ff45 	bl	8009508 <RCCEx_PLL3_Config>
 800967e:	4605      	mov	r5, r0
      break;
 8009680:	e7dc      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009682:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009684:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800968c:	d014      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800968e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009690:	2b04      	cmp	r3, #4
 8009692:	d830      	bhi.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009694:	e8df f003 	tbb	[pc, r3]
 8009698:	08282203 	.word	0x08282203
 800969c:	08          	.byte	0x08
 800969d:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969e:	4a82      	ldr	r2, [pc, #520]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80096a0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80096a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80096a8:	bb45      	cbnz	r5, 80096fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096aa:	4a7f      	ldr	r2, [pc, #508]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80096ac:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80096ae:	f023 0307 	bic.w	r3, r3, #7
 80096b2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80096be:	d02f      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80096c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80096c2:	2b80      	cmp	r3, #128	@ 0x80
 80096c4:	d049      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x146>
 80096c6:	d81e      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d040      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80096cc:	2b40      	cmp	r3, #64	@ 0x40
 80096ce:	d117      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096d0:	2100      	movs	r1, #0
 80096d2:	1d20      	adds	r0, r4, #4
 80096d4:	f7ff fe92 	bl	80093fc <RCCEx_PLL2_Config>
 80096d8:	4605      	mov	r5, r0
      break;
 80096da:	e019      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096dc:	2100      	movs	r1, #0
 80096de:	1d20      	adds	r0, r4, #4
 80096e0:	f7ff fe8c 	bl	80093fc <RCCEx_PLL2_Config>
 80096e4:	4605      	mov	r5, r0
      break;
 80096e6:	e7df      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096e8:	2100      	movs	r1, #0
 80096ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80096ee:	f7ff ff0b 	bl	8009508 <RCCEx_PLL3_Config>
 80096f2:	4605      	mov	r5, r0
      break;
 80096f4:	e7d8      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 80096f6:	2601      	movs	r6, #1
 80096f8:	4635      	mov	r5, r6
 80096fa:	e7dd      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80096fc:	462e      	mov	r6, r5
 80096fe:	e7db      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009700:	2601      	movs	r6, #1
 8009702:	4635      	mov	r5, r6
 8009704:	e00c      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009706:	2bc0      	cmp	r3, #192	@ 0xc0
 8009708:	d002      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800970a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800970e:	d11b      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 8009710:	bb55      	cbnz	r5, 8009768 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009712:	4a65      	ldr	r2, [pc, #404]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009714:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009716:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800971a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800971c:	430b      	orrs	r3, r1
 800971e:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8009726:	d045      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009728:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800972c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009730:	d038      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8009732:	d81e      	bhi.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009734:	b383      	cbz	r3, 8009798 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8009736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800973a:	d117      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x158>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800973c:	2100      	movs	r1, #0
 800973e:	1d20      	adds	r0, r4, #4
 8009740:	f7ff fe5c 	bl	80093fc <RCCEx_PLL2_Config>
 8009744:	4605      	mov	r5, r0
      break;
 8009746:	e01a      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009748:	2601      	movs	r6, #1
 800974a:	4635      	mov	r5, r6
 800974c:	e7e8      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800974e:	4a56      	ldr	r2, [pc, #344]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009750:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009756:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009758:	e7da      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800975a:	2100      	movs	r1, #0
 800975c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009760:	f7ff fed2 	bl	8009508 <RCCEx_PLL3_Config>
 8009764:	4605      	mov	r5, r0
      break;
 8009766:	e7d3      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8009768:	462e      	mov	r6, r5
 800976a:	e7d9      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 800976c:	2601      	movs	r6, #1
 800976e:	4635      	mov	r5, r6
 8009770:	e020      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8009772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009776:	d002      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8009778:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800977c:	d109      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    if(ret == HAL_OK)
 800977e:	b9c5      	cbnz	r5, 80097b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009780:	4a49      	ldr	r2, [pc, #292]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009782:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009784:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8009788:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800978c:	430b      	orrs	r3, r1
 800978e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009790:	e010      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009792:	2601      	movs	r6, #1
 8009794:	4635      	mov	r5, r6
 8009796:	e00d      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009798:	4a43      	ldr	r2, [pc, #268]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800979a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800979c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 80097a2:	e7ec      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80097a4:	2100      	movs	r1, #0
 80097a6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80097aa:	f7ff fead 	bl	8009508 <RCCEx_PLL3_Config>
 80097ae:	4605      	mov	r5, r0
      break;
 80097b0:	e7e5      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80097b2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80097ba:	d023      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai4BClockSelection)
 80097bc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 80097c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097c4:	d041      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x236>
 80097c6:	d80d      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d038      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097d0:	d105      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097d2:	2100      	movs	r1, #0
 80097d4:	1d20      	adds	r0, r4, #4
 80097d6:	f7ff fe11 	bl	80093fc <RCCEx_PLL2_Config>
 80097da:	4605      	mov	r5, r0
      break;
 80097dc:	e008      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch(PeriphClkInit->Sai4BClockSelection)
 80097de:	2601      	movs	r6, #1
 80097e0:	4635      	mov	r5, r6
 80097e2:	e00f      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80097e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097e8:	d002      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80097ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097ee:	d123      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x224>
    if(ret == HAL_OK)
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	d131      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x244>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80097f4:	4a2c      	ldr	r2, [pc, #176]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80097f6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80097f8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80097fc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8009800:	430b      	orrs	r3, r1
 8009802:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800980a:	d02e      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->QspiClockSelection)
 800980c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800980e:	2b20      	cmp	r3, #32
 8009810:	d03f      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8009812:	d826      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8009814:	b133      	cbz	r3, 8009824 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009816:	2b10      	cmp	r3, #16
 8009818:	d120      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800981a:	4a23      	ldr	r2, [pc, #140]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800981c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800981e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009822:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009824:	2d00      	cmp	r5, #0
 8009826:	d13a      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x28a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009828:	4a1f      	ldr	r2, [pc, #124]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800982a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800982c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009830:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009832:	430b      	orrs	r3, r1
 8009834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009836:	e018      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009838:	2601      	movs	r6, #1
 800983a:	4635      	mov	r5, r6
 800983c:	e7e2      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800983e:	4a1a      	ldr	r2, [pc, #104]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009840:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009846:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009848:	e7d2      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800984a:	2100      	movs	r1, #0
 800984c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009850:	f7ff fe5a 	bl	8009508 <RCCEx_PLL3_Config>
 8009854:	4605      	mov	r5, r0
      break;
 8009856:	e7cb      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009858:	462e      	mov	r6, r5
 800985a:	e7d3      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->QspiClockSelection)
 800985c:	2601      	movs	r6, #1
 800985e:	4635      	mov	r5, r6
 8009860:	e003      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8009862:	2b30      	cmp	r3, #48	@ 0x30
 8009864:	d0de      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009866:	2601      	movs	r6, #1
 8009868:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8009870:	d02b      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009872:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8009874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009878:	d04c      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800987a:	d817      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d043      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8009880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009884:	d10d      	bne.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009886:	2100      	movs	r1, #0
 8009888:	1d20      	adds	r0, r4, #4
 800988a:	f7ff fdb7 	bl	80093fc <RCCEx_PLL2_Config>
 800988e:	4605      	mov	r5, r0
      break;
 8009890:	e012      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009892:	2102      	movs	r1, #2
 8009894:	1d20      	adds	r0, r4, #4
 8009896:	f7ff fdb1 	bl	80093fc <RCCEx_PLL2_Config>
 800989a:	4605      	mov	r5, r0
      break;
 800989c:	e7c2      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800989e:	462e      	mov	r6, r5
 80098a0:	e7e3      	b.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x256>
    switch(PeriphClkInit->Spi123ClockSelection)
 80098a2:	2601      	movs	r6, #1
 80098a4:	4635      	mov	r5, r6
 80098a6:	e010      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80098a8:	58024400 	.word	0x58024400
 80098ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098b0:	d002      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b6:	d124      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    if(ret == HAL_OK)
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	d132      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098bc:	4a75      	ldr	r2, [pc, #468]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80098be:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80098c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098c4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80098c6:	430b      	orrs	r3, r1
 80098c8:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80098d0:	d037      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80098d2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80098d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d8:	d051      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80098da:	d827      	bhi.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80098dc:	b13b      	cbz	r3, 80098ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80098de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e2:	d120      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098e4:	2101      	movs	r1, #1
 80098e6:	1d20      	adds	r0, r4, #4
 80098e8:	f7ff fd88 	bl	80093fc <RCCEx_PLL2_Config>
 80098ec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	d14c      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098f2:	4a68      	ldr	r2, [pc, #416]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80098f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80098f6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80098fa:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009900:	e01f      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009902:	2601      	movs	r6, #1
 8009904:	4635      	mov	r5, r6
 8009906:	e7e0      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009908:	4a62      	ldr	r2, [pc, #392]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800990a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800990c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009910:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009912:	e7d1      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009914:	2100      	movs	r1, #0
 8009916:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800991a:	f7ff fdf5 	bl	8009508 <RCCEx_PLL3_Config>
 800991e:	4605      	mov	r5, r0
      break;
 8009920:	e7ca      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8009922:	462e      	mov	r6, r5
 8009924:	e7d1      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009926:	2601      	movs	r6, #1
 8009928:	4635      	mov	r5, r6
 800992a:	e00a      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800992c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009930:	d0dd      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009932:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009936:	d0da      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800993c:	d0d7      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800993e:	2601      	movs	r6, #1
 8009940:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8009948:	d030      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Spi6ClockSelection)
 800994a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009952:	d044      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8009954:	d81f      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009956:	b13b      	cbz	r3, 8009968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8009958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995c:	d118      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800995e:	2101      	movs	r1, #1
 8009960:	1d20      	adds	r0, r4, #4
 8009962:	f7ff fd4b 	bl	80093fc <RCCEx_PLL2_Config>
 8009966:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009968:	2d00      	cmp	r5, #0
 800996a:	d13f      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800996c:	4a49      	ldr	r2, [pc, #292]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800996e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009970:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8009974:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8009978:	430b      	orrs	r3, r1
 800997a:	6593      	str	r3, [r2, #88]	@ 0x58
 800997c:	e016      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800997e:	2101      	movs	r1, #1
 8009980:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009984:	f7ff fdc0 	bl	8009508 <RCCEx_PLL3_Config>
 8009988:	4605      	mov	r5, r0
      break;
 800998a:	e7b0      	b.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800998c:	462e      	mov	r6, r5
 800998e:	e7d8      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009990:	2601      	movs	r6, #1
 8009992:	4635      	mov	r5, r6
 8009994:	e00a      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x398>
 8009996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800999a:	d0e5      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800999c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099a0:	d0e2      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099a6:	d0df      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099a8:	2601      	movs	r6, #1
 80099aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80099b2:	d009      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FdcanClockSelection)
 80099b4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80099b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099ba:	d019      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80099bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c0:	d024      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80099c2:	b1d3      	cbz	r3, 80099fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80099c4:	2601      	movs	r6, #1
 80099c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80099ce:	d032      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
    switch(PeriphClkInit->FmcClockSelection)
 80099d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d859      	bhi.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80099d6:	e8df f003 	tbb	[pc, r3]
 80099da:	2126      	.short	0x2126
 80099dc:	2652      	.short	0x2652
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099de:	2101      	movs	r1, #1
 80099e0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80099e4:	f7ff fd90 	bl	8009508 <RCCEx_PLL3_Config>
 80099e8:	4605      	mov	r5, r0
      break;
 80099ea:	e7bd      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80099ec:	462e      	mov	r6, r5
 80099ee:	e7dd      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f0:	4a28      	ldr	r2, [pc, #160]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80099f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80099f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 80099fa:	b96d      	cbnz	r5, 8009a18 <HAL_RCCEx_PeriphCLKConfig+0x404>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099fc:	4a25      	ldr	r2, [pc, #148]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80099fe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009a00:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8009a04:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8009a06:	430b      	orrs	r3, r1
 8009a08:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a0a:	e7dd      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	1d20      	adds	r0, r4, #4
 8009a10:	f7ff fcf4 	bl	80093fc <RCCEx_PLL2_Config>
 8009a14:	4605      	mov	r5, r0
      break;
 8009a16:	e7f0      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009a18:	462e      	mov	r6, r5
 8009a1a:	e7d5      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a1e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009a26:	bb9d      	cbnz	r5, 8009a90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a28:	4a1a      	ldr	r2, [pc, #104]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8009a2a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a32:	430b      	orrs	r3, r1
 8009a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8009a3c:	d12c      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	f013 0f01 	tst.w	r3, #1
 8009a44:	f000 80a3 	beq.w	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a48:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009a4a:	2b28      	cmp	r3, #40	@ 0x28
 8009a4c:	f200 809d 	bhi.w	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x576>
 8009a50:	e8df f003 	tbb	[pc, r3]
 8009a54:	9b9b9b8b 	.word	0x9b9b9b8b
 8009a58:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a5c:	9b9b9b86 	.word	0x9b9b9b86
 8009a60:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a64:	9b9b9b94 	.word	0x9b9b9b94
 8009a68:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a6c:	9b9b9b8b 	.word	0x9b9b9b8b
 8009a70:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a74:	9b9b9b8b 	.word	0x9b9b9b8b
 8009a78:	9b9b9b9b 	.word	0x9b9b9b9b
 8009a7c:	8b          	.byte	0x8b
 8009a7d:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a7e:	2102      	movs	r1, #2
 8009a80:	1d20      	adds	r0, r4, #4
 8009a82:	f7ff fcbb 	bl	80093fc <RCCEx_PLL2_Config>
 8009a86:	4605      	mov	r5, r0
      break;
 8009a88:	e7cd      	b.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    switch(PeriphClkInit->FmcClockSelection)
 8009a8a:	2601      	movs	r6, #1
 8009a8c:	4635      	mov	r5, r6
 8009a8e:	e7d2      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8009a90:	462e      	mov	r6, r5
 8009a92:	e7d0      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
 8009a94:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a98:	4a8f      	ldr	r2, [pc, #572]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009aa0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8009aa2:	f7f9 fd13 	bl	80034cc <HAL_GetTick>
 8009aa6:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8009ab0:	d105      	bne.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ab2:	f7f9 fd0b 	bl	80034cc <HAL_GetTick>
 8009ab6:	1bc0      	subs	r0, r0, r7
 8009ab8:	2864      	cmp	r0, #100	@ 0x64
 8009aba:	d9f5      	bls.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8009abc:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	d14a      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x544>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ac2:	4b86      	ldr	r3, [pc, #536]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac6:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8009aca:	4053      	eors	r3, r2
 8009acc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8009ad0:	d00c      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ad2:	4b82      	ldr	r3, [pc, #520]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009ad4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009ad6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ada:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009adc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8009ae0:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ae2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009ae4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009ae8:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8009aea:	671a      	str	r2, [r3, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009aec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8009af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af4:	d015      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      if(ret == HAL_OK)
 8009af6:	bb8d      	cbnz	r5, 8009b5c <HAL_RCCEx_PeriphCLKConfig+0x548>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009af8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8009afc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8009b00:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8009b04:	d01e      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8009b06:	4a75      	ldr	r2, [pc, #468]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b08:	6913      	ldr	r3, [r2, #16]
 8009b0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b0e:	6113      	str	r3, [r2, #16]
 8009b10:	4972      	ldr	r1, [pc, #456]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b12:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8009b14:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8009b18:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	670b      	str	r3, [r1, #112]	@ 0x70
 8009b20:	e78d      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        tickstart = HAL_GetTick();
 8009b22:	f7f9 fcd3 	bl	80034cc <HAL_GetTick>
 8009b26:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b28:	4b6c      	ldr	r3, [pc, #432]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b2c:	f013 0f02 	tst.w	r3, #2
 8009b30:	d1e1      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b32:	f7f9 fccb 	bl	80034cc <HAL_GetTick>
 8009b36:	1bc0      	subs	r0, r0, r7
 8009b38:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009b3c:	4298      	cmp	r0, r3
 8009b3e:	d9f3      	bls.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
            ret = HAL_TIMEOUT;
 8009b40:	2503      	movs	r5, #3
 8009b42:	e7d8      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b44:	4865      	ldr	r0, [pc, #404]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b46:	6902      	ldr	r2, [r0, #16]
 8009b48:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8009b4c:	4964      	ldr	r1, [pc, #400]	@ (8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009b4e:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8009b52:	4313      	orrs	r3, r2
 8009b54:	6103      	str	r3, [r0, #16]
 8009b56:	e7db      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      status = ret;
 8009b58:	462e      	mov	r6, r5
 8009b5a:	e770      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
        status = ret;
 8009b5c:	462e      	mov	r6, r5
 8009b5e:	e76e      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b60:	2101      	movs	r1, #1
 8009b62:	1d20      	adds	r0, r4, #4
 8009b64:	f7ff fc4a 	bl	80093fc <RCCEx_PLL2_Config>
 8009b68:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009b6a:	b9e5      	cbnz	r5, 8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x592>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b6c:	4a5b      	ldr	r2, [pc, #364]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009b6e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009b70:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8009b74:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8009b76:	430b      	orrs	r3, r1
 8009b78:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b7a:	e008      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009b82:	f7ff fcc1 	bl	8009508 <RCCEx_PLL3_Config>
 8009b86:	4605      	mov	r5, r0
      break;
 8009b88:	e7ef      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009b8a:	2601      	movs	r6, #1
 8009b8c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f013 0f02 	tst.w	r3, #2
 8009b94:	d016      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b96:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d827      	bhi.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 8009b9c:	e8df f003 	tbb	[pc, r3]
 8009ba0:	0a1f050a 	.word	0x0a1f050a
 8009ba4:	0a0a      	.short	0x0a0a
 8009ba6:	462e      	mov	r6, r5
 8009ba8:	e7f1      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009baa:	2101      	movs	r1, #1
 8009bac:	1d20      	adds	r0, r4, #4
 8009bae:	f7ff fc25 	bl	80093fc <RCCEx_PLL2_Config>
 8009bb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009bb4:	b9ed      	cbnz	r5, 8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009bb6:	4a49      	ldr	r2, [pc, #292]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009bb8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009bba:	f023 0307 	bic.w	r3, r3, #7
 8009bbe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8009bc0:	430b      	orrs	r3, r1
 8009bc2:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	f013 0f04 	tst.w	r3, #4
 8009bca:	d022      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009bcc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009bd0:	2b05      	cmp	r3, #5
 8009bd2:	d843      	bhi.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8009bd4:	e8df f003 	tbb	[pc, r3]
 8009bd8:	143b0f14 	.word	0x143b0f14
 8009bdc:	1414      	.short	0x1414
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bde:	2101      	movs	r1, #1
 8009be0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009be4:	f7ff fc90 	bl	8009508 <RCCEx_PLL3_Config>
 8009be8:	4605      	mov	r5, r0
      break;
 8009bea:	e7e3      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bec:	2601      	movs	r6, #1
 8009bee:	4635      	mov	r5, r6
 8009bf0:	e7e8      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8009bf2:	462e      	mov	r6, r5
 8009bf4:	e7e6      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	1d20      	adds	r0, r4, #4
 8009bfa:	f7ff fbff 	bl	80093fc <RCCEx_PLL2_Config>
 8009bfe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c00:	bb7d      	cbnz	r5, 8009c62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c02:	4a36      	ldr	r2, [pc, #216]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009c04:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009c06:	f023 0307 	bic.w	r3, r3, #7
 8009c0a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	f013 0f20 	tst.w	r3, #32
 8009c18:	d033      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c1a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c22:	d04c      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8009c24:	d822      	bhi.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8009c26:	b13b      	cbz	r3, 8009c38 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c2c:	d11b      	bne.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x652>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c2e:	2100      	movs	r1, #0
 8009c30:	1d20      	adds	r0, r4, #4
 8009c32:	f7ff fbe3 	bl	80093fc <RCCEx_PLL2_Config>
 8009c36:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009c38:	2d00      	cmp	r5, #0
 8009c3a:	d147      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c3c:	4a27      	ldr	r2, [pc, #156]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009c3e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009c40:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8009c44:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c4c:	e019      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c4e:	2101      	movs	r1, #1
 8009c50:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c54:	f7ff fc58 	bl	8009508 <RCCEx_PLL3_Config>
 8009c58:	4605      	mov	r5, r0
      break;
 8009c5a:	e7d1      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c5c:	2601      	movs	r6, #1
 8009c5e:	4635      	mov	r5, r6
 8009c60:	e7d7      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
 8009c62:	462e      	mov	r6, r5
 8009c64:	e7d5      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c66:	2601      	movs	r6, #1
 8009c68:	4635      	mov	r5, r6
 8009c6a:	e00a      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c70:	d0e2      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c76:	d0df      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009c78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c7c:	d0dc      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009c7e:	2601      	movs	r6, #1
 8009c80:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009c88:	d037      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c8a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8009c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c92:	d052      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009c94:	d826      	bhi.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8009c96:	b13b      	cbz	r3, 8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c9c:	d118      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	1d20      	adds	r0, r4, #4
 8009ca2:	f7ff fbab 	bl	80093fc <RCCEx_PLL2_Config>
 8009ca6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	d14d      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cac:	4a0b      	ldr	r2, [pc, #44]	@ (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009cae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009cb0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8009cb4:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cbc:	e01d      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cbe:	2102      	movs	r1, #2
 8009cc0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009cc4:	f7ff fc20 	bl	8009508 <RCCEx_PLL3_Config>
 8009cc8:	4605      	mov	r5, r0
      break;
 8009cca:	e7b5      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8009ccc:	462e      	mov	r6, r5
 8009cce:	e7d8      	b.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009cd0:	2601      	movs	r6, #1
 8009cd2:	4635      	mov	r5, r6
 8009cd4:	e011      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
 8009cd6:	bf00      	nop
 8009cd8:	58024800 	.word	0x58024800
 8009cdc:	58024400 	.word	0x58024400
 8009ce0:	00ffffcf 	.word	0x00ffffcf
 8009ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce8:	d0de      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009cea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cee:	d0db      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009cf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cf4:	d0d8      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009cf6:	2601      	movs	r6, #1
 8009cf8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d00:	d032      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x754>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d02:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8009d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d0a:	f000 809d 	beq.w	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8009d0e:	d820      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009d10:	b13b      	cbz	r3, 8009d22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d16:	d119      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x738>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d18:	2100      	movs	r1, #0
 8009d1a:	1d20      	adds	r0, r4, #4
 8009d1c:	f7ff fb6e 	bl	80093fc <RCCEx_PLL2_Config>
 8009d20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	f040 8097 	bne.w	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d28:	4aa5      	ldr	r2, [pc, #660]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009d2a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009d2c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8009d30:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8009d34:	430b      	orrs	r3, r1
 8009d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d38:	e016      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x754>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d3a:	2102      	movs	r1, #2
 8009d3c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009d40:	f7ff fbe2 	bl	8009508 <RCCEx_PLL3_Config>
 8009d44:	4605      	mov	r5, r0
      break;
 8009d46:	e7af      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8009d48:	462e      	mov	r6, r5
 8009d4a:	e7d6      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d4c:	2601      	movs	r6, #1
 8009d4e:	4635      	mov	r5, r6
 8009d50:	e00a      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8009d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d56:	d0e4      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d5c:	d0e1      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d5e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d62:	d0de      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009d64:	2601      	movs	r6, #1
 8009d66:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	f013 0f08 	tst.w	r3, #8
 8009d6e:	d00c      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x776>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009d70:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8009d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d78:	d06f      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d7a:	4a91      	ldr	r2, [pc, #580]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009d7c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009d7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009d82:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6553      	str	r3, [r2, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	f013 0f10 	tst.w	r3, #16
 8009d90:	d00c      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x798>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d92:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8009d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d9a:	d067      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x858>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d9c:	4a88      	ldr	r2, [pc, #544]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009d9e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009da4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6593      	str	r3, [r2, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8009db2:	d00b      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    switch(PeriphClkInit->AdcClockSelection)
 8009db4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8009db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dbc:	d06e      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x888>
 8009dbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc2:	d061      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05a      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
 8009dc8:	2601      	movs	r6, #1
 8009dca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8009dd2:	d00c      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7da>
    switch(PeriphClkInit->UsbClockSelection)
 8009dd4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009dd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ddc:	d076      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8009dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009de2:	d069      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009de4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009de8:	d061      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8009dea:	2601      	movs	r6, #1
 8009dec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009df4:	d007      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 8009df6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d070      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e00:	d07b      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8009e02:	2601      	movs	r6, #1
 8009e04:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8009e0c:	d17d      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8009e14:	f000 8086 	beq.w	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x910>
    switch(PeriphClkInit->RngClockSelection)
 8009e18:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8009e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e1e:	f000 80c6 	beq.w	8009fae <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8009e22:	d97c      	bls.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e28:	d003      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e2e:	f040 80bc 	bne.w	8009faa <HAL_RCCEx_PeriphCLKConfig+0x996>
    if(ret == HAL_OK)
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	f040 80c1 	bne.w	8009fba <HAL_RCCEx_PeriphCLKConfig+0x9a6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e38:	4a61      	ldr	r2, [pc, #388]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009e3a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e40:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8009e42:	430b      	orrs	r3, r1
 8009e44:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e46:	e06d      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x910>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e48:	2102      	movs	r1, #2
 8009e4a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e4e:	f7ff fb5b 	bl	8009508 <RCCEx_PLL3_Config>
 8009e52:	4605      	mov	r5, r0
      break;
 8009e54:	e765      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8009e56:	462e      	mov	r6, r5
 8009e58:	e786      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x754>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e60:	f7ff fb52 	bl	8009508 <RCCEx_PLL3_Config>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d088      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x766>
          status = HAL_ERROR;
 8009e68:	2601      	movs	r6, #1
 8009e6a:	e786      	b.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x766>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e72:	f7ff fb49 	bl	8009508 <RCCEx_PLL3_Config>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d090      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x788>
        status = HAL_ERROR;
 8009e7a:	2601      	movs	r6, #1
 8009e7c:	e78e      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x788>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e7e:	2100      	movs	r1, #0
 8009e80:	1d20      	adds	r0, r4, #4
 8009e82:	f7ff fabb 	bl	80093fc <RCCEx_PLL2_Config>
 8009e86:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8009e88:	b97d      	cbnz	r5, 8009eaa <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009e8c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009e8e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009e92:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8009e96:	430b      	orrs	r3, r1
 8009e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e9a:	e797      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e9c:	2102      	movs	r1, #2
 8009e9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009ea2:	f7ff fb31 	bl	8009508 <RCCEx_PLL3_Config>
 8009ea6:	4605      	mov	r5, r0
      break;
 8009ea8:	e7ee      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x874>
 8009eaa:	462e      	mov	r6, r5
 8009eac:	e78e      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eae:	4a44      	ldr	r2, [pc, #272]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009eb0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009eb8:	b97d      	cbnz	r5, 8009eda <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009eba:	4a41      	ldr	r2, [pc, #260]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ebc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009ebe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009ec2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eca:	e790      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ecc:	2101      	movs	r1, #1
 8009ece:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009ed2:	f7ff fb19 	bl	8009508 <RCCEx_PLL3_Config>
 8009ed6:	4605      	mov	r5, r0
      break;
 8009ed8:	e7ee      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8009eda:	462e      	mov	r6, r5
 8009edc:	e787      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x7da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ede:	4a38      	ldr	r2, [pc, #224]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ee0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if(ret == HAL_OK)
 8009ee8:	b96d      	cbnz	r5, 8009f06 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009eea:	4a35      	ldr	r2, [pc, #212]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009eec:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ef2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ef8:	e785      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009efa:	2102      	movs	r1, #2
 8009efc:	1d20      	adds	r0, r4, #4
 8009efe:	f7ff fa7d 	bl	80093fc <RCCEx_PLL2_Config>
 8009f02:	4605      	mov	r5, r0
      break;
 8009f04:	e7f0      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
 8009f06:	462e      	mov	r6, r5
 8009f08:	e77d      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009f0a:	2102      	movs	r1, #2
 8009f0c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009f10:	f7ff fafa 	bl	8009508 <RCCEx_PLL3_Config>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	f43f af7a 	beq.w	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      status=HAL_ERROR;
 8009f1a:	2601      	movs	r6, #1
 8009f1c:	e777      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    switch(PeriphClkInit->RngClockSelection)
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d087      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009f22:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8009f2a:	d006      	beq.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x926>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f2c:	4a24      	ldr	r2, [pc, #144]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f2e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f34:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8009f36:	430b      	orrs	r3, r1
 8009f38:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8009f40:	d007      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x93e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f42:	4a1f      	ldr	r2, [pc, #124]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f44:	6913      	ldr	r3, [r2, #16]
 8009f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f4a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8009f58:	d006      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x954>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f5a:	4a19      	ldr	r2, [pc, #100]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f5c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f62:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009f64:	430b      	orrs	r3, r1
 8009f66:	6513      	str	r3, [r2, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f6e:	d009      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f70:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f72:	691a      	ldr	r2, [r3, #16]
 8009f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f78:	611a      	str	r2, [r3, #16]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 8009f80:	430a      	orrs	r2, r1
 8009f82:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	db1c      	blt.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009f90:	d007      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f92:	4a0b      	ldr	r2, [pc, #44]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009f94:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8009f96:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009f9a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (status == HAL_OK)
 8009fa2:	b106      	cbz	r6, 8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x992>
  return HAL_ERROR;
 8009fa4:	2601      	movs	r6, #1
}
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8009faa:	2601      	movs	r6, #1
 8009fac:	e7ba      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fae:	4a04      	ldr	r2, [pc, #16]	@ (8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009fb0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
      break;
 8009fb8:	e73b      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8009fba:	462e      	mov	r6, r5
 8009fbc:	e7b2      	b.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8009fbe:	bf00      	nop
 8009fc0:	58024400 	.word	0x58024400
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009fc4:	4a03      	ldr	r2, [pc, #12]	@ (8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8009fc6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009fc8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8009fcc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009fd2:	e7da      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009fd4:	58024400 	.word	0x58024400

08009fd8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8009fd8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009fda:	f7ff f99f 	bl	800931c <HAL_RCC_GetHCLKFreq>
 8009fde:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009fe6:	4a04      	ldr	r2, [pc, #16]	@ (8009ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8009fe8:	5cd3      	ldrb	r3, [r2, r3]
 8009fea:	f003 031f 	and.w	r3, r3, #31
}
 8009fee:	40d8      	lsrs	r0, r3
 8009ff0:	bd08      	pop	{r3, pc}
 8009ff2:	bf00      	nop
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	0801df4c 	.word	0x0801df4c

08009ffc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8009ffc:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ffe:	4b78      	ldr	r3, [pc, #480]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a002:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a004:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a008:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a00a:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a010:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a014:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 800a018:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 800a01c:	f000 80db 	beq.w	800a1d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 800a020:	f002 0203 	and.w	r2, r2, #3
 800a024:	ee07 3a90 	vmov	s15, r3
 800a028:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a02c:	2a01      	cmp	r2, #1
 800a02e:	d066      	beq.n	800a0fe <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 800a030:	2a02      	cmp	r2, #2
 800a032:	f000 80b3 	beq.w	800a19c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a036:	b1e2      	cbz	r2, 800a072 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a038:	ee07 ca10 	vmov	s14, ip
 800a03c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a040:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a044:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a048:	4b65      	ldr	r3, [pc, #404]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a050:	ee06 3a90 	vmov	s13, r3
 800a054:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a058:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a05c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06c:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a070:	e061      	b.n	800a136 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a072:	4b5b      	ldr	r3, [pc, #364]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f013 0f20 	tst.w	r3, #32
 800a07a:	d023      	beq.n	800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a07c:	4958      	ldr	r1, [pc, #352]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a07e:	680a      	ldr	r2, [r1, #0]
 800a080:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a084:	4b59      	ldr	r3, [pc, #356]	@ (800a1ec <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 800a086:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a088:	ee07 3a10 	vmov	s14, r3
 800a08c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a090:	ee07 ca10 	vmov	s14, ip
 800a094:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a098:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a09c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800a09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a2:	ee06 3a90 	vmov	s13, r3
 800a0a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a0aa:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a0ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0c2:	e038      	b.n	800a136 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0c4:	ee07 ca10 	vmov	s14, ip
 800a0c8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a0cc:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800a1f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 800a0d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a0d4:	4b42      	ldr	r3, [pc, #264]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0dc:	ee06 3a90 	vmov	s13, r3
 800a0e0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a0e4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a0e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0fc:	e01b      	b.n	800a136 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0fe:	ee07 ca10 	vmov	s14, ip
 800a102:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a106:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a1e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800a10a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a10e:	4b34      	ldr	r3, [pc, #208]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a116:	ee06 3a90 	vmov	s13, r3
 800a11a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a11e:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a122:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a136:	4a2a      	ldr	r2, [pc, #168]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a138:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a13a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a152:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a156:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a15a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a15c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a160:	ee07 3a90 	vmov	s15, r3
 800a164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a170:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a174:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a178:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800a17a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a18a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a18e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a192:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a19a:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a19c:	ee07 ca10 	vmov	s14, ip
 800a1a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a1a4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a1f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 800a1a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1b4:	ee06 3a90 	vmov	s13, r3
 800a1b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a1bc:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a1e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800a1c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a1c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1d0:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a1d4:	e7af      	b.n	800a136 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a1da:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a1dc:	6083      	str	r3, [r0, #8]
}
 800a1de:	e7da      	b.n	800a196 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 800a1e0:	58024400 	.word	0x58024400
 800a1e4:	4a742400 	.word	0x4a742400
 800a1e8:	39000000 	.word	0x39000000
 800a1ec:	03d09000 	.word	0x03d09000
 800a1f0:	4c742400 	.word	0x4c742400
 800a1f4:	4bb71b00 	.word	0x4bb71b00

0800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 800a1f8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1fa:	4b78      	ldr	r3, [pc, #480]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a1fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a1fe:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a200:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a204:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a206:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a20a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a20c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a210:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 800a214:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 800a218:	f000 80db 	beq.w	800a3d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 800a21c:	f002 0203 	and.w	r2, r2, #3
 800a220:	ee07 3a90 	vmov	s15, r3
 800a224:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a228:	2a01      	cmp	r2, #1
 800a22a:	d066      	beq.n	800a2fa <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800a22c:	2a02      	cmp	r2, #2
 800a22e:	f000 80b3 	beq.w	800a398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a232:	b1e2      	cbz	r2, 800a26e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a234:	ee07 ca10 	vmov	s14, ip
 800a238:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a23c:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a240:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a244:	4b65      	ldr	r3, [pc, #404]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	ee06 3a90 	vmov	s13, r3
 800a250:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a254:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a258:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a25c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a264:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a268:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a26c:	e061      	b.n	800a332 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a26e:	4b5b      	ldr	r3, [pc, #364]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f013 0f20 	tst.w	r3, #32
 800a276:	d023      	beq.n	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a278:	4958      	ldr	r1, [pc, #352]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a27a:	680a      	ldr	r2, [r1, #0]
 800a27c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a280:	4b59      	ldr	r3, [pc, #356]	@ (800a3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800a282:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a284:	ee07 3a10 	vmov	s14, r3
 800a288:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a28c:	ee07 ca10 	vmov	s14, ip
 800a290:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a294:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a298:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29e:	ee06 3a90 	vmov	s13, r3
 800a2a2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a2a6:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a2aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2be:	e038      	b.n	800a332 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2c0:	ee07 ca10 	vmov	s14, ip
 800a2c4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a2c8:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 800a3ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 800a2cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a2d0:	4b42      	ldr	r3, [pc, #264]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d8:	ee06 3a90 	vmov	s13, r3
 800a2dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a2e0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a2e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2f8:	e01b      	b.n	800a332 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2fa:	ee07 ca10 	vmov	s14, ip
 800a2fe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a302:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800a306:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a30a:	4b34      	ldr	r3, [pc, #208]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	ee06 3a90 	vmov	s13, r3
 800a316:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a31a:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a31e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a32e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a332:	4a2a      	ldr	r2, [pc, #168]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a334:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a336:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a34e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a352:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a356:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a358:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a368:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a36c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a370:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a374:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a376:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a37a:	ee07 3a90 	vmov	s15, r3
 800a37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a386:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a38a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a38e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a392:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a396:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a398:	ee07 ca10 	vmov	s14, ip
 800a39c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a3a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a3f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 800a3a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b0:	ee06 3a90 	vmov	s13, r3
 800a3b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a3b8:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800a3bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a3d0:	e7af      	b.n	800a332 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a3d6:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a3d8:	6083      	str	r3, [r0, #8]
}
 800a3da:	e7da      	b.n	800a392 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 800a3dc:	58024400 	.word	0x58024400
 800a3e0:	4a742400 	.word	0x4a742400
 800a3e4:	39000000 	.word	0x39000000
 800a3e8:	03d09000 	.word	0x03d09000
 800a3ec:	4c742400 	.word	0x4c742400
 800a3f0:	4bb71b00 	.word	0x4bb71b00

0800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 800a3f4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3f6:	4b78      	ldr	r3, [pc, #480]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a3f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a3fa:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a3fc:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a400:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a402:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a408:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800a40c:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 800a410:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 800a414:	f000 80db 	beq.w	800a5ce <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 800a418:	f002 0203 	and.w	r2, r2, #3
 800a41c:	ee07 3a90 	vmov	s15, r3
 800a420:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800a424:	2a01      	cmp	r2, #1
 800a426:	d066      	beq.n	800a4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 800a428:	2a02      	cmp	r2, #2
 800a42a:	f000 80b3 	beq.w	800a594 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 800a42e:	b1e2      	cbz	r2, 800a46a <HAL_RCCEx_GetPLL1ClockFreq+0x76>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a430:	ee07 ca10 	vmov	s14, ip
 800a434:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a438:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800a5dc <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a43c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a440:	4b65      	ldr	r3, [pc, #404]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a448:	ee06 3a90 	vmov	s13, r3
 800a44c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a450:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 800a5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a454:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a464:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a468:	e061      	b.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46a:	4b5b      	ldr	r3, [pc, #364]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f013 0f20 	tst.w	r3, #32
 800a472:	d023      	beq.n	800a4bc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a474:	4958      	ldr	r1, [pc, #352]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a476:	680a      	ldr	r2, [r1, #0]
 800a478:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a47c:	4b59      	ldr	r3, [pc, #356]	@ (800a5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800a47e:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a480:	ee07 3a10 	vmov	s14, r3
 800a484:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a488:	ee07 ca10 	vmov	s14, ip
 800a48c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800a490:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800a494:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800a496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49a:	ee06 3a90 	vmov	s13, r3
 800a49e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a4a2:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 800a5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a4a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a4aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4ba:	e038      	b.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4bc:	ee07 ca10 	vmov	s14, ip
 800a4c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a4c4:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800a5dc <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800a4c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a4cc:	4b42      	ldr	r3, [pc, #264]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d4:	ee06 3a90 	vmov	s13, r3
 800a4d8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a4dc:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800a5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a4e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a4e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4f4:	e01b      	b.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4f6:	ee07 ca10 	vmov	s14, ip
 800a4fa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a4fe:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 800a5e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 800a502:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a506:	4b34      	ldr	r3, [pc, #208]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50e:	ee06 3a90 	vmov	s13, r3
 800a512:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a516:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 800a5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a51a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a52e:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a530:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a532:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a546:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a54a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a54e:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a552:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a554:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a564:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800a568:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800a56c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a570:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a572:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a582:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a586:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a58a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800a58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a592:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a594:	ee07 ca10 	vmov	s14, ip
 800a598:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800a59c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a5ec <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800a5a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ac:	ee06 3a90 	vmov	s13, r3
 800a5b0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a5b4:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800a5e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 800a5b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a5bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c8:	ee27 7a27 	vmul.f32	s14, s14, s15
      break;
 800a5cc:	e7af      	b.n	800a52e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a5d2:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a5d4:	6083      	str	r3, [r0, #8]
}
 800a5d6:	e7da      	b.n	800a58e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 800a5d8:	58024400 	.word	0x58024400
 800a5dc:	4c742400 	.word	0x4c742400
 800a5e0:	39000000 	.word	0x39000000
 800a5e4:	03d09000 	.word	0x03d09000
 800a5e8:	4a742400 	.word	0x4a742400
 800a5ec:	4bb71b00 	.word	0x4bb71b00

0800a5f0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800a5f0:	b500      	push	{lr}
 800a5f2:	b08b      	sub	sp, #44	@ 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a5f4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a5f8:	d020      	beq.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5fa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800a5fe:	d071      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a600:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 800a604:	f000 80c8 	beq.w	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a608:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800a60c:	f000 8121 	beq.w	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a610:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800a614:	f000 8182 	beq.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a618:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 800a61c:	f000 81db 	beq.w	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a620:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a624:	f000 821f 	beq.w	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a628:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 800a62c:	f000 8239 	beq.w	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a630:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a634:	f000 8284 	beq.w	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
      frequency = 0;
 800a638:	2000      	movs	r0, #0
 800a63a:	e2b2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a63c:	4b95      	ldr	r3, [pc, #596]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a63e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a640:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 800a644:	2b04      	cmp	r3, #4
 800a646:	f200 82a3 	bhi.w	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a64a:	e8df f003 	tbb	[pc, r3]
 800a64e:	1005      	.short	0x1005
 800a650:	031b      	.short	0x031b
 800a652:	26          	.byte	0x26
 800a653:	00          	.byte	0x00
 800a654:	4890      	ldr	r0, [pc, #576]	@ (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a656:	e2a4      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a658:	4b8e      	ldr	r3, [pc, #568]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a65a:	6818      	ldr	r0, [r3, #0]
 800a65c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a660:	f000 829f 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a664:	a807      	add	r0, sp, #28
 800a666:	f7ff fec5 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a66a:	9808      	ldr	r0, [sp, #32]
 800a66c:	e299      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a66e:	4b89      	ldr	r3, [pc, #548]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a676:	f000 8294 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67a:	a804      	add	r0, sp, #16
 800a67c:	f7ff fcbe 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a680:	9804      	ldr	r0, [sp, #16]
 800a682:	e28e      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a684:	4b83      	ldr	r3, [pc, #524]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a686:	6818      	ldr	r0, [r3, #0]
 800a688:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a68c:	f000 8289 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a690:	a801      	add	r0, sp, #4
 800a692:	f7ff fdb1 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a696:	9801      	ldr	r0, [sp, #4]
 800a698:	e283      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a69a:	4a7e      	ldr	r2, [pc, #504]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a69c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a69e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a2:	6812      	ldr	r2, [r2, #0]
 800a6a4:	f012 0f04 	tst.w	r2, #4
 800a6a8:	d007      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 800a6aa:	b933      	cbnz	r3, 800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0xca>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6ac:	4b79      	ldr	r3, [pc, #484]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a6b4:	4879      	ldr	r0, [pc, #484]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a6b6:	40d8      	lsrs	r0, r3
 800a6b8:	e273      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ba:	4a76      	ldr	r2, [pc, #472]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a6c2:	d003      	beq.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800a6c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c8:	f000 8264 	beq.w	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6cc:	4a71      	ldr	r2, [pc, #452]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a6d4:	f000 8260 	beq.w	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a6d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6dc:	f000 825e 	beq.w	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
            frequency = 0;
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e25e      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a6e4:	4b6b      	ldr	r3, [pc, #428]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a6e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6e8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
      switch (saiclocksource)
 800a6ec:	2b80      	cmp	r3, #128	@ 0x80
 800a6ee:	d033      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800a6f0:	d915      	bls.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800a6f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6f4:	f000 8254 	beq.w	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800a6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6fc:	d11f      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a6fe:	4a65      	ldr	r2, [pc, #404]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a700:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a706:	6812      	ldr	r2, [r2, #0]
 800a708:	f012 0f04 	tst.w	r2, #4
 800a70c:	d02f      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a70e:	bb73      	cbnz	r3, 800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a710:	4b60      	ldr	r3, [pc, #384]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a718:	4860      	ldr	r0, [pc, #384]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a71a:	40d8      	lsrs	r0, r3
 800a71c:	e241      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800a71e:	b183      	cbz	r3, 800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800a720:	2b40      	cmp	r3, #64	@ 0x40
 800a722:	d10a      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a724:	4b5b      	ldr	r3, [pc, #364]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a72c:	f000 8239 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a730:	a804      	add	r0, sp, #16
 800a732:	f7ff fc63 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a736:	9804      	ldr	r0, [sp, #16]
 800a738:	e233      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a73a:	2000      	movs	r0, #0
 800a73c:	e231      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a73e:	2000      	movs	r0, #0
 800a740:	e22f      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a742:	4b54      	ldr	r3, [pc, #336]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a74a:	f000 822a 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a74e:	a807      	add	r0, sp, #28
 800a750:	f7ff fe50 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a754:	9808      	ldr	r0, [sp, #32]
 800a756:	e224      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a758:	4b4e      	ldr	r3, [pc, #312]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a760:	f000 821f 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a764:	a801      	add	r0, sp, #4
 800a766:	f7ff fd47 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a76a:	9801      	ldr	r0, [sp, #4]
 800a76c:	e219      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a76e:	4a49      	ldr	r2, [pc, #292]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a776:	d003      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a77c:	f000 8214 	beq.w	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a780:	4a44      	ldr	r2, [pc, #272]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a782:	6812      	ldr	r2, [r2, #0]
 800a784:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a788:	f000 8210 	beq.w	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800a78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a790:	f000 820e 	beq.w	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
            frequency = 0;
 800a794:	2000      	movs	r0, #0
 800a796:	e204      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a798:	4b3e      	ldr	r3, [pc, #248]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
      switch (saiclocksource)
 800a7a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7a4:	d035      	beq.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 800a7a6:	d916      	bls.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a7a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a7ac:	f000 8202 	beq.w	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a7b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7b4:	d120      	bne.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7b6:	4a37      	ldr	r2, [pc, #220]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7b8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a7ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7be:	6812      	ldr	r2, [r2, #0]
 800a7c0:	f012 0f04 	tst.w	r2, #4
 800a7c4:	d030      	beq.n	800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800a7c6:	bb7b      	cbnz	r3, 800a828 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7c8:	4b32      	ldr	r3, [pc, #200]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a7d0:	4832      	ldr	r0, [pc, #200]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a7d2:	40d8      	lsrs	r0, r3
 800a7d4:	e1e5      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800a7d6:	b18b      	cbz	r3, 800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 800a7d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7dc:	d10a      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7de:	4b2d      	ldr	r3, [pc, #180]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a7e6:	f000 81dc 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ea:	a804      	add	r0, sp, #16
 800a7ec:	f7ff fc06 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7f0:	9804      	ldr	r0, [sp, #16]
 800a7f2:	e1d6      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e1d4      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	e1d2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7fc:	4b25      	ldr	r3, [pc, #148]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7fe:	6818      	ldr	r0, [r3, #0]
 800a800:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a804:	f000 81cd 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a808:	a807      	add	r0, sp, #28
 800a80a:	f7ff fdf3 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a80e:	9808      	ldr	r0, [sp, #32]
 800a810:	e1c7      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a812:	4b20      	ldr	r3, [pc, #128]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a81a:	f000 81c2 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81e:	a801      	add	r0, sp, #4
 800a820:	f7ff fcea 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a824:	9801      	ldr	r0, [sp, #4]
 800a826:	e1bc      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a828:	4a1a      	ldr	r2, [pc, #104]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a830:	d003      	beq.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 800a832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a836:	f000 81bf 	beq.w	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a83a:	4a16      	ldr	r2, [pc, #88]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a842:	f000 81bb 	beq.w	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84a:	f000 81b9 	beq.w	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
            frequency = 0;
 800a84e:	2000      	movs	r0, #0
 800a850:	e1a7      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a852:	4b10      	ldr	r3, [pc, #64]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a856:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
      switch (saiclocksource)
 800a85a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a85e:	d03d      	beq.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 800a860:	d91e      	bls.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800a862:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a866:	f000 81ad 	beq.w	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800a86a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a86e:	d128      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a870:	4a08      	ldr	r2, [pc, #32]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a872:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a874:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a878:	6812      	ldr	r2, [r2, #0]
 800a87a:	f012 0f04 	tst.w	r2, #4
 800a87e:	d038      	beq.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800a880:	2b00      	cmp	r3, #0
 800a882:	d136      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a884:	4b03      	ldr	r3, [pc, #12]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a88c:	4803      	ldr	r0, [pc, #12]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800a88e:	40d8      	lsrs	r0, r3
 800a890:	e187      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a892:	bf00      	nop
 800a894:	58024400 	.word	0x58024400
 800a898:	00bb8000 	.word	0x00bb8000
 800a89c:	03d09000 	.word	0x03d09000
      switch (saiclocksource)
 800a8a0:	b18b      	cbz	r3, 800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a8a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8a6:	d10a      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8a8:	4b99      	ldr	r3, [pc, #612]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a8b0:	f000 8177 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8b4:	a804      	add	r0, sp, #16
 800a8b6:	f7ff fba1 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ba:	9804      	ldr	r0, [sp, #16]
 800a8bc:	e171      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e16f      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e16d      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8c6:	4b92      	ldr	r3, [pc, #584]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a8ce:	f000 8168 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8d2:	a807      	add	r0, sp, #28
 800a8d4:	f7ff fd8e 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8d8:	9808      	ldr	r0, [sp, #32]
 800a8da:	e162      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8dc:	4b8c      	ldr	r3, [pc, #560]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a8e4:	f000 815d 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e8:	a801      	add	r0, sp, #4
 800a8ea:	f7ff fc85 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8ee:	9801      	ldr	r0, [sp, #4]
 800a8f0:	e157      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8f2:	4a87      	ldr	r2, [pc, #540]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a8fa:	d003      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800a8fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a900:	f000 8162 	beq.w	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a904:	4a82      	ldr	r2, [pc, #520]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a906:	6812      	ldr	r2, [r2, #0]
 800a908:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a90c:	f000 815e 	beq.w	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800a910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a914:	f000 815c 	beq.w	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
            frequency = 0;
 800a918:	2000      	movs	r0, #0
 800a91a:	e142      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a91c:	4b7c      	ldr	r3, [pc, #496]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a91e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a920:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
      switch (srcclk)
 800a924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a928:	d035      	beq.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800a92a:	d916      	bls.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800a92c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a930:	f000 8150 	beq.w	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a938:	d120      	bne.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a93a:	4a75      	ldr	r2, [pc, #468]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a93c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a93e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	f012 0f04 	tst.w	r2, #4
 800a948:	d030      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a94a:	bb7b      	cbnz	r3, 800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a94c:	4b70      	ldr	r3, [pc, #448]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a954:	486f      	ldr	r0, [pc, #444]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a956:	40d8      	lsrs	r0, r3
 800a958:	e123      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800a95a:	b18b      	cbz	r3, 800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800a95c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a960:	d10a      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a962:	4b6b      	ldr	r3, [pc, #428]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a96a:	f000 811a 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a96e:	a804      	add	r0, sp, #16
 800a970:	f7ff fb44 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a974:	9804      	ldr	r0, [sp, #16]
 800a976:	e114      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800a978:	2000      	movs	r0, #0
 800a97a:	e112      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800a97c:	2000      	movs	r0, #0
 800a97e:	e110      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a980:	4b63      	ldr	r3, [pc, #396]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800a988:	f000 810b 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98c:	a807      	add	r0, sp, #28
 800a98e:	f7ff fd31 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a992:	9808      	ldr	r0, [sp, #32]
 800a994:	e105      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a996:	4b5e      	ldr	r3, [pc, #376]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800a99e:	f000 8100 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a2:	a801      	add	r0, sp, #4
 800a9a4:	f7ff fc28 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9a8:	9801      	ldr	r0, [sp, #4]
 800a9aa:	e0fa      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9ac:	4a58      	ldr	r2, [pc, #352]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9ae:	6812      	ldr	r2, [r2, #0]
 800a9b0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a9b4:	d003      	beq.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a9b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9ba:	f000 810d 	beq.w	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9be:	4a54      	ldr	r2, [pc, #336]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800a9c6:	f000 8109 	beq.w	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 800a9ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ce:	f000 8107 	beq.w	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            frequency = 0;
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	e0e5      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a9d6:	4b4e      	ldr	r3, [pc, #312]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
      switch (srcclk)
 800a9de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9e2:	d010      	beq.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800a9e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9e8:	d018      	beq.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800a9ea:	b10b      	cbz	r3, 800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e0d8      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9f0:	4b47      	ldr	r3, [pc, #284]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800a9f8:	f000 80d3 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9fc:	a804      	add	r0, sp, #16
 800a9fe:	f7ff fafd 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa02:	9804      	ldr	r0, [sp, #16]
 800aa04:	e0cd      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa06:	4b42      	ldr	r3, [pc, #264]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800aa0e:	f000 80c8 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa12:	a801      	add	r0, sp, #4
 800aa14:	f7ff fbf0 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa18:	9803      	ldr	r0, [sp, #12]
 800aa1a:	e0c2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aa1c:	4a3c      	ldr	r2, [pc, #240]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa1e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aa20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa24:	6812      	ldr	r2, [r2, #0]
 800aa26:	f012 0f04 	tst.w	r2, #4
 800aa2a:	d007      	beq.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
 800aa2c:	b933      	cbnz	r3, 800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa2e:	4b38      	ldr	r3, [pc, #224]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa36:	4837      	ldr	r0, [pc, #220]	@ (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa38:	40d8      	lsrs	r0, r3
 800aa3a:	e0b2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa3c:	4a34      	ldr	r2, [pc, #208]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800aa44:	d003      	beq.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800aa46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa4a:	f000 80cb 	beq.w	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa4e:	4a30      	ldr	r2, [pc, #192]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800aa56:	f000 80c7 	beq.w	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800aa5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa5e:	f000 80c5 	beq.w	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            frequency = 0;
 800aa62:	2000      	movs	r0, #0
 800aa64:	e09d      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aa66:	4b2a      	ldr	r3, [pc, #168]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      switch (srcclk)
 800aa6a:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800aa6e:	d002      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800aa70:	b963      	cbnz	r3, 800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800aa72:	2000      	movs	r0, #0
 800aa74:	e095      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa76:	4b26      	ldr	r3, [pc, #152]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa78:	6818      	ldr	r0, [r3, #0]
 800aa7a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800aa7e:	f000 8090 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa82:	a807      	add	r0, sp, #28
 800aa84:	f7ff fcb6 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa88:	9808      	ldr	r0, [sp, #32]
 800aa8a:	e08a      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa8c:	4b20      	ldr	r3, [pc, #128]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aa8e:	6818      	ldr	r0, [r3, #0]
 800aa90:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800aa94:	f000 8085 	beq.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa98:	a804      	add	r0, sp, #16
 800aa9a:	f7ff faaf 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa9e:	9806      	ldr	r0, [sp, #24]
 800aaa0:	e07f      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800aaa2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aaa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
      switch (srcclk)
 800aaaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aaae:	d035      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 800aab0:	d815      	bhi.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800aab2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab6:	d021      	beq.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 800aab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aabc:	d109      	bne.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aabe:	4b14      	ldr	r3, [pc, #80]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aac0:	6818      	ldr	r0, [r3, #0]
 800aac2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800aac6:	d06c      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac8:	a801      	add	r0, sp, #4
 800aaca:	f7ff fb95 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aace:	9802      	ldr	r0, [sp, #8]
 800aad0:	e067      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800aad2:	b913      	cbnz	r3, 800aada <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aad4:	f7ff fa80 	bl	8009fd8 <HAL_RCCEx_GetD3PCLK1Freq>
          break;
 800aad8:	e063      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800aada:	2000      	movs	r0, #0
 800aadc:	e061      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aae2:	d026      	beq.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
 800aae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aae8:	d106      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaea:	4b09      	ldr	r3, [pc, #36]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800aaf2:	d056      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800aaf4:	4808      	ldr	r0, [pc, #32]	@ (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aaf6:	e054      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e052      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aafc:	4b04      	ldr	r3, [pc, #16]	@ (800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ab04:	d04d      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab06:	a804      	add	r0, sp, #16
 800ab08:	f7ff fa78 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	e048      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800ab10:	58024400 	.word	0x58024400
 800ab14:	03d09000 	.word	0x03d09000
 800ab18:	016e3600 	.word	0x016e3600
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab1c:	4b34      	ldr	r3, [pc, #208]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab1e:	6818      	ldr	r0, [r3, #0]
 800ab20:	f010 0004 	ands.w	r0, r0, #4
 800ab24:	d03d      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ab2c:	4831      	ldr	r0, [pc, #196]	@ (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800ab2e:	40d8      	lsrs	r0, r3
 800ab30:	e037      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab32:	4b2f      	ldr	r3, [pc, #188]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 800ab3a:	d032      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = CSI_VALUE;
 800ab3c:	482e      	ldr	r0, [pc, #184]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ab3e:	e030      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ab40:	4b2b      	ldr	r3, [pc, #172]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (srcclk)
 800ab48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab4c:	d00c      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ab4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab52:	d013      	beq.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800ab54:	b10b      	cbz	r3, 800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800ab56:	2000      	movs	r0, #0
  return frequency;
 800ab58:	e023      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab5a:	4b25      	ldr	r3, [pc, #148]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab5c:	6818      	ldr	r0, [r3, #0]
 800ab5e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800ab62:	d01e      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = HSE_VALUE;
 800ab64:	4825      	ldr	r0, [pc, #148]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800ab66:	e01c      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab68:	4b21      	ldr	r3, [pc, #132]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800ab70:	d017      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab72:	a807      	add	r0, sp, #28
 800ab74:	f7ff fc3e 	bl	800a3f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab78:	9808      	ldr	r0, [sp, #32]
 800ab7a:	e012      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab7c:	4b1c      	ldr	r3, [pc, #112]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800ab84:	d00d      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab86:	a804      	add	r0, sp, #16
 800ab88:	f7ff fa38 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab8c:	9805      	ldr	r0, [sp, #20]
 800ab8e:	e008      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
          frequency = 0;
 800ab90:	2000      	movs	r0, #0
 800ab92:	e006      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800ab94:	4818      	ldr	r0, [pc, #96]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800ab96:	e004      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800ab98:	2000      	movs	r0, #0
 800ab9a:	e002      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800ab9c:	4817      	ldr	r0, [pc, #92]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800ab9e:	e000      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800aba0:	4817      	ldr	r0, [pc, #92]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
}
 800aba2:	b00b      	add	sp, #44	@ 0x2c
 800aba4:	f85d fb04 	ldr.w	pc, [sp], #4
            frequency = CSI_VALUE;
 800aba8:	4813      	ldr	r0, [pc, #76]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abaa:	e7fa      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abac:	2000      	movs	r0, #0
 800abae:	e7f8      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abb0:	4812      	ldr	r0, [pc, #72]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abb2:	e7f6      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800abb4:	4812      	ldr	r0, [pc, #72]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800abb6:	e7f4      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abb8:	480f      	ldr	r0, [pc, #60]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abba:	e7f2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abbc:	2000      	movs	r0, #0
 800abbe:	e7f0      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abc0:	480e      	ldr	r0, [pc, #56]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abc2:	e7ee      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (saiclocksource)
 800abc4:	480e      	ldr	r0, [pc, #56]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800abc6:	e7ec      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abc8:	480b      	ldr	r0, [pc, #44]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abca:	e7ea      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abcc:	2000      	movs	r0, #0
 800abce:	e7e8      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abd0:	480a      	ldr	r0, [pc, #40]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abd2:	e7e6      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
      switch (srcclk)
 800abd4:	480a      	ldr	r0, [pc, #40]	@ (800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800abd6:	e7e4      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abd8:	4807      	ldr	r0, [pc, #28]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abda:	e7e2      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abdc:	2000      	movs	r0, #0
 800abde:	e7e0      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abe0:	4806      	ldr	r0, [pc, #24]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abe2:	e7de      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = CSI_VALUE;
 800abe4:	4804      	ldr	r0, [pc, #16]	@ (800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800abe6:	e7dc      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = 0;
 800abe8:	2000      	movs	r0, #0
 800abea:	e7da      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            frequency = HSE_VALUE;
 800abec:	4803      	ldr	r0, [pc, #12]	@ (800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800abee:	e7d8      	b.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 800abf0:	58024400 	.word	0x58024400
 800abf4:	03d09000 	.word	0x03d09000
 800abf8:	003d0900 	.word	0x003d0900
 800abfc:	016e3600 	.word	0x016e3600
 800ac00:	00bb8000 	.word	0x00bb8000

0800ac04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac04:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac06:	6a03      	ldr	r3, [r0, #32]
 800ac08:	f023 0301 	bic.w	r3, r3, #1
 800ac0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac10:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac12:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac14:	4b1e      	ldr	r3, [pc, #120]	@ (800ac90 <TIM_OC1_SetConfig+0x8c>)
 800ac16:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac18:	680d      	ldr	r5, [r1, #0]
 800ac1a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac1c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac20:	688b      	ldr	r3, [r1, #8]
 800ac22:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac24:	4a1b      	ldr	r2, [pc, #108]	@ (800ac94 <TIM_OC1_SetConfig+0x90>)
 800ac26:	4c1c      	ldr	r4, [pc, #112]	@ (800ac98 <TIM_OC1_SetConfig+0x94>)
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	bf18      	it	ne
 800ac2c:	4290      	cmpne	r0, r2
 800ac2e:	bf0c      	ite	eq
 800ac30:	2201      	moveq	r2, #1
 800ac32:	2200      	movne	r2, #0
 800ac34:	d00c      	beq.n	800ac50 <TIM_OC1_SetConfig+0x4c>
 800ac36:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ac3a:	42a0      	cmp	r0, r4
 800ac3c:	bf14      	ite	ne
 800ac3e:	2400      	movne	r4, #0
 800ac40:	2401      	moveq	r4, #1
 800ac42:	4f16      	ldr	r7, [pc, #88]	@ (800ac9c <TIM_OC1_SetConfig+0x98>)
 800ac44:	42b8      	cmp	r0, r7
 800ac46:	d003      	beq.n	800ac50 <TIM_OC1_SetConfig+0x4c>
 800ac48:	b914      	cbnz	r4, 800ac50 <TIM_OC1_SetConfig+0x4c>
 800ac4a:	4c15      	ldr	r4, [pc, #84]	@ (800aca0 <TIM_OC1_SetConfig+0x9c>)
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	d105      	bne.n	800ac5c <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac50:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac54:	68cc      	ldr	r4, [r1, #12]
 800ac56:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac58:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac5c:	b95a      	cbnz	r2, 800ac76 <TIM_OC1_SetConfig+0x72>
 800ac5e:	4a11      	ldr	r2, [pc, #68]	@ (800aca4 <TIM_OC1_SetConfig+0xa0>)
 800ac60:	4290      	cmp	r0, r2
 800ac62:	bf14      	ite	ne
 800ac64:	2200      	movne	r2, #0
 800ac66:	2201      	moveq	r2, #1
 800ac68:	4c0c      	ldr	r4, [pc, #48]	@ (800ac9c <TIM_OC1_SetConfig+0x98>)
 800ac6a:	42a0      	cmp	r0, r4
 800ac6c:	d003      	beq.n	800ac76 <TIM_OC1_SetConfig+0x72>
 800ac6e:	b912      	cbnz	r2, 800ac76 <TIM_OC1_SetConfig+0x72>
 800ac70:	4a0b      	ldr	r2, [pc, #44]	@ (800aca0 <TIM_OC1_SetConfig+0x9c>)
 800ac72:	4290      	cmp	r0, r2
 800ac74:	d105      	bne.n	800ac82 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac76:	f426 7640 	bic.w	r6, r6, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac7a:	694a      	ldr	r2, [r1, #20]
 800ac7c:	4332      	orrs	r2, r6
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac7e:	698e      	ldr	r6, [r1, #24]
 800ac80:	4316      	orrs	r6, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac82:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac84:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac86:	684a      	ldr	r2, [r1, #4]
 800ac88:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac8a:	6203      	str	r3, [r0, #32]
}
 800ac8c:	bcf0      	pop	{r4, r5, r6, r7}
 800ac8e:	4770      	bx	lr
 800ac90:	fffeff8c 	.word	0xfffeff8c
 800ac94:	40010000 	.word	0x40010000
 800ac98:	40010400 	.word	0x40010400
 800ac9c:	40014000 	.word	0x40014000
 800aca0:	40014800 	.word	0x40014800
 800aca4:	40014400 	.word	0x40014400

0800aca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aca8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acaa:	6a03      	ldr	r3, [r0, #32]
 800acac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acb0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acb6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800acb8:	4a1a      	ldr	r2, [pc, #104]	@ (800ad24 <TIM_OC3_SetConfig+0x7c>)
 800acba:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acbc:	680e      	ldr	r6, [r1, #0]
 800acbe:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acc4:	688a      	ldr	r2, [r1, #8]
 800acc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acca:	4a17      	ldr	r2, [pc, #92]	@ (800ad28 <TIM_OC3_SetConfig+0x80>)
 800accc:	4c17      	ldr	r4, [pc, #92]	@ (800ad2c <TIM_OC3_SetConfig+0x84>)
 800acce:	42a0      	cmp	r0, r4
 800acd0:	bf18      	it	ne
 800acd2:	4290      	cmpne	r0, r2
 800acd4:	bf0c      	ite	eq
 800acd6:	2201      	moveq	r2, #1
 800acd8:	2200      	movne	r2, #0
 800acda:	d106      	bne.n	800acea <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ace0:	68cc      	ldr	r4, [r1, #12]
 800ace2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ace6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acea:	b95a      	cbnz	r2, 800ad04 <TIM_OC3_SetConfig+0x5c>
 800acec:	4a10      	ldr	r2, [pc, #64]	@ (800ad30 <TIM_OC3_SetConfig+0x88>)
 800acee:	4290      	cmp	r0, r2
 800acf0:	bf14      	ite	ne
 800acf2:	2200      	movne	r2, #0
 800acf4:	2201      	moveq	r2, #1
 800acf6:	4c0f      	ldr	r4, [pc, #60]	@ (800ad34 <TIM_OC3_SetConfig+0x8c>)
 800acf8:	42a0      	cmp	r0, r4
 800acfa:	d003      	beq.n	800ad04 <TIM_OC3_SetConfig+0x5c>
 800acfc:	b912      	cbnz	r2, 800ad04 <TIM_OC3_SetConfig+0x5c>
 800acfe:	4a0e      	ldr	r2, [pc, #56]	@ (800ad38 <TIM_OC3_SetConfig+0x90>)
 800ad00:	4290      	cmp	r0, r2
 800ad02:	d107      	bne.n	800ad14 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad04:	f425 5240 	bic.w	r2, r5, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad08:	694c      	ldr	r4, [r1, #20]
 800ad0a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad0e:	698c      	ldr	r4, [r1, #24]
 800ad10:	ea42 1504 	orr.w	r5, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad14:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad16:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad18:	684a      	ldr	r2, [r1, #4]
 800ad1a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1c:	6203      	str	r3, [r0, #32]
}
 800ad1e:	bc70      	pop	{r4, r5, r6}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	fffeff8c 	.word	0xfffeff8c
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400
 800ad30:	40014400 	.word	0x40014400
 800ad34:	40014000 	.word	0x40014000
 800ad38:	40014800 	.word	0x40014800

0800ad3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad3e:	6a03      	ldr	r3, [r0, #32]
 800ad40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad46:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad4a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad4c:	4a14      	ldr	r2, [pc, #80]	@ (800ada0 <TIM_OC4_SetConfig+0x64>)
 800ad4e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad50:	680d      	ldr	r5, [r1, #0]
 800ad52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad5a:	688d      	ldr	r5, [r1, #8]
 800ad5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad60:	4e10      	ldr	r6, [pc, #64]	@ (800ada4 <TIM_OC4_SetConfig+0x68>)
 800ad62:	4d11      	ldr	r5, [pc, #68]	@ (800ada8 <TIM_OC4_SetConfig+0x6c>)
 800ad64:	42a8      	cmp	r0, r5
 800ad66:	bf18      	it	ne
 800ad68:	42b0      	cmpne	r0, r6
 800ad6a:	d00d      	beq.n	800ad88 <TIM_OC4_SetConfig+0x4c>
 800ad6c:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ad70:	42a8      	cmp	r0, r5
 800ad72:	bf14      	ite	ne
 800ad74:	2500      	movne	r5, #0
 800ad76:	2501      	moveq	r5, #1
 800ad78:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800ad7c:	42b0      	cmp	r0, r6
 800ad7e:	d003      	beq.n	800ad88 <TIM_OC4_SetConfig+0x4c>
 800ad80:	b915      	cbnz	r5, 800ad88 <TIM_OC4_SetConfig+0x4c>
 800ad82:	4d0a      	ldr	r5, [pc, #40]	@ (800adac <TIM_OC4_SetConfig+0x70>)
 800ad84:	42a8      	cmp	r0, r5
 800ad86:	d104      	bne.n	800ad92 <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad88:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad8c:	694d      	ldr	r5, [r1, #20]
 800ad8e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad94:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad96:	684a      	ldr	r2, [r1, #4]
 800ad98:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9a:	6203      	str	r3, [r0, #32]
}
 800ad9c:	bc70      	pop	{r4, r5, r6}
 800ad9e:	4770      	bx	lr
 800ada0:	feff8cff 	.word	0xfeff8cff
 800ada4:	40010000 	.word	0x40010000
 800ada8:	40010400 	.word	0x40010400
 800adac:	40014800 	.word	0x40014800

0800adb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800adb0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adb2:	6a03      	ldr	r3, [r0, #32]
 800adb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adbc:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adbe:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adc0:	4e14      	ldr	r6, [pc, #80]	@ (800ae14 <TIM_OC5_SetConfig+0x64>)
 800adc2:	402e      	ands	r6, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adc4:	680d      	ldr	r5, [r1, #0]
 800adc6:	432e      	orrs	r6, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adcc:	688c      	ldr	r4, [r1, #8]
 800adce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add2:	4d11      	ldr	r5, [pc, #68]	@ (800ae18 <TIM_OC5_SetConfig+0x68>)
 800add4:	4c11      	ldr	r4, [pc, #68]	@ (800ae1c <TIM_OC5_SetConfig+0x6c>)
 800add6:	42a0      	cmp	r0, r4
 800add8:	bf18      	it	ne
 800adda:	42a8      	cmpne	r0, r5
 800addc:	d00d      	beq.n	800adfa <TIM_OC5_SetConfig+0x4a>
 800adde:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
 800ade2:	42a0      	cmp	r0, r4
 800ade4:	bf14      	ite	ne
 800ade6:	2400      	movne	r4, #0
 800ade8:	2401      	moveq	r4, #1
 800adea:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800adee:	42a8      	cmp	r0, r5
 800adf0:	d003      	beq.n	800adfa <TIM_OC5_SetConfig+0x4a>
 800adf2:	b914      	cbnz	r4, 800adfa <TIM_OC5_SetConfig+0x4a>
 800adf4:	4c0a      	ldr	r4, [pc, #40]	@ (800ae20 <TIM_OC5_SetConfig+0x70>)
 800adf6:	42a0      	cmp	r0, r4
 800adf8:	d104      	bne.n	800ae04 <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adfa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adfe:	694c      	ldr	r4, [r1, #20]
 800ae00:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae04:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae06:	6546      	str	r6, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae08:	684a      	ldr	r2, [r1, #4]
 800ae0a:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae0c:	6203      	str	r3, [r0, #32]
}
 800ae0e:	bc70      	pop	{r4, r5, r6}
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	fffeff8f 	.word	0xfffeff8f
 800ae18:	40010000 	.word	0x40010000
 800ae1c:	40010400 	.word	0x40010400
 800ae20:	40014800 	.word	0x40014800

0800ae24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae24:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae26:	6a03      	ldr	r3, [r0, #32]
 800ae28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae32:	6d45      	ldr	r5, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae34:	4a14      	ldr	r2, [pc, #80]	@ (800ae88 <TIM_OC6_SetConfig+0x64>)
 800ae36:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae38:	680d      	ldr	r5, [r1, #0]
 800ae3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae42:	688d      	ldr	r5, [r1, #8]
 800ae44:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae48:	4e10      	ldr	r6, [pc, #64]	@ (800ae8c <TIM_OC6_SetConfig+0x68>)
 800ae4a:	4d11      	ldr	r5, [pc, #68]	@ (800ae90 <TIM_OC6_SetConfig+0x6c>)
 800ae4c:	42a8      	cmp	r0, r5
 800ae4e:	bf18      	it	ne
 800ae50:	42b0      	cmpne	r0, r6
 800ae52:	d00d      	beq.n	800ae70 <TIM_OC6_SetConfig+0x4c>
 800ae54:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800ae58:	42a8      	cmp	r0, r5
 800ae5a:	bf14      	ite	ne
 800ae5c:	2500      	movne	r5, #0
 800ae5e:	2501      	moveq	r5, #1
 800ae60:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 800ae64:	42b0      	cmp	r0, r6
 800ae66:	d003      	beq.n	800ae70 <TIM_OC6_SetConfig+0x4c>
 800ae68:	b915      	cbnz	r5, 800ae70 <TIM_OC6_SetConfig+0x4c>
 800ae6a:	4d0a      	ldr	r5, [pc, #40]	@ (800ae94 <TIM_OC6_SetConfig+0x70>)
 800ae6c:	42a8      	cmp	r0, r5
 800ae6e:	d104      	bne.n	800ae7a <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae70:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae74:	694d      	ldr	r5, [r1, #20]
 800ae76:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae7c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae7e:	684a      	ldr	r2, [r1, #4]
 800ae80:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae82:	6203      	str	r3, [r0, #32]
}
 800ae84:	bc70      	pop	{r4, r5, r6}
 800ae86:	4770      	bx	lr
 800ae88:	feff8fff 	.word	0xfeff8fff
 800ae8c:	40010000 	.word	0x40010000
 800ae90:	40010400 	.word	0x40010400
 800ae94:	40014800 	.word	0x40014800

0800ae98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae98:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae9c:	6a04      	ldr	r4, [r0, #32]
 800ae9e:	f024 0401 	bic.w	r4, r4, #1
 800aea2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aea4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aea6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aeaa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800aeb2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aeb6:	6203      	str	r3, [r0, #32]
}
 800aeb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aebe:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aec0:	6a03      	ldr	r3, [r0, #32]
 800aec2:	f023 0310 	bic.w	r3, r3, #16
 800aec6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800aeca:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aecc:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aed0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aed4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800aed8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aedc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aede:	6203      	str	r3, [r0, #32]
}
 800aee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee4:	4770      	bx	lr
	...

0800aee8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aee8:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aeea:	4b03      	ldr	r3, [pc, #12]	@ (800aef8 <TIM_ITRx_SetConfig+0x10>)
 800aeec:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aeee:	430b      	orrs	r3, r1
 800aef0:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aef4:	6083      	str	r3, [r0, #8]
}
 800aef6:	4770      	bx	lr
 800aef8:	ffcfff8f 	.word	0xffcfff8f

0800aefc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800aefc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b01      	cmp	r3, #1
 800af04:	d13a      	bne.n	800af7c <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 800af06:	2302      	movs	r3, #2
 800af08:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af0c:	6802      	ldr	r2, [r0, #0]
 800af0e:	68d3      	ldr	r3, [r2, #12]
 800af10:	f043 0301 	orr.w	r3, r3, #1
 800af14:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af16:	6803      	ldr	r3, [r0, #0]
 800af18:	4a1a      	ldr	r2, [pc, #104]	@ (800af84 <HAL_TIM_Base_Start_IT+0x88>)
 800af1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af1e:	bf18      	it	ne
 800af20:	4293      	cmpne	r3, r2
 800af22:	d01d      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af24:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800af28:	4293      	cmp	r3, r2
 800af2a:	d019      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af2c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af30:	4293      	cmp	r3, r2
 800af32:	d015      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af38:	4293      	cmp	r3, r2
 800af3a:	d011      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af3c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800af40:	4293      	cmp	r3, r2
 800af42:	d00d      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af44:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800af48:	4293      	cmp	r3, r2
 800af4a:	d009      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
 800af4c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800af50:	4293      	cmp	r3, r2
 800af52:	d005      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	f042 0201 	orr.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800af5c:	2000      	movs	r0, #0
 800af5e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af60:	6899      	ldr	r1, [r3, #8]
 800af62:	4a09      	ldr	r2, [pc, #36]	@ (800af88 <HAL_TIM_Base_Start_IT+0x8c>)
 800af64:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af66:	2a06      	cmp	r2, #6
 800af68:	bf18      	it	ne
 800af6a:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800af6e:	d007      	beq.n	800af80 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	f042 0201 	orr.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800af78:	2000      	movs	r0, #0
 800af7a:	4770      	bx	lr
    return HAL_ERROR;
 800af7c:	2001      	movs	r0, #1
 800af7e:	4770      	bx	lr
  return HAL_OK;
 800af80:	2000      	movs	r0, #0
}
 800af82:	4770      	bx	lr
 800af84:	40010000 	.word	0x40010000
 800af88:	00010007 	.word	0x00010007

0800af8c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800af8c:	6802      	ldr	r2, [r0, #0]
 800af8e:	68d3      	ldr	r3, [r2, #12]
 800af90:	f023 0301 	bic.w	r3, r3, #1
 800af94:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800af96:	6803      	ldr	r3, [r0, #0]
 800af98:	6a19      	ldr	r1, [r3, #32]
 800af9a:	f241 1211 	movw	r2, #4369	@ 0x1111
 800af9e:	4211      	tst	r1, r2
 800afa0:	d108      	bne.n	800afb4 <HAL_TIM_Base_Stop_IT+0x28>
 800afa2:	6a19      	ldr	r1, [r3, #32]
 800afa4:	f240 4244 	movw	r2, #1092	@ 0x444
 800afa8:	4211      	tst	r1, r2
 800afaa:	d103      	bne.n	800afb4 <HAL_TIM_Base_Stop_IT+0x28>
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 800afba:	2000      	movs	r0, #0
 800afbc:	4770      	bx	lr

0800afbe <HAL_TIM_PWM_MspInit>:
}
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 800afc0:	4770      	bx	lr

0800afc2 <HAL_TIM_IC_CaptureCallback>:
}
 800afc2:	4770      	bx	lr

0800afc4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800afc4:	4770      	bx	lr

0800afc6 <HAL_TIM_TriggerCallback>:
}
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIM_IRQHandler>:
{
 800afc8:	b510      	push	{r4, lr}
 800afca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afcc:	6803      	ldr	r3, [r0, #0]
 800afce:	691a      	ldr	r2, [r3, #16]
 800afd0:	f012 0f02 	tst.w	r2, #2
 800afd4:	d011      	beq.n	800affa <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	f012 0f02 	tst.w	r2, #2
 800afdc:	d00d      	beq.n	800affa <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afde:	f06f 0202 	mvn.w	r2, #2
 800afe2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afe4:	2301      	movs	r3, #1
 800afe6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afe8:	6803      	ldr	r3, [r0, #0]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	f013 0f03 	tst.w	r3, #3
 800aff0:	d079      	beq.n	800b0e6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800aff2:	f7ff ffe6 	bl	800afc2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aff6:	2300      	movs	r3, #0
 800aff8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	691a      	ldr	r2, [r3, #16]
 800affe:	f012 0f04 	tst.w	r2, #4
 800b002:	d012      	beq.n	800b02a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	f012 0f04 	tst.w	r2, #4
 800b00a:	d00e      	beq.n	800b02a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b00c:	f06f 0204 	mvn.w	r2, #4
 800b010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b012:	2302      	movs	r3, #2
 800b014:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b016:	6823      	ldr	r3, [r4, #0]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b01e:	d068      	beq.n	800b0f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff ffce 	bl	800afc2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b026:	2300      	movs	r3, #0
 800b028:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	691a      	ldr	r2, [r3, #16]
 800b02e:	f012 0f08 	tst.w	r2, #8
 800b032:	d012      	beq.n	800b05a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	f012 0f08 	tst.w	r2, #8
 800b03a:	d00e      	beq.n	800b05a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b03c:	f06f 0208 	mvn.w	r2, #8
 800b040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b042:	2304      	movs	r3, #4
 800b044:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	f013 0f03 	tst.w	r3, #3
 800b04e:	d057      	beq.n	800b100 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800b050:	4620      	mov	r0, r4
 800b052:	f7ff ffb6 	bl	800afc2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b056:	2300      	movs	r3, #0
 800b058:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	691a      	ldr	r2, [r3, #16]
 800b05e:	f012 0f10 	tst.w	r2, #16
 800b062:	d012      	beq.n	800b08a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b064:	68da      	ldr	r2, [r3, #12]
 800b066:	f012 0f10 	tst.w	r2, #16
 800b06a:	d00e      	beq.n	800b08a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b06c:	f06f 0210 	mvn.w	r2, #16
 800b070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b072:	2308      	movs	r3, #8
 800b074:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b07e:	d046      	beq.n	800b10e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b080:	4620      	mov	r0, r4
 800b082:	f7ff ff9e 	bl	800afc2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b086:	2300      	movs	r3, #0
 800b088:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	691a      	ldr	r2, [r3, #16]
 800b08e:	f012 0f01 	tst.w	r2, #1
 800b092:	d003      	beq.n	800b09c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	f012 0f01 	tst.w	r2, #1
 800b09a:	d13f      	bne.n	800b11c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0a4:	d003      	beq.n	800b0ae <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0ac:	d13d      	bne.n	800b12a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b0b6:	d003      	beq.n	800b0c0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800b0be:	d13b      	bne.n	800b138 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0c0:	6823      	ldr	r3, [r4, #0]
 800b0c2:	691a      	ldr	r2, [r3, #16]
 800b0c4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b0c8:	d003      	beq.n	800b0d2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b0d0:	d139      	bne.n	800b146 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	f012 0f20 	tst.w	r2, #32
 800b0da:	d003      	beq.n	800b0e4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0dc:	68da      	ldr	r2, [r3, #12]
 800b0de:	f012 0f20 	tst.w	r2, #32
 800b0e2:	d137      	bne.n	800b154 <HAL_TIM_IRQHandler+0x18c>
}
 800b0e4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0e6:	f7ff ff6b 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f7ff ff6a 	bl	800afc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800b0f0:	e781      	b.n	800aff6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff ff64 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7ff ff63 	bl	800afc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800b0fe:	e792      	b.n	800b026 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b100:	4620      	mov	r0, r4
 800b102:	f7ff ff5d 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b106:	4620      	mov	r0, r4
 800b108:	f7ff ff5c 	bl	800afc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800b10c:	e7a3      	b.n	800b056 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff ff56 	bl	800afc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b114:	4620      	mov	r0, r4
 800b116:	f7ff ff55 	bl	800afc4 <HAL_TIM_PWM_PulseFinishedCallback>
 800b11a:	e7b4      	b.n	800b086 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b11c:	f06f 0201 	mvn.w	r2, #1
 800b120:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b122:	4620      	mov	r0, r4
 800b124:	f7f5 fcc2 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
 800b128:	e7b8      	b.n	800b09c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b12a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b12e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fca6 	bl	800ba82 <HAL_TIMEx_BreakCallback>
 800b136:	e7ba      	b.n	800b0ae <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b138:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b13c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fca0 	bl	800ba84 <HAL_TIMEx_Break2Callback>
 800b144:	e7bc      	b.n	800b0c0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b146:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b14a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b14c:	4620      	mov	r0, r4
 800b14e:	f7ff ff3a 	bl	800afc6 <HAL_TIM_TriggerCallback>
 800b152:	e7be      	b.n	800b0d2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b154:	f06f 0220 	mvn.w	r2, #32
 800b158:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fc90 	bl	800ba80 <HAL_TIMEx_CommutCallback>
}
 800b160:	e7c0      	b.n	800b0e4 <HAL_TIM_IRQHandler+0x11c>
	...

0800b164 <TIM_Base_SetConfig>:
{
 800b164:	b530      	push	{r4, r5, lr}
  tmpcr1 = TIMx->CR1;
 800b166:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b168:	4a39      	ldr	r2, [pc, #228]	@ (800b250 <TIM_Base_SetConfig+0xec>)
 800b16a:	4290      	cmp	r0, r2
 800b16c:	bf14      	ite	ne
 800b16e:	f04f 0e00 	movne.w	lr, #0
 800b172:	f04f 0e01 	moveq.w	lr, #1
 800b176:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b17a:	bf14      	ite	ne
 800b17c:	4672      	movne	r2, lr
 800b17e:	f04e 0201 	orreq.w	r2, lr, #1
 800b182:	b9aa      	cbnz	r2, 800b1b0 <TIM_Base_SetConfig+0x4c>
 800b184:	4c33      	ldr	r4, [pc, #204]	@ (800b254 <TIM_Base_SetConfig+0xf0>)
 800b186:	42a0      	cmp	r0, r4
 800b188:	bf14      	ite	ne
 800b18a:	2400      	movne	r4, #0
 800b18c:	2401      	moveq	r4, #1
 800b18e:	4d32      	ldr	r5, [pc, #200]	@ (800b258 <TIM_Base_SetConfig+0xf4>)
 800b190:	42a8      	cmp	r0, r5
 800b192:	d00d      	beq.n	800b1b0 <TIM_Base_SetConfig+0x4c>
 800b194:	b964      	cbnz	r4, 800b1b0 <TIM_Base_SetConfig+0x4c>
 800b196:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800b19a:	f504 3482 	add.w	r4, r4, #66560	@ 0x10400
 800b19e:	42a0      	cmp	r0, r4
 800b1a0:	bf14      	ite	ne
 800b1a2:	2400      	movne	r4, #0
 800b1a4:	2401      	moveq	r4, #1
 800b1a6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800b1aa:	42a8      	cmp	r0, r5
 800b1ac:	d000      	beq.n	800b1b0 <TIM_Base_SetConfig+0x4c>
 800b1ae:	b11c      	cbz	r4, 800b1b8 <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b1b4:	684c      	ldr	r4, [r1, #4]
 800b1b6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1b8:	bb12      	cbnz	r2, 800b200 <TIM_Base_SetConfig+0x9c>
 800b1ba:	4a26      	ldr	r2, [pc, #152]	@ (800b254 <TIM_Base_SetConfig+0xf0>)
 800b1bc:	4290      	cmp	r0, r2
 800b1be:	bf14      	ite	ne
 800b1c0:	2200      	movne	r2, #0
 800b1c2:	2201      	moveq	r2, #1
 800b1c4:	4c24      	ldr	r4, [pc, #144]	@ (800b258 <TIM_Base_SetConfig+0xf4>)
 800b1c6:	42a0      	cmp	r0, r4
 800b1c8:	d01a      	beq.n	800b200 <TIM_Base_SetConfig+0x9c>
 800b1ca:	b9ca      	cbnz	r2, 800b200 <TIM_Base_SetConfig+0x9c>
 800b1cc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800b1d0:	f502 3282 	add.w	r2, r2, #66560	@ 0x10400
 800b1d4:	4290      	cmp	r0, r2
 800b1d6:	bf14      	ite	ne
 800b1d8:	2200      	movne	r2, #0
 800b1da:	2201      	moveq	r2, #1
 800b1dc:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d00d      	beq.n	800b200 <TIM_Base_SetConfig+0x9c>
 800b1e4:	b962      	cbnz	r2, 800b200 <TIM_Base_SetConfig+0x9c>
 800b1e6:	4a1d      	ldr	r2, [pc, #116]	@ (800b25c <TIM_Base_SetConfig+0xf8>)
 800b1e8:	4290      	cmp	r0, r2
 800b1ea:	bf14      	ite	ne
 800b1ec:	2200      	movne	r2, #0
 800b1ee:	2201      	moveq	r2, #1
 800b1f0:	f504 349a 	add.w	r4, r4, #78848	@ 0x13400
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d003      	beq.n	800b200 <TIM_Base_SetConfig+0x9c>
 800b1f8:	b912      	cbnz	r2, 800b200 <TIM_Base_SetConfig+0x9c>
 800b1fa:	4a19      	ldr	r2, [pc, #100]	@ (800b260 <TIM_Base_SetConfig+0xfc>)
 800b1fc:	4290      	cmp	r0, r2
 800b1fe:	d104      	bne.n	800b20a <TIM_Base_SetConfig+0xa6>
    tmpcr1 &= ~TIM_CR1_CKD;
 800b200:	f423 7c40 	bic.w	ip, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b204:	68cb      	ldr	r3, [r1, #12]
 800b206:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b20a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b20e:	694a      	ldr	r2, [r1, #20]
 800b210:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b212:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b214:	688a      	ldr	r2, [r1, #8]
 800b216:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b218:	680a      	ldr	r2, [r1, #0]
 800b21a:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b21c:	4a11      	ldr	r2, [pc, #68]	@ (800b264 <TIM_Base_SetConfig+0x100>)
 800b21e:	4290      	cmp	r0, r2
 800b220:	bf14      	ite	ne
 800b222:	4673      	movne	r3, lr
 800b224:	f04e 0301 	orreq.w	r3, lr, #1
 800b228:	b963      	cbnz	r3, 800b244 <TIM_Base_SetConfig+0xe0>
 800b22a:	4b0c      	ldr	r3, [pc, #48]	@ (800b25c <TIM_Base_SetConfig+0xf8>)
 800b22c:	4298      	cmp	r0, r3
 800b22e:	bf14      	ite	ne
 800b230:	2300      	movne	r3, #0
 800b232:	2301      	moveq	r3, #1
 800b234:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b238:	4290      	cmp	r0, r2
 800b23a:	d003      	beq.n	800b244 <TIM_Base_SetConfig+0xe0>
 800b23c:	b913      	cbnz	r3, 800b244 <TIM_Base_SetConfig+0xe0>
 800b23e:	4b08      	ldr	r3, [pc, #32]	@ (800b260 <TIM_Base_SetConfig+0xfc>)
 800b240:	4298      	cmp	r0, r3
 800b242:	d101      	bne.n	800b248 <TIM_Base_SetConfig+0xe4>
    TIMx->RCR = Structure->RepetitionCounter;
 800b244:	690b      	ldr	r3, [r1, #16]
 800b246:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b248:	2301      	movs	r3, #1
 800b24a:	6143      	str	r3, [r0, #20]
}
 800b24c:	bd30      	pop	{r4, r5, pc}
 800b24e:	bf00      	nop
 800b250:	40010000 	.word	0x40010000
 800b254:	40000800 	.word	0x40000800
 800b258:	40000400 	.word	0x40000400
 800b25c:	40014400 	.word	0x40014400
 800b260:	40014800 	.word	0x40014800
 800b264:	40010400 	.word	0x40010400

0800b268 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b268:	b360      	cbz	r0, 800b2c4 <HAL_TIM_Base_Init+0x5c>
{
 800b26a:	b510      	push	{r4, lr}
 800b26c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b26e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b272:	b313      	cbz	r3, 800b2ba <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b274:	2302      	movs	r3, #2
 800b276:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b27a:	4621      	mov	r1, r4
 800b27c:	f851 0b04 	ldr.w	r0, [r1], #4
 800b280:	f7ff ff70 	bl	800b164 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b284:	2301      	movs	r3, #1
 800b286:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b28a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b28e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b292:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b296:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b29a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b29e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b2a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b2aa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b2ae:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b2b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b2b6:	2000      	movs	r0, #0
}
 800b2b8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b2ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b2be:	f7f7 fb51 	bl	8002964 <HAL_TIM_Base_MspInit>
 800b2c2:	e7d7      	b.n	800b274 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800b2c4:	2001      	movs	r0, #1
}
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800b2c8:	b360      	cbz	r0, 800b324 <HAL_TIM_PWM_Init+0x5c>
{
 800b2ca:	b510      	push	{r4, lr}
 800b2cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b2d2:	b313      	cbz	r3, 800b31a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f851 0b04 	ldr.w	r0, [r1], #4
 800b2e0:	f7ff ff40 	bl	800b164 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b2ee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b2f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b2f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b2fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b302:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b306:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b30a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b30e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b312:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b316:	2000      	movs	r0, #0
}
 800b318:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b31a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800b31e:	f7ff fe4e 	bl	800afbe <HAL_TIM_PWM_MspInit>
 800b322:	e7d7      	b.n	800b2d4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800b324:	2001      	movs	r0, #1
}
 800b326:	4770      	bx	lr

0800b328 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800b328:	2800      	cmp	r0, #0
 800b32a:	d04d      	beq.n	800b3c8 <HAL_TIM_Encoder_Init+0xa0>
{
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	460d      	mov	r5, r1
 800b330:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800b332:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b336:	2b00      	cmp	r3, #0
 800b338:	d041      	beq.n	800b3be <HAL_TIM_Encoder_Init+0x96>
  htim->State = HAL_TIM_STATE_BUSY;
 800b33a:	2302      	movs	r3, #2
 800b33c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	6891      	ldr	r1, [r2, #8]
 800b344:	4b21      	ldr	r3, [pc, #132]	@ (800b3cc <HAL_TIM_Encoder_Init+0xa4>)
 800b346:	400b      	ands	r3, r1
 800b348:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b34a:	4621      	mov	r1, r4
 800b34c:	f851 0b04 	ldr.w	r0, [r1], #4
 800b350:	f7ff ff08 	bl	800b164 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800b354:	6821      	ldr	r1, [r4, #0]
 800b356:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800b358:	698b      	ldr	r3, [r1, #24]
  tmpccer = htim->Instance->CCER;
 800b35a:	6a0e      	ldr	r6, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800b35c:	6828      	ldr	r0, [r5, #0]
 800b35e:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b360:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d0 <HAL_TIM_Encoder_Init+0xa8>)
 800b362:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b364:	68ab      	ldr	r3, [r5, #8]
 800b366:	69af      	ldr	r7, [r5, #24]
 800b368:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b36c:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b36e:	4a19      	ldr	r2, [pc, #100]	@ (800b3d4 <HAL_TIM_Encoder_Init+0xac>)
 800b370:	401a      	ands	r2, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b372:	68eb      	ldr	r3, [r5, #12]
 800b374:	69ef      	ldr	r7, [r5, #28]
 800b376:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b37a:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b37c:	6a2b      	ldr	r3, [r5, #32]
 800b37e:	031b      	lsls	r3, r3, #12
 800b380:	692f      	ldr	r7, [r5, #16]
 800b382:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800b386:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b388:	f026 06aa 	bic.w	r6, r6, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b38c:	686a      	ldr	r2, [r5, #4]
 800b38e:	696d      	ldr	r5, [r5, #20]
 800b390:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800b394:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 800b396:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800b398:	6821      	ldr	r1, [r4, #0]
 800b39a:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b3b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800b3ba:	2000      	movs	r0, #0
}
 800b3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800b3be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800b3c2:	f7f7 fb19 	bl	80029f8 <HAL_TIM_Encoder_MspInit>
 800b3c6:	e7b8      	b.n	800b33a <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800b3c8:	2001      	movs	r0, #1
}
 800b3ca:	4770      	bx	lr
 800b3cc:	fffebff8 	.word	0xfffebff8
 800b3d0:	fffffcfc 	.word	0xfffffcfc
 800b3d4:	ffff0303 	.word	0xffff0303

0800b3d8 <TIM_OC2_SetConfig>:
{
 800b3d8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3da:	6a03      	ldr	r3, [r0, #32]
 800b3dc:	f023 0310 	bic.w	r3, r3, #16
 800b3e0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800b3e2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b3e4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800b3e6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3e8:	4e1a      	ldr	r6, [pc, #104]	@ (800b454 <TIM_OC2_SetConfig+0x7c>)
 800b3ea:	4026      	ands	r6, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ec:	680c      	ldr	r4, [r1, #0]
 800b3ee:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f2:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3f6:	688a      	ldr	r2, [r1, #8]
 800b3f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3fc:	4a16      	ldr	r2, [pc, #88]	@ (800b458 <TIM_OC2_SetConfig+0x80>)
 800b3fe:	4c17      	ldr	r4, [pc, #92]	@ (800b45c <TIM_OC2_SetConfig+0x84>)
 800b400:	42a0      	cmp	r0, r4
 800b402:	bf18      	it	ne
 800b404:	4290      	cmpne	r0, r2
 800b406:	bf0c      	ite	eq
 800b408:	2201      	moveq	r2, #1
 800b40a:	2200      	movne	r2, #0
 800b40c:	d106      	bne.n	800b41c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800b40e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b412:	68cc      	ldr	r4, [r1, #12]
 800b414:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800b418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41c:	b95a      	cbnz	r2, 800b436 <TIM_OC2_SetConfig+0x5e>
 800b41e:	4a10      	ldr	r2, [pc, #64]	@ (800b460 <TIM_OC2_SetConfig+0x88>)
 800b420:	4290      	cmp	r0, r2
 800b422:	bf14      	ite	ne
 800b424:	2200      	movne	r2, #0
 800b426:	2201      	moveq	r2, #1
 800b428:	4c0e      	ldr	r4, [pc, #56]	@ (800b464 <TIM_OC2_SetConfig+0x8c>)
 800b42a:	42a0      	cmp	r0, r4
 800b42c:	d003      	beq.n	800b436 <TIM_OC2_SetConfig+0x5e>
 800b42e:	b912      	cbnz	r2, 800b436 <TIM_OC2_SetConfig+0x5e>
 800b430:	4a0d      	ldr	r2, [pc, #52]	@ (800b468 <TIM_OC2_SetConfig+0x90>)
 800b432:	4290      	cmp	r0, r2
 800b434:	d107      	bne.n	800b446 <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b436:	f425 6c40 	bic.w	ip, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b43a:	694a      	ldr	r2, [r1, #20]
 800b43c:	ea4c 0c82 	orr.w	ip, ip, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b440:	698a      	ldr	r2, [r1, #24]
 800b442:	ea4c 0582 	orr.w	r5, ip, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 800b446:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b448:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b44a:	684a      	ldr	r2, [r1, #4]
 800b44c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800b44e:	6203      	str	r3, [r0, #32]
}
 800b450:	bc70      	pop	{r4, r5, r6}
 800b452:	4770      	bx	lr
 800b454:	feff8cff 	.word	0xfeff8cff
 800b458:	40010000 	.word	0x40010000
 800b45c:	40010400 	.word	0x40010400
 800b460:	40014400 	.word	0x40014400
 800b464:	40014000 	.word	0x40014000
 800b468:	40014800 	.word	0x40014800

0800b46c <HAL_TIM_PWM_ConfigChannel>:
{
 800b46c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800b46e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800b472:	2b01      	cmp	r3, #1
 800b474:	f000 8095 	beq.w	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x136>
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	2301      	movs	r3, #1
 800b47e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800b482:	2a14      	cmp	r2, #20
 800b484:	f200 8088 	bhi.w	800b598 <HAL_TIM_PWM_ConfigChannel+0x12c>
 800b488:	e8df f002 	tbb	[pc, r2]
 800b48c:	8686860b 	.word	0x8686860b
 800b490:	8686861f 	.word	0x8686861f
 800b494:	86868634 	.word	0x86868634
 800b498:	86868648 	.word	0x86868648
 800b49c:	8686865d 	.word	0x8686865d
 800b4a0:	71          	.byte	0x71
 800b4a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4a2:	6800      	ldr	r0, [r0, #0]
 800b4a4:	f7ff fbae 	bl	800ac04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4a8:	6822      	ldr	r2, [r4, #0]
 800b4aa:	6993      	ldr	r3, [r2, #24]
 800b4ac:	f043 0308 	orr.w	r3, r3, #8
 800b4b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	6993      	ldr	r3, [r2, #24]
 800b4b6:	f023 0304 	bic.w	r3, r3, #4
 800b4ba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	6993      	ldr	r3, [r2, #24]
 800b4c0:	6929      	ldr	r1, [r5, #16]
 800b4c2:	430b      	orrs	r3, r1
 800b4c4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b4c6:	2000      	movs	r0, #0
      break;
 800b4c8:	e067      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4ca:	6800      	ldr	r0, [r0, #0]
 800b4cc:	f7ff ff84 	bl	800b3d8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4d0:	6822      	ldr	r2, [r4, #0]
 800b4d2:	6993      	ldr	r3, [r2, #24]
 800b4d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b4d8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	6993      	ldr	r3, [r2, #24]
 800b4de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4e2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4e4:	6822      	ldr	r2, [r4, #0]
 800b4e6:	6993      	ldr	r3, [r2, #24]
 800b4e8:	6929      	ldr	r1, [r5, #16]
 800b4ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b4ee:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800b4f0:	2000      	movs	r0, #0
      break;
 800b4f2:	e052      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4f4:	6800      	ldr	r0, [r0, #0]
 800b4f6:	f7ff fbd7 	bl	800aca8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	69d3      	ldr	r3, [r2, #28]
 800b4fe:	f043 0308 	orr.w	r3, r3, #8
 800b502:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b504:	6822      	ldr	r2, [r4, #0]
 800b506:	69d3      	ldr	r3, [r2, #28]
 800b508:	f023 0304 	bic.w	r3, r3, #4
 800b50c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b50e:	6822      	ldr	r2, [r4, #0]
 800b510:	69d3      	ldr	r3, [r2, #28]
 800b512:	6929      	ldr	r1, [r5, #16]
 800b514:	430b      	orrs	r3, r1
 800b516:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b518:	2000      	movs	r0, #0
      break;
 800b51a:	e03e      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b51c:	6800      	ldr	r0, [r0, #0]
 800b51e:	f7ff fc0d 	bl	800ad3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b522:	6822      	ldr	r2, [r4, #0]
 800b524:	69d3      	ldr	r3, [r2, #28]
 800b526:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b52a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b52c:	6822      	ldr	r2, [r4, #0]
 800b52e:	69d3      	ldr	r3, [r2, #28]
 800b530:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b534:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	69d3      	ldr	r3, [r2, #28]
 800b53a:	6929      	ldr	r1, [r5, #16]
 800b53c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b540:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b542:	2000      	movs	r0, #0
      break;
 800b544:	e029      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b546:	6800      	ldr	r0, [r0, #0]
 800b548:	f7ff fc32 	bl	800adb0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b54c:	6822      	ldr	r2, [r4, #0]
 800b54e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b550:	f043 0308 	orr.w	r3, r3, #8
 800b554:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b55a:	f023 0304 	bic.w	r3, r3, #4
 800b55e:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b564:	6929      	ldr	r1, [r5, #16]
 800b566:	430b      	orrs	r3, r1
 800b568:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800b56a:	2000      	movs	r0, #0
      break;
 800b56c:	e015      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b56e:	6800      	ldr	r0, [r0, #0]
 800b570:	f7ff fc58 	bl	800ae24 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b574:	6822      	ldr	r2, [r4, #0]
 800b576:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b578:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b57c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b57e:	6822      	ldr	r2, [r4, #0]
 800b580:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b582:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b586:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b58c:	6929      	ldr	r1, [r5, #16]
 800b58e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b592:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800b594:	2000      	movs	r0, #0
      break;
 800b596:	e000      	b.n	800b59a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800b598:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800b59a:	2300      	movs	r3, #0
 800b59c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800b5a0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800b5a2:	2002      	movs	r0, #2
 800b5a4:	e7fc      	b.n	800b5a0 <HAL_TIM_PWM_ConfigChannel+0x134>

0800b5a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5a6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5a8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5aa:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5b8:	6082      	str	r2, [r0, #8]
}
 800b5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b5c0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	f000 808f 	beq.w	800b6e8 <HAL_TIM_ConfigClockSource+0x128>
{
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b5da:	6802      	ldr	r2, [r0, #0]
 800b5dc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5de:	4b43      	ldr	r3, [pc, #268]	@ (800b6ec <HAL_TIM_ConfigClockSource+0x12c>)
 800b5e0:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800b5e2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b5e4:	680b      	ldr	r3, [r1, #0]
 800b5e6:	2b70      	cmp	r3, #112	@ 0x70
 800b5e8:	d055      	beq.n	800b696 <HAL_TIM_ConfigClockSource+0xd6>
 800b5ea:	d831      	bhi.n	800b650 <HAL_TIM_ConfigClockSource+0x90>
 800b5ec:	2b50      	cmp	r3, #80	@ 0x50
 800b5ee:	d06c      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x10a>
 800b5f0:	d90c      	bls.n	800b60c <HAL_TIM_ConfigClockSource+0x4c>
 800b5f2:	2b60      	cmp	r3, #96	@ 0x60
 800b5f4:	d12a      	bne.n	800b64c <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5f6:	68ca      	ldr	r2, [r1, #12]
 800b5f8:	6849      	ldr	r1, [r1, #4]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	f7ff fc5f 	bl	800aebe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b600:	2160      	movs	r1, #96	@ 0x60
 800b602:	6820      	ldr	r0, [r4, #0]
 800b604:	f7ff fc70 	bl	800aee8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b608:	2000      	movs	r0, #0
      break;
 800b60a:	e035      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b60c:	2b40      	cmp	r3, #64	@ 0x40
 800b60e:	d10a      	bne.n	800b626 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b610:	68ca      	ldr	r2, [r1, #12]
 800b612:	6849      	ldr	r1, [r1, #4]
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	f7ff fc3f 	bl	800ae98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b61a:	2140      	movs	r1, #64	@ 0x40
 800b61c:	6820      	ldr	r0, [r4, #0]
 800b61e:	f7ff fc63 	bl	800aee8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b622:	2000      	movs	r0, #0
      break;
 800b624:	e028      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b626:	d85b      	bhi.n	800b6e0 <HAL_TIM_ConfigClockSource+0x120>
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d007      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
 800b62c:	d903      	bls.n	800b636 <HAL_TIM_ConfigClockSource+0x76>
 800b62e:	2b30      	cmp	r3, #48	@ 0x30
 800b630:	d004      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b632:	2001      	movs	r0, #1
 800b634:	e020      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b636:	b10b      	cbz	r3, 800b63c <HAL_TIM_ConfigClockSource+0x7c>
 800b638:	2b10      	cmp	r3, #16
 800b63a:	d105      	bne.n	800b648 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b63c:	4619      	mov	r1, r3
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	f7ff fc52 	bl	800aee8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b644:	2000      	movs	r0, #0
      break;
 800b646:	e017      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800b648:	2001      	movs	r0, #1
 800b64a:	e015      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
 800b64c:	2001      	movs	r0, #1
 800b64e:	e013      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b654:	d02c      	beq.n	800b6b0 <HAL_TIM_ConfigClockSource+0xf0>
 800b656:	d90b      	bls.n	800b670 <HAL_TIM_ConfigClockSource+0xb0>
 800b658:	4a25      	ldr	r2, [pc, #148]	@ (800b6f0 <HAL_TIM_ConfigClockSource+0x130>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d0ee      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
 800b65e:	d912      	bls.n	800b686 <HAL_TIM_ConfigClockSource+0xc6>
 800b660:	4a24      	ldr	r2, [pc, #144]	@ (800b6f4 <HAL_TIM_ConfigClockSource+0x134>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d0ea      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
 800b666:	3210      	adds	r2, #16
 800b668:	4293      	cmp	r3, r2
 800b66a:	d0e7      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b66c:	2001      	movs	r0, #1
 800b66e:	e003      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800b670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b674:	d136      	bne.n	800b6e4 <HAL_TIM_ConfigClockSource+0x124>
 800b676:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800b678:	2301      	movs	r3, #1
 800b67a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800b67e:	2300      	movs	r3, #0
 800b680:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800b684:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800b686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b68a:	d0d7      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
 800b68c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b690:	d0d4      	beq.n	800b63c <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800b692:	2001      	movs	r0, #1
 800b694:	e7f0      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800b696:	68cb      	ldr	r3, [r1, #12]
 800b698:	684a      	ldr	r2, [r1, #4]
 800b69a:	6889      	ldr	r1, [r1, #8]
 800b69c:	6820      	ldr	r0, [r4, #0]
 800b69e:	f7ff ff82 	bl	800b5a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b6a2:	6822      	ldr	r2, [r4, #0]
 800b6a4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b6aa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ac:	2000      	movs	r0, #0
      break;
 800b6ae:	e7e3      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 800b6b0:	68cb      	ldr	r3, [r1, #12]
 800b6b2:	684a      	ldr	r2, [r1, #4]
 800b6b4:	6889      	ldr	r1, [r1, #8]
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	f7ff ff75 	bl	800b5a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6bc:	6822      	ldr	r2, [r4, #0]
 800b6be:	6893      	ldr	r3, [r2, #8]
 800b6c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b6c4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b6c6:	2000      	movs	r0, #0
      break;
 800b6c8:	e7d6      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ca:	68ca      	ldr	r2, [r1, #12]
 800b6cc:	6849      	ldr	r1, [r1, #4]
 800b6ce:	6820      	ldr	r0, [r4, #0]
 800b6d0:	f7ff fbe2 	bl	800ae98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6d4:	2150      	movs	r1, #80	@ 0x50
 800b6d6:	6820      	ldr	r0, [r4, #0]
 800b6d8:	f7ff fc06 	bl	800aee8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800b6dc:	2000      	movs	r0, #0
      break;
 800b6de:	e7cb      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
      status = HAL_ERROR;
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e7c9      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
 800b6e4:	2001      	movs	r0, #1
 800b6e6:	e7c7      	b.n	800b678 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800b6e8:	2002      	movs	r0, #2
}
 800b6ea:	4770      	bx	lr
 800b6ec:	ffce0088 	.word	0xffce0088
 800b6f0:	00100020 	.word	0x00100020
 800b6f4:	00100030 	.word	0x00100030

0800b6f8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6f8:	f001 011f 	and.w	r1, r1, #31
 800b6fc:	f04f 0c01 	mov.w	ip, #1
 800b700:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b704:	6a03      	ldr	r3, [r0, #32]
 800b706:	ea23 030c 	bic.w	r3, r3, ip
 800b70a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b70c:	6a03      	ldr	r3, [r0, #32]
 800b70e:	408a      	lsls	r2, r1
 800b710:	4313      	orrs	r3, r2
 800b712:	6203      	str	r3, [r0, #32]
}
 800b714:	4770      	bx	lr
	...

0800b718 <HAL_TIM_PWM_Start>:
{
 800b718:	b510      	push	{r4, lr}
 800b71a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b71c:	2910      	cmp	r1, #16
 800b71e:	d83d      	bhi.n	800b79c <HAL_TIM_PWM_Start+0x84>
 800b720:	e8df f001 	tbb	[pc, r1]
 800b724:	3c3c3c09 	.word	0x3c3c3c09
 800b728:	3c3c3c20 	.word	0x3c3c3c20
 800b72c:	3c3c3c27 	.word	0x3c3c3c27
 800b730:	3c3c3c2e 	.word	0x3c3c3c2e
 800b734:	35          	.byte	0x35
 800b735:	00          	.byte	0x00
 800b736:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	bf18      	it	ne
 800b740:	2301      	movne	r3, #1
 800b742:	2b00      	cmp	r3, #0
 800b744:	f040 8096 	bne.w	800b874 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b748:	2910      	cmp	r1, #16
 800b74a:	f200 8081 	bhi.w	800b850 <HAL_TIM_PWM_Start+0x138>
 800b74e:	e8df f001 	tbb	[pc, r1]
 800b752:	7f2c      	.short	0x7f2c
 800b754:	7f6f7f7f 	.word	0x7f6f7f7f
 800b758:	7f737f7f 	.word	0x7f737f7f
 800b75c:	7f777f7f 	.word	0x7f777f7f
 800b760:	7f7f      	.short	0x7f7f
 800b762:	7b          	.byte	0x7b
 800b763:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b764:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	3b01      	subs	r3, #1
 800b76c:	bf18      	it	ne
 800b76e:	2301      	movne	r3, #1
 800b770:	e7e7      	b.n	800b742 <HAL_TIM_PWM_Start+0x2a>
 800b772:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b776:	b2db      	uxtb	r3, r3
 800b778:	3b01      	subs	r3, #1
 800b77a:	bf18      	it	ne
 800b77c:	2301      	movne	r3, #1
 800b77e:	e7e0      	b.n	800b742 <HAL_TIM_PWM_Start+0x2a>
 800b780:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b784:	b2db      	uxtb	r3, r3
 800b786:	3b01      	subs	r3, #1
 800b788:	bf18      	it	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	e7d9      	b.n	800b742 <HAL_TIM_PWM_Start+0x2a>
 800b78e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b792:	b2db      	uxtb	r3, r3
 800b794:	3b01      	subs	r3, #1
 800b796:	bf18      	it	ne
 800b798:	2301      	movne	r3, #1
 800b79a:	e7d2      	b.n	800b742 <HAL_TIM_PWM_Start+0x2a>
 800b79c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	bf18      	it	ne
 800b7a6:	2301      	movne	r3, #1
 800b7a8:	e7cb      	b.n	800b742 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	6820      	ldr	r0, [r4, #0]
 800b7b4:	f7ff ffa0 	bl	800b6f8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	4930      	ldr	r1, [pc, #192]	@ (800b87c <HAL_TIM_PWM_Start+0x164>)
 800b7bc:	4a30      	ldr	r2, [pc, #192]	@ (800b880 <HAL_TIM_PWM_Start+0x168>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	bf18      	it	ne
 800b7c2:	428b      	cmpne	r3, r1
 800b7c4:	d00b      	beq.n	800b7de <HAL_TIM_PWM_Start+0xc6>
 800b7c6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d007      	beq.n	800b7de <HAL_TIM_PWM_Start+0xc6>
 800b7ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d003      	beq.n	800b7de <HAL_TIM_PWM_Start+0xc6>
 800b7d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d103      	bne.n	800b7e6 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 800b7de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7e4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	4a24      	ldr	r2, [pc, #144]	@ (800b87c <HAL_TIM_PWM_Start+0x164>)
 800b7ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7ee:	bf18      	it	ne
 800b7f0:	4293      	cmpne	r3, r2
 800b7f2:	d031      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b7f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d02d      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b7fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b800:	4293      	cmp	r3, r2
 800b802:	d029      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b804:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b808:	4293      	cmp	r3, r2
 800b80a:	d025      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b80c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b810:	4293      	cmp	r3, r2
 800b812:	d021      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b814:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b818:	4293      	cmp	r3, r2
 800b81a:	d01d      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
 800b81c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b820:	4293      	cmp	r3, r2
 800b822:	d019      	beq.n	800b858 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	f042 0201 	orr.w	r2, r2, #1
 800b82a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b82c:	2000      	movs	r0, #0
 800b82e:	e022      	b.n	800b876 <HAL_TIM_PWM_Start+0x15e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b830:	2302      	movs	r3, #2
 800b832:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b836:	e7bb      	b.n	800b7b0 <HAL_TIM_PWM_Start+0x98>
 800b838:	2302      	movs	r3, #2
 800b83a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b83e:	e7b7      	b.n	800b7b0 <HAL_TIM_PWM_Start+0x98>
 800b840:	2302      	movs	r3, #2
 800b842:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b846:	e7b3      	b.n	800b7b0 <HAL_TIM_PWM_Start+0x98>
 800b848:	2302      	movs	r3, #2
 800b84a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b84e:	e7af      	b.n	800b7b0 <HAL_TIM_PWM_Start+0x98>
 800b850:	2302      	movs	r3, #2
 800b852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b856:	e7ab      	b.n	800b7b0 <HAL_TIM_PWM_Start+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b858:	6899      	ldr	r1, [r3, #8]
 800b85a:	4a0a      	ldr	r2, [pc, #40]	@ (800b884 <HAL_TIM_PWM_Start+0x16c>)
 800b85c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85e:	2a06      	cmp	r2, #6
 800b860:	bf18      	it	ne
 800b862:	f5b2 3f80 	cmpne.w	r2, #65536	@ 0x10000
 800b866:	d007      	beq.n	800b878 <HAL_TIM_PWM_Start+0x160>
      __HAL_TIM_ENABLE(htim);
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	f042 0201 	orr.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b870:	2000      	movs	r0, #0
 800b872:	e000      	b.n	800b876 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 800b874:	2001      	movs	r0, #1
}
 800b876:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800b878:	2000      	movs	r0, #0
 800b87a:	e7fc      	b.n	800b876 <HAL_TIM_PWM_Start+0x15e>
 800b87c:	40010000 	.word	0x40010000
 800b880:	40010400 	.word	0x40010400
 800b884:	00010007 	.word	0x00010007

0800b888 <HAL_TIM_Encoder_Start>:
{
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b88c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800b890:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b892:	f890 203f 	ldrb.w	r2, [r0, #63]	@ 0x3f
 800b896:	fa5f fc82 	uxtb.w	ip, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b89a:	f890 2044 	ldrb.w	r2, [r0, #68]	@ 0x44
 800b89e:	b2d0      	uxtb	r0, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8a0:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
  if (Channel == TIM_CHANNEL_1)
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	b9b1      	cbnz	r1, 800b8d6 <HAL_TIM_Encoder_Start+0x4e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8a8:	2801      	cmp	r0, #1
 800b8aa:	bf08      	it	eq
 800b8ac:	2b01      	cmpeq	r3, #1
 800b8ae:	d147      	bne.n	800b940 <HAL_TIM_Encoder_Start+0xb8>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  switch (Channel)
 800b8ba:	b37d      	cbz	r5, 800b91c <HAL_TIM_Encoder_Start+0x94>
 800b8bc:	2d04      	cmp	r5, #4
 800b8be:	d039      	beq.n	800b934 <HAL_TIM_Encoder_Start+0xac>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6820      	ldr	r0, [r4, #0]
 800b8c6:	f7ff ff17 	bl	800b6f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	2104      	movs	r1, #4
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	f7ff ff12 	bl	800b6f8 <TIM_CCxChannelCmd>
      break;
 800b8d4:	e027      	b.n	800b926 <HAL_TIM_Encoder_Start+0x9e>
 800b8d6:	b2d2      	uxtb	r2, r2
  else if (Channel == TIM_CHANNEL_2)
 800b8d8:	2904      	cmp	r1, #4
 800b8da:	d014      	beq.n	800b906 <HAL_TIM_Encoder_Start+0x7e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b8dc:	f1bc 0f01 	cmp.w	ip, #1
 800b8e0:	bf08      	it	eq
 800b8e2:	2b01      	cmpeq	r3, #1
 800b8e4:	d130      	bne.n	800b948 <HAL_TIM_Encoder_Start+0xc0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b8e6:	3a01      	subs	r2, #1
 800b8e8:	bf18      	it	ne
 800b8ea:	2201      	movne	r2, #1
 800b8ec:	2801      	cmp	r0, #1
 800b8ee:	d12d      	bne.n	800b94c <HAL_TIM_Encoder_Start+0xc4>
 800b8f0:	bb62      	cbnz	r2, 800b94c <HAL_TIM_Encoder_Start+0xc4>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8f8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8fc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b900:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b904:	e7d9      	b.n	800b8ba <HAL_TIM_Encoder_Start+0x32>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b906:	2a01      	cmp	r2, #1
 800b908:	bf08      	it	eq
 800b90a:	f1bc 0f01 	cmpeq.w	ip, #1
 800b90e:	d119      	bne.n	800b944 <HAL_TIM_Encoder_Start+0xbc>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b910:	2302      	movs	r3, #2
 800b912:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b916:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b91a:	e7ce      	b.n	800b8ba <HAL_TIM_Encoder_Start+0x32>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b91c:	2201      	movs	r2, #1
 800b91e:	2100      	movs	r1, #0
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	f7ff fee9 	bl	800b6f8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	6813      	ldr	r3, [r2, #0]
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800b930:	2000      	movs	r0, #0
}
 800b932:	bd38      	pop	{r3, r4, r5, pc}
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b934:	2201      	movs	r2, #1
 800b936:	2104      	movs	r1, #4
 800b938:	6820      	ldr	r0, [r4, #0]
 800b93a:	f7ff fedd 	bl	800b6f8 <TIM_CCxChannelCmd>
      break;
 800b93e:	e7f2      	b.n	800b926 <HAL_TIM_Encoder_Start+0x9e>
      return HAL_ERROR;
 800b940:	2001      	movs	r0, #1
 800b942:	e7f6      	b.n	800b932 <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800b944:	2001      	movs	r0, #1
 800b946:	e7f4      	b.n	800b932 <HAL_TIM_Encoder_Start+0xaa>
      return HAL_ERROR;
 800b948:	2001      	movs	r0, #1
 800b94a:	e7f2      	b.n	800b932 <HAL_TIM_Encoder_Start+0xaa>
 800b94c:	2001      	movs	r0, #1
 800b94e:	e7f0      	b.n	800b932 <HAL_TIM_Encoder_Start+0xaa>

0800b950 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b950:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800b954:	2a01      	cmp	r2, #1
 800b956:	d045      	beq.n	800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
{
 800b958:	b470      	push	{r4, r5, r6}
 800b95a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800b95c:	2201      	movs	r2, #1
 800b95e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b962:	2202      	movs	r2, #2
 800b964:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b968:	6802      	ldr	r2, [r0, #0]
 800b96a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b96c:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b96e:	4e1e      	ldr	r6, [pc, #120]	@ (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800b970:	4d1e      	ldr	r5, [pc, #120]	@ (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800b972:	42aa      	cmp	r2, r5
 800b974:	bf18      	it	ne
 800b976:	42b2      	cmpne	r2, r6
 800b978:	d103      	bne.n	800b982 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b97a:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b97e:	684d      	ldr	r5, [r1, #4]
 800b980:	4328      	orrs	r0, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b982:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b986:	680d      	ldr	r5, [r1, #0]
 800b988:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b98a:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	4816      	ldr	r0, [pc, #88]	@ (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800b990:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b994:	bf18      	it	ne
 800b996:	4282      	cmpne	r2, r0
 800b998:	d017      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b99a:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800b99e:	4282      	cmp	r2, r0
 800b9a0:	d013      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9a2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800b9a6:	4282      	cmp	r2, r0
 800b9a8:	d00f      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9aa:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800b9ae:	4282      	cmp	r2, r0
 800b9b0:	d00b      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9b2:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800b9b6:	4282      	cmp	r2, r0
 800b9b8:	d007      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9ba:	f5a0 406c 	sub.w	r0, r0, #60416	@ 0xec00
 800b9be:	4282      	cmp	r2, r0
 800b9c0:	d003      	beq.n	800b9ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b9c2:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800b9c6:	4282      	cmp	r2, r0
 800b9c8:	d104      	bne.n	800b9d4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9ca:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9ce:	6889      	ldr	r1, [r1, #8]
 800b9d0:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9d2:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800b9e0:	bc70      	pop	{r4, r5, r6}
 800b9e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b9e4:	2002      	movs	r0, #2
}
 800b9e6:	4770      	bx	lr
 800b9e8:	40010000 	.word	0x40010000
 800b9ec:	40010400 	.word	0x40010400

0800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9f0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d03c      	beq.n	800ba72 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 800b9f8:	b430      	push	{r4, r5}
 800b9fa:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba02:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba08:	6888      	ldr	r0, [r1, #8]
 800ba0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba10:	6848      	ldr	r0, [r1, #4]
 800ba12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba18:	6808      	ldr	r0, [r1, #0]
 800ba1a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba20:	6908      	ldr	r0, [r1, #16]
 800ba22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba28:	6948      	ldr	r0, [r1, #20]
 800ba2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba30:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800ba32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba34:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800ba38:	6988      	ldr	r0, [r1, #24]
 800ba3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba3e:	6810      	ldr	r0, [r2, #0]
 800ba40:	4d0d      	ldr	r5, [pc, #52]	@ (800ba78 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 800ba42:	4c0e      	ldr	r4, [pc, #56]	@ (800ba7c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800ba44:	42a0      	cmp	r0, r4
 800ba46:	bf18      	it	ne
 800ba48:	42a8      	cmpne	r0, r5
 800ba4a:	d10c      	bne.n	800ba66 <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba50:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800ba52:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba5a:	69cc      	ldr	r4, [r1, #28]
 800ba5c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba5e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba62:	6a09      	ldr	r1, [r1, #32]
 800ba64:	430b      	orrs	r3, r1
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba66:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ba68:	2000      	movs	r0, #0
 800ba6a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800ba6e:	bc30      	pop	{r4, r5}
 800ba70:	4770      	bx	lr
  __HAL_LOCK(htim);
 800ba72:	2002      	movs	r0, #2
}
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40010000 	.word	0x40010000
 800ba7c:	40010400 	.word	0x40010400

0800ba80 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba80:	4770      	bx	lr

0800ba82 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba84:	4770      	bx	lr

0800ba86 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba86:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	e852 3f00 	ldrex	r3, [r2]
 800ba8c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba90:	e842 3100 	strex	r1, r3, [r2]
 800ba94:	2900      	cmp	r1, #0
 800ba96:	d1f6      	bne.n	800ba86 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	f102 0308 	add.w	r3, r2, #8
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	3208      	adds	r2, #8
 800baa8:	e842 3100 	strex	r1, r3, [r2]
 800baac:	2900      	cmp	r1, #0
 800baae:	d1f3      	bne.n	800ba98 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bab0:	2320      	movs	r3, #32
 800bab2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
}
 800bab6:	4770      	bx	lr

0800bab8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bab8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baba:	e852 3f00 	ldrex	r3, [r2]
 800babe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	e842 3100 	strex	r1, r3, [r2]
 800bac6:	2900      	cmp	r1, #0
 800bac8:	d1f6      	bne.n	800bab8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bacc:	f102 0308 	add.w	r3, r2, #8
 800bad0:	e853 1f00 	ldrex	r1, [r3]
 800bad4:	4b0d      	ldr	r3, [pc, #52]	@ (800bb0c <UART_EndRxTransfer+0x54>)
 800bad6:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad8:	3208      	adds	r2, #8
 800bada:	e842 3100 	strex	r1, r3, [r2]
 800bade:	2900      	cmp	r1, #0
 800bae0:	d1f3      	bne.n	800baca <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bae2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d006      	beq.n	800baf6 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bae8:	2320      	movs	r3, #32
 800baea:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baee:	2300      	movs	r3, #0
 800baf0:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800baf2:	6703      	str	r3, [r0, #112]	@ 0x70
}
 800baf4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	e852 3f00 	ldrex	r3, [r2]
 800bafc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb00:	e842 3100 	strex	r1, r3, [r2]
 800bb04:	2900      	cmp	r1, #0
 800bb06:	d1f6      	bne.n	800baf6 <UART_EndRxTransfer+0x3e>
 800bb08:	e7ee      	b.n	800bae8 <UART_EndRxTransfer+0x30>
 800bb0a:	bf00      	nop
 800bb0c:	effffffe 	.word	0xeffffffe

0800bb10 <HAL_UART_Transmit_DMA>:
{
 800bb10:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800bb12:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800bb16:	2a20      	cmp	r2, #32
 800bb18:	d14a      	bne.n	800bbb0 <HAL_UART_Transmit_DMA+0xa0>
{
 800bb1a:	b510      	push	{r4, lr}
 800bb1c:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bf18      	it	ne
 800bb22:	2900      	cmpne	r1, #0
 800bb24:	d046      	beq.n	800bbb4 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_LOCK(huart);
 800bb26:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 800bb2a:	2a01      	cmp	r2, #1
 800bb2c:	d044      	beq.n	800bbb8 <HAL_UART_Transmit_DMA+0xa8>
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->pTxBuffPtr  = pData;
 800bb34:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bb36:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bb3a:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb44:	2221      	movs	r2, #33	@ 0x21
 800bb46:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    if (huart->hdmatx != NULL)
 800bb4a:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb4c:	b1e2      	cbz	r2, 800bb88 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bb4e:	491b      	ldr	r1, [pc, #108]	@ (800bbbc <HAL_UART_Transmit_DMA+0xac>)
 800bb50:	63d1      	str	r1, [r2, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bb52:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb54:	491a      	ldr	r1, [pc, #104]	@ (800bbc0 <HAL_UART_Transmit_DMA+0xb0>)
 800bb56:	6411      	str	r1, [r2, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bb58:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb5a:	491a      	ldr	r1, [pc, #104]	@ (800bbc4 <HAL_UART_Transmit_DMA+0xb4>)
 800bb5c:	64d1      	str	r1, [r2, #76]	@ 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 800bb5e:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800bb60:	2100      	movs	r1, #0
 800bb62:	6511      	str	r1, [r2, #80]	@ 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bb64:	6802      	ldr	r2, [r0, #0]
 800bb66:	3228      	adds	r2, #40	@ 0x28
 800bb68:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800bb6a:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800bb6c:	f7f9 f8de 	bl	8004d2c <HAL_DMA_Start_IT>
 800bb70:	b150      	cbz	r0, 800bb88 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb72:	2310      	movs	r3, #16
 800bb74:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
        huart->gState = HAL_UART_STATE_READY;
 800bb7e:	2320      	movs	r3, #32
 800bb80:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        return HAL_ERROR;
 800bb84:	2001      	movs	r0, #1
 800bb86:	e012      	b.n	800bbae <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	2240      	movs	r2, #64	@ 0x40
 800bb8c:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	f102 0308 	add.w	r3, r2, #8
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba2:	3208      	adds	r2, #8
 800bba4:	e842 3100 	strex	r1, r3, [r2]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d1f3      	bne.n	800bb94 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 800bbac:	2000      	movs	r0, #0
}
 800bbae:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800bbb0:	2002      	movs	r0, #2
}
 800bbb2:	4770      	bx	lr
      return HAL_ERROR;
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	e7fa      	b.n	800bbae <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 800bbb8:	2002      	movs	r0, #2
 800bbba:	e7f8      	b.n	800bbae <HAL_UART_Transmit_DMA+0x9e>
 800bbbc:	0800bbcb 	.word	0x0800bbcb
 800bbc0:	0800bc37 	.word	0x0800bc37
 800bbc4:	0800bc45 	.word	0x0800bc45

0800bbc8 <HAL_UART_TxCpltCallback>:
}
 800bbc8:	4770      	bx	lr

0800bbca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbca:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbcc:	6b81      	ldr	r1, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bbce:	69c3      	ldr	r3, [r0, #28]
 800bbd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbd4:	d018      	beq.n	800bc08 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f8a1 3056 	strh.w	r3, [r1, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbdc:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	f102 0308 	add.w	r3, r2, #8
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	3208      	adds	r2, #8
 800bbec:	e842 3000 	strex	r0, r3, [r2]
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1f3      	bne.n	800bbdc <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbf4:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	e852 3f00 	ldrex	r3, [r2]
 800bbfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	e842 3000 	strex	r0, r3, [r2]
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1f6      	bne.n	800bbf4 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc06:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800bc08:	4608      	mov	r0, r1
 800bc0a:	f7ff ffdd 	bl	800bbc8 <HAL_UART_TxCpltCallback>
}
 800bc0e:	e7fa      	b.n	800bc06 <UART_DMATransmitCplt+0x3c>

0800bc10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc10:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	e852 3f00 	ldrex	r3, [r2]
 800bc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1c:	e842 3100 	strex	r1, r3, [r2]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d1f6      	bne.n	800bc12 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc24:	2320      	movs	r3, #32
 800bc26:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6743      	str	r3, [r0, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc2e:	f7ff ffcb 	bl	800bbc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc32:	bd08      	pop	{r3, pc}

0800bc34 <HAL_UART_TxHalfCpltCallback>:
}
 800bc34:	4770      	bx	lr

0800bc36 <UART_DMATxHalfCplt>:
{
 800bc36:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800bc38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800bc3a:	f7ff fffb 	bl	800bc34 <HAL_UART_TxHalfCpltCallback>
}
 800bc3e:	bd08      	pop	{r3, pc}

0800bc40 <HAL_UART_RxCpltCallback>:
}
 800bc40:	4770      	bx	lr

0800bc42 <HAL_UART_RxHalfCpltCallback>:
}
 800bc42:	4770      	bx	lr

0800bc44 <UART_DMAError>:
{
 800bc44:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc46:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc48:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc4c:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc58:	d001      	beq.n	800bc5e <UART_DMAError+0x1a>
 800bc5a:	2a21      	cmp	r2, #33	@ 0x21
 800bc5c:	d010      	beq.n	800bc80 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bc66:	d001      	beq.n	800bc6c <UART_DMAError+0x28>
 800bc68:	2d22      	cmp	r5, #34	@ 0x22
 800bc6a:	d010      	beq.n	800bc8e <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800bc70:	f043 0310 	orr.w	r3, r3, #16
 800bc74:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  HAL_UART_ErrorCallback(huart);
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f7f4 fe1f 	bl	80008bc <HAL_UART_ErrorCallback>
}
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fefd 	bl	800ba86 <UART_EndTxTransfer>
 800bc8c:	e7e7      	b.n	800bc5e <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bc94:	4620      	mov	r0, r4
 800bc96:	f7ff ff0f 	bl	800bab8 <UART_EndRxTransfer>
 800bc9a:	e7e7      	b.n	800bc6c <UART_DMAError+0x28>

0800bc9c <UART_DMAAbortOnError>:
{
 800bc9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc9e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bca6:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 800bcaa:	f7f4 fe07 	bl	80008bc <HAL_UART_ErrorCallback>
}
 800bcae:	bd08      	pop	{r3, pc}

0800bcb0 <HAL_UART_IRQHandler>:
{
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bcb4:	6802      	ldr	r2, [r0, #0]
 800bcb6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcb8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcba:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800bcbc:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 800bcc0:	ea13 0f0c 	tst.w	r3, ip
 800bcc4:	d10d      	bne.n	800bce2 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcc6:	f013 0f20 	tst.w	r3, #32
 800bcca:	d010      	beq.n	800bcee <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bccc:	f010 0f20 	tst.w	r0, #32
 800bcd0:	d102      	bne.n	800bcd8 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcd2:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800bcd6:	d00a      	beq.n	800bcee <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 800bcd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bcda:	b393      	cbz	r3, 800bd42 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800bcdc:	4620      	mov	r0, r4
 800bcde:	4798      	blx	r3
      return;
 800bce0:	e02f      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bce2:	4d86      	ldr	r5, [pc, #536]	@ (800befc <HAL_UART_IRQHandler+0x24c>)
 800bce4:	400d      	ands	r5, r1
 800bce6:	d12d      	bne.n	800bd44 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bce8:	4e85      	ldr	r6, [pc, #532]	@ (800bf00 <HAL_UART_IRQHandler+0x250>)
 800bcea:	4230      	tst	r0, r6
 800bcec:	d12a      	bne.n	800bd44 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcee:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800bcf0:	2d01      	cmp	r5, #1
 800bcf2:	f000 80bd 	beq.w	800be70 <HAL_UART_IRQHandler+0x1c0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcf6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800bcfa:	d003      	beq.n	800bd04 <HAL_UART_IRQHandler+0x54>
 800bcfc:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 800bd00:	f040 818b 	bne.w	800c01a <HAL_UART_IRQHandler+0x36a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd08:	d007      	beq.n	800bd1a <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd0a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800bd0e:	f040 818b 	bne.w	800c028 <HAL_UART_IRQHandler+0x378>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd12:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800bd16:	f040 8187 	bne.w	800c028 <HAL_UART_IRQHandler+0x378>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd1a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800bd1e:	d003      	beq.n	800bd28 <HAL_UART_IRQHandler+0x78>
 800bd20:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800bd24:	f040 8187 	bne.w	800c036 <HAL_UART_IRQHandler+0x386>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd28:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800bd2c:	d003      	beq.n	800bd36 <HAL_UART_IRQHandler+0x86>
 800bd2e:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800bd32:	f040 8184 	bne.w	800c03e <HAL_UART_IRQHandler+0x38e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd36:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800bd3a:	d002      	beq.n	800bd42 <HAL_UART_IRQHandler+0x92>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	f2c0 8182 	blt.w	800c046 <HAL_UART_IRQHandler+0x396>
}
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd44:	f013 0f01 	tst.w	r3, #1
 800bd48:	d009      	beq.n	800bd5e <HAL_UART_IRQHandler+0xae>
 800bd4a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800bd4e:	d006      	beq.n	800bd5e <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd50:	2601      	movs	r6, #1
 800bd52:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd54:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bd58:	4332      	orrs	r2, r6
 800bd5a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd5e:	f013 0f02 	tst.w	r3, #2
 800bd62:	d00b      	beq.n	800bd7c <HAL_UART_IRQHandler+0xcc>
 800bd64:	f011 0f01 	tst.w	r1, #1
 800bd68:	d008      	beq.n	800bd7c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd6a:	6822      	ldr	r2, [r4, #0]
 800bd6c:	2602      	movs	r6, #2
 800bd6e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd70:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bd74:	f042 0204 	orr.w	r2, r2, #4
 800bd78:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd7c:	f013 0f04 	tst.w	r3, #4
 800bd80:	d00b      	beq.n	800bd9a <HAL_UART_IRQHandler+0xea>
 800bd82:	f011 0f01 	tst.w	r1, #1
 800bd86:	d008      	beq.n	800bd9a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	2604      	movs	r6, #4
 800bd8c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd8e:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bd92:	f042 0202 	orr.w	r2, r2, #2
 800bd96:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd9a:	f013 0f08 	tst.w	r3, #8
 800bd9e:	d00b      	beq.n	800bdb8 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bda0:	f010 0f20 	tst.w	r0, #32
 800bda4:	d100      	bne.n	800bda8 <HAL_UART_IRQHandler+0xf8>
 800bda6:	b13d      	cbz	r5, 800bdb8 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bda8:	6822      	ldr	r2, [r4, #0]
 800bdaa:	2508      	movs	r5, #8
 800bdac:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdae:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bdb2:	432a      	orrs	r2, r5
 800bdb4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bdb8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800bdbc:	d00c      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x128>
 800bdbe:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 800bdc2:	d009      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800bdca:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bdcc:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bdd0:	f042 0220 	orr.w	r2, r2, #32
 800bdd4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdd8:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800bddc:	2a00      	cmp	r2, #0
 800bdde:	d0b0      	beq.n	800bd42 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bde0:	f013 0f20 	tst.w	r3, #32
 800bde4:	d009      	beq.n	800bdfa <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bde6:	f010 0f20 	tst.w	r0, #32
 800bdea:	d102      	bne.n	800bdf2 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdec:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800bdf0:	d003      	beq.n	800bdfa <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 800bdf2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bdf4:	b10b      	cbz	r3, 800bdfa <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800bdfa:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be06:	d102      	bne.n	800be0e <HAL_UART_IRQHandler+0x15e>
 800be08:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800be0c:	d029      	beq.n	800be62 <HAL_UART_IRQHandler+0x1b2>
        UART_EndRxTransfer(huart);
 800be0e:	4620      	mov	r0, r4
 800be10:	f7ff fe52 	bl	800bab8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be1c:	d01d      	beq.n	800be5a <HAL_UART_IRQHandler+0x1aa>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be20:	f102 0308 	add.w	r3, r2, #8
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	3208      	adds	r2, #8
 800be2e:	e842 3100 	strex	r1, r3, [r2]
 800be32:	2900      	cmp	r1, #0
 800be34:	d1f3      	bne.n	800be1e <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 800be36:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800be38:	b15b      	cbz	r3, 800be52 <HAL_UART_IRQHandler+0x1a2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be3a:	4a32      	ldr	r2, [pc, #200]	@ (800bf04 <HAL_UART_IRQHandler+0x254>)
 800be3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be3e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800be40:	f7f9 fa60 	bl	8005304 <HAL_DMA_Abort_IT>
 800be44:	2800      	cmp	r0, #0
 800be46:	f43f af7c 	beq.w	800bd42 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be4a:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800be4c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800be4e:	4798      	blx	r3
 800be50:	e777      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 800be52:	4620      	mov	r0, r4
 800be54:	f7f4 fd32 	bl	80008bc <HAL_UART_ErrorCallback>
 800be58:	e773      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7f4 fd2e 	bl	80008bc <HAL_UART_ErrorCallback>
 800be60:	e76f      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 800be62:	4620      	mov	r0, r4
 800be64:	f7f4 fd2a 	bl	80008bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be68:	2300      	movs	r3, #0
 800be6a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return;
 800be6e:	e768      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be70:	f013 0f10 	tst.w	r3, #16
 800be74:	f43f af3f 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be78:	f010 0f10 	tst.w	r0, #16
 800be7c:	f43f af3b 	beq.w	800bcf6 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be80:	2310      	movs	r3, #16
 800be82:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800be8c:	f000 808d 	beq.w	800bfaa <HAL_UART_IRQHandler+0x2fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be90:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800be92:	6813      	ldr	r3, [r2, #0]
 800be94:	481c      	ldr	r0, [pc, #112]	@ (800bf08 <HAL_UART_IRQHandler+0x258>)
 800be96:	491d      	ldr	r1, [pc, #116]	@ (800bf0c <HAL_UART_IRQHandler+0x25c>)
 800be98:	428b      	cmp	r3, r1
 800be9a:	bf18      	it	ne
 800be9c:	4283      	cmpne	r3, r0
 800be9e:	d037      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bea0:	3118      	adds	r1, #24
 800bea2:	428b      	cmp	r3, r1
 800bea4:	d034      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bea6:	3118      	adds	r1, #24
 800bea8:	428b      	cmp	r3, r1
 800beaa:	d031      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800beac:	3118      	adds	r1, #24
 800beae:	428b      	cmp	r3, r1
 800beb0:	d02e      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800beb2:	3118      	adds	r1, #24
 800beb4:	428b      	cmp	r3, r1
 800beb6:	d02b      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800beb8:	3118      	adds	r1, #24
 800beba:	428b      	cmp	r3, r1
 800bebc:	d028      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bebe:	3118      	adds	r1, #24
 800bec0:	428b      	cmp	r3, r1
 800bec2:	d025      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bec4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800bec8:	428b      	cmp	r3, r1
 800beca:	d021      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800becc:	3118      	adds	r1, #24
 800bece:	428b      	cmp	r3, r1
 800bed0:	d01e      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bed2:	3118      	adds	r1, #24
 800bed4:	428b      	cmp	r3, r1
 800bed6:	d01b      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bed8:	3118      	adds	r1, #24
 800beda:	428b      	cmp	r3, r1
 800bedc:	d018      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bede:	3118      	adds	r1, #24
 800bee0:	428b      	cmp	r3, r1
 800bee2:	d015      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bee4:	3118      	adds	r1, #24
 800bee6:	428b      	cmp	r3, r1
 800bee8:	d012      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800beea:	3118      	adds	r1, #24
 800beec:	428b      	cmp	r3, r1
 800beee:	d00f      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bef0:	3118      	adds	r1, #24
 800bef2:	428b      	cmp	r3, r1
 800bef4:	d00c      	beq.n	800bf10 <HAL_UART_IRQHandler+0x260>
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	e00b      	b.n	800bf14 <HAL_UART_IRQHandler+0x264>
 800befc:	10000001 	.word	0x10000001
 800bf00:	04000120 	.word	0x04000120
 800bf04:	0800bc9d 	.word	0x0800bc9d
 800bf08:	40020010 	.word	0x40020010
 800bf0c:	40020028 	.word	0x40020028
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f43f af14 	beq.w	800bd42 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf1a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bf1e:	4299      	cmp	r1, r3
 800bf20:	f67f af0f 	bls.w	800bd42 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800bf24:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf28:	69d3      	ldr	r3, [r2, #28]
 800bf2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf2e:	d031      	beq.n	800bf94 <HAL_UART_IRQHandler+0x2e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	e852 3f00 	ldrex	r3, [r2]
 800bf36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3a:	e842 3100 	strex	r1, r3, [r2]
 800bf3e:	2900      	cmp	r1, #0
 800bf40:	d1f6      	bne.n	800bf30 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	f102 0308 	add.w	r3, r2, #8
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	3208      	adds	r2, #8
 800bf52:	e842 3100 	strex	r1, r3, [r2]
 800bf56:	2900      	cmp	r1, #0
 800bf58:	d1f3      	bne.n	800bf42 <HAL_UART_IRQHandler+0x292>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5c:	f102 0308 	add.w	r3, r2, #8
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	3208      	adds	r2, #8
 800bf6a:	e842 3100 	strex	r1, r3, [r2]
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	d1f3      	bne.n	800bf5a <HAL_UART_IRQHandler+0x2aa>
          huart->RxState = HAL_UART_STATE_READY;
 800bf72:	2320      	movs	r3, #32
 800bf74:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7e:	e852 3f00 	ldrex	r3, [r2]
 800bf82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	e842 3100 	strex	r1, r3, [r2]
 800bf8a:	2900      	cmp	r1, #0
 800bf8c:	d1f6      	bne.n	800bf7c <HAL_UART_IRQHandler+0x2cc>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf8e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800bf90:	f7f9 f818 	bl	8004fc4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf94:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bf98:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	1ac9      	subs	r1, r1, r3
 800bfa0:	b289      	uxth	r1, r1
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7f5 fe52 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
      return;
 800bfa8:	e6cb      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfaa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800bfae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	1ac9      	subs	r1, r1, r3
 800bfb6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800bfb8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f43f aebf 	beq.w	800bd42 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	f43f aebc 	beq.w	800bd42 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfcc:	e852 3f00 	ldrex	r3, [r2]
 800bfd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	e842 3000 	strex	r0, r3, [r2]
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d1f6      	bne.n	800bfca <HAL_UART_IRQHandler+0x31a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfdc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	f102 0308 	add.w	r3, r2, #8
 800bfe2:	e853 0f00 	ldrex	r0, [r3]
 800bfe6:	4b1a      	ldr	r3, [pc, #104]	@ (800c050 <HAL_UART_IRQHandler+0x3a0>)
 800bfe8:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfea:	3208      	adds	r2, #8
 800bfec:	e842 3000 	strex	r0, r3, [r2]
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d1f3      	bne.n	800bfdc <HAL_UART_IRQHandler+0x32c>
        huart->RxState = HAL_UART_STATE_READY;
 800bff4:	2320      	movs	r3, #32
 800bff6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bffa:	2300      	movs	r3, #0
 800bffc:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800bffe:	6723      	str	r3, [r4, #112]	@ 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	e852 3f00 	ldrex	r3, [r2]
 800c006:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	e842 3000 	strex	r0, r3, [r2]
 800c00e:	2800      	cmp	r0, #0
 800c010:	d1f6      	bne.n	800c000 <HAL_UART_IRQHandler+0x350>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c012:	4620      	mov	r0, r4
 800c014:	f7f5 fe1a 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
      return;
 800c018:	e693      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c01a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c01e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fd67 	bl	800caf4 <HAL_UARTEx_WakeupCallback>
    return;
 800c026:	e68c      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800c028:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f43f ae89 	beq.w	800bd42 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 800c030:	4620      	mov	r0, r4
 800c032:	4798      	blx	r3
    return;
 800c034:	e685      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800c036:	4620      	mov	r0, r4
 800c038:	f7ff fdea 	bl	800bc10 <UART_EndTransmit_IT>
    return;
 800c03c:	e681      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 fd5a 	bl	800caf8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800c044:	e67d      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c046:	4620      	mov	r0, r4
 800c048:	f000 fd55 	bl	800caf6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800c04c:	e679      	b.n	800bd42 <HAL_UART_IRQHandler+0x92>
 800c04e:	bf00      	nop
 800c050:	effffffe 	.word	0xeffffffe

0800c054 <UART_DMARxHalfCplt>:
{
 800c054:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c056:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c058:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d002      	beq.n	800c064 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800c05e:	f7ff fdf0 	bl	800bc42 <HAL_UART_RxHalfCpltCallback>
}
 800c062:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c064:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800c068:	0849      	lsrs	r1, r1, #1
 800c06a:	f7f5 fdef 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
 800c06e:	e7f8      	b.n	800c062 <UART_DMARxHalfCplt+0xe>

0800c070 <UART_DMAReceiveCplt>:
{
 800c070:	b508      	push	{r3, lr}
 800c072:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c074:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c07c:	d029      	beq.n	800c0d2 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c084:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c086:	e852 3f00 	ldrex	r3, [r2]
 800c08a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	e842 3100 	strex	r1, r3, [r2]
 800c092:	2900      	cmp	r1, #0
 800c094:	d1f6      	bne.n	800c084 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c096:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	f102 0308 	add.w	r3, r2, #8
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a4:	3208      	adds	r2, #8
 800c0a6:	e842 3100 	strex	r1, r3, [r2]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	d1f3      	bne.n	800c096 <UART_DMAReceiveCplt+0x26>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b0:	f102 0308 	add.w	r3, r2, #8
 800c0b4:	e853 3f00 	ldrex	r3, [r3]
 800c0b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0bc:	3208      	adds	r2, #8
 800c0be:	e842 3100 	strex	r1, r3, [r2]
 800c0c2:	2900      	cmp	r1, #0
 800c0c4:	d1f3      	bne.n	800c0ae <UART_DMAReceiveCplt+0x3e>
    huart->RxState = HAL_UART_STATE_READY;
 800c0c6:	2320      	movs	r3, #32
 800c0c8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0cc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d005      	beq.n	800c0de <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d00c      	beq.n	800c0f2 <UART_DMAReceiveCplt+0x82>
    HAL_UART_RxCpltCallback(huart);
 800c0d8:	f7ff fdb2 	bl	800bc40 <HAL_UART_RxCpltCallback>
}
 800c0dc:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	e852 3f00 	ldrex	r3, [r2]
 800c0e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e8:	e842 3100 	strex	r1, r3, [r2]
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	d1f6      	bne.n	800c0de <UART_DMAReceiveCplt+0x6e>
 800c0f0:	e7ef      	b.n	800c0d2 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0f2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800c0f6:	f7f5 fda9 	bl	8001c4c <HAL_UARTEx_RxEventCallback>
 800c0fa:	e7ef      	b.n	800c0dc <UART_DMAReceiveCplt+0x6c>

0800c0fc <UART_SetConfig>:
{
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c102:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c104:	6883      	ldr	r3, [r0, #8]
 800c106:	6902      	ldr	r2, [r0, #16]
 800c108:	4313      	orrs	r3, r2
 800c10a:	6942      	ldr	r2, [r0, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	69c2      	ldr	r2, [r0, #28]
 800c110:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c112:	6808      	ldr	r0, [r1, #0]
 800c114:	4a88      	ldr	r2, [pc, #544]	@ (800c338 <UART_SetConfig+0x23c>)
 800c116:	4002      	ands	r2, r0
 800c118:	431a      	orrs	r2, r3
 800c11a:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c11c:	6822      	ldr	r2, [r4, #0]
 800c11e:	6853      	ldr	r3, [r2, #4]
 800c120:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c124:	68e1      	ldr	r1, [r4, #12]
 800c126:	430b      	orrs	r3, r1
 800c128:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c12a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c12c:	6822      	ldr	r2, [r4, #0]
 800c12e:	4b83      	ldr	r3, [pc, #524]	@ (800c33c <UART_SetConfig+0x240>)
 800c130:	429a      	cmp	r2, r3
 800c132:	d001      	beq.n	800c138 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800c134:	6a23      	ldr	r3, [r4, #32]
 800c136:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c138:	6890      	ldr	r0, [r2, #8]
 800c13a:	4b81      	ldr	r3, [pc, #516]	@ (800c340 <UART_SetConfig+0x244>)
 800c13c:	4003      	ands	r3, r0
 800c13e:	430b      	orrs	r3, r1
 800c140:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c142:	6822      	ldr	r2, [r4, #0]
 800c144:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c146:	f023 030f 	bic.w	r3, r3, #15
 800c14a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c14c:	430b      	orrs	r3, r1
 800c14e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	4b7c      	ldr	r3, [pc, #496]	@ (800c344 <UART_SetConfig+0x248>)
 800c154:	429a      	cmp	r2, r3
 800c156:	d021      	beq.n	800c19c <UART_SetConfig+0xa0>
 800c158:	4b7b      	ldr	r3, [pc, #492]	@ (800c348 <UART_SetConfig+0x24c>)
 800c15a:	429a      	cmp	r2, r3
 800c15c:	f000 808c 	beq.w	800c278 <UART_SetConfig+0x17c>
 800c160:	4b7a      	ldr	r3, [pc, #488]	@ (800c34c <UART_SetConfig+0x250>)
 800c162:	429a      	cmp	r2, r3
 800c164:	f000 80a2 	beq.w	800c2ac <UART_SetConfig+0x1b0>
 800c168:	4b79      	ldr	r3, [pc, #484]	@ (800c350 <UART_SetConfig+0x254>)
 800c16a:	429a      	cmp	r2, r3
 800c16c:	f000 80b5 	beq.w	800c2da <UART_SetConfig+0x1de>
 800c170:	4b78      	ldr	r3, [pc, #480]	@ (800c354 <UART_SetConfig+0x258>)
 800c172:	429a      	cmp	r2, r3
 800c174:	f000 80c8 	beq.w	800c308 <UART_SetConfig+0x20c>
 800c178:	4b77      	ldr	r3, [pc, #476]	@ (800c358 <UART_SetConfig+0x25c>)
 800c17a:	429a      	cmp	r2, r3
 800c17c:	f000 80f4 	beq.w	800c368 <UART_SetConfig+0x26c>
 800c180:	4b76      	ldr	r3, [pc, #472]	@ (800c35c <UART_SetConfig+0x260>)
 800c182:	429a      	cmp	r2, r3
 800c184:	f000 8119 	beq.w	800c3ba <UART_SetConfig+0x2be>
 800c188:	4b75      	ldr	r3, [pc, #468]	@ (800c360 <UART_SetConfig+0x264>)
 800c18a:	429a      	cmp	r2, r3
 800c18c:	f000 812c 	beq.w	800c3e8 <UART_SetConfig+0x2ec>
 800c190:	4b6a      	ldr	r3, [pc, #424]	@ (800c33c <UART_SetConfig+0x240>)
 800c192:	429a      	cmp	r2, r3
 800c194:	f000 813f 	beq.w	800c416 <UART_SetConfig+0x31a>
 800c198:	2380      	movs	r3, #128	@ 0x80
 800c19a:	e033      	b.n	800c204 <UART_SetConfig+0x108>
 800c19c:	4b71      	ldr	r3, [pc, #452]	@ (800c364 <UART_SetConfig+0x268>)
 800c19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1a4:	2b28      	cmp	r3, #40	@ 0x28
 800c1a6:	d865      	bhi.n	800c274 <UART_SetConfig+0x178>
 800c1a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c1ac:	00640029 	.word	0x00640029
 800c1b0:	00640064 	.word	0x00640064
 800c1b4:	00640064 	.word	0x00640064
 800c1b8:	00640064 	.word	0x00640064
 800c1bc:	0064014d 	.word	0x0064014d
 800c1c0:	00640064 	.word	0x00640064
 800c1c4:	00640064 	.word	0x00640064
 800c1c8:	00640064 	.word	0x00640064
 800c1cc:	0064002b 	.word	0x0064002b
 800c1d0:	00640064 	.word	0x00640064
 800c1d4:	00640064 	.word	0x00640064
 800c1d8:	00640064 	.word	0x00640064
 800c1dc:	0064005e 	.word	0x0064005e
 800c1e0:	00640064 	.word	0x00640064
 800c1e4:	00640064 	.word	0x00640064
 800c1e8:	00640064 	.word	0x00640064
 800c1ec:	00640060 	.word	0x00640060
 800c1f0:	00640064 	.word	0x00640064
 800c1f4:	00640064 	.word	0x00640064
 800c1f8:	00640064 	.word	0x00640064
 800c1fc:	0062      	.short	0x0062
 800c1fe:	2301      	movs	r3, #1
 800c200:	e000      	b.n	800c204 <UART_SetConfig+0x108>
 800c202:	2308      	movs	r3, #8
  if (UART_INSTANCE_LOWPOWER(huart))
 800c204:	494d      	ldr	r1, [pc, #308]	@ (800c33c <UART_SetConfig+0x240>)
 800c206:	428a      	cmp	r2, r1
 800c208:	f000 812f 	beq.w	800c46a <UART_SetConfig+0x36e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c20c:	69e0      	ldr	r0, [r4, #28]
 800c20e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c212:	f000 81af 	beq.w	800c574 <UART_SetConfig+0x478>
    switch (clocksource)
 800c216:	2b20      	cmp	r3, #32
 800c218:	f200 8207 	bhi.w	800c62a <UART_SetConfig+0x52e>
 800c21c:	2b20      	cmp	r3, #32
 800c21e:	f200 8251 	bhi.w	800c6c4 <UART_SetConfig+0x5c8>
 800c222:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c226:	021e      	.short	0x021e
 800c228:	024f0224 	.word	0x024f0224
 800c22c:	0227024f 	.word	0x0227024f
 800c230:	024f024f 	.word	0x024f024f
 800c234:	022c024f 	.word	0x022c024f
 800c238:	024f024f 	.word	0x024f024f
 800c23c:	024f024f 	.word	0x024f024f
 800c240:	024f024f 	.word	0x024f024f
 800c244:	0231024f 	.word	0x0231024f
 800c248:	024f024f 	.word	0x024f024f
 800c24c:	024f024f 	.word	0x024f024f
 800c250:	024f024f 	.word	0x024f024f
 800c254:	024f024f 	.word	0x024f024f
 800c258:	024f024f 	.word	0x024f024f
 800c25c:	024f024f 	.word	0x024f024f
 800c260:	024f024f 	.word	0x024f024f
 800c264:	023d024f 	.word	0x023d024f
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c268:	2310      	movs	r3, #16
 800c26a:	e7cb      	b.n	800c204 <UART_SetConfig+0x108>
 800c26c:	2320      	movs	r3, #32
 800c26e:	e7c9      	b.n	800c204 <UART_SetConfig+0x108>
 800c270:	2340      	movs	r3, #64	@ 0x40
 800c272:	e7c7      	b.n	800c204 <UART_SetConfig+0x108>
 800c274:	2380      	movs	r3, #128	@ 0x80
 800c276:	e7c5      	b.n	800c204 <UART_SetConfig+0x108>
 800c278:	4b3a      	ldr	r3, [pc, #232]	@ (800c364 <UART_SetConfig+0x268>)
 800c27a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	2b05      	cmp	r3, #5
 800c282:	d811      	bhi.n	800c2a8 <UART_SetConfig+0x1ac>
 800c284:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c288:	00e10006 	.word	0x00e10006
 800c28c:	000a0008 	.word	0x000a0008
 800c290:	000e000c 	.word	0x000e000c
 800c294:	2300      	movs	r3, #0
 800c296:	e7b5      	b.n	800c204 <UART_SetConfig+0x108>
 800c298:	2308      	movs	r3, #8
 800c29a:	e7b3      	b.n	800c204 <UART_SetConfig+0x108>
 800c29c:	2310      	movs	r3, #16
 800c29e:	e7b1      	b.n	800c204 <UART_SetConfig+0x108>
 800c2a0:	2320      	movs	r3, #32
 800c2a2:	e7af      	b.n	800c204 <UART_SetConfig+0x108>
 800c2a4:	2340      	movs	r3, #64	@ 0x40
 800c2a6:	e7ad      	b.n	800c204 <UART_SetConfig+0x108>
 800c2a8:	2380      	movs	r3, #128	@ 0x80
 800c2aa:	e7ab      	b.n	800c204 <UART_SetConfig+0x108>
 800c2ac:	4b2d      	ldr	r3, [pc, #180]	@ (800c364 <UART_SetConfig+0x268>)
 800c2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2b0:	f003 0307 	and.w	r3, r3, #7
 800c2b4:	2b05      	cmp	r3, #5
 800c2b6:	d80e      	bhi.n	800c2d6 <UART_SetConfig+0x1da>
 800c2b8:	e8df f003 	tbb	[pc, r3]
 800c2bc:	0705c903 	.word	0x0705c903
 800c2c0:	0b09      	.short	0x0b09
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	e79e      	b.n	800c204 <UART_SetConfig+0x108>
 800c2c6:	2308      	movs	r3, #8
 800c2c8:	e79c      	b.n	800c204 <UART_SetConfig+0x108>
 800c2ca:	2310      	movs	r3, #16
 800c2cc:	e79a      	b.n	800c204 <UART_SetConfig+0x108>
 800c2ce:	2320      	movs	r3, #32
 800c2d0:	e798      	b.n	800c204 <UART_SetConfig+0x108>
 800c2d2:	2340      	movs	r3, #64	@ 0x40
 800c2d4:	e796      	b.n	800c204 <UART_SetConfig+0x108>
 800c2d6:	2380      	movs	r3, #128	@ 0x80
 800c2d8:	e794      	b.n	800c204 <UART_SetConfig+0x108>
 800c2da:	4b22      	ldr	r3, [pc, #136]	@ (800c364 <UART_SetConfig+0x268>)
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2de:	f003 0307 	and.w	r3, r3, #7
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d80e      	bhi.n	800c304 <UART_SetConfig+0x208>
 800c2e6:	e8df f003 	tbb	[pc, r3]
 800c2ea:	b403      	.short	0xb403
 800c2ec:	0b090705 	.word	0x0b090705
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e787      	b.n	800c204 <UART_SetConfig+0x108>
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	e785      	b.n	800c204 <UART_SetConfig+0x108>
 800c2f8:	2310      	movs	r3, #16
 800c2fa:	e783      	b.n	800c204 <UART_SetConfig+0x108>
 800c2fc:	2320      	movs	r3, #32
 800c2fe:	e781      	b.n	800c204 <UART_SetConfig+0x108>
 800c300:	2340      	movs	r3, #64	@ 0x40
 800c302:	e77f      	b.n	800c204 <UART_SetConfig+0x108>
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	e77d      	b.n	800c204 <UART_SetConfig+0x108>
 800c308:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <UART_SetConfig+0x268>)
 800c30a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30c:	f003 0307 	and.w	r3, r3, #7
 800c310:	2b05      	cmp	r3, #5
 800c312:	d80e      	bhi.n	800c332 <UART_SetConfig+0x236>
 800c314:	e8df f003 	tbb	[pc, r3]
 800c318:	07059f03 	.word	0x07059f03
 800c31c:	0b09      	.short	0x0b09
 800c31e:	2300      	movs	r3, #0
 800c320:	e770      	b.n	800c204 <UART_SetConfig+0x108>
 800c322:	2308      	movs	r3, #8
 800c324:	e76e      	b.n	800c204 <UART_SetConfig+0x108>
 800c326:	2310      	movs	r3, #16
 800c328:	e76c      	b.n	800c204 <UART_SetConfig+0x108>
 800c32a:	2320      	movs	r3, #32
 800c32c:	e76a      	b.n	800c204 <UART_SetConfig+0x108>
 800c32e:	2340      	movs	r3, #64	@ 0x40
 800c330:	e768      	b.n	800c204 <UART_SetConfig+0x108>
 800c332:	2380      	movs	r3, #128	@ 0x80
 800c334:	e766      	b.n	800c204 <UART_SetConfig+0x108>
 800c336:	bf00      	nop
 800c338:	cfff69f3 	.word	0xcfff69f3
 800c33c:	58000c00 	.word	0x58000c00
 800c340:	11fff4ff 	.word	0x11fff4ff
 800c344:	40011000 	.word	0x40011000
 800c348:	40004400 	.word	0x40004400
 800c34c:	40004800 	.word	0x40004800
 800c350:	40004c00 	.word	0x40004c00
 800c354:	40005000 	.word	0x40005000
 800c358:	40011400 	.word	0x40011400
 800c35c:	40007800 	.word	0x40007800
 800c360:	40007c00 	.word	0x40007c00
 800c364:	58024400 	.word	0x58024400
 800c368:	4b7d      	ldr	r3, [pc, #500]	@ (800c560 <UART_SetConfig+0x464>)
 800c36a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c36c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c370:	2b28      	cmp	r3, #40	@ 0x28
 800c372:	d820      	bhi.n	800c3b6 <UART_SetConfig+0x2ba>
 800c374:	e8df f003 	tbb	[pc, r3]
 800c378:	1f1f1f15 	.word	0x1f1f1f15
 800c37c:	1f1f1f1f 	.word	0x1f1f1f1f
 800c380:	1f1f1f71 	.word	0x1f1f1f71
 800c384:	1f1f1f1f 	.word	0x1f1f1f1f
 800c388:	1f1f1f17 	.word	0x1f1f1f17
 800c38c:	1f1f1f1f 	.word	0x1f1f1f1f
 800c390:	1f1f1f19 	.word	0x1f1f1f19
 800c394:	1f1f1f1f 	.word	0x1f1f1f1f
 800c398:	1f1f1f1b 	.word	0x1f1f1f1b
 800c39c:	1f1f1f1f 	.word	0x1f1f1f1f
 800c3a0:	1d          	.byte	0x1d
 800c3a1:	00          	.byte	0x00
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e72e      	b.n	800c204 <UART_SetConfig+0x108>
 800c3a6:	2308      	movs	r3, #8
 800c3a8:	e72c      	b.n	800c204 <UART_SetConfig+0x108>
 800c3aa:	2310      	movs	r3, #16
 800c3ac:	e72a      	b.n	800c204 <UART_SetConfig+0x108>
 800c3ae:	2320      	movs	r3, #32
 800c3b0:	e728      	b.n	800c204 <UART_SetConfig+0x108>
 800c3b2:	2340      	movs	r3, #64	@ 0x40
 800c3b4:	e726      	b.n	800c204 <UART_SetConfig+0x108>
 800c3b6:	2380      	movs	r3, #128	@ 0x80
 800c3b8:	e724      	b.n	800c204 <UART_SetConfig+0x108>
 800c3ba:	4b69      	ldr	r3, [pc, #420]	@ (800c560 <UART_SetConfig+0x464>)
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3be:	f003 0307 	and.w	r3, r3, #7
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d80e      	bhi.n	800c3e4 <UART_SetConfig+0x2e8>
 800c3c6:	e8df f003 	tbb	[pc, r3]
 800c3ca:	4a03      	.short	0x4a03
 800c3cc:	0b090705 	.word	0x0b090705
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e717      	b.n	800c204 <UART_SetConfig+0x108>
 800c3d4:	2308      	movs	r3, #8
 800c3d6:	e715      	b.n	800c204 <UART_SetConfig+0x108>
 800c3d8:	2310      	movs	r3, #16
 800c3da:	e713      	b.n	800c204 <UART_SetConfig+0x108>
 800c3dc:	2320      	movs	r3, #32
 800c3de:	e711      	b.n	800c204 <UART_SetConfig+0x108>
 800c3e0:	2340      	movs	r3, #64	@ 0x40
 800c3e2:	e70f      	b.n	800c204 <UART_SetConfig+0x108>
 800c3e4:	2380      	movs	r3, #128	@ 0x80
 800c3e6:	e70d      	b.n	800c204 <UART_SetConfig+0x108>
 800c3e8:	4b5d      	ldr	r3, [pc, #372]	@ (800c560 <UART_SetConfig+0x464>)
 800c3ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	2b05      	cmp	r3, #5
 800c3f2:	d80e      	bhi.n	800c412 <UART_SetConfig+0x316>
 800c3f4:	e8df f003 	tbb	[pc, r3]
 800c3f8:	07053503 	.word	0x07053503
 800c3fc:	0b09      	.short	0x0b09
 800c3fe:	2300      	movs	r3, #0
 800c400:	e700      	b.n	800c204 <UART_SetConfig+0x108>
 800c402:	2308      	movs	r3, #8
 800c404:	e6fe      	b.n	800c204 <UART_SetConfig+0x108>
 800c406:	2310      	movs	r3, #16
 800c408:	e6fc      	b.n	800c204 <UART_SetConfig+0x108>
 800c40a:	2320      	movs	r3, #32
 800c40c:	e6fa      	b.n	800c204 <UART_SetConfig+0x108>
 800c40e:	2340      	movs	r3, #64	@ 0x40
 800c410:	e6f8      	b.n	800c204 <UART_SetConfig+0x108>
 800c412:	2380      	movs	r3, #128	@ 0x80
 800c414:	e6f6      	b.n	800c204 <UART_SetConfig+0x108>
 800c416:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800c41a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c41c:	f003 0307 	and.w	r3, r3, #7
 800c420:	2b05      	cmp	r3, #5
 800c422:	d80e      	bhi.n	800c442 <UART_SetConfig+0x346>
 800c424:	e8df f003 	tbb	[pc, r3]
 800c428:	07051f03 	.word	0x07051f03
 800c42c:	0b09      	.short	0x0b09
 800c42e:	2302      	movs	r3, #2
 800c430:	e6e8      	b.n	800c204 <UART_SetConfig+0x108>
 800c432:	2308      	movs	r3, #8
 800c434:	e6e6      	b.n	800c204 <UART_SetConfig+0x108>
 800c436:	2310      	movs	r3, #16
 800c438:	e6e4      	b.n	800c204 <UART_SetConfig+0x108>
 800c43a:	2320      	movs	r3, #32
 800c43c:	e6e2      	b.n	800c204 <UART_SetConfig+0x108>
 800c43e:	2340      	movs	r3, #64	@ 0x40
 800c440:	e6e0      	b.n	800c204 <UART_SetConfig+0x108>
 800c442:	2380      	movs	r3, #128	@ 0x80
 800c444:	e6de      	b.n	800c204 <UART_SetConfig+0x108>
 800c446:	2304      	movs	r3, #4
 800c448:	e6dc      	b.n	800c204 <UART_SetConfig+0x108>
 800c44a:	2304      	movs	r3, #4
 800c44c:	e6da      	b.n	800c204 <UART_SetConfig+0x108>
 800c44e:	2304      	movs	r3, #4
 800c450:	e6d8      	b.n	800c204 <UART_SetConfig+0x108>
 800c452:	2304      	movs	r3, #4
 800c454:	e6d6      	b.n	800c204 <UART_SetConfig+0x108>
 800c456:	2304      	movs	r3, #4
 800c458:	e6d4      	b.n	800c204 <UART_SetConfig+0x108>
 800c45a:	2304      	movs	r3, #4
 800c45c:	e6d2      	b.n	800c204 <UART_SetConfig+0x108>
 800c45e:	2304      	movs	r3, #4
 800c460:	e6d0      	b.n	800c204 <UART_SetConfig+0x108>
 800c462:	2304      	movs	r3, #4
 800c464:	e6ce      	b.n	800c204 <UART_SetConfig+0x108>
 800c466:	2304      	movs	r3, #4
 800c468:	e6cc      	b.n	800c204 <UART_SetConfig+0x108>
    switch (clocksource)
 800c46a:	2b20      	cmp	r3, #32
 800c46c:	d827      	bhi.n	800c4be <UART_SetConfig+0x3c2>
 800c46e:	2b02      	cmp	r3, #2
 800c470:	f0c0 811a 	bcc.w	800c6a8 <UART_SetConfig+0x5ac>
 800c474:	3b02      	subs	r3, #2
 800c476:	2b1e      	cmp	r3, #30
 800c478:	f200 8118 	bhi.w	800c6ac <UART_SetConfig+0x5b0>
 800c47c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c480:	01160050 	.word	0x01160050
 800c484:	01160056 	.word	0x01160056
 800c488:	01160116 	.word	0x01160116
 800c48c:	0116005b 	.word	0x0116005b
 800c490:	01160116 	.word	0x01160116
 800c494:	01160116 	.word	0x01160116
 800c498:	01160116 	.word	0x01160116
 800c49c:	01160060 	.word	0x01160060
 800c4a0:	01160116 	.word	0x01160116
 800c4a4:	01160116 	.word	0x01160116
 800c4a8:	01160116 	.word	0x01160116
 800c4ac:	01160116 	.word	0x01160116
 800c4b0:	01160116 	.word	0x01160116
 800c4b4:	01160116 	.word	0x01160116
 800c4b8:	01160116 	.word	0x01160116
 800c4bc:	006c      	.short	0x006c
 800c4be:	2b40      	cmp	r3, #64	@ 0x40
 800c4c0:	d12c      	bne.n	800c51c <UART_SetConfig+0x420>
        pclk = (uint32_t) LSE_VALUE;
 800c4c2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c4c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c4c8:	4b26      	ldr	r3, [pc, #152]	@ (800c564 <UART_SetConfig+0x468>)
 800c4ca:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c4ce:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4d2:	6865      	ldr	r5, [r4, #4]
 800c4d4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c4d8:	4299      	cmp	r1, r3
 800c4da:	f200 80e9 	bhi.w	800c6b0 <UART_SetConfig+0x5b4>
 800c4de:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c4e2:	f200 80e7 	bhi.w	800c6b4 <UART_SetConfig+0x5b8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4e6:	2600      	movs	r6, #0
 800c4e8:	4633      	mov	r3, r6
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	f7f4 f810 	bl	8000510 <__aeabi_uldivmod>
 800c4f0:	0209      	lsls	r1, r1, #8
 800c4f2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c4f6:	0200      	lsls	r0, r0, #8
 800c4f8:	086b      	lsrs	r3, r5, #1
 800c4fa:	18c0      	adds	r0, r0, r3
 800c4fc:	462a      	mov	r2, r5
 800c4fe:	4633      	mov	r3, r6
 800c500:	f141 0100 	adc.w	r1, r1, #0
 800c504:	f7f4 f804 	bl	8000510 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c508:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800c50c:	4b16      	ldr	r3, [pc, #88]	@ (800c568 <UART_SetConfig+0x46c>)
 800c50e:	429a      	cmp	r2, r3
 800c510:	f200 80d2 	bhi.w	800c6b8 <UART_SetConfig+0x5bc>
          huart->Instance->BRR = usartdiv;
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	60d8      	str	r0, [r3, #12]
 800c518:	4630      	mov	r0, r6
 800c51a:	e0d4      	b.n	800c6c6 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c51c:	2001      	movs	r0, #1
 800c51e:	e0d2      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c520:	f7fd fd5a 	bl	8009fd8 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c524:	2800      	cmp	r0, #0
 800c526:	d1ce      	bne.n	800c4c6 <UART_SetConfig+0x3ca>
 800c528:	2000      	movs	r0, #0
 800c52a:	e0cc      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c52c:	a803      	add	r0, sp, #12
 800c52e:	f7fd fd65 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c532:	9804      	ldr	r0, [sp, #16]
        break;
 800c534:	e7f6      	b.n	800c524 <UART_SetConfig+0x428>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c536:	4668      	mov	r0, sp
 800c538:	f7fd fe5e 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c53c:	9801      	ldr	r0, [sp, #4]
        break;
 800c53e:	e7f1      	b.n	800c524 <UART_SetConfig+0x428>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c540:	4b07      	ldr	r3, [pc, #28]	@ (800c560 <UART_SetConfig+0x464>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f013 0f20 	tst.w	r3, #32
 800c548:	d008      	beq.n	800c55c <UART_SetConfig+0x460>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c54a:	4b05      	ldr	r3, [pc, #20]	@ (800c560 <UART_SetConfig+0x464>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c552:	4806      	ldr	r0, [pc, #24]	@ (800c56c <UART_SetConfig+0x470>)
 800c554:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c556:	e7b6      	b.n	800c4c6 <UART_SetConfig+0x3ca>
    switch (clocksource)
 800c558:	4805      	ldr	r0, [pc, #20]	@ (800c570 <UART_SetConfig+0x474>)
 800c55a:	e7b4      	b.n	800c4c6 <UART_SetConfig+0x3ca>
          pclk = (uint32_t) HSI_VALUE;
 800c55c:	4803      	ldr	r0, [pc, #12]	@ (800c56c <UART_SetConfig+0x470>)
 800c55e:	e7b2      	b.n	800c4c6 <UART_SetConfig+0x3ca>
 800c560:	58024400 	.word	0x58024400
 800c564:	0801df74 	.word	0x0801df74
 800c568:	000ffcff 	.word	0x000ffcff
 800c56c:	03d09000 	.word	0x03d09000
 800c570:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800c574:	2b20      	cmp	r3, #32
 800c576:	d815      	bhi.n	800c5a4 <UART_SetConfig+0x4a8>
 800c578:	2b20      	cmp	r3, #32
 800c57a:	f200 809f 	bhi.w	800c6bc <UART_SetConfig+0x5c0>
 800c57e:	e8df f003 	tbb	[pc, r3]
 800c582:	3731      	.short	0x3731
 800c584:	9d3a9d9d 	.word	0x9d3a9d9d
 800c588:	9d3f9d9d 	.word	0x9d3f9d9d
 800c58c:	9d9d9d9d 	.word	0x9d9d9d9d
 800c590:	9d449d9d 	.word	0x9d449d9d
 800c594:	9d9d9d9d 	.word	0x9d9d9d9d
 800c598:	9d9d9d9d 	.word	0x9d9d9d9d
 800c59c:	9d9d9d9d 	.word	0x9d9d9d9d
 800c5a0:	9d9d      	.short	0x9d9d
 800c5a2:	50          	.byte	0x50
 800c5a3:	00          	.byte	0x00
 800c5a4:	2b40      	cmp	r3, #64	@ 0x40
 800c5a6:	d11b      	bne.n	800c5e0 <UART_SetConfig+0x4e4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c5aa:	4b4d      	ldr	r3, [pc, #308]	@ (800c6e0 <UART_SetConfig+0x5e4>)
 800c5ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c5b0:	fbb0 f0f3 	udiv	r0, r0, r3
 800c5b4:	6862      	ldr	r2, [r4, #4]
 800c5b6:	0853      	lsrs	r3, r2, #1
 800c5b8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c5bc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5c0:	f1a3 0110 	sub.w	r1, r3, #16
 800c5c4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800c5c8:	4291      	cmp	r1, r2
 800c5ca:	d879      	bhi.n	800c6c0 <UART_SetConfig+0x5c4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5d2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c5d6:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	60d3      	str	r3, [r2, #12]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e072      	b.n	800c6c6 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	e070      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5e4:	f7fc febc 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1dd      	bne.n	800c5a8 <UART_SetConfig+0x4ac>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e06a      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5f0:	f7fc fec8 	bl	8009384 <HAL_RCC_GetPCLK2Freq>
        break;
 800c5f4:	e7f8      	b.n	800c5e8 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5f6:	a803      	add	r0, sp, #12
 800c5f8:	f7fd fd00 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5fc:	9804      	ldr	r0, [sp, #16]
        break;
 800c5fe:	e7f3      	b.n	800c5e8 <UART_SetConfig+0x4ec>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c600:	4668      	mov	r0, sp
 800c602:	f7fd fdf9 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c606:	9801      	ldr	r0, [sp, #4]
        break;
 800c608:	e7ee      	b.n	800c5e8 <UART_SetConfig+0x4ec>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c60a:	4b36      	ldr	r3, [pc, #216]	@ (800c6e4 <UART_SetConfig+0x5e8>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f013 0f20 	tst.w	r3, #32
 800c612:	d008      	beq.n	800c626 <UART_SetConfig+0x52a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c614:	4b33      	ldr	r3, [pc, #204]	@ (800c6e4 <UART_SetConfig+0x5e8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c61c:	4832      	ldr	r0, [pc, #200]	@ (800c6e8 <UART_SetConfig+0x5ec>)
 800c61e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c620:	e7c2      	b.n	800c5a8 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800c622:	4832      	ldr	r0, [pc, #200]	@ (800c6ec <UART_SetConfig+0x5f0>)
 800c624:	e7c0      	b.n	800c5a8 <UART_SetConfig+0x4ac>
          pclk = (uint32_t) HSI_VALUE;
 800c626:	4830      	ldr	r0, [pc, #192]	@ (800c6e8 <UART_SetConfig+0x5ec>)
 800c628:	e7be      	b.n	800c5a8 <UART_SetConfig+0x4ac>
    switch (clocksource)
 800c62a:	2b40      	cmp	r3, #64	@ 0x40
 800c62c:	d117      	bne.n	800c65e <UART_SetConfig+0x562>
        pclk = (uint32_t) LSE_VALUE;
 800c62e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c632:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c634:	4b2a      	ldr	r3, [pc, #168]	@ (800c6e0 <UART_SetConfig+0x5e4>)
 800c636:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c63a:	fbb0 f0f3 	udiv	r0, r0, r3
 800c63e:	6863      	ldr	r3, [r4, #4]
 800c640:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c644:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c648:	f1a0 0210 	sub.w	r2, r0, #16
 800c64c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800c650:	429a      	cmp	r2, r3
 800c652:	d842      	bhi.n	800c6da <UART_SetConfig+0x5de>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c654:	6823      	ldr	r3, [r4, #0]
 800c656:	b280      	uxth	r0, r0
 800c658:	60d8      	str	r0, [r3, #12]
 800c65a:	2000      	movs	r0, #0
 800c65c:	e033      	b.n	800c6c6 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c65e:	2001      	movs	r0, #1
 800c660:	e031      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c662:	f7fc fe7d 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c666:	2800      	cmp	r0, #0
 800c668:	d1e3      	bne.n	800c632 <UART_SetConfig+0x536>
 800c66a:	2000      	movs	r0, #0
 800c66c:	e02b      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c66e:	f7fc fe89 	bl	8009384 <HAL_RCC_GetPCLK2Freq>
        break;
 800c672:	e7f8      	b.n	800c666 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c674:	a803      	add	r0, sp, #12
 800c676:	f7fd fcc1 	bl	8009ffc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c67a:	9804      	ldr	r0, [sp, #16]
        break;
 800c67c:	e7f3      	b.n	800c666 <UART_SetConfig+0x56a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67e:	4668      	mov	r0, sp
 800c680:	f7fd fdba 	bl	800a1f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c684:	9801      	ldr	r0, [sp, #4]
        break;
 800c686:	e7ee      	b.n	800c666 <UART_SetConfig+0x56a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c688:	4b16      	ldr	r3, [pc, #88]	@ (800c6e4 <UART_SetConfig+0x5e8>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f013 0f20 	tst.w	r3, #32
 800c690:	d008      	beq.n	800c6a4 <UART_SetConfig+0x5a8>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c692:	4b14      	ldr	r3, [pc, #80]	@ (800c6e4 <UART_SetConfig+0x5e8>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c69a:	4813      	ldr	r0, [pc, #76]	@ (800c6e8 <UART_SetConfig+0x5ec>)
 800c69c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c69e:	e7c8      	b.n	800c632 <UART_SetConfig+0x536>
    switch (clocksource)
 800c6a0:	4812      	ldr	r0, [pc, #72]	@ (800c6ec <UART_SetConfig+0x5f0>)
 800c6a2:	e7c6      	b.n	800c632 <UART_SetConfig+0x536>
          pclk = (uint32_t) HSI_VALUE;
 800c6a4:	4810      	ldr	r0, [pc, #64]	@ (800c6e8 <UART_SetConfig+0x5ec>)
 800c6a6:	e7c4      	b.n	800c632 <UART_SetConfig+0x536>
    switch (clocksource)
 800c6a8:	2001      	movs	r0, #1
 800c6aa:	e00c      	b.n	800c6c6 <UART_SetConfig+0x5ca>
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	e00a      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	e008      	b.n	800c6c6 <UART_SetConfig+0x5ca>
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	e006      	b.n	800c6c6 <UART_SetConfig+0x5ca>
          ret = HAL_ERROR;
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	e004      	b.n	800c6c6 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c6bc:	2001      	movs	r0, #1
 800c6be:	e002      	b.n	800c6c6 <UART_SetConfig+0x5ca>
        ret = HAL_ERROR;
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	e000      	b.n	800c6c6 <UART_SetConfig+0x5ca>
    switch (clocksource)
 800c6c4:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c6cc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->TxISR = NULL;
 800c6d4:	6763      	str	r3, [r4, #116]	@ 0x74
}
 800c6d6:	b006      	add	sp, #24
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 800c6da:	2001      	movs	r0, #1
 800c6dc:	e7f3      	b.n	800c6c6 <UART_SetConfig+0x5ca>
 800c6de:	bf00      	nop
 800c6e0:	0801df74 	.word	0x0801df74
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	03d09000 	.word	0x03d09000
 800c6ec:	003d0900 	.word	0x003d0900

0800c6f0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6f0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c6f2:	f013 0f01 	tst.w	r3, #1
 800c6f6:	d006      	beq.n	800c706 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6f8:	6802      	ldr	r2, [r0, #0]
 800c6fa:	6853      	ldr	r3, [r2, #4]
 800c6fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c700:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800c702:	430b      	orrs	r3, r1
 800c704:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c706:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c708:	f013 0f02 	tst.w	r3, #2
 800c70c:	d006      	beq.n	800c71c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c70e:	6802      	ldr	r2, [r0, #0]
 800c710:	6853      	ldr	r3, [r2, #4]
 800c712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c716:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800c718:	430b      	orrs	r3, r1
 800c71a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c71c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c71e:	f013 0f04 	tst.w	r3, #4
 800c722:	d006      	beq.n	800c732 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c724:	6802      	ldr	r2, [r0, #0]
 800c726:	6853      	ldr	r3, [r2, #4]
 800c728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c72c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800c72e:	430b      	orrs	r3, r1
 800c730:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c732:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c734:	f013 0f08 	tst.w	r3, #8
 800c738:	d006      	beq.n	800c748 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c73a:	6802      	ldr	r2, [r0, #0]
 800c73c:	6853      	ldr	r3, [r2, #4]
 800c73e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c742:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800c744:	430b      	orrs	r3, r1
 800c746:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c748:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c74a:	f013 0f10 	tst.w	r3, #16
 800c74e:	d006      	beq.n	800c75e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c750:	6802      	ldr	r2, [r0, #0]
 800c752:	6893      	ldr	r3, [r2, #8]
 800c754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c758:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800c75a:	430b      	orrs	r3, r1
 800c75c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c75e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c760:	f013 0f20 	tst.w	r3, #32
 800c764:	d006      	beq.n	800c774 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c766:	6802      	ldr	r2, [r0, #0]
 800c768:	6893      	ldr	r3, [r2, #8]
 800c76a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c76e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800c770:	430b      	orrs	r3, r1
 800c772:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c774:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c776:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c77a:	d00a      	beq.n	800c792 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c77c:	6802      	ldr	r2, [r0, #0]
 800c77e:	6853      	ldr	r3, [r2, #4]
 800c780:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c784:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800c786:	430b      	orrs	r3, r1
 800c788:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c78a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c78c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c790:	d00b      	beq.n	800c7aa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c792:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c798:	d006      	beq.n	800c7a8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c79a:	6802      	ldr	r2, [r0, #0]
 800c79c:	6853      	ldr	r3, [r2, #4]
 800c79e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c7a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6053      	str	r3, [r2, #4]
}
 800c7a8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7aa:	6802      	ldr	r2, [r0, #0]
 800c7ac:	6853      	ldr	r3, [r2, #4]
 800c7ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c7b2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	6053      	str	r3, [r2, #4]
 800c7b8:	e7eb      	b.n	800c792 <UART_AdvFeatureConfig+0xa2>

0800c7ba <UART_WaitOnFlagUntilTimeout>:
{
 800c7ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7be:	4605      	mov	r5, r0
 800c7c0:	460f      	mov	r7, r1
 800c7c2:	4616      	mov	r6, r2
 800c7c4:	4699      	mov	r9, r3
 800c7c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ca:	682b      	ldr	r3, [r5, #0]
 800c7cc:	69dc      	ldr	r4, [r3, #28]
 800c7ce:	ea37 0404 	bics.w	r4, r7, r4
 800c7d2:	bf0c      	ite	eq
 800c7d4:	2401      	moveq	r4, #1
 800c7d6:	2400      	movne	r4, #0
 800c7d8:	42b4      	cmp	r4, r6
 800c7da:	d157      	bne.n	800c88c <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800c7dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c7e0:	d0f3      	beq.n	800c7ca <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7e2:	f7f6 fe73 	bl	80034cc <HAL_GetTick>
 800c7e6:	eba0 0009 	sub.w	r0, r0, r9
 800c7ea:	4540      	cmp	r0, r8
 800c7ec:	d82f      	bhi.n	800c84e <UART_WaitOnFlagUntilTimeout+0x94>
 800c7ee:	f1b8 0f00 	cmp.w	r8, #0
 800c7f2:	d02c      	beq.n	800c84e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	f012 0f04 	tst.w	r2, #4
 800c7fc:	d0e5      	beq.n	800c7ca <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7fe:	69da      	ldr	r2, [r3, #28]
 800c800:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800c804:	d0e1      	beq.n	800c7ca <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c80a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c80c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80e:	e852 3f00 	ldrex	r3, [r2]
 800c812:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c816:	e842 3100 	strex	r1, r3, [r2]
 800c81a:	2900      	cmp	r1, #0
 800c81c:	d1f6      	bne.n	800c80c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c820:	f102 0308 	add.w	r3, r2, #8
 800c824:	e853 3f00 	ldrex	r3, [r3]
 800c828:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82c:	3208      	adds	r2, #8
 800c82e:	e842 3100 	strex	r1, r3, [r2]
 800c832:	2900      	cmp	r1, #0
 800c834:	d1f3      	bne.n	800c81e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800c836:	2320      	movs	r3, #32
 800c838:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c83c:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c840:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800c844:	2300      	movs	r3, #0
 800c846:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
          return HAL_TIMEOUT;
 800c84a:	2003      	movs	r0, #3
 800c84c:	e01f      	b.n	800c88e <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c84e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c850:	e852 3f00 	ldrex	r3, [r2]
 800c854:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c858:	e842 3100 	strex	r1, r3, [r2]
 800c85c:	2900      	cmp	r1, #0
 800c85e:	d1f6      	bne.n	800c84e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c860:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c862:	f102 0308 	add.w	r3, r2, #8
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	3208      	adds	r2, #8
 800c870:	e842 3100 	strex	r1, r3, [r2]
 800c874:	2900      	cmp	r1, #0
 800c876:	d1f3      	bne.n	800c860 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800c878:	2320      	movs	r3, #32
 800c87a:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c87e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        __HAL_UNLOCK(huart);
 800c882:	2300      	movs	r3, #0
 800c884:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
        return HAL_TIMEOUT;
 800c888:	2003      	movs	r0, #3
 800c88a:	e000      	b.n	800c88e <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800c88c:	2000      	movs	r0, #0
}
 800c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c892 <UART_CheckIdleState>:
{
 800c892:	b530      	push	{r4, r5, lr}
 800c894:	b083      	sub	sp, #12
 800c896:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c898:	2300      	movs	r3, #0
 800c89a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 800c89e:	f7f6 fe15 	bl	80034cc <HAL_GetTick>
 800c8a2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8a4:	6822      	ldr	r2, [r4, #0]
 800c8a6:	6812      	ldr	r2, [r2, #0]
 800c8a8:	f012 0f08 	tst.w	r2, #8
 800c8ac:	d10f      	bne.n	800c8ce <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f013 0f04 	tst.w	r3, #4
 800c8b6:	d118      	bne.n	800c8ea <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800c8b8:	2320      	movs	r3, #32
 800c8ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8be:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 800c8c6:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800c8ca:	b003      	add	sp, #12
 800c8cc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f7ff ff6c 	bl	800c7ba <UART_WaitOnFlagUntilTimeout>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d0e3      	beq.n	800c8ae <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800c8e6:	2003      	movs	r0, #3
 800c8e8:	e7ef      	b.n	800c8ca <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f7ff ff5e 	bl	800c7ba <UART_WaitOnFlagUntilTimeout>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d0da      	beq.n	800c8b8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800c902:	2003      	movs	r0, #3
 800c904:	e7e1      	b.n	800c8ca <UART_CheckIdleState+0x38>

0800c906 <HAL_UART_Init>:
  if (huart == NULL)
 800c906:	b378      	cbz	r0, 800c968 <HAL_UART_Init+0x62>
{
 800c908:	b510      	push	{r4, lr}
 800c90a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c90c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800c910:	b30b      	cbz	r3, 800c956 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800c912:	2324      	movs	r3, #36	@ 0x24
 800c914:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	6813      	ldr	r3, [r2, #0]
 800c91c:	f023 0301 	bic.w	r3, r3, #1
 800c920:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c922:	4620      	mov	r0, r4
 800c924:	f7ff fbea 	bl	800c0fc <UART_SetConfig>
 800c928:	2801      	cmp	r0, #1
 800c92a:	d013      	beq.n	800c954 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c92c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c92e:	b9bb      	cbnz	r3, 800c960 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c930:	6822      	ldr	r2, [r4, #0]
 800c932:	6853      	ldr	r3, [r2, #4]
 800c934:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800c938:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c93a:	6822      	ldr	r2, [r4, #0]
 800c93c:	6893      	ldr	r3, [r2, #8]
 800c93e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800c942:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800c944:	6822      	ldr	r2, [r4, #0]
 800c946:	6813      	ldr	r3, [r2, #0]
 800c948:	f043 0301 	orr.w	r3, r3, #1
 800c94c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800c94e:	4620      	mov	r0, r4
 800c950:	f7ff ff9f 	bl	800c892 <UART_CheckIdleState>
}
 800c954:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c956:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800c95a:	f7f6 f8d1 	bl	8002b00 <HAL_UART_MspInit>
 800c95e:	e7d8      	b.n	800c912 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800c960:	4620      	mov	r0, r4
 800c962:	f7ff fec5 	bl	800c6f0 <UART_AdvFeatureConfig>
 800c966:	e7e3      	b.n	800c930 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800c968:	2001      	movs	r0, #1
}
 800c96a:	4770      	bx	lr

0800c96c <UART_Start_Receive_DMA>:
{
 800c96c:	b510      	push	{r4, lr}
 800c96e:	4604      	mov	r4, r0
 800c970:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 800c972:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c974:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c978:	2200      	movs	r2, #0
 800c97a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c97e:	2222      	movs	r2, #34	@ 0x22
 800c980:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if (huart->hdmarx != NULL)
 800c984:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c986:	b18a      	cbz	r2, 800c9ac <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c988:	4922      	ldr	r1, [pc, #136]	@ (800ca14 <UART_Start_Receive_DMA+0xa8>)
 800c98a:	63d1      	str	r1, [r2, #60]	@ 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c98c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c98e:	4922      	ldr	r1, [pc, #136]	@ (800ca18 <UART_Start_Receive_DMA+0xac>)
 800c990:	6411      	str	r1, [r2, #64]	@ 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c992:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c994:	4921      	ldr	r1, [pc, #132]	@ (800ca1c <UART_Start_Receive_DMA+0xb0>)
 800c996:	64d1      	str	r1, [r2, #76]	@ 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800c998:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800c99a:	2100      	movs	r1, #0
 800c99c:	6511      	str	r1, [r2, #80]	@ 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c99e:	6801      	ldr	r1, [r0, #0]
 800c9a0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800c9a2:	3124      	adds	r1, #36	@ 0x24
 800c9a4:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800c9a6:	f7f8 f9c1 	bl	8004d2c <HAL_DMA_Start_IT>
 800c9aa:	bb38      	cbnz	r0, 800c9fc <UART_Start_Receive_DMA+0x90>
  __HAL_UNLOCK(huart);
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c9b2:	6923      	ldr	r3, [r4, #16]
 800c9b4:	b143      	cbz	r3, 800c9c8 <UART_Start_Receive_DMA+0x5c>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b8:	e852 3f00 	ldrex	r3, [r2]
 800c9bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c0:	e842 3100 	strex	r1, r3, [r2]
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	d1f6      	bne.n	800c9b6 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ca:	f102 0308 	add.w	r3, r2, #8
 800c9ce:	e853 3f00 	ldrex	r3, [r3]
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	3208      	adds	r2, #8
 800c9d8:	e842 3100 	strex	r1, r3, [r2]
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	d1f3      	bne.n	800c9c8 <UART_Start_Receive_DMA+0x5c>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e2:	f102 0308 	add.w	r3, r2, #8
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	3208      	adds	r2, #8
 800c9f0:	e842 3100 	strex	r1, r3, [r2]
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	d1f3      	bne.n	800c9e0 <UART_Start_Receive_DMA+0x74>
  return HAL_OK;
 800c9f8:	2000      	movs	r0, #0
}
 800c9fa:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9fc:	2310      	movs	r3, #16
 800c9fe:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800ca02:	2300      	movs	r3, #0
 800ca04:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
      huart->RxState = HAL_UART_STATE_READY;
 800ca08:	2320      	movs	r3, #32
 800ca0a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800ca0e:	2001      	movs	r0, #1
 800ca10:	e7f3      	b.n	800c9fa <UART_Start_Receive_DMA+0x8e>
 800ca12:	bf00      	nop
 800ca14:	0800c071 	.word	0x0800c071
 800ca18:	0800c055 	.word	0x0800c055
 800ca1c:	0800bc45 	.word	0x0800bc45

0800ca20 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca20:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800ca22:	b92b      	cbnz	r3, 800ca30 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800ca24:	2301      	movs	r3, #1
 800ca26:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca2a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800ca2e:	4770      	bx	lr
{
 800ca30:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca32:	6803      	ldr	r3, [r0, #0]
 800ca34:	689a      	ldr	r2, [r3, #8]
 800ca36:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca3a:	6899      	ldr	r1, [r3, #8]
 800ca3c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca3e:	4d09      	ldr	r5, [pc, #36]	@ (800ca64 <UARTEx_SetNbDataToProcess+0x44>)
 800ca40:	5c6b      	ldrb	r3, [r5, r1]
 800ca42:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca44:	4c08      	ldr	r4, [pc, #32]	@ (800ca68 <UARTEx_SetNbDataToProcess+0x48>)
 800ca46:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca48:	fb93 f3f1 	sdiv	r3, r3, r1
 800ca4c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca50:	5cab      	ldrb	r3, [r5, r2]
 800ca52:	011b      	lsls	r3, r3, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca54:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca5a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 800ca5e:	bc30      	pop	{r4, r5}
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	0801df94 	.word	0x0801df94
 800ca68:	0801df8c 	.word	0x0801df8c

0800ca6c <HAL_RS485Ex_Init>:
  if (huart == NULL)
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d03c      	beq.n	800caea <HAL_RS485Ex_Init+0x7e>
{
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	460f      	mov	r7, r1
 800ca74:	4616      	mov	r6, r2
 800ca76:	461d      	mov	r5, r3
 800ca78:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ca7a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800ca7e:	b35b      	cbz	r3, 800cad8 <HAL_RS485Ex_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ca80:	2324      	movs	r3, #36	@ 0x24
 800ca82:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 800ca86:	6822      	ldr	r2, [r4, #0]
 800ca88:	6813      	ldr	r3, [r2, #0]
 800ca8a:	f023 0301 	bic.w	r3, r3, #1
 800ca8e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7ff fb33 	bl	800c0fc <UART_SetConfig>
 800ca96:	2801      	cmp	r0, #1
 800ca98:	d01d      	beq.n	800cad6 <HAL_RS485Ex_Init+0x6a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ca9c:	bb0b      	cbnz	r3, 800cae2 <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ca9e:	6822      	ldr	r2, [r4, #0]
 800caa0:	6893      	ldr	r3, [r2, #8]
 800caa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800caa6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	6893      	ldr	r3, [r2, #8]
 800caac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cab0:	433b      	orrs	r3, r7
 800cab2:	6093      	str	r3, [r2, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800cab4:	042d      	lsls	r5, r5, #16
 800cab6:	ea45 5246 	orr.w	r2, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800caba:	6821      	ldr	r1, [r4, #0]
 800cabc:	6808      	ldr	r0, [r1, #0]
 800cabe:	4b0c      	ldr	r3, [pc, #48]	@ (800caf0 <HAL_RS485Ex_Init+0x84>)
 800cac0:	4003      	ands	r3, r0
 800cac2:	4313      	orrs	r3, r2
 800cac4:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE(huart);
 800cac6:	6822      	ldr	r2, [r4, #0]
 800cac8:	6813      	ldr	r3, [r2, #0]
 800caca:	f043 0301 	orr.w	r3, r3, #1
 800cace:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7ff fede 	bl	800c892 <UART_CheckIdleState>
}
 800cad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800cad8:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 800cadc:	f7f6 f810 	bl	8002b00 <HAL_UART_MspInit>
 800cae0:	e7ce      	b.n	800ca80 <HAL_RS485Ex_Init+0x14>
    UART_AdvFeatureConfig(huart);
 800cae2:	4620      	mov	r0, r4
 800cae4:	f7ff fe04 	bl	800c6f0 <UART_AdvFeatureConfig>
 800cae8:	e7d9      	b.n	800ca9e <HAL_RS485Ex_Init+0x32>
    return HAL_ERROR;
 800caea:	2001      	movs	r0, #1
}
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	fc00ffff 	.word	0xfc00ffff

0800caf4 <HAL_UARTEx_WakeupCallback>:
}
 800caf4:	4770      	bx	lr

0800caf6 <HAL_UARTEx_RxFifoFullCallback>:
}
 800caf6:	4770      	bx	lr

0800caf8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800caf8:	4770      	bx	lr

0800cafa <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cafa:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d018      	beq.n	800cb34 <HAL_UARTEx_DisableFifoMode+0x3a>
 800cb02:	2301      	movs	r3, #1
 800cb04:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cb08:	2324      	movs	r3, #36	@ 0x24
 800cb0a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb0e:	6803      	ldr	r3, [r0, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cb12:	6819      	ldr	r1, [r3, #0]
 800cb14:	f021 0101 	bic.w	r1, r1, #1
 800cb18:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb1a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb22:	6801      	ldr	r1, [r0, #0]
 800cb24:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cb26:	2220      	movs	r2, #32
 800cb28:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cb2c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  return HAL_OK;
 800cb30:	4618      	mov	r0, r3
 800cb32:	4770      	bx	lr
  __HAL_LOCK(huart);
 800cb34:	2002      	movs	r0, #2
}
 800cb36:	4770      	bx	lr

0800cb38 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800cb38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800cb3a:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d01d      	beq.n	800cb7e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800cb42:	4604      	mov	r4, r0
 800cb44:	2301      	movs	r3, #1
 800cb46:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cb4a:	2324      	movs	r3, #36	@ 0x24
 800cb4c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb50:	6803      	ldr	r3, [r0, #0]
 800cb52:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	f022 0201 	bic.w	r2, r2, #1
 800cb5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb5c:	6802      	ldr	r2, [r0, #0]
 800cb5e:	6893      	ldr	r3, [r2, #8]
 800cb60:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800cb64:	4319      	orrs	r1, r3
 800cb66:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cb68:	f7ff ff5a 	bl	800ca20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb6c:	6823      	ldr	r3, [r4, #0]
 800cb6e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cb70:	2320      	movs	r3, #32
 800cb72:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cb76:	2000      	movs	r0, #0
 800cb78:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800cb7e:	2002      	movs	r0, #2
 800cb80:	e7fc      	b.n	800cb7c <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800cb82 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800cb82:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800cb84:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d01d      	beq.n	800cbc8 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	2301      	movs	r3, #1
 800cb90:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800cb94:	2324      	movs	r3, #36	@ 0x24
 800cb96:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb9a:	6803      	ldr	r3, [r0, #0]
 800cb9c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	f022 0201 	bic.w	r2, r2, #1
 800cba4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cba6:	6802      	ldr	r2, [r0, #0]
 800cba8:	6893      	ldr	r3, [r2, #8]
 800cbaa:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800cbae:	4319      	orrs	r1, r3
 800cbb0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cbb2:	f7ff ff35 	bl	800ca20 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cbba:	2320      	movs	r3, #32
 800cbbc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UNLOCK(huart);
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
}
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800cbc8:	2002      	movs	r0, #2
 800cbca:	e7fc      	b.n	800cbc6 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800cbcc <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800cbcc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d122      	bne.n	800cc1a <HAL_UARTEx_ReceiveToIdle_DMA+0x4e>
{
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800cbd8:	2a00      	cmp	r2, #0
 800cbda:	bf18      	it	ne
 800cbdc:	2900      	cmpne	r1, #0
 800cbde:	d01e      	beq.n	800cc1e <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    __HAL_LOCK(huart);
 800cbe0:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d01c      	beq.n	800cc22 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cbee:	66c3      	str	r3, [r0, #108]	@ 0x6c
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800cbf0:	f7ff febc 	bl	800c96c <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800cbf4:	b9a0      	cbnz	r0, 800cc20 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d001      	beq.n	800cc00 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 800cbfc:	2001      	movs	r0, #1
    return status;
 800cbfe:	e00f      	b.n	800cc20 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	2210      	movs	r2, #16
 800cc04:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	e852 3f00 	ldrex	r3, [r2]
 800cc0c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	e842 3100 	strex	r1, r3, [r2]
 800cc14:	2900      	cmp	r1, #0
 800cc16:	d1f6      	bne.n	800cc06 <HAL_UARTEx_ReceiveToIdle_DMA+0x3a>
 800cc18:	e002      	b.n	800cc20 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>
    return HAL_BUSY;
 800cc1a:	2002      	movs	r0, #2
}
 800cc1c:	4770      	bx	lr
      return HAL_ERROR;
 800cc1e:	2001      	movs	r0, #1
}
 800cc20:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 800cc22:	2002      	movs	r0, #2
 800cc24:	e7fc      	b.n	800cc20 <HAL_UARTEx_ReceiveToIdle_DMA+0x54>

0800cc26 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc26:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cc2c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc2e:	f001 fbf7 	bl	800e420 <xTaskGetSchedulerState>
 800cc32:	2801      	cmp	r0, #1
 800cc34:	d100      	bne.n	800cc38 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800cc36:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800cc38:	f001 fffc 	bl	800ec34 <xPortSysTickHandler>
}
 800cc3c:	e7fb      	b.n	800cc36 <SysTick_Handler+0x10>
	...

0800cc40 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc40:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc44:	b92b      	cbnz	r3, 800cc52 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc46:	4b06      	ldr	r3, [pc, #24]	@ (800cc60 <osKernelInitialize+0x20>)
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	b928      	cbnz	r0, 800cc58 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc50:	4770      	bx	lr
    stat = osErrorISR;
 800cc52:	f06f 0005 	mvn.w	r0, #5
 800cc56:	4770      	bx	lr
    } else {
      stat = osError;
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	2400290c 	.word	0x2400290c

0800cc64 <osKernelStart>:
 800cc64:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc68:	b973      	cbnz	r3, 800cc88 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800cc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc94 <osKernelStart+0x30>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d10d      	bne.n	800cc8e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800cc72:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc74:	2400      	movs	r4, #0
 800cc76:	4b08      	ldr	r3, [pc, #32]	@ (800cc98 <osKernelStart+0x34>)
 800cc78:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc7a:	4b06      	ldr	r3, [pc, #24]	@ (800cc94 <osKernelStart+0x30>)
 800cc7c:	2202      	movs	r2, #2
 800cc7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc80:	f001 f91c 	bl	800debc <vTaskStartScheduler>
      stat = osOK;
 800cc84:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800cc86:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800cc88:	f06f 0005 	mvn.w	r0, #5
 800cc8c:	4770      	bx	lr
      stat = osError;
 800cc8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cc92:	4770      	bx	lr
 800cc94:	2400290c 	.word	0x2400290c
 800cc98:	e000ed00 	.word	0xe000ed00

0800cc9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cca0:	2400      	movs	r4, #0
 800cca2:	9405      	str	r4, [sp, #20]
 800cca4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800cca8:	bb74      	cbnz	r4, 800cd08 <osThreadNew+0x6c>
 800ccaa:	b368      	cbz	r0, 800cd08 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ccac:	b322      	cbz	r2, 800ccf8 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800ccae:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ccb0:	6993      	ldr	r3, [r2, #24]
 800ccb2:	b903      	cbnz	r3, 800ccb6 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800ccb4:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccb6:	1e5c      	subs	r4, r3, #1
 800ccb8:	2c37      	cmp	r4, #55	@ 0x37
 800ccba:	d849      	bhi.n	800cd50 <osThreadNew+0xb4>
 800ccbc:	6854      	ldr	r4, [r2, #4]
 800ccbe:	f014 0f01 	tst.w	r4, #1
 800ccc2:	d147      	bne.n	800cd54 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ccc4:	6956      	ldr	r6, [r2, #20]
 800ccc6:	b16e      	cbz	r6, 800cce4 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccc8:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cccc:	6894      	ldr	r4, [r2, #8]
 800ccce:	b12c      	cbz	r4, 800ccdc <osThreadNew+0x40>
 800ccd0:	68d7      	ldr	r7, [r2, #12]
 800ccd2:	2fa7      	cmp	r7, #167	@ 0xa7
 800ccd4:	d902      	bls.n	800ccdc <osThreadNew+0x40>
 800ccd6:	6917      	ldr	r7, [r2, #16]
 800ccd8:	b107      	cbz	r7, 800ccdc <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccda:	b9c6      	cbnz	r6, 800cd0e <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccdc:	b12c      	cbz	r4, 800ccea <osThreadNew+0x4e>
    mem  = -1;
 800ccde:	f04f 34ff 	mov.w	r4, #4294967295
 800cce2:	e00e      	b.n	800cd02 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800cce4:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 800cce8:	e7f0      	b.n	800cccc <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccea:	68d4      	ldr	r4, [r2, #12]
 800ccec:	b98c      	cbnz	r4, 800cd12 <osThreadNew+0x76>
 800ccee:	6914      	ldr	r4, [r2, #16]
 800ccf0:	b194      	cbz	r4, 800cd18 <osThreadNew+0x7c>
    mem  = -1;
 800ccf2:	f04f 34ff 	mov.w	r4, #4294967295
 800ccf6:	e004      	b.n	800cd02 <osThreadNew+0x66>
    name = NULL;
 800ccf8:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800ccfa:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800ccfc:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800ccfe:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800cd02:	2c01      	cmp	r4, #1
 800cd04:	d00a      	beq.n	800cd1c <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800cd06:	b1ac      	cbz	r4, 800cd34 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd08:	9805      	ldr	r0, [sp, #20]
}
 800cd0a:	b007      	add	sp, #28
 800cd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800cd0e:	2401      	movs	r4, #1
 800cd10:	e7f7      	b.n	800cd02 <osThreadNew+0x66>
    mem  = -1;
 800cd12:	f04f 34ff 	mov.w	r4, #4294967295
 800cd16:	e7f4      	b.n	800cd02 <osThreadNew+0x66>
          mem = 0;
 800cd18:	2400      	movs	r4, #0
 800cd1a:	e7f2      	b.n	800cd02 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd1c:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd20:	9202      	str	r2, [sp, #8]
 800cd22:	9401      	str	r4, [sp, #4]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	460b      	mov	r3, r1
 800cd28:	4662      	mov	r2, ip
 800cd2a:	4629      	mov	r1, r5
 800cd2c:	f001 f858 	bl	800dde0 <xTaskCreateStatic>
 800cd30:	9005      	str	r0, [sp, #20]
 800cd32:	e7e9      	b.n	800cd08 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd34:	aa05      	add	r2, sp, #20
 800cd36:	9201      	str	r2, [sp, #4]
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	fa1f f28c 	uxth.w	r2, ip
 800cd40:	4629      	mov	r1, r5
 800cd42:	f001 f888 	bl	800de56 <xTaskCreate>
 800cd46:	2801      	cmp	r0, #1
 800cd48:	d0de      	beq.n	800cd08 <osThreadNew+0x6c>
            hTask = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	e7db      	b.n	800cd08 <osThreadNew+0x6c>
        return (NULL);
 800cd50:	2000      	movs	r0, #0
 800cd52:	e7da      	b.n	800cd0a <osThreadNew+0x6e>
 800cd54:	2000      	movs	r0, #0
 800cd56:	e7d8      	b.n	800cd0a <osThreadNew+0x6e>

0800cd58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd58:	b508      	push	{r3, lr}
 800cd5a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd5e:	b933      	cbnz	r3, 800cd6e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800cd60:	b908      	cbnz	r0, 800cd66 <osDelay+0xe>
    stat = osOK;
 800cd62:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800cd64:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800cd66:	f001 fa15 	bl	800e194 <vTaskDelay>
    stat = osOK;
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	e7fa      	b.n	800cd64 <osDelay+0xc>
    stat = osErrorISR;
 800cd6e:	f06f 0005 	mvn.w	r0, #5
 800cd72:	e7f7      	b.n	800cd64 <osDelay+0xc>

0800cd74 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cd74:	b570      	push	{r4, r5, r6, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d14d      	bne.n	800ce1c <osSemaphoreNew+0xa8>
 800cd80:	460e      	mov	r6, r1
 800cd82:	4614      	mov	r4, r2
 800cd84:	4288      	cmp	r0, r1
 800cd86:	bf34      	ite	cc
 800cd88:	2300      	movcc	r3, #0
 800cd8a:	2301      	movcs	r3, #1
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d049      	beq.n	800ce24 <osSemaphoreNew+0xb0>
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d047      	beq.n	800ce24 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800cd94:	b14a      	cbz	r2, 800cdaa <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd96:	6895      	ldr	r5, [r2, #8]
 800cd98:	b115      	cbz	r5, 800cda0 <osSemaphoreNew+0x2c>
 800cd9a:	68d3      	ldr	r3, [r2, #12]
 800cd9c:	2b4f      	cmp	r3, #79	@ 0x4f
 800cd9e:	d814      	bhi.n	800cdca <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	d141      	bne.n	800ce28 <osSemaphoreNew+0xb4>
 800cda4:	68e3      	ldr	r3, [r4, #12]
 800cda6:	b10b      	cbz	r3, 800cdac <osSemaphoreNew+0x38>
 800cda8:	e039      	b.n	800ce1e <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800cdaa:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800cdac:	2801      	cmp	r0, #1
 800cdae:	d00e      	beq.n	800cdce <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800cdb0:	bb73      	cbnz	r3, 800ce10 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	f000 fa90 	bl	800d2d8 <xQueueCreateCountingSemaphore>
 800cdb8:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cdba:	b385      	cbz	r5, 800ce1e <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800cdbc:	b104      	cbz	r4, 800cdc0 <osSemaphoreNew+0x4c>
          name = attr->name;
 800cdbe:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f000 fe04 	bl	800d9d0 <vQueueAddToRegistry>
 800cdc8:	e029      	b.n	800ce1e <osSemaphoreNew+0xaa>
        mem = 1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e7ee      	b.n	800cdac <osSemaphoreNew+0x38>
        if (mem == 1) {
 800cdce:	b9b3      	cbnz	r3, 800cdfe <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f000 fa38 	bl	800d24a <xQueueGenericCreate>
 800cdda:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	bf18      	it	ne
 800cde0:	2e00      	cmpne	r6, #0
 800cde2:	d0ea      	beq.n	800cdba <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cde4:	2300      	movs	r3, #0
 800cde6:	461a      	mov	r2, r3
 800cde8:	4619      	mov	r1, r3
 800cdea:	4628      	mov	r0, r5
 800cdec:	f000 fa92 	bl	800d314 <xQueueGenericSend>
 800cdf0:	2801      	cmp	r0, #1
 800cdf2:	d0e2      	beq.n	800cdba <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f000 fe15 	bl	800da24 <vQueueDelete>
            hSemaphore = NULL;
 800cdfa:	2500      	movs	r5, #0
 800cdfc:	e00f      	b.n	800ce1e <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cdfe:	68a3      	ldr	r3, [r4, #8]
 800ce00:	2203      	movs	r2, #3
 800ce02:	9200      	str	r2, [sp, #0]
 800ce04:	2200      	movs	r2, #0
 800ce06:	4611      	mov	r1, r2
 800ce08:	f000 f9cc 	bl	800d1a4 <xQueueGenericCreateStatic>
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	e7e5      	b.n	800cddc <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ce10:	68a2      	ldr	r2, [r4, #8]
 800ce12:	4631      	mov	r1, r6
 800ce14:	f000 fa3d 	bl	800d292 <xQueueCreateCountingSemaphoreStatic>
 800ce18:	4605      	mov	r5, r0
 800ce1a:	e7ce      	b.n	800cdba <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800ce1c:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ce1e:	4628      	mov	r0, r5
 800ce20:	b002      	add	sp, #8
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800ce24:	2500      	movs	r5, #0
 800ce26:	e7fa      	b.n	800ce1e <osSemaphoreNew+0xaa>
 800ce28:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800ce2a:	e7f8      	b.n	800ce1e <osSemaphoreNew+0xaa>

0800ce2c <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ce2c:	b320      	cbz	r0, 800ce78 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ce2e:	b510      	push	{r4, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	460c      	mov	r4, r1
 800ce34:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ce38:	b1b3      	cbz	r3, 800ce68 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800ce3a:	bb01      	cbnz	r1, 800ce7e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ce40:	aa01      	add	r2, sp, #4
 800ce42:	f000 fd6d 	bl	800d920 <xQueueReceiveFromISR>
 800ce46:	2801      	cmp	r0, #1
 800ce48:	d11c      	bne.n	800ce84 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ce4a:	9801      	ldr	r0, [sp, #4]
 800ce4c:	b150      	cbz	r0, 800ce64 <osSemaphoreAcquire+0x38>
 800ce4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce56:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800ce62:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ce64:	b002      	add	sp, #8
 800ce66:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ce68:	f000 fc87 	bl	800d77a <xQueueSemaphoreTake>
 800ce6c:	2801      	cmp	r0, #1
 800ce6e:	d00c      	beq.n	800ce8a <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800ce70:	b16c      	cbz	r4, 800ce8e <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800ce72:	f06f 0001 	mvn.w	r0, #1
 800ce76:	e7f5      	b.n	800ce64 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800ce78:	f06f 0003 	mvn.w	r0, #3
}
 800ce7c:	4770      	bx	lr
      stat = osErrorParameter;
 800ce7e:	f06f 0003 	mvn.w	r0, #3
 800ce82:	e7ef      	b.n	800ce64 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800ce84:	f06f 0002 	mvn.w	r0, #2
 800ce88:	e7ec      	b.n	800ce64 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	e7ea      	b.n	800ce64 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800ce8e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800ce92:	e7e7      	b.n	800ce64 <osSemaphoreAcquire+0x38>

0800ce94 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ce94:	b320      	cbz	r0, 800cee0 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ce96:	b500      	push	{lr}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ce9e:	b1a3      	cbz	r3, 800ceca <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cea4:	a901      	add	r1, sp, #4
 800cea6:	f000 fb60 	bl	800d56a <xQueueGiveFromISR>
 800ceaa:	2801      	cmp	r0, #1
 800ceac:	d11b      	bne.n	800cee6 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800ceae:	9801      	ldr	r0, [sp, #4]
 800ceb0:	b198      	cbz	r0, 800ceda <osSemaphoreRelease+0x46>
 800ceb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ceb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800cec6:	2000      	movs	r0, #0
 800cec8:	e007      	b.n	800ceda <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ceca:	2300      	movs	r3, #0
 800cecc:	461a      	mov	r2, r3
 800cece:	4619      	mov	r1, r3
 800ced0:	f000 fa20 	bl	800d314 <xQueueGenericSend>
 800ced4:	2801      	cmp	r0, #1
 800ced6:	d109      	bne.n	800ceec <osSemaphoreRelease+0x58>
  stat = osOK;
 800ced8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800ceda:	b003      	add	sp, #12
 800cedc:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800cee0:	f06f 0003 	mvn.w	r0, #3
}
 800cee4:	4770      	bx	lr
      stat = osErrorResource;
 800cee6:	f06f 0002 	mvn.w	r0, #2
 800ceea:	e7f6      	b.n	800ceda <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800ceec:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800cef0:	e7f3      	b.n	800ceda <osSemaphoreRelease+0x46>
	...

0800cef4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cef4:	4b03      	ldr	r3, [pc, #12]	@ (800cf04 <vApplicationGetIdleTaskMemory+0x10>)
 800cef6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cef8:	4b03      	ldr	r3, [pc, #12]	@ (800cf08 <vApplicationGetIdleTaskMemory+0x14>)
 800cefa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cefc:	2380      	movs	r3, #128	@ 0x80
 800cefe:	6013      	str	r3, [r2, #0]
}
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	24002864 	.word	0x24002864
 800cf08:	24002664 	.word	0x24002664

0800cf0c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cf0c:	4b03      	ldr	r3, [pc, #12]	@ (800cf1c <vApplicationGetTimerTaskMemory+0x10>)
 800cf0e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cf10:	4b03      	ldr	r3, [pc, #12]	@ (800cf20 <vApplicationGetTimerTaskMemory+0x14>)
 800cf12:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cf14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cf18:	6013      	str	r3, [r2, #0]
}
 800cf1a:	4770      	bx	lr
 800cf1c:	240025bc 	.word	0x240025bc
 800cf20:	240021bc 	.word	0x240021bc

0800cf24 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf24:	f100 0308 	add.w	r3, r0, #8
 800cf28:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf30:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf32:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf34:	2300      	movs	r3, #0
 800cf36:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf38:	4770      	bx	lr

0800cf3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf3e:	4770      	bx	lr

0800cf40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf44:	689a      	ldr	r2, [r3, #8]
 800cf46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf48:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf4a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf4c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cf4e:	6803      	ldr	r3, [r0, #0]
 800cf50:	3301      	adds	r3, #1
 800cf52:	6003      	str	r3, [r0, #0]
}
 800cf54:	4770      	bx	lr

0800cf56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf56:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf58:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cf5e:	d011      	beq.n	800cf84 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf60:	f100 0308 	add.w	r3, r0, #8
 800cf64:	461c      	mov	r4, r3
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	42aa      	cmp	r2, r5
 800cf6c:	d9fa      	bls.n	800cf64 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf6e:	6863      	ldr	r3, [r4, #4]
 800cf70:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf72:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf74:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf76:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf78:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800cf7a:	6803      	ldr	r3, [r0, #0]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	6003      	str	r3, [r0, #0]
}
 800cf80:	bc30      	pop	{r4, r5}
 800cf82:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf84:	6904      	ldr	r4, [r0, #16]
 800cf86:	e7f2      	b.n	800cf6e <vListInsert+0x18>

0800cf88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cf88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cf8a:	6841      	ldr	r1, [r0, #4]
 800cf8c:	6882      	ldr	r2, [r0, #8]
 800cf8e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cf90:	6841      	ldr	r1, [r0, #4]
 800cf92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	4282      	cmp	r2, r0
 800cf98:	d006      	beq.n	800cfa8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	3a01      	subs	r2, #1
 800cfa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cfa4:	6818      	ldr	r0, [r3, #0]
}
 800cfa6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfa8:	6882      	ldr	r2, [r0, #8]
 800cfaa:	605a      	str	r2, [r3, #4]
 800cfac:	e7f5      	b.n	800cf9a <uxListRemove+0x12>

0800cfae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cfae:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cfb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800cfb2:	b118      	cbz	r0, 800cfbc <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cfb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb6:	6818      	ldr	r0, [r3, #0]
 800cfb8:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800cfbc:	4770      	bx	lr

0800cfbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cfbe:	b510      	push	{r4, lr}
 800cfc0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cfc2:	f001 fdc7 	bl	800eb54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cfc6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cfc8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d004      	beq.n	800cfd8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800cfce:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800cfd0:	f001 fde2 	bl	800eb98 <vPortExitCritical>

	return xReturn;
}
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800cfd8:	2401      	movs	r4, #1
 800cfda:	e7f9      	b.n	800cfd0 <prvIsQueueFull+0x12>

0800cfdc <prvIsQueueEmpty>:
{
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cfe0:	f001 fdb8 	bl	800eb54 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cfe4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800cfe6:	b923      	cbnz	r3, 800cff2 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800cfe8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800cfea:	f001 fdd5 	bl	800eb98 <vPortExitCritical>
}
 800cfee:	4620      	mov	r0, r4
 800cff0:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800cff2:	2400      	movs	r4, #0
 800cff4:	e7f9      	b.n	800cfea <prvIsQueueEmpty+0xe>

0800cff6 <prvCopyDataToQueue>:
{
 800cff6:	b570      	push	{r4, r5, r6, lr}
 800cff8:	4604      	mov	r4, r0
 800cffa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cffc:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cffe:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800d000:	b95a      	cbnz	r2, 800d01a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d002:	6803      	ldr	r3, [r0, #0]
 800d004:	b11b      	cbz	r3, 800d00e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800d006:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d008:	3601      	adds	r6, #1
 800d00a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d00e:	6880      	ldr	r0, [r0, #8]
 800d010:	f001 fa62 	bl	800e4d8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d014:	2300      	movs	r3, #0
 800d016:	60a3      	str	r3, [r4, #8]
 800d018:	e7f6      	b.n	800d008 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800d01a:	b96d      	cbnz	r5, 800d038 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d01c:	6840      	ldr	r0, [r0, #4]
 800d01e:	f010 fe1d 	bl	801dc5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d026:	4413      	add	r3, r2
 800d028:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d02a:	68a2      	ldr	r2, [r4, #8]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d319      	bcc.n	800d064 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d034:	4628      	mov	r0, r5
 800d036:	e7e7      	b.n	800d008 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d038:	68c0      	ldr	r0, [r0, #12]
 800d03a:	f010 fe0f 	bl	801dc5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d03e:	68e3      	ldr	r3, [r4, #12]
 800d040:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d042:	4251      	negs	r1, r2
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d048:	6822      	ldr	r2, [r4, #0]
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d202      	bcs.n	800d054 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	440b      	add	r3, r1
 800d052:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d054:	2d02      	cmp	r5, #2
 800d056:	d001      	beq.n	800d05c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800d058:	2000      	movs	r0, #0
 800d05a:	e7d5      	b.n	800d008 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d05c:	b126      	cbz	r6, 800d068 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800d05e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800d060:	2000      	movs	r0, #0
 800d062:	e7d1      	b.n	800d008 <prvCopyDataToQueue+0x12>
 800d064:	4628      	mov	r0, r5
 800d066:	e7cf      	b.n	800d008 <prvCopyDataToQueue+0x12>
 800d068:	2000      	movs	r0, #0
 800d06a:	e7cd      	b.n	800d008 <prvCopyDataToQueue+0x12>

0800d06c <prvCopyDataFromQueue>:
{
 800d06c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d06e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800d070:	b16a      	cbz	r2, 800d08e <prvCopyDataFromQueue+0x22>
{
 800d072:	b510      	push	{r4, lr}
 800d074:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d076:	68d9      	ldr	r1, [r3, #12]
 800d078:	4411      	add	r1, r2
 800d07a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d07c:	689c      	ldr	r4, [r3, #8]
 800d07e:	42a1      	cmp	r1, r4
 800d080:	d301      	bcc.n	800d086 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d082:	6819      	ldr	r1, [r3, #0]
 800d084:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d086:	68d9      	ldr	r1, [r3, #12]
 800d088:	f010 fde8 	bl	801dc5c <memcpy>
}
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	4770      	bx	lr

0800d090 <prvUnlockQueue>:
{
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800d094:	f001 fd5e 	bl	800eb54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d098:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800d09c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d09e:	e001      	b.n	800d0a4 <prvUnlockQueue+0x14>
			--cTxLock;
 800d0a0:	3c01      	subs	r4, #1
 800d0a2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0a4:	2c00      	cmp	r4, #0
 800d0a6:	dd0a      	ble.n	800d0be <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0a8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d0aa:	b143      	cbz	r3, 800d0be <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0ac:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d0b0:	f001 f91c 	bl	800e2ec <xTaskRemoveFromEventList>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d0f3      	beq.n	800d0a0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800d0b8:	f001 f9ac 	bl	800e414 <vTaskMissedYield>
 800d0bc:	e7f0      	b.n	800d0a0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800d0be:	23ff      	movs	r3, #255	@ 0xff
 800d0c0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d0c4:	f001 fd68 	bl	800eb98 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d0c8:	f001 fd44 	bl	800eb54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d0cc:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800d0d0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0d2:	e001      	b.n	800d0d8 <prvUnlockQueue+0x48>
				--cRxLock;
 800d0d4:	3c01      	subs	r4, #1
 800d0d6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0d8:	2c00      	cmp	r4, #0
 800d0da:	dd0a      	ble.n	800d0f2 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0dc:	692b      	ldr	r3, [r5, #16]
 800d0de:	b143      	cbz	r3, 800d0f2 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0e0:	f105 0010 	add.w	r0, r5, #16
 800d0e4:	f001 f902 	bl	800e2ec <xTaskRemoveFromEventList>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0f3      	beq.n	800d0d4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800d0ec:	f001 f992 	bl	800e414 <vTaskMissedYield>
 800d0f0:	e7f0      	b.n	800d0d4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800d0f2:	23ff      	movs	r3, #255	@ 0xff
 800d0f4:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800d0f8:	f001 fd4e 	bl	800eb98 <vPortExitCritical>
}
 800d0fc:	bd38      	pop	{r3, r4, r5, pc}

0800d0fe <xQueueGenericReset>:
{
 800d0fe:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800d100:	b1e0      	cbz	r0, 800d13c <xQueueGenericReset+0x3e>
 800d102:	460d      	mov	r5, r1
 800d104:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d106:	f001 fd25 	bl	800eb54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800d10e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800d110:	fb01 3002 	mla	r0, r1, r2, r3
 800d114:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d116:	2000      	movs	r0, #0
 800d118:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d11a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d11c:	3a01      	subs	r2, #1
 800d11e:	fb02 3301 	mla	r3, r2, r1, r3
 800d122:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d124:	23ff      	movs	r3, #255	@ 0xff
 800d126:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d12a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d12e:	b9fd      	cbnz	r5, 800d170 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d130:	6923      	ldr	r3, [r4, #16]
 800d132:	b963      	cbnz	r3, 800d14e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800d134:	f001 fd30 	bl	800eb98 <vPortExitCritical>
}
 800d138:	2001      	movs	r0, #1
 800d13a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d14c:	e7fe      	b.n	800d14c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d14e:	f104 0010 	add.w	r0, r4, #16
 800d152:	f001 f8cb 	bl	800e2ec <xTaskRemoveFromEventList>
 800d156:	2800      	cmp	r0, #0
 800d158:	d0ec      	beq.n	800d134 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800d15a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d162:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	e7e1      	b.n	800d134 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d170:	f104 0010 	add.w	r0, r4, #16
 800d174:	f7ff fed6 	bl	800cf24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d178:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d17c:	f7ff fed2 	bl	800cf24 <vListInitialise>
 800d180:	e7d8      	b.n	800d134 <xQueueGenericReset+0x36>

0800d182 <prvInitialiseNewQueue>:
{
 800d182:	b538      	push	{r3, r4, r5, lr}
 800d184:	461d      	mov	r5, r3
 800d186:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d188:	460b      	mov	r3, r1
 800d18a:	b949      	cbnz	r1, 800d1a0 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d18c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800d18e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d190:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d192:	2101      	movs	r1, #1
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff ffb2 	bl	800d0fe <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d19a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d1a0:	6022      	str	r2, [r4, #0]
 800d1a2:	e7f4      	b.n	800d18e <prvInitialiseNewQueue+0xc>

0800d1a4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1a4:	b940      	cbnz	r0, 800d1b8 <xQueueGenericCreateStatic+0x14>
 800d1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	e7fe      	b.n	800d1b6 <xQueueGenericCreateStatic+0x12>
	{
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800d1be:	b183      	cbz	r3, 800d1e2 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1c0:	1e0b      	subs	r3, r1, #0
 800d1c2:	bf18      	it	ne
 800d1c4:	2301      	movne	r3, #1
 800d1c6:	2a00      	cmp	r2, #0
 800d1c8:	bf08      	it	eq
 800d1ca:	f043 0301 	orreq.w	r3, r3, #1
 800d1ce:	b98b      	cbnz	r3, 800d1f4 <xQueueGenericCreateStatic+0x50>
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	e7fe      	b.n	800d1e0 <xQueueGenericCreateStatic+0x3c>
 800d1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1f4:	fab1 f381 	clz	r3, r1
 800d1f8:	095b      	lsrs	r3, r3, #5
 800d1fa:	2a00      	cmp	r2, #0
 800d1fc:	bf18      	it	ne
 800d1fe:	f043 0301 	orrne.w	r3, r3, #1
 800d202:	b943      	cbnz	r3, 800d216 <xQueueGenericCreateStatic+0x72>
 800d204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d208:	f383 8811 	msr	BASEPRI, r3
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	f3bf 8f4f 	dsb	sy
 800d214:	e7fe      	b.n	800d214 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d216:	2350      	movs	r3, #80	@ 0x50
 800d218:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	2b50      	cmp	r3, #80	@ 0x50
 800d21e:	d008      	beq.n	800d232 <xQueueGenericCreateStatic+0x8e>
 800d220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	e7fe      	b.n	800d230 <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d232:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d234:	2301      	movs	r3, #1
 800d236:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d23a:	9400      	str	r4, [sp, #0]
 800d23c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d240:	f7ff ff9f 	bl	800d182 <prvInitialiseNewQueue>
	}
 800d244:	4620      	mov	r0, r4
 800d246:	b004      	add	sp, #16
 800d248:	bd10      	pop	{r4, pc}

0800d24a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d24a:	b940      	cbnz	r0, 800d25e <xQueueGenericCreate+0x14>
 800d24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	e7fe      	b.n	800d25c <xQueueGenericCreate+0x12>
	{
 800d25e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d260:	b083      	sub	sp, #12
 800d262:	460d      	mov	r5, r1
 800d264:	4614      	mov	r4, r2
 800d266:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d268:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d26c:	3050      	adds	r0, #80	@ 0x50
 800d26e:	f001 fe29 	bl	800eec4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d272:	4607      	mov	r7, r0
 800d274:	b150      	cbz	r0, 800d28c <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d276:	2300      	movs	r3, #0
 800d278:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d27c:	9000      	str	r0, [sp, #0]
 800d27e:	4623      	mov	r3, r4
 800d280:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f7ff ff7b 	bl	800d182 <prvInitialiseNewQueue>
	}
 800d28c:	4638      	mov	r0, r7
 800d28e:	b003      	add	sp, #12
 800d290:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d292 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800d292:	b940      	cbnz	r0, 800d2a6 <xQueueCreateCountingSemaphoreStatic+0x14>
 800d294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d298:	f383 8811 	msr	BASEPRI, r3
 800d29c:	f3bf 8f6f 	isb	sy
 800d2a0:	f3bf 8f4f 	dsb	sy
 800d2a4:	e7fe      	b.n	800d2a4 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800d2a6:	b510      	push	{r4, lr}
 800d2a8:	b082      	sub	sp, #8
 800d2aa:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2ac:	4288      	cmp	r0, r1
 800d2ae:	d208      	bcs.n	800d2c2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	f7ff ff6a 	bl	800d1a4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d2d0:	b100      	cbz	r0, 800d2d4 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d2d2:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d2d4:	b002      	add	sp, #8
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800d2d8:	b940      	cbnz	r0, 800d2ec <xQueueCreateCountingSemaphore+0x14>
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	e7fe      	b.n	800d2ea <xQueueCreateCountingSemaphore+0x12>
	{
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800d2f0:	4288      	cmp	r0, r1
 800d2f2:	d208      	bcs.n	800d306 <xQueueCreateCountingSemaphore+0x2e>
 800d2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	e7fe      	b.n	800d304 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d306:	2202      	movs	r2, #2
 800d308:	2100      	movs	r1, #0
 800d30a:	f7ff ff9e 	bl	800d24a <xQueueGenericCreate>
		if( xHandle != NULL )
 800d30e:	b100      	cbz	r0, 800d312 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d310:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d312:	bd10      	pop	{r4, pc}

0800d314 <xQueueGenericSend>:
{
 800d314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d316:	b085      	sub	sp, #20
 800d318:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d31a:	b188      	cbz	r0, 800d340 <xQueueGenericSend+0x2c>
 800d31c:	460f      	mov	r7, r1
 800d31e:	461d      	mov	r5, r3
 800d320:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d322:	b1b1      	cbz	r1, 800d352 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d324:	2d02      	cmp	r5, #2
 800d326:	d120      	bne.n	800d36a <xQueueGenericSend+0x56>
 800d328:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d01d      	beq.n	800d36a <xQueueGenericSend+0x56>
 800d32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	e7fe      	b.n	800d33e <xQueueGenericSend+0x2a>
 800d340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d350:	e7fe      	b.n	800d350 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d352:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d354:	2b00      	cmp	r3, #0
 800d356:	d0e5      	beq.n	800d324 <xQueueGenericSend+0x10>
 800d358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	e7fe      	b.n	800d368 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d36a:	f001 f859 	bl	800e420 <xTaskGetSchedulerState>
 800d36e:	4606      	mov	r6, r0
 800d370:	b958      	cbnz	r0, 800d38a <xQueueGenericSend+0x76>
 800d372:	9b01      	ldr	r3, [sp, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d048      	beq.n	800d40a <xQueueGenericSend+0xf6>
 800d378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	e7fe      	b.n	800d388 <xQueueGenericSend+0x74>
 800d38a:	2600      	movs	r6, #0
 800d38c:	e03d      	b.n	800d40a <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d38e:	462a      	mov	r2, r5
 800d390:	4639      	mov	r1, r7
 800d392:	4620      	mov	r0, r4
 800d394:	f7ff fe2f 	bl	800cff6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d398:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d39a:	b97b      	cbnz	r3, 800d3bc <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800d39c:	b148      	cbz	r0, 800d3b2 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800d39e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d3b2:	f001 fbf1 	bl	800eb98 <vPortExitCritical>
				return pdPASS;
 800d3b6:	2001      	movs	r0, #1
}
 800d3b8:	b005      	add	sp, #20
 800d3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d3c0:	f000 ff94 	bl	800e2ec <xTaskRemoveFromEventList>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d0f4      	beq.n	800d3b2 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800d3c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d3cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	e7e9      	b.n	800d3b2 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800d3de:	f001 fbdb 	bl	800eb98 <vPortExitCritical>
					return errQUEUE_FULL;
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	e7e8      	b.n	800d3b8 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3e6:	a802      	add	r0, sp, #8
 800d3e8:	f000 ffc6 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3ec:	2601      	movs	r6, #1
 800d3ee:	e019      	b.n	800d424 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d3f6:	e021      	b.n	800d43c <xQueueGenericSend+0x128>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d3fe:	e023      	b.n	800d448 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800d400:	4620      	mov	r0, r4
 800d402:	f7ff fe45 	bl	800d090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d406:	f000 fe49 	bl	800e09c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800d40a:	f001 fba3 	bl	800eb54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d40e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d410:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d412:	429a      	cmp	r2, r3
 800d414:	d3bb      	bcc.n	800d38e <xQueueGenericSend+0x7a>
 800d416:	2d02      	cmp	r5, #2
 800d418:	d0b9      	beq.n	800d38e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0de      	beq.n	800d3de <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800d420:	2e00      	cmp	r6, #0
 800d422:	d0e0      	beq.n	800d3e6 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800d424:	f001 fbb8 	bl	800eb98 <vPortExitCritical>
		vTaskSuspendAll();
 800d428:	f000 fd9e 	bl	800df68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d42c:	f001 fb92 	bl	800eb54 <vPortEnterCritical>
 800d430:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800d434:	b252      	sxtb	r2, r2
 800d436:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d43a:	d0d9      	beq.n	800d3f0 <xQueueGenericSend+0xdc>
 800d43c:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800d440:	b252      	sxtb	r2, r2
 800d442:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d446:	d0d7      	beq.n	800d3f8 <xQueueGenericSend+0xe4>
 800d448:	f001 fba6 	bl	800eb98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d44c:	a901      	add	r1, sp, #4
 800d44e:	a802      	add	r0, sp, #8
 800d450:	f000 ff9e 	bl	800e390 <xTaskCheckForTimeOut>
 800d454:	b9d8      	cbnz	r0, 800d48e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d456:	4620      	mov	r0, r4
 800d458:	f7ff fdb1 	bl	800cfbe <prvIsQueueFull>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0cf      	beq.n	800d400 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d460:	9901      	ldr	r1, [sp, #4]
 800d462:	f104 0010 	add.w	r0, r4, #16
 800d466:	f000 ff0d 	bl	800e284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7ff fe10 	bl	800d090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d470:	f000 fe14 	bl	800e09c <xTaskResumeAll>
 800d474:	2800      	cmp	r0, #0
 800d476:	d1c8      	bne.n	800d40a <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800d478:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d480:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	f3bf 8f6f 	isb	sy
 800d48c:	e7bd      	b.n	800d40a <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800d48e:	4620      	mov	r0, r4
 800d490:	f7ff fdfe 	bl	800d090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d494:	f000 fe02 	bl	800e09c <xTaskResumeAll>
			return errQUEUE_FULL;
 800d498:	2000      	movs	r0, #0
 800d49a:	e78d      	b.n	800d3b8 <xQueueGenericSend+0xa4>

0800d49c <xQueueGenericSendFromISR>:
{
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d4a0:	b190      	cbz	r0, 800d4c8 <xQueueGenericSendFromISR+0x2c>
 800d4a2:	460f      	mov	r7, r1
 800d4a4:	4616      	mov	r6, r2
 800d4a6:	461c      	mov	r4, r3
 800d4a8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4aa:	b1b1      	cbz	r1, 800d4da <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4ac:	2c02      	cmp	r4, #2
 800d4ae:	d120      	bne.n	800d4f2 <xQueueGenericSendFromISR+0x56>
 800d4b0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d01d      	beq.n	800d4f2 <xQueueGenericSendFromISR+0x56>
 800d4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	e7fe      	b.n	800d4c6 <xQueueGenericSendFromISR+0x2a>
 800d4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0e5      	beq.n	800d4ac <xQueueGenericSendFromISR+0x10>
 800d4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	e7fe      	b.n	800d4f0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4f2:	f001 fc55 	bl	800eda0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d4f6:	f3ef 8811 	mrs	r8, BASEPRI
 800d4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d50a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800d50c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d50e:	429a      	cmp	r2, r3
 800d510:	d306      	bcc.n	800d520 <xQueueGenericSendFromISR+0x84>
 800d512:	2c02      	cmp	r4, #2
 800d514:	d004      	beq.n	800d520 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800d516:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d518:	f388 8811 	msr	BASEPRI, r8
}
 800d51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800d520:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800d524:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d528:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d52a:	4622      	mov	r2, r4
 800d52c:	4639      	mov	r1, r7
 800d52e:	4628      	mov	r0, r5
 800d530:	f7ff fd61 	bl	800cff6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d534:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d538:	d006      	beq.n	800d548 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d53a:	f109 0301 	add.w	r3, r9, #1
 800d53e:	b25b      	sxtb	r3, r3
 800d540:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800d544:	2001      	movs	r0, #1
 800d546:	e7e7      	b.n	800d518 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d548:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d54a:	b90b      	cbnz	r3, 800d550 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800d54c:	2001      	movs	r0, #1
 800d54e:	e7e3      	b.n	800d518 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d550:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d554:	f000 feca 	bl	800e2ec <xTaskRemoveFromEventList>
 800d558:	b118      	cbz	r0, 800d562 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800d55a:	b126      	cbz	r6, 800d566 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d55c:	2001      	movs	r0, #1
 800d55e:	6030      	str	r0, [r6, #0]
 800d560:	e7da      	b.n	800d518 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800d562:	2001      	movs	r0, #1
 800d564:	e7d8      	b.n	800d518 <xQueueGenericSendFromISR+0x7c>
 800d566:	2001      	movs	r0, #1
 800d568:	e7d6      	b.n	800d518 <xQueueGenericSendFromISR+0x7c>

0800d56a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800d56a:	b168      	cbz	r0, 800d588 <xQueueGiveFromISR+0x1e>
{
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	460c      	mov	r4, r1
 800d570:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d572:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d574:	b18b      	cbz	r3, 800d59a <xQueueGiveFromISR+0x30>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	e7fe      	b.n	800d586 <xQueueGiveFromISR+0x1c>
 800d588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d598:	e7fe      	b.n	800d598 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d59a:	6803      	ldr	r3, [r0, #0]
 800d59c:	b1eb      	cbz	r3, 800d5da <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d59e:	f001 fbff 	bl	800eda0 <vPortValidateInterruptPriority>
	__asm volatile
 800d5a2:	f3ef 8611 	mrs	r6, BASEPRI
 800d5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5b6:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d5b8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d926      	bls.n	800d60c <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5be:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800d5c2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5cc:	d011      	beq.n	800d5f2 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	b25b      	sxtb	r3, r3
 800d5d2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	e019      	b.n	800d60e <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d5da:	6883      	ldr	r3, [r0, #8]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d0de      	beq.n	800d59e <xQueueGiveFromISR+0x34>
	__asm volatile
 800d5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	e7fe      	b.n	800d5f0 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5f2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d5f4:	b90b      	cbnz	r3, 800d5fa <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	e009      	b.n	800d60e <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5fa:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800d5fe:	f000 fe75 	bl	800e2ec <xTaskRemoveFromEventList>
 800d602:	b138      	cbz	r0, 800d614 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800d604:	b144      	cbz	r4, 800d618 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d606:	2001      	movs	r0, #1
 800d608:	6020      	str	r0, [r4, #0]
 800d60a:	e000      	b.n	800d60e <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800d60c:	2000      	movs	r0, #0
	__asm volatile
 800d60e:	f386 8811 	msr	BASEPRI, r6
}
 800d612:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800d614:	2001      	movs	r0, #1
 800d616:	e7fa      	b.n	800d60e <xQueueGiveFromISR+0xa4>
 800d618:	2001      	movs	r0, #1
 800d61a:	e7f8      	b.n	800d60e <xQueueGiveFromISR+0xa4>

0800d61c <xQueueReceive>:
{
 800d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d61e:	b085      	sub	sp, #20
 800d620:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d622:	b190      	cbz	r0, 800d64a <xQueueReceive+0x2e>
 800d624:	460f      	mov	r7, r1
 800d626:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d628:	b1c1      	cbz	r1, 800d65c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d62a:	f000 fef9 	bl	800e420 <xTaskGetSchedulerState>
 800d62e:	4606      	mov	r6, r0
 800d630:	bb00      	cbnz	r0, 800d674 <xQueueReceive+0x58>
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d05e      	beq.n	800d6f6 <xQueueReceive+0xda>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	e7fe      	b.n	800d648 <xQueueReceive+0x2c>
 800d64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d65a:	e7fe      	b.n	800d65a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d65c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0e3      	beq.n	800d62a <xQueueReceive+0xe>
 800d662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	e7fe      	b.n	800d672 <xQueueReceive+0x56>
 800d674:	2600      	movs	r6, #0
 800d676:	e03e      	b.n	800d6f6 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d678:	4639      	mov	r1, r7
 800d67a:	4620      	mov	r0, r4
 800d67c:	f7ff fcf6 	bl	800d06c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d680:	3d01      	subs	r5, #1
 800d682:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	b923      	cbnz	r3, 800d692 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800d688:	f001 fa86 	bl	800eb98 <vPortExitCritical>
				return pdPASS;
 800d68c:	2001      	movs	r0, #1
}
 800d68e:	b005      	add	sp, #20
 800d690:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d692:	f104 0010 	add.w	r0, r4, #16
 800d696:	f000 fe29 	bl	800e2ec <xTaskRemoveFromEventList>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	d0f4      	beq.n	800d688 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800d69e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	e7e9      	b.n	800d688 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800d6b4:	f001 fa70 	bl	800eb98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e7e8      	b.n	800d68e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6bc:	a802      	add	r0, sp, #8
 800d6be:	f000 fe5b 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6c2:	2601      	movs	r6, #1
 800d6c4:	e021      	b.n	800d70a <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d6cc:	e029      	b.n	800d722 <xQueueReceive+0x106>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d6d4:	e02b      	b.n	800d72e <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7ff fcda 	bl	800d090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6dc:	f000 fcde 	bl	800e09c <xTaskResumeAll>
 800d6e0:	e009      	b.n	800d6f6 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f7ff fcd4 	bl	800d090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6e8:	f000 fcd8 	bl	800e09c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f7ff fc75 	bl	800cfdc <prvIsQueueEmpty>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d13f      	bne.n	800d776 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800d6f6:	f001 fa2d 	bl	800eb54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6fa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	d1bb      	bne.n	800d678 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0d6      	beq.n	800d6b4 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800d706:	2e00      	cmp	r6, #0
 800d708:	d0d8      	beq.n	800d6bc <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800d70a:	f001 fa45 	bl	800eb98 <vPortExitCritical>
		vTaskSuspendAll();
 800d70e:	f000 fc2b 	bl	800df68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d712:	f001 fa1f 	bl	800eb54 <vPortEnterCritical>
 800d716:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d71a:	b25b      	sxtb	r3, r3
 800d71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d720:	d0d1      	beq.n	800d6c6 <xQueueReceive+0xaa>
 800d722:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d726:	b25b      	sxtb	r3, r3
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d0cf      	beq.n	800d6ce <xQueueReceive+0xb2>
 800d72e:	f001 fa33 	bl	800eb98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d732:	a901      	add	r1, sp, #4
 800d734:	a802      	add	r0, sp, #8
 800d736:	f000 fe2b 	bl	800e390 <xTaskCheckForTimeOut>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d1d1      	bne.n	800d6e2 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d73e:	4620      	mov	r0, r4
 800d740:	f7ff fc4c 	bl	800cfdc <prvIsQueueEmpty>
 800d744:	2800      	cmp	r0, #0
 800d746:	d0c6      	beq.n	800d6d6 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d748:	9901      	ldr	r1, [sp, #4]
 800d74a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d74e:	f000 fd99 	bl	800e284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d752:	4620      	mov	r0, r4
 800d754:	f7ff fc9c 	bl	800d090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d758:	f000 fca0 	bl	800e09c <xTaskResumeAll>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d1ca      	bne.n	800d6f6 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800d760:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d768:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	e7bf      	b.n	800d6f6 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800d776:	2000      	movs	r0, #0
 800d778:	e789      	b.n	800d68e <xQueueReceive+0x72>

0800d77a <xQueueSemaphoreTake>:
{
 800d77a:	b570      	push	{r4, r5, r6, lr}
 800d77c:	b084      	sub	sp, #16
 800d77e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d780:	b158      	cbz	r0, 800d79a <xQueueSemaphoreTake+0x20>
 800d782:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800d784:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d786:	b18b      	cbz	r3, 800d7ac <xQueueSemaphoreTake+0x32>
 800d788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	e7fe      	b.n	800d798 <xQueueSemaphoreTake+0x1e>
 800d79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800d7aa:	e7fe      	b.n	800d7aa <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7ac:	f000 fe38 	bl	800e420 <xTaskGetSchedulerState>
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	b950      	cbnz	r0, 800d7ca <xQueueSemaphoreTake+0x50>
 800d7b4:	9b01      	ldr	r3, [sp, #4]
 800d7b6:	b15b      	cbz	r3, 800d7d0 <xQueueSemaphoreTake+0x56>
 800d7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	e7fe      	b.n	800d7c8 <xQueueSemaphoreTake+0x4e>
 800d7ca:	2600      	movs	r6, #0
 800d7cc:	4635      	mov	r5, r6
 800d7ce:	e055      	b.n	800d87c <xQueueSemaphoreTake+0x102>
 800d7d0:	4606      	mov	r6, r0
 800d7d2:	e053      	b.n	800d87c <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	b13b      	cbz	r3, 800d7ec <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	b94b      	cbnz	r3, 800d7f4 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800d7e0:	f001 f9da 	bl	800eb98 <vPortExitCritical>
				return pdPASS;
 800d7e4:	2601      	movs	r6, #1
}
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	b004      	add	sp, #16
 800d7ea:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7ec:	f000 ff0c 	bl	800e608 <pvTaskIncrementMutexHeldCount>
 800d7f0:	60a0      	str	r0, [r4, #8]
 800d7f2:	e7f3      	b.n	800d7dc <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7f4:	f104 0010 	add.w	r0, r4, #16
 800d7f8:	f000 fd78 	bl	800e2ec <xTaskRemoveFromEventList>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0ef      	beq.n	800d7e0 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800d800:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d808:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	e7e4      	b.n	800d7e0 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d816:	b146      	cbz	r6, 800d82a <xQueueSemaphoreTake+0xb0>
 800d818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	e7fe      	b.n	800d828 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800d82a:	f001 f9b5 	bl	800eb98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d82e:	e7da      	b.n	800d7e6 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d830:	a802      	add	r0, sp, #8
 800d832:	f000 fda1 	bl	800e378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d836:	2501      	movs	r5, #1
 800d838:	e02a      	b.n	800d890 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800d83a:	2300      	movs	r3, #0
 800d83c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800d840:	e032      	b.n	800d8a8 <xQueueSemaphoreTake+0x12e>
 800d842:	2300      	movs	r3, #0
 800d844:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d848:	e034      	b.n	800d8b4 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800d84a:	f001 f983 	bl	800eb54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d84e:	68a0      	ldr	r0, [r4, #8]
 800d850:	f000 fdf6 	bl	800e440 <xTaskPriorityInherit>
 800d854:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800d856:	f001 f99f 	bl	800eb98 <vPortExitCritical>
 800d85a:	e03b      	b.n	800d8d4 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800d85c:	4620      	mov	r0, r4
 800d85e:	f7ff fc17 	bl	800d090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d862:	f000 fc1b 	bl	800e09c <xTaskResumeAll>
 800d866:	e009      	b.n	800d87c <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff fc11 	bl	800d090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d86e:	f000 fc15 	bl	800e09c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d872:	4620      	mov	r0, r4
 800d874:	f7ff fbb2 	bl	800cfdc <prvIsQueueEmpty>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d142      	bne.n	800d902 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800d87c:	f001 f96a 	bl	800eb54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d880:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1a6      	bne.n	800d7d4 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0c4      	beq.n	800d816 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800d88c:	2d00      	cmp	r5, #0
 800d88e:	d0cf      	beq.n	800d830 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800d890:	f001 f982 	bl	800eb98 <vPortExitCritical>
		vTaskSuspendAll();
 800d894:	f000 fb68 	bl	800df68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d898:	f001 f95c 	bl	800eb54 <vPortEnterCritical>
 800d89c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d8a0:	b25b      	sxtb	r3, r3
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a6:	d0c8      	beq.n	800d83a <xQueueSemaphoreTake+0xc0>
 800d8a8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d8ac:	b25b      	sxtb	r3, r3
 800d8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b2:	d0c6      	beq.n	800d842 <xQueueSemaphoreTake+0xc8>
 800d8b4:	f001 f970 	bl	800eb98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8b8:	a901      	add	r1, sp, #4
 800d8ba:	a802      	add	r0, sp, #8
 800d8bc:	f000 fd68 	bl	800e390 <xTaskCheckForTimeOut>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d1d1      	bne.n	800d868 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7ff fb89 	bl	800cfdc <prvIsQueueEmpty>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0c6      	beq.n	800d85c <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0ba      	beq.n	800d84a <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8d4:	9901      	ldr	r1, [sp, #4]
 800d8d6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d8da:	f000 fcd3 	bl	800e284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f7ff fbd6 	bl	800d090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8e4:	f000 fbda 	bl	800e09c <xTaskResumeAll>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1c7      	bne.n	800d87c <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800d8ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	e7bc      	b.n	800d87c <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800d902:	b90e      	cbnz	r6, 800d908 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800d904:	2600      	movs	r6, #0
 800d906:	e76e      	b.n	800d7e6 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800d908:	f001 f924 	bl	800eb54 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d90c:	4620      	mov	r0, r4
 800d90e:	f7ff fb4e 	bl	800cfae <prvGetDisinheritPriorityAfterTimeout>
 800d912:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d914:	68a0      	ldr	r0, [r4, #8]
 800d916:	f000 fe27 	bl	800e568 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d91a:	f001 f93d 	bl	800eb98 <vPortExitCritical>
 800d91e:	e7f1      	b.n	800d904 <xQueueSemaphoreTake+0x18a>

0800d920 <xQueueReceiveFromISR>:
{
 800d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800d924:	b1b0      	cbz	r0, 800d954 <xQueueReceiveFromISR+0x34>
 800d926:	460d      	mov	r5, r1
 800d928:	4690      	mov	r8, r2
 800d92a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d92c:	b1d9      	cbz	r1, 800d966 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d92e:	f001 fa37 	bl	800eda0 <vPortValidateInterruptPriority>
	__asm volatile
 800d932:	f3ef 8711 	mrs	r7, BASEPRI
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d946:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d948:	b9ce      	cbnz	r6, 800d97e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800d94a:	2000      	movs	r0, #0
	__asm volatile
 800d94c:	f387 8811 	msr	BASEPRI, r7
}
 800d950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800d964:	e7fe      	b.n	800d964 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d966:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0e0      	beq.n	800d92e <xQueueReceiveFromISR+0xe>
 800d96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	e7fe      	b.n	800d97c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d97e:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800d982:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d986:	4629      	mov	r1, r5
 800d988:	4620      	mov	r0, r4
 800d98a:	f7ff fb6f 	bl	800d06c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d98e:	1e73      	subs	r3, r6, #1
 800d990:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d992:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d996:	d006      	beq.n	800d9a6 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d998:	f109 0301 	add.w	r3, r9, #1
 800d99c:	b25b      	sxtb	r3, r3
 800d99e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800d9a2:	2001      	movs	r0, #1
 800d9a4:	e7d2      	b.n	800d94c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	b90b      	cbnz	r3, 800d9ae <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	e7ce      	b.n	800d94c <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ae:	f104 0010 	add.w	r0, r4, #16
 800d9b2:	f000 fc9b 	bl	800e2ec <xTaskRemoveFromEventList>
 800d9b6:	b130      	cbz	r0, 800d9c6 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800d9b8:	f1b8 0f00 	cmp.w	r8, #0
 800d9bc:	d005      	beq.n	800d9ca <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9be:	2001      	movs	r0, #1
 800d9c0:	f8c8 0000 	str.w	r0, [r8]
 800d9c4:	e7c2      	b.n	800d94c <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	e7c0      	b.n	800d94c <xQueueReceiveFromISR+0x2c>
 800d9ca:	2001      	movs	r0, #1
 800d9cc:	e7be      	b.n	800d94c <xQueueReceiveFromISR+0x2c>
	...

0800d9d0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2b07      	cmp	r3, #7
 800d9d4:	d80c      	bhi.n	800d9f0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9d6:	4a07      	ldr	r2, [pc, #28]	@ (800d9f4 <vQueueAddToRegistry+0x24>)
 800d9d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9dc:	b10a      	cbz	r2, 800d9e2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9de:	3301      	adds	r3, #1
 800d9e0:	e7f7      	b.n	800d9d2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9e2:	4a04      	ldr	r2, [pc, #16]	@ (800d9f4 <vQueueAddToRegistry+0x24>)
 800d9e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d9ec:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9ee:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	24002910 	.word	0x24002910

0800d9f8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	2b07      	cmp	r3, #7
 800d9fc:	d80f      	bhi.n	800da1e <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d9fe:	4a08      	ldr	r2, [pc, #32]	@ (800da20 <vQueueUnregisterQueue+0x28>)
 800da00:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da04:	6852      	ldr	r2, [r2, #4]
 800da06:	4282      	cmp	r2, r0
 800da08:	d001      	beq.n	800da0e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da0a:	3301      	adds	r3, #1
 800da0c:	e7f5      	b.n	800d9fa <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800da0e:	4a04      	ldr	r2, [pc, #16]	@ (800da20 <vQueueUnregisterQueue+0x28>)
 800da10:	2100      	movs	r1, #0
 800da12:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800da16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800da1a:	6051      	str	r1, [r2, #4]
				break;
 800da1c:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800da1e:	4770      	bx	lr
 800da20:	24002910 	.word	0x24002910

0800da24 <vQueueDelete>:
	configASSERT( pxQueue );
 800da24:	b138      	cbz	r0, 800da36 <vQueueDelete+0x12>
{
 800da26:	b510      	push	{r4, lr}
 800da28:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800da2a:	f7ff ffe5 	bl	800d9f8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da2e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800da32:	b14b      	cbz	r3, 800da48 <vQueueDelete+0x24>
}
 800da34:	bd10      	pop	{r4, pc}
 800da36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800da46:	e7fe      	b.n	800da46 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800da48:	4620      	mov	r0, r4
 800da4a:	f001 fabd 	bl	800efc8 <vPortFree>
}
 800da4e:	e7f1      	b.n	800da34 <vQueueDelete+0x10>

0800da50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	4604      	mov	r4, r0
 800da54:	460d      	mov	r5, r1
 800da56:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da58:	f001 f87c 	bl	800eb54 <vPortEnterCritical>
 800da5c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da60:	b25b      	sxtb	r3, r3
 800da62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da66:	d00d      	beq.n	800da84 <vQueueWaitForMessageRestricted+0x34>
 800da68:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da6c:	b25b      	sxtb	r3, r3
 800da6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da72:	d00b      	beq.n	800da8c <vQueueWaitForMessageRestricted+0x3c>
 800da74:	f001 f890 	bl	800eb98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800da7a:	b15b      	cbz	r3, 800da94 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da7c:	4620      	mov	r0, r4
 800da7e:	f7ff fb07 	bl	800d090 <prvUnlockQueue>
	}
 800da82:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800da84:	2300      	movs	r3, #0
 800da86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800da8a:	e7ed      	b.n	800da68 <vQueueWaitForMessageRestricted+0x18>
 800da8c:	2300      	movs	r3, #0
 800da8e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800da92:	e7ef      	b.n	800da74 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da94:	4632      	mov	r2, r6
 800da96:	4629      	mov	r1, r5
 800da98:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800da9c:	f000 fc0a 	bl	800e2b4 <vTaskPlaceOnEventListRestricted>
 800daa0:	e7ec      	b.n	800da7c <vQueueWaitForMessageRestricted+0x2c>
	...

0800daa4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daa4:	4b08      	ldr	r3, [pc, #32]	@ (800dac8 <prvResetNextTaskUnblockTime+0x24>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	b923      	cbnz	r3, 800dab6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daac:	4b07      	ldr	r3, [pc, #28]	@ (800dacc <prvResetNextTaskUnblockTime+0x28>)
 800daae:	f04f 32ff 	mov.w	r2, #4294967295
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab6:	4b04      	ldr	r3, [pc, #16]	@ (800dac8 <prvResetNextTaskUnblockTime+0x24>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	4b02      	ldr	r3, [pc, #8]	@ (800dacc <prvResetNextTaskUnblockTime+0x28>)
 800dac2:	601a      	str	r2, [r3, #0]
	}
}
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	240029c0 	.word	0x240029c0
 800dacc:	24002958 	.word	0x24002958

0800dad0 <prvInitialiseNewTask>:
{
 800dad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dad4:	4680      	mov	r8, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	4617      	mov	r7, r2
 800dada:	4699      	mov	r9, r3
 800dadc:	9e08      	ldr	r6, [sp, #32]
 800dade:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800dae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dae4:	0092      	lsls	r2, r2, #2
 800dae6:	21a5      	movs	r1, #165	@ 0xa5
 800dae8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800daea:	f00f ffd9 	bl	801daa0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800daee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800daf0:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800daf4:	443a      	add	r2, r7
 800daf6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dafa:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800dafe:	2d00      	cmp	r5, #0
 800db00:	d042      	beq.n	800db88 <prvInitialiseNewTask+0xb8>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db02:	f04f 0c00 	mov.w	ip, #0
 800db06:	f1bc 0f0f 	cmp.w	ip, #15
 800db0a:	d809      	bhi.n	800db20 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db0c:	f815 300c 	ldrb.w	r3, [r5, ip]
 800db10:	eb04 020c 	add.w	r2, r4, ip
 800db14:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800db18:	b113      	cbz	r3, 800db20 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db1a:	f10c 0c01 	add.w	ip, ip, #1
 800db1e:	e7f2      	b.n	800db06 <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db20:	2300      	movs	r3, #0
 800db22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800db26:	2e37      	cmp	r6, #55	@ 0x37
 800db28:	d900      	bls.n	800db2c <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800db2a:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800db2c:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800db2e:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800db30:	2500      	movs	r5, #0
 800db32:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db34:	1d20      	adds	r0, r4, #4
 800db36:	f7ff fa00 	bl	800cf3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db3a:	f104 0018 	add.w	r0, r4, #24
 800db3e:	f7ff f9fc 	bl	800cf3a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db42:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db44:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800db48:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db4a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800db4c:	f8c4 50a0 	str.w	r5, [r4, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db50:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db54:	224c      	movs	r2, #76	@ 0x4c
 800db56:	4629      	mov	r1, r5
 800db58:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800db5c:	f00f ffa0 	bl	801daa0 <memset>
 800db60:	4b0b      	ldr	r3, [pc, #44]	@ (800db90 <prvInitialiseNewTask+0xc0>)
 800db62:	65a3      	str	r3, [r4, #88]	@ 0x58
 800db64:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db68:	65e2      	str	r2, [r4, #92]	@ 0x5c
 800db6a:	33d0      	adds	r3, #208	@ 0xd0
 800db6c:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db6e:	464a      	mov	r2, r9
 800db70:	4641      	mov	r1, r8
 800db72:	4638      	mov	r0, r7
 800db74:	f000 ffc4 	bl	800eb00 <pxPortInitialiseStack>
 800db78:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800db7a:	f1ba 0f00 	cmp.w	sl, #0
 800db7e:	d001      	beq.n	800db84 <prvInitialiseNewTask+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db80:	f8ca 4000 	str.w	r4, [sl]
}
 800db84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db88:	2300      	movs	r3, #0
 800db8a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800db8e:	e7ca      	b.n	800db26 <prvInitialiseNewTask+0x56>
 800db90:	24006bdc 	.word	0x24006bdc

0800db94 <prvInitialiseTaskLists>:
{
 800db94:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db96:	2400      	movs	r4, #0
 800db98:	e007      	b.n	800dbaa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db9a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800db9e:	0093      	lsls	r3, r2, #2
 800dba0:	480e      	ldr	r0, [pc, #56]	@ (800dbdc <prvInitialiseTaskLists+0x48>)
 800dba2:	4418      	add	r0, r3
 800dba4:	f7ff f9be 	bl	800cf24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dba8:	3401      	adds	r4, #1
 800dbaa:	2c37      	cmp	r4, #55	@ 0x37
 800dbac:	d9f5      	bls.n	800db9a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800dbae:	4d0c      	ldr	r5, [pc, #48]	@ (800dbe0 <prvInitialiseTaskLists+0x4c>)
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f7ff f9b7 	bl	800cf24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dbb6:	4c0b      	ldr	r4, [pc, #44]	@ (800dbe4 <prvInitialiseTaskLists+0x50>)
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f7ff f9b3 	bl	800cf24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dbbe:	480a      	ldr	r0, [pc, #40]	@ (800dbe8 <prvInitialiseTaskLists+0x54>)
 800dbc0:	f7ff f9b0 	bl	800cf24 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800dbc4:	4809      	ldr	r0, [pc, #36]	@ (800dbec <prvInitialiseTaskLists+0x58>)
 800dbc6:	f7ff f9ad 	bl	800cf24 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800dbca:	4809      	ldr	r0, [pc, #36]	@ (800dbf0 <prvInitialiseTaskLists+0x5c>)
 800dbcc:	f7ff f9aa 	bl	800cf24 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800dbd0:	4b08      	ldr	r3, [pc, #32]	@ (800dbf4 <prvInitialiseTaskLists+0x60>)
 800dbd2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dbd4:	4b08      	ldr	r3, [pc, #32]	@ (800dbf8 <prvInitialiseTaskLists+0x64>)
 800dbd6:	601c      	str	r4, [r3, #0]
}
 800dbd8:	bd38      	pop	{r3, r4, r5, pc}
 800dbda:	bf00      	nop
 800dbdc:	240029ec 	.word	0x240029ec
 800dbe0:	240029d8 	.word	0x240029d8
 800dbe4:	240029c4 	.word	0x240029c4
 800dbe8:	240029a8 	.word	0x240029a8
 800dbec:	24002994 	.word	0x24002994
 800dbf0:	2400297c 	.word	0x2400297c
 800dbf4:	240029c0 	.word	0x240029c0
 800dbf8:	240029bc 	.word	0x240029bc

0800dbfc <prvAddNewTaskToReadyList>:
{
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800dc00:	f000 ffa8 	bl	800eb54 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800dc04:	4a22      	ldr	r2, [pc, #136]	@ (800dc90 <prvAddNewTaskToReadyList+0x94>)
 800dc06:	6813      	ldr	r3, [r2, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc0c:	4b21      	ldr	r3, [pc, #132]	@ (800dc94 <prvAddNewTaskToReadyList+0x98>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	b15b      	cbz	r3, 800dc2a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800dc12:	4b21      	ldr	r3, [pc, #132]	@ (800dc98 <prvAddNewTaskToReadyList+0x9c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	b96b      	cbnz	r3, 800dc34 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc18:	4b1e      	ldr	r3, [pc, #120]	@ (800dc94 <prvAddNewTaskToReadyList+0x98>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d807      	bhi.n	800dc34 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800dc24:	4b1b      	ldr	r3, [pc, #108]	@ (800dc94 <prvAddNewTaskToReadyList+0x98>)
 800dc26:	601c      	str	r4, [r3, #0]
 800dc28:	e004      	b.n	800dc34 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	@ (800dc94 <prvAddNewTaskToReadyList+0x98>)
 800dc2c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc2e:	6813      	ldr	r3, [r2, #0]
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d029      	beq.n	800dc88 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800dc34:	4a19      	ldr	r2, [pc, #100]	@ (800dc9c <prvAddNewTaskToReadyList+0xa0>)
 800dc36:	6813      	ldr	r3, [r2, #0]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc3c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800dc3e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800dc40:	4b17      	ldr	r3, [pc, #92]	@ (800dca0 <prvAddNewTaskToReadyList+0xa4>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4298      	cmp	r0, r3
 800dc46:	d901      	bls.n	800dc4c <prvAddNewTaskToReadyList+0x50>
 800dc48:	4b15      	ldr	r3, [pc, #84]	@ (800dca0 <prvAddNewTaskToReadyList+0xa4>)
 800dc4a:	6018      	str	r0, [r3, #0]
 800dc4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dc50:	1d21      	adds	r1, r4, #4
 800dc52:	4b14      	ldr	r3, [pc, #80]	@ (800dca4 <prvAddNewTaskToReadyList+0xa8>)
 800dc54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc58:	f7ff f972 	bl	800cf40 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dc5c:	f000 ff9c 	bl	800eb98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dc60:	4b0d      	ldr	r3, [pc, #52]	@ (800dc98 <prvAddNewTaskToReadyList+0x9c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	b17b      	cbz	r3, 800dc86 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc66:	4b0b      	ldr	r3, [pc, #44]	@ (800dc94 <prvAddNewTaskToReadyList+0x98>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d209      	bcs.n	800dc86 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800dc72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc7e:	f3bf 8f4f 	dsb	sy
 800dc82:	f3bf 8f6f 	isb	sy
}
 800dc86:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800dc88:	f7ff ff84 	bl	800db94 <prvInitialiseTaskLists>
 800dc8c:	e7d2      	b.n	800dc34 <prvAddNewTaskToReadyList+0x38>
 800dc8e:	bf00      	nop
 800dc90:	24002978 	.word	0x24002978
 800dc94:	24002e4c 	.word	0x24002e4c
 800dc98:	2400296c 	.word	0x2400296c
 800dc9c:	2400295c 	.word	0x2400295c
 800dca0:	24002970 	.word	0x24002970
 800dca4:	240029ec 	.word	0x240029ec

0800dca8 <prvDeleteTCB>:
	{
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dcac:	3054      	adds	r0, #84	@ 0x54
 800dcae:	f00f ff2f 	bl	801db10 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dcb2:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800dcb6:	b163      	cbz	r3, 800dcd2 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d011      	beq.n	800dce0 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d00e      	beq.n	800dcde <prvDeleteTCB+0x36>
 800dcc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	e7fe      	b.n	800dcd0 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800dcd2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dcd4:	f001 f978 	bl	800efc8 <vPortFree>
				vPortFree( pxTCB );
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f001 f975 	bl	800efc8 <vPortFree>
	}
 800dcde:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800dce0:	4620      	mov	r0, r4
 800dce2:	f001 f971 	bl	800efc8 <vPortFree>
 800dce6:	e7fa      	b.n	800dcde <prvDeleteTCB+0x36>

0800dce8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <prvCheckTasksWaitingTermination+0x40>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	b1d3      	cbz	r3, 800dd24 <prvCheckTasksWaitingTermination+0x3c>
{
 800dcee:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800dcf0:	f000 ff30 	bl	800eb54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcf4:	4b0d      	ldr	r3, [pc, #52]	@ (800dd2c <prvCheckTasksWaitingTermination+0x44>)
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcfa:	1d20      	adds	r0, r4, #4
 800dcfc:	f7ff f944 	bl	800cf88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd00:	4a0b      	ldr	r2, [pc, #44]	@ (800dd30 <prvCheckTasksWaitingTermination+0x48>)
 800dd02:	6813      	ldr	r3, [r2, #0]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd08:	4a07      	ldr	r2, [pc, #28]	@ (800dd28 <prvCheckTasksWaitingTermination+0x40>)
 800dd0a:	6813      	ldr	r3, [r2, #0]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800dd10:	f000 ff42 	bl	800eb98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7ff ffc7 	bl	800dca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd1a:	4b03      	ldr	r3, [pc, #12]	@ (800dd28 <prvCheckTasksWaitingTermination+0x40>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1e6      	bne.n	800dcf0 <prvCheckTasksWaitingTermination+0x8>
}
 800dd22:	bd10      	pop	{r4, pc}
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	24002990 	.word	0x24002990
 800dd2c:	24002994 	.word	0x24002994
 800dd30:	24002978 	.word	0x24002978

0800dd34 <prvIdleTask>:
{
 800dd34:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800dd36:	f7ff ffd7 	bl	800dce8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd3a:	4b07      	ldr	r3, [pc, #28]	@ (800dd58 <prvIdleTask+0x24>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d9f9      	bls.n	800dd36 <prvIdleTask+0x2>
				taskYIELD();
 800dd42:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	e7ee      	b.n	800dd36 <prvIdleTask+0x2>
 800dd58:	240029ec 	.word	0x240029ec

0800dd5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd62:	4b19      	ldr	r3, [pc, #100]	@ (800ddc8 <prvAddCurrentTaskToDelayedList+0x6c>)
 800dd64:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd66:	4b19      	ldr	r3, [pc, #100]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0x70>)
 800dd68:	6818      	ldr	r0, [r3, #0]
 800dd6a:	3004      	adds	r0, #4
 800dd6c:	f7ff f90c 	bl	800cf88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd70:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dd74:	bf14      	ite	ne
 800dd76:	2300      	movne	r3, #0
 800dd78:	2301      	moveq	r3, #1
 800dd7a:	2d00      	cmp	r5, #0
 800dd7c:	bf08      	it	eq
 800dd7e:	2300      	moveq	r3, #0
 800dd80:	b96b      	cbnz	r3, 800dd9e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd82:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd84:	4b11      	ldr	r3, [pc, #68]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0x70>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800dd8a:	42a6      	cmp	r6, r4
 800dd8c:	d90e      	bls.n	800ddac <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd8e:	4b10      	ldr	r3, [pc, #64]	@ (800ddd0 <prvAddCurrentTaskToDelayedList+0x74>)
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	4b0e      	ldr	r3, [pc, #56]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0x70>)
 800dd94:	6819      	ldr	r1, [r3, #0]
 800dd96:	3104      	adds	r1, #4
 800dd98:	f7ff f8dd 	bl	800cf56 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd9c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd9e:	4b0b      	ldr	r3, [pc, #44]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0x70>)
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	3104      	adds	r1, #4
 800dda4:	480b      	ldr	r0, [pc, #44]	@ (800ddd4 <prvAddCurrentTaskToDelayedList+0x78>)
 800dda6:	f7ff f8cb 	bl	800cf40 <vListInsertEnd>
 800ddaa:	e7f7      	b.n	800dd9c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddac:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd8 <prvAddCurrentTaskToDelayedList+0x7c>)
 800ddae:	6818      	ldr	r0, [r3, #0]
 800ddb0:	4b06      	ldr	r3, [pc, #24]	@ (800ddcc <prvAddCurrentTaskToDelayedList+0x70>)
 800ddb2:	6819      	ldr	r1, [r3, #0]
 800ddb4:	3104      	adds	r1, #4
 800ddb6:	f7ff f8ce 	bl	800cf56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ddba:	4b08      	ldr	r3, [pc, #32]	@ (800dddc <prvAddCurrentTaskToDelayedList+0x80>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	42a3      	cmp	r3, r4
 800ddc0:	d9ec      	bls.n	800dd9c <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 800ddc2:	4b06      	ldr	r3, [pc, #24]	@ (800dddc <prvAddCurrentTaskToDelayedList+0x80>)
 800ddc4:	601c      	str	r4, [r3, #0]
}
 800ddc6:	e7e9      	b.n	800dd9c <prvAddCurrentTaskToDelayedList+0x40>
 800ddc8:	24002974 	.word	0x24002974
 800ddcc:	24002e4c 	.word	0x24002e4c
 800ddd0:	240029bc 	.word	0x240029bc
 800ddd4:	2400297c 	.word	0x2400297c
 800ddd8:	240029c0 	.word	0x240029c0
 800dddc:	24002958 	.word	0x24002958

0800dde0 <xTaskCreateStatic>:
	{
 800dde0:	b530      	push	{r4, r5, lr}
 800dde2:	b087      	sub	sp, #28
 800dde4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800dde6:	b17c      	cbz	r4, 800de08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dde8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ddea:	b1b5      	cbz	r5, 800de1a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddec:	25a8      	movs	r5, #168	@ 0xa8
 800ddee:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddf0:	9d04      	ldr	r5, [sp, #16]
 800ddf2:	2da8      	cmp	r5, #168	@ 0xa8
 800ddf4:	d01a      	beq.n	800de2c <xTaskCreateStatic+0x4c>
 800ddf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfa:	f383 8811 	msr	BASEPRI, r3
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f3bf 8f4f 	dsb	sy
 800de06:	e7fe      	b.n	800de06 <xTaskCreateStatic+0x26>
 800de08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800de18:	e7fe      	b.n	800de18 <xTaskCreateStatic+0x38>
 800de1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800de2a:	e7fe      	b.n	800de2a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de2c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800de30:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de32:	2402      	movs	r4, #2
 800de34:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de38:	2400      	movs	r4, #0
 800de3a:	9403      	str	r4, [sp, #12]
 800de3c:	9502      	str	r5, [sp, #8]
 800de3e:	ac05      	add	r4, sp, #20
 800de40:	9401      	str	r4, [sp, #4]
 800de42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de44:	9400      	str	r4, [sp, #0]
 800de46:	f7ff fe43 	bl	800dad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de4a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800de4c:	f7ff fed6 	bl	800dbfc <prvAddNewTaskToReadyList>
	}
 800de50:	9805      	ldr	r0, [sp, #20]
 800de52:	b007      	add	sp, #28
 800de54:	bd30      	pop	{r4, r5, pc}

0800de56 <xTaskCreate>:
	{
 800de56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de5a:	b085      	sub	sp, #20
 800de5c:	4607      	mov	r7, r0
 800de5e:	4688      	mov	r8, r1
 800de60:	4614      	mov	r4, r2
 800de62:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de64:	0090      	lsls	r0, r2, #2
 800de66:	f001 f82d 	bl	800eec4 <pvPortMalloc>
			if( pxStack != NULL )
 800de6a:	b308      	cbz	r0, 800deb0 <xTaskCreate+0x5a>
 800de6c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de6e:	20a8      	movs	r0, #168	@ 0xa8
 800de70:	f001 f828 	bl	800eec4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800de74:	4605      	mov	r5, r0
 800de76:	b1a8      	cbz	r0, 800dea4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800de78:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de82:	9303      	str	r3, [sp, #12]
 800de84:	9002      	str	r0, [sp, #8]
 800de86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	4633      	mov	r3, r6
 800de90:	4622      	mov	r2, r4
 800de92:	4641      	mov	r1, r8
 800de94:	4638      	mov	r0, r7
 800de96:	f7ff fe1b 	bl	800dad0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de9a:	4628      	mov	r0, r5
 800de9c:	f7ff feae 	bl	800dbfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dea0:	2001      	movs	r0, #1
 800dea2:	e007      	b.n	800deb4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800dea4:	4648      	mov	r0, r9
 800dea6:	f001 f88f 	bl	800efc8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800deaa:	f04f 30ff 	mov.w	r0, #4294967295
 800deae:	e001      	b.n	800deb4 <xTaskCreate+0x5e>
 800deb0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800deb4:	b005      	add	sp, #20
 800deb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800debc <vTaskStartScheduler>:
{
 800debc:	b510      	push	{r4, lr}
 800debe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dec0:	2400      	movs	r4, #0
 800dec2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dec4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dec6:	aa07      	add	r2, sp, #28
 800dec8:	a906      	add	r1, sp, #24
 800deca:	a805      	add	r0, sp, #20
 800decc:	f7ff f812 	bl	800cef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ded0:	9b05      	ldr	r3, [sp, #20]
 800ded2:	9302      	str	r3, [sp, #8]
 800ded4:	9b06      	ldr	r3, [sp, #24]
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	9400      	str	r4, [sp, #0]
 800deda:	4623      	mov	r3, r4
 800dedc:	9a07      	ldr	r2, [sp, #28]
 800dede:	491a      	ldr	r1, [pc, #104]	@ (800df48 <vTaskStartScheduler+0x8c>)
 800dee0:	481a      	ldr	r0, [pc, #104]	@ (800df4c <vTaskStartScheduler+0x90>)
 800dee2:	f7ff ff7d 	bl	800dde0 <xTaskCreateStatic>
 800dee6:	4b1a      	ldr	r3, [pc, #104]	@ (800df50 <vTaskStartScheduler+0x94>)
 800dee8:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800deea:	b1e8      	cbz	r0, 800df28 <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 800deec:	f000 fc0a 	bl	800e704 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800def0:	2801      	cmp	r0, #1
 800def2:	d11a      	bne.n	800df2a <vTaskStartScheduler+0x6e>
 800def4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df04:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <vTaskStartScheduler+0x98>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3354      	adds	r3, #84	@ 0x54
 800df0a:	4a13      	ldr	r2, [pc, #76]	@ (800df58 <vTaskStartScheduler+0x9c>)
 800df0c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800df0e:	4b13      	ldr	r3, [pc, #76]	@ (800df5c <vTaskStartScheduler+0xa0>)
 800df10:	f04f 32ff 	mov.w	r2, #4294967295
 800df14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df16:	4b12      	ldr	r3, [pc, #72]	@ (800df60 <vTaskStartScheduler+0xa4>)
 800df18:	2201      	movs	r2, #1
 800df1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df1c:	4b11      	ldr	r3, [pc, #68]	@ (800df64 <vTaskStartScheduler+0xa8>)
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800df22:	f000 feb1 	bl	800ec88 <xPortStartScheduler>
 800df26:	e003      	b.n	800df30 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 800df28:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df2e:	d001      	beq.n	800df34 <vTaskStartScheduler+0x78>
}
 800df30:	b008      	add	sp, #32
 800df32:	bd10      	pop	{r4, pc}
 800df34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df44:	e7fe      	b.n	800df44 <vTaskStartScheduler+0x88>
 800df46:	bf00      	nop
 800df48:	0801df9c 	.word	0x0801df9c
 800df4c:	0800dd35 	.word	0x0800dd35
 800df50:	24002954 	.word	0x24002954
 800df54:	24002e4c 	.word	0x24002e4c
 800df58:	24000014 	.word	0x24000014
 800df5c:	24002958 	.word	0x24002958
 800df60:	2400296c 	.word	0x2400296c
 800df64:	24002974 	.word	0x24002974

0800df68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800df68:	4a02      	ldr	r2, [pc, #8]	@ (800df74 <vTaskSuspendAll+0xc>)
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	3301      	adds	r3, #1
 800df6e:	6013      	str	r3, [r2, #0]
}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	24002950 	.word	0x24002950

0800df78 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800df78:	4b01      	ldr	r3, [pc, #4]	@ (800df80 <xTaskGetTickCount+0x8>)
 800df7a:	6818      	ldr	r0, [r3, #0]
}
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	24002974 	.word	0x24002974

0800df84 <xTaskIncrementTick>:
{
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df86:	4b3a      	ldr	r3, [pc, #232]	@ (800e070 <xTaskIncrementTick+0xec>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d169      	bne.n	800e062 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df8e:	4b39      	ldr	r3, [pc, #228]	@ (800e074 <xTaskIncrementTick+0xf0>)
 800df90:	681d      	ldr	r5, [r3, #0]
 800df92:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800df94:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df96:	b9c5      	cbnz	r5, 800dfca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800df98:	4b37      	ldr	r3, [pc, #220]	@ (800e078 <xTaskIncrementTick+0xf4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	b143      	cbz	r3, 800dfb2 <xTaskIncrementTick+0x2e>
 800dfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa4:	f383 8811 	msr	BASEPRI, r3
 800dfa8:	f3bf 8f6f 	isb	sy
 800dfac:	f3bf 8f4f 	dsb	sy
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskIncrementTick+0x2c>
 800dfb2:	4a31      	ldr	r2, [pc, #196]	@ (800e078 <xTaskIncrementTick+0xf4>)
 800dfb4:	6811      	ldr	r1, [r2, #0]
 800dfb6:	4b31      	ldr	r3, [pc, #196]	@ (800e07c <xTaskIncrementTick+0xf8>)
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	6010      	str	r0, [r2, #0]
 800dfbc:	6019      	str	r1, [r3, #0]
 800dfbe:	4a30      	ldr	r2, [pc, #192]	@ (800e080 <xTaskIncrementTick+0xfc>)
 800dfc0:	6813      	ldr	r3, [r2, #0]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	f7ff fd6d 	bl	800daa4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfca:	4b2e      	ldr	r3, [pc, #184]	@ (800e084 <xTaskIncrementTick+0x100>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	d93d      	bls.n	800e04e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800dfd2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfd4:	4b2c      	ldr	r3, [pc, #176]	@ (800e088 <xTaskIncrementTick+0x104>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dfde:	009a      	lsls	r2, r3, #2
 800dfe0:	4b2a      	ldr	r3, [pc, #168]	@ (800e08c <xTaskIncrementTick+0x108>)
 800dfe2:	589b      	ldr	r3, [r3, r2]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d900      	bls.n	800dfea <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800dfe8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800dfea:	4b29      	ldr	r3, [pc, #164]	@ (800e090 <xTaskIncrementTick+0x10c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d03c      	beq.n	800e06c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800dff2:	2701      	movs	r7, #1
	return xSwitchRequired;
 800dff4:	e03a      	b.n	800e06c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800dff6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dff8:	4b1f      	ldr	r3, [pc, #124]	@ (800e078 <xTaskIncrementTick+0xf4>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	b343      	cbz	r3, 800e052 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e000:	4b1d      	ldr	r3, [pc, #116]	@ (800e078 <xTaskIncrementTick+0xf4>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e008:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800e00a:	429d      	cmp	r5, r3
 800e00c:	d326      	bcc.n	800e05c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e00e:	1d26      	adds	r6, r4, #4
 800e010:	4630      	mov	r0, r6
 800e012:	f7fe ffb9 	bl	800cf88 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e016:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e018:	b11b      	cbz	r3, 800e022 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e01a:	f104 0018 	add.w	r0, r4, #24
 800e01e:	f7fe ffb3 	bl	800cf88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e022:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e024:	4a1b      	ldr	r2, [pc, #108]	@ (800e094 <xTaskIncrementTick+0x110>)
 800e026:	6812      	ldr	r2, [r2, #0]
 800e028:	4293      	cmp	r3, r2
 800e02a:	d901      	bls.n	800e030 <xTaskIncrementTick+0xac>
 800e02c:	4a19      	ldr	r2, [pc, #100]	@ (800e094 <xTaskIncrementTick+0x110>)
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e034:	009a      	lsls	r2, r3, #2
 800e036:	4631      	mov	r1, r6
 800e038:	4814      	ldr	r0, [pc, #80]	@ (800e08c <xTaskIncrementTick+0x108>)
 800e03a:	4410      	add	r0, r2
 800e03c:	f7fe ff80 	bl	800cf40 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e040:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e042:	4b11      	ldr	r3, [pc, #68]	@ (800e088 <xTaskIncrementTick+0x104>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d2d4      	bcs.n	800dff6 <xTaskIncrementTick+0x72>
 800e04c:	e7d4      	b.n	800dff8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800e04e:	2700      	movs	r7, #0
 800e050:	e7d2      	b.n	800dff8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e052:	4b0c      	ldr	r3, [pc, #48]	@ (800e084 <xTaskIncrementTick+0x100>)
 800e054:	f04f 32ff 	mov.w	r2, #4294967295
 800e058:	601a      	str	r2, [r3, #0]
					break;
 800e05a:	e7bb      	b.n	800dfd4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800e05c:	4a09      	ldr	r2, [pc, #36]	@ (800e084 <xTaskIncrementTick+0x100>)
 800e05e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e060:	e7b8      	b.n	800dfd4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800e062:	4a0d      	ldr	r2, [pc, #52]	@ (800e098 <xTaskIncrementTick+0x114>)
 800e064:	6813      	ldr	r3, [r2, #0]
 800e066:	3301      	adds	r3, #1
 800e068:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800e06a:	2700      	movs	r7, #0
}
 800e06c:	4638      	mov	r0, r7
 800e06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e070:	24002950 	.word	0x24002950
 800e074:	24002974 	.word	0x24002974
 800e078:	240029c0 	.word	0x240029c0
 800e07c:	240029bc 	.word	0x240029bc
 800e080:	24002960 	.word	0x24002960
 800e084:	24002958 	.word	0x24002958
 800e088:	24002e4c 	.word	0x24002e4c
 800e08c:	240029ec 	.word	0x240029ec
 800e090:	24002964 	.word	0x24002964
 800e094:	24002970 	.word	0x24002970
 800e098:	24002968 	.word	0x24002968

0800e09c <xTaskResumeAll>:
{
 800e09c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800e09e:	4b35      	ldr	r3, [pc, #212]	@ (800e174 <xTaskResumeAll+0xd8>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	b943      	cbnz	r3, 800e0b6 <xTaskResumeAll+0x1a>
 800e0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a8:	f383 8811 	msr	BASEPRI, r3
 800e0ac:	f3bf 8f6f 	isb	sy
 800e0b0:	f3bf 8f4f 	dsb	sy
 800e0b4:	e7fe      	b.n	800e0b4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800e0b6:	f000 fd4d 	bl	800eb54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e0ba:	4b2e      	ldr	r3, [pc, #184]	@ (800e174 <xTaskResumeAll+0xd8>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	3a01      	subs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d14f      	bne.n	800e168 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0c8:	4b2b      	ldr	r3, [pc, #172]	@ (800e178 <xTaskResumeAll+0xdc>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	b90b      	cbnz	r3, 800e0d2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e0ce:	2400      	movs	r4, #0
 800e0d0:	e04b      	b.n	800e16a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800e0d2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d4:	4b29      	ldr	r3, [pc, #164]	@ (800e17c <xTaskResumeAll+0xe0>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	b31b      	cbz	r3, 800e122 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0da:	4b28      	ldr	r3, [pc, #160]	@ (800e17c <xTaskResumeAll+0xe0>)
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0e0:	f104 0018 	add.w	r0, r4, #24
 800e0e4:	f7fe ff50 	bl	800cf88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0e8:	1d25      	adds	r5, r4, #4
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f7fe ff4c 	bl	800cf88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0f0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e0f2:	4b23      	ldr	r3, [pc, #140]	@ (800e180 <xTaskResumeAll+0xe4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4298      	cmp	r0, r3
 800e0f8:	d901      	bls.n	800e0fe <xTaskResumeAll+0x62>
 800e0fa:	4b21      	ldr	r3, [pc, #132]	@ (800e180 <xTaskResumeAll+0xe4>)
 800e0fc:	6018      	str	r0, [r3, #0]
 800e0fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e102:	4629      	mov	r1, r5
 800e104:	4b1f      	ldr	r3, [pc, #124]	@ (800e184 <xTaskResumeAll+0xe8>)
 800e106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e10a:	f7fe ff19 	bl	800cf40 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e10e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e110:	4b1d      	ldr	r3, [pc, #116]	@ (800e188 <xTaskResumeAll+0xec>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e116:	429a      	cmp	r2, r3
 800e118:	d3dc      	bcc.n	800e0d4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800e11a:	4b1c      	ldr	r3, [pc, #112]	@ (800e18c <xTaskResumeAll+0xf0>)
 800e11c:	2201      	movs	r2, #1
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	e7d8      	b.n	800e0d4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800e122:	b10c      	cbz	r4, 800e128 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800e124:	f7ff fcbe 	bl	800daa4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e128:	4b19      	ldr	r3, [pc, #100]	@ (800e190 <xTaskResumeAll+0xf4>)
 800e12a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e12c:	b984      	cbnz	r4, 800e150 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800e12e:	4b17      	ldr	r3, [pc, #92]	@ (800e18c <xTaskResumeAll+0xf0>)
 800e130:	681c      	ldr	r4, [r3, #0]
 800e132:	b1d4      	cbz	r4, 800e16a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800e134:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e13c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e148:	2401      	movs	r4, #1
 800e14a:	e00e      	b.n	800e16a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e14c:	3c01      	subs	r4, #1
 800e14e:	d007      	beq.n	800e160 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800e150:	f7ff ff18 	bl	800df84 <xTaskIncrementTick>
 800e154:	2800      	cmp	r0, #0
 800e156:	d0f9      	beq.n	800e14c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800e158:	4b0c      	ldr	r3, [pc, #48]	@ (800e18c <xTaskResumeAll+0xf0>)
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e7f5      	b.n	800e14c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800e160:	4b0b      	ldr	r3, [pc, #44]	@ (800e190 <xTaskResumeAll+0xf4>)
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	e7e2      	b.n	800e12e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800e168:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e16a:	f000 fd15 	bl	800eb98 <vPortExitCritical>
}
 800e16e:	4620      	mov	r0, r4
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	bf00      	nop
 800e174:	24002950 	.word	0x24002950
 800e178:	24002978 	.word	0x24002978
 800e17c:	240029a8 	.word	0x240029a8
 800e180:	24002970 	.word	0x24002970
 800e184:	240029ec 	.word	0x240029ec
 800e188:	24002e4c 	.word	0x24002e4c
 800e18c:	24002964 	.word	0x24002964
 800e190:	24002968 	.word	0x24002968

0800e194 <vTaskDelay>:
	{
 800e194:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e196:	b1a8      	cbz	r0, 800e1c4 <vTaskDelay+0x30>
 800e198:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800e19a:	4b10      	ldr	r3, [pc, #64]	@ (800e1dc <vTaskDelay+0x48>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	b143      	cbz	r3, 800e1b2 <vTaskDelay+0x1e>
 800e1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	e7fe      	b.n	800e1b0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800e1b2:	f7ff fed9 	bl	800df68 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f7ff fdcf 	bl	800dd5c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e1be:	f7ff ff6d 	bl	800e09c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e1c2:	b948      	cbnz	r0, 800e1d8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800e1c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e1c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	f3bf 8f6f 	isb	sy
	}
 800e1d8:	bd10      	pop	{r4, pc}
 800e1da:	bf00      	nop
 800e1dc:	24002950 	.word	0x24002950

0800e1e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1e0:	4b22      	ldr	r3, [pc, #136]	@ (800e26c <vTaskSwitchContext+0x8c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	b11b      	cbz	r3, 800e1ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800e1e6:	4b22      	ldr	r3, [pc, #136]	@ (800e270 <vTaskSwitchContext+0x90>)
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	601a      	str	r2, [r3, #0]
 800e1ec:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800e1ee:	4b20      	ldr	r3, [pc, #128]	@ (800e270 <vTaskSwitchContext+0x90>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f4:	4b1f      	ldr	r3, [pc, #124]	@ (800e274 <vTaskSwitchContext+0x94>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800e1fc:	008a      	lsls	r2, r1, #2
 800e1fe:	491e      	ldr	r1, [pc, #120]	@ (800e278 <vTaskSwitchContext+0x98>)
 800e200:	588a      	ldr	r2, [r1, r2]
 800e202:	b95a      	cbnz	r2, 800e21c <vTaskSwitchContext+0x3c>
 800e204:	b10b      	cbz	r3, 800e20a <vTaskSwitchContext+0x2a>
 800e206:	3b01      	subs	r3, #1
 800e208:	e7f6      	b.n	800e1f8 <vTaskSwitchContext+0x18>
 800e20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	e7fe      	b.n	800e21a <vTaskSwitchContext+0x3a>
 800e21c:	4608      	mov	r0, r1
 800e21e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800e222:	008a      	lsls	r2, r1, #2
 800e224:	4402      	add	r2, r0
 800e226:	6851      	ldr	r1, [r2, #4]
 800e228:	6849      	ldr	r1, [r1, #4]
 800e22a:	6051      	str	r1, [r2, #4]
 800e22c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800e230:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800e234:	3208      	adds	r2, #8
 800e236:	4402      	add	r2, r0
 800e238:	4291      	cmp	r1, r2
 800e23a:	d00f      	beq.n	800e25c <vTaskSwitchContext+0x7c>
 800e23c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800e240:	0091      	lsls	r1, r2, #2
 800e242:	4a0d      	ldr	r2, [pc, #52]	@ (800e278 <vTaskSwitchContext+0x98>)
 800e244:	440a      	add	r2, r1
 800e246:	6852      	ldr	r2, [r2, #4]
 800e248:	68d1      	ldr	r1, [r2, #12]
 800e24a:	4a0c      	ldr	r2, [pc, #48]	@ (800e27c <vTaskSwitchContext+0x9c>)
 800e24c:	6011      	str	r1, [r2, #0]
 800e24e:	4909      	ldr	r1, [pc, #36]	@ (800e274 <vTaskSwitchContext+0x94>)
 800e250:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e252:	6813      	ldr	r3, [r2, #0]
 800e254:	3354      	adds	r3, #84	@ 0x54
 800e256:	4a0a      	ldr	r2, [pc, #40]	@ (800e280 <vTaskSwitchContext+0xa0>)
 800e258:	6013      	str	r3, [r2, #0]
}
 800e25a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e25c:	6848      	ldr	r0, [r1, #4]
 800e25e:	4662      	mov	r2, ip
 800e260:	0091      	lsls	r1, r2, #2
 800e262:	4a05      	ldr	r2, [pc, #20]	@ (800e278 <vTaskSwitchContext+0x98>)
 800e264:	440a      	add	r2, r1
 800e266:	6050      	str	r0, [r2, #4]
 800e268:	e7e8      	b.n	800e23c <vTaskSwitchContext+0x5c>
 800e26a:	bf00      	nop
 800e26c:	24002950 	.word	0x24002950
 800e270:	24002964 	.word	0x24002964
 800e274:	24002970 	.word	0x24002970
 800e278:	240029ec 	.word	0x240029ec
 800e27c:	24002e4c 	.word	0x24002e4c
 800e280:	24000014 	.word	0x24000014

0800e284 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800e284:	b158      	cbz	r0, 800e29e <vTaskPlaceOnEventList+0x1a>
{
 800e286:	b510      	push	{r4, lr}
 800e288:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e28a:	4a09      	ldr	r2, [pc, #36]	@ (800e2b0 <vTaskPlaceOnEventList+0x2c>)
 800e28c:	6811      	ldr	r1, [r2, #0]
 800e28e:	3118      	adds	r1, #24
 800e290:	f7fe fe61 	bl	800cf56 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e294:	2101      	movs	r1, #1
 800e296:	4620      	mov	r0, r4
 800e298:	f7ff fd60 	bl	800dd5c <prvAddCurrentTaskToDelayedList>
}
 800e29c:	bd10      	pop	{r4, pc}
 800e29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800e2ae:	e7fe      	b.n	800e2ae <vTaskPlaceOnEventList+0x2a>
 800e2b0:	24002e4c 	.word	0x24002e4c

0800e2b4 <vTaskPlaceOnEventListRestricted>:
	{
 800e2b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800e2b6:	b170      	cbz	r0, 800e2d6 <vTaskPlaceOnEventListRestricted+0x22>
 800e2b8:	460d      	mov	r5, r1
 800e2ba:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e2e8 <vTaskPlaceOnEventListRestricted+0x34>)
 800e2be:	6811      	ldr	r1, [r2, #0]
 800e2c0:	3118      	adds	r1, #24
 800e2c2:	f7fe fe3d 	bl	800cf40 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800e2c6:	b10c      	cbz	r4, 800e2cc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800e2c8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff fd44 	bl	800dd5c <prvAddCurrentTaskToDelayedList>
	}
 800e2d4:	bd38      	pop	{r3, r4, r5, pc}
 800e2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800e2e6:	e7fe      	b.n	800e2e6 <vTaskPlaceOnEventListRestricted+0x32>
 800e2e8:	24002e4c 	.word	0x24002e4c

0800e2ec <xTaskRemoveFromEventList>:
{
 800e2ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ee:	68c3      	ldr	r3, [r0, #12]
 800e2f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e2f2:	b324      	cbz	r4, 800e33e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e2f4:	f104 0518 	add.w	r5, r4, #24
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7fe fe45 	bl	800cf88 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2fe:	4b18      	ldr	r3, [pc, #96]	@ (800e360 <xTaskRemoveFromEventList+0x74>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	bb2b      	cbnz	r3, 800e350 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e304:	1d25      	adds	r5, r4, #4
 800e306:	4628      	mov	r0, r5
 800e308:	f7fe fe3e 	bl	800cf88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e30c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e30e:	4b15      	ldr	r3, [pc, #84]	@ (800e364 <xTaskRemoveFromEventList+0x78>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4298      	cmp	r0, r3
 800e314:	d901      	bls.n	800e31a <xTaskRemoveFromEventList+0x2e>
 800e316:	4b13      	ldr	r3, [pc, #76]	@ (800e364 <xTaskRemoveFromEventList+0x78>)
 800e318:	6018      	str	r0, [r3, #0]
 800e31a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e31e:	4629      	mov	r1, r5
 800e320:	4b11      	ldr	r3, [pc, #68]	@ (800e368 <xTaskRemoveFromEventList+0x7c>)
 800e322:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e326:	f7fe fe0b 	bl	800cf40 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e32a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e32c:	4b0f      	ldr	r3, [pc, #60]	@ (800e36c <xTaskRemoveFromEventList+0x80>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e332:	429a      	cmp	r2, r3
 800e334:	d911      	bls.n	800e35a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800e336:	2001      	movs	r0, #1
 800e338:	4b0d      	ldr	r3, [pc, #52]	@ (800e370 <xTaskRemoveFromEventList+0x84>)
 800e33a:	6018      	str	r0, [r3, #0]
}
 800e33c:	bd38      	pop	{r3, r4, r5, pc}
 800e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800e34e:	e7fe      	b.n	800e34e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e350:	4629      	mov	r1, r5
 800e352:	4808      	ldr	r0, [pc, #32]	@ (800e374 <xTaskRemoveFromEventList+0x88>)
 800e354:	f7fe fdf4 	bl	800cf40 <vListInsertEnd>
 800e358:	e7e7      	b.n	800e32a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800e35a:	2000      	movs	r0, #0
	return xReturn;
 800e35c:	e7ee      	b.n	800e33c <xTaskRemoveFromEventList+0x50>
 800e35e:	bf00      	nop
 800e360:	24002950 	.word	0x24002950
 800e364:	24002970 	.word	0x24002970
 800e368:	240029ec 	.word	0x240029ec
 800e36c:	24002e4c 	.word	0x24002e4c
 800e370:	24002964 	.word	0x24002964
 800e374:	240029a8 	.word	0x240029a8

0800e378 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e378:	4b03      	ldr	r3, [pc, #12]	@ (800e388 <vTaskInternalSetTimeOutState+0x10>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e37e:	4b03      	ldr	r3, [pc, #12]	@ (800e38c <vTaskInternalSetTimeOutState+0x14>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6043      	str	r3, [r0, #4]
}
 800e384:	4770      	bx	lr
 800e386:	bf00      	nop
 800e388:	24002960 	.word	0x24002960
 800e38c:	24002974 	.word	0x24002974

0800e390 <xTaskCheckForTimeOut>:
{
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800e392:	b1c8      	cbz	r0, 800e3c8 <xTaskCheckForTimeOut+0x38>
 800e394:	460c      	mov	r4, r1
 800e396:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800e398:	b1f9      	cbz	r1, 800e3da <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800e39a:	f000 fbdb 	bl	800eb54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e39e:	4b1b      	ldr	r3, [pc, #108]	@ (800e40c <xTaskCheckForTimeOut+0x7c>)
 800e3a0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e3a2:	686b      	ldr	r3, [r5, #4]
 800e3a4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800e3a6:	6822      	ldr	r2, [r4, #0]
 800e3a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3ac:	d026      	beq.n	800e3fc <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e3ae:	4e18      	ldr	r6, [pc, #96]	@ (800e410 <xTaskCheckForTimeOut+0x80>)
 800e3b0:	6836      	ldr	r6, [r6, #0]
 800e3b2:	682f      	ldr	r7, [r5, #0]
 800e3b4:	42b7      	cmp	r7, r6
 800e3b6:	d001      	beq.n	800e3bc <xTaskCheckForTimeOut+0x2c>
 800e3b8:	428b      	cmp	r3, r1
 800e3ba:	d924      	bls.n	800e406 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e3bc:	4282      	cmp	r2, r0
 800e3be:	d815      	bhi.n	800e3ec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e3c4:	2401      	movs	r4, #1
 800e3c6:	e01a      	b.n	800e3fe <xTaskCheckForTimeOut+0x6e>
 800e3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800e3d8:	e7fe      	b.n	800e3d8 <xTaskCheckForTimeOut+0x48>
 800e3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800e3ea:	e7fe      	b.n	800e3ea <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800e3ec:	1a5b      	subs	r3, r3, r1
 800e3ee:	4413      	add	r3, r2
 800e3f0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f7ff ffc0 	bl	800e378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e3f8:	2400      	movs	r4, #0
 800e3fa:	e000      	b.n	800e3fe <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800e3fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e3fe:	f000 fbcb 	bl	800eb98 <vPortExitCritical>
}
 800e402:	4620      	mov	r0, r4
 800e404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 800e406:	2401      	movs	r4, #1
 800e408:	e7f9      	b.n	800e3fe <xTaskCheckForTimeOut+0x6e>
 800e40a:	bf00      	nop
 800e40c:	24002974 	.word	0x24002974
 800e410:	24002960 	.word	0x24002960

0800e414 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e414:	4b01      	ldr	r3, [pc, #4]	@ (800e41c <vTaskMissedYield+0x8>)
 800e416:	2201      	movs	r2, #1
 800e418:	601a      	str	r2, [r3, #0]
}
 800e41a:	4770      	bx	lr
 800e41c:	24002964 	.word	0x24002964

0800e420 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e420:	4b05      	ldr	r3, [pc, #20]	@ (800e438 <xTaskGetSchedulerState+0x18>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	b133      	cbz	r3, 800e434 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e426:	4b05      	ldr	r3, [pc, #20]	@ (800e43c <xTaskGetSchedulerState+0x1c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	b10b      	cbz	r3, 800e430 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800e42c:	2000      	movs	r0, #0
	}
 800e42e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800e430:	2002      	movs	r0, #2
 800e432:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e434:	2001      	movs	r0, #1
 800e436:	4770      	bx	lr
 800e438:	2400296c 	.word	0x2400296c
 800e43c:	24002950 	.word	0x24002950

0800e440 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800e440:	2800      	cmp	r0, #0
 800e442:	d03e      	beq.n	800e4c2 <xTaskPriorityInherit+0x82>
	{
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e448:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e44a:	4a20      	ldr	r2, [pc, #128]	@ (800e4cc <xTaskPriorityInherit+0x8c>)
 800e44c:	6812      	ldr	r2, [r2, #0]
 800e44e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e450:	4293      	cmp	r3, r2
 800e452:	d22e      	bcs.n	800e4b2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e454:	6982      	ldr	r2, [r0, #24]
 800e456:	2a00      	cmp	r2, #0
 800e458:	db05      	blt.n	800e466 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e45a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4cc <xTaskPriorityInherit+0x8c>)
 800e45c:	6812      	ldr	r2, [r2, #0]
 800e45e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e460:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e464:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e466:	6961      	ldr	r1, [r4, #20]
 800e468:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e46c:	4a18      	ldr	r2, [pc, #96]	@ (800e4d0 <xTaskPriorityInherit+0x90>)
 800e46e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e472:	4299      	cmp	r1, r3
 800e474:	d005      	beq.n	800e482 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e476:	4b15      	ldr	r3, [pc, #84]	@ (800e4cc <xTaskPriorityInherit+0x8c>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800e47e:	2001      	movs	r0, #1
	}
 800e480:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e482:	1d25      	adds	r5, r4, #4
 800e484:	4628      	mov	r0, r5
 800e486:	f7fe fd7f 	bl	800cf88 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e48a:	4b10      	ldr	r3, [pc, #64]	@ (800e4cc <xTaskPriorityInherit+0x8c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e490:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e492:	4b10      	ldr	r3, [pc, #64]	@ (800e4d4 <xTaskPriorityInherit+0x94>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4298      	cmp	r0, r3
 800e498:	d901      	bls.n	800e49e <xTaskPriorityInherit+0x5e>
 800e49a:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d4 <xTaskPriorityInherit+0x94>)
 800e49c:	6018      	str	r0, [r3, #0]
 800e49e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d0 <xTaskPriorityInherit+0x90>)
 800e4a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4aa:	f7fe fd49 	bl	800cf40 <vListInsertEnd>
				xReturn = pdTRUE;
 800e4ae:	2001      	movs	r0, #1
 800e4b0:	e7e6      	b.n	800e480 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4b2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e4b4:	4b05      	ldr	r3, [pc, #20]	@ (800e4cc <xTaskPriorityInherit+0x8c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d303      	bcc.n	800e4c6 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800e4be:	2000      	movs	r0, #0
 800e4c0:	e7de      	b.n	800e480 <xTaskPriorityInherit+0x40>
 800e4c2:	2000      	movs	r0, #0
	}
 800e4c4:	4770      	bx	lr
					xReturn = pdTRUE;
 800e4c6:	2001      	movs	r0, #1
		return xReturn;
 800e4c8:	e7da      	b.n	800e480 <xTaskPriorityInherit+0x40>
 800e4ca:	bf00      	nop
 800e4cc:	24002e4c 	.word	0x24002e4c
 800e4d0:	240029ec 	.word	0x240029ec
 800e4d4:	24002970 	.word	0x24002970

0800e4d8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d03b      	beq.n	800e554 <xTaskPriorityDisinherit+0x7c>
	{
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800e4e0:	4b1e      	ldr	r3, [pc, #120]	@ (800e55c <xTaskPriorityDisinherit+0x84>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4283      	cmp	r3, r0
 800e4e6:	d008      	beq.n	800e4fa <xTaskPriorityDisinherit+0x22>
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	e7fe      	b.n	800e4f8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4fa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e4fc:	b943      	cbnz	r3, 800e510 <xTaskPriorityDisinherit+0x38>
 800e4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	e7fe      	b.n	800e50e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800e510:	3b01      	subs	r3, #1
 800e512:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e514:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e516:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e518:	4291      	cmp	r1, r2
 800e51a:	d01d      	beq.n	800e558 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e51c:	b10b      	cbz	r3, 800e522 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800e51e:	2000      	movs	r0, #0
	}
 800e520:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e522:	1d05      	adds	r5, r0, #4
 800e524:	4628      	mov	r0, r5
 800e526:	f7fe fd2f 	bl	800cf88 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e52a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e52c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e52e:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800e532:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e534:	4b0a      	ldr	r3, [pc, #40]	@ (800e560 <xTaskPriorityDisinherit+0x88>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4298      	cmp	r0, r3
 800e53a:	d901      	bls.n	800e540 <xTaskPriorityDisinherit+0x68>
 800e53c:	4b08      	ldr	r3, [pc, #32]	@ (800e560 <xTaskPriorityDisinherit+0x88>)
 800e53e:	6018      	str	r0, [r3, #0]
 800e540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e544:	4629      	mov	r1, r5
 800e546:	4b07      	ldr	r3, [pc, #28]	@ (800e564 <xTaskPriorityDisinherit+0x8c>)
 800e548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e54c:	f7fe fcf8 	bl	800cf40 <vListInsertEnd>
					xReturn = pdTRUE;
 800e550:	2001      	movs	r0, #1
 800e552:	e7e5      	b.n	800e520 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800e554:	2000      	movs	r0, #0
	}
 800e556:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800e558:	2000      	movs	r0, #0
 800e55a:	e7e1      	b.n	800e520 <xTaskPriorityDisinherit+0x48>
 800e55c:	24002e4c 	.word	0x24002e4c
 800e560:	24002970 	.word	0x24002970
 800e564:	240029ec 	.word	0x240029ec

0800e568 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800e568:	2800      	cmp	r0, #0
 800e56a:	d046      	beq.n	800e5fa <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800e56c:	b538      	push	{r3, r4, r5, lr}
 800e56e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800e570:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800e572:	b943      	cbnz	r3, 800e586 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	e7fe      	b.n	800e584 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e586:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800e588:	428a      	cmp	r2, r1
 800e58a:	d200      	bcs.n	800e58e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e58c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e58e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e590:	4291      	cmp	r1, r2
 800e592:	d001      	beq.n	800e598 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e594:	2b01      	cmp	r3, #1
 800e596:	d000      	beq.n	800e59a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800e598:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800e59a:	4b18      	ldr	r3, [pc, #96]	@ (800e5fc <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	42a3      	cmp	r3, r4
 800e5a0:	d022      	beq.n	800e5e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800e5a2:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5a4:	69a3      	ldr	r3, [r4, #24]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	db02      	blt.n	800e5b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5aa:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e5ae:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5b0:	6962      	ldr	r2, [r4, #20]
 800e5b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800e5b6:	4b12      	ldr	r3, [pc, #72]	@ (800e600 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e5b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d1eb      	bne.n	800e598 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5c0:	1d25      	adds	r5, r4, #4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f7fe fce0 	bl	800cf88 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e5c8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e5ca:	4b0e      	ldr	r3, [pc, #56]	@ (800e604 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4298      	cmp	r0, r3
 800e5d0:	d901      	bls.n	800e5d6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800e5d4:	6018      	str	r0, [r3, #0]
 800e5d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800e5da:	4629      	mov	r1, r5
 800e5dc:	4b08      	ldr	r3, [pc, #32]	@ (800e600 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e5de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e5e2:	f7fe fcad 	bl	800cf40 <vListInsertEnd>
	}
 800e5e6:	e7d7      	b.n	800e598 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800e5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ec:	f383 8811 	msr	BASEPRI, r3
 800e5f0:	f3bf 8f6f 	isb	sy
 800e5f4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800e5f8:	e7fe      	b.n	800e5f8 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800e5fa:	4770      	bx	lr
 800e5fc:	24002e4c 	.word	0x24002e4c
 800e600:	240029ec 	.word	0x240029ec
 800e604:	24002970 	.word	0x24002970

0800e608 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e608:	4b05      	ldr	r3, [pc, #20]	@ (800e620 <pvTaskIncrementMutexHeldCount+0x18>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	b123      	cbz	r3, 800e618 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e60e:	4b04      	ldr	r3, [pc, #16]	@ (800e620 <pvTaskIncrementMutexHeldCount+0x18>)
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800e614:	3301      	adds	r3, #1
 800e616:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800e618:	4b01      	ldr	r3, [pc, #4]	@ (800e620 <pvTaskIncrementMutexHeldCount+0x18>)
 800e61a:	6818      	ldr	r0, [r3, #0]
	}
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	24002e4c 	.word	0x24002e4c

0800e624 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e624:	4b06      	ldr	r3, [pc, #24]	@ (800e640 <prvGetNextExpireTime+0x1c>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	6813      	ldr	r3, [r2, #0]
 800e62a:	b92b      	cbnz	r3, 800e638 <prvGetNextExpireTime+0x14>
 800e62c:	2301      	movs	r3, #1
 800e62e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e630:	b923      	cbnz	r3, 800e63c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e632:	68d3      	ldr	r3, [r2, #12]
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e638:	2300      	movs	r3, #0
 800e63a:	e7f8      	b.n	800e62e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e63c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800e63e:	4770      	bx	lr
 800e640:	24002f50 	.word	0x24002f50

0800e644 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e644:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e646:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e648:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e64a:	4291      	cmp	r1, r2
 800e64c:	d80c      	bhi.n	800e668 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e64e:	1ad2      	subs	r2, r2, r3
 800e650:	6983      	ldr	r3, [r0, #24]
 800e652:	429a      	cmp	r2, r3
 800e654:	d301      	bcc.n	800e65a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e656:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800e658:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e65a:	1d01      	adds	r1, r0, #4
 800e65c:	4b0b      	ldr	r3, [pc, #44]	@ (800e68c <prvInsertTimerInActiveList+0x48>)
 800e65e:	6818      	ldr	r0, [r3, #0]
 800e660:	f7fe fc79 	bl	800cf56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e664:	2000      	movs	r0, #0
 800e666:	e7f7      	b.n	800e658 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e668:	429a      	cmp	r2, r3
 800e66a:	bf2c      	ite	cs
 800e66c:	2200      	movcs	r2, #0
 800e66e:	2201      	movcc	r2, #1
 800e670:	4299      	cmp	r1, r3
 800e672:	bf38      	it	cc
 800e674:	2200      	movcc	r2, #0
 800e676:	b10a      	cbz	r2, 800e67c <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800e678:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e67a:	e7ed      	b.n	800e658 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e67c:	1d01      	adds	r1, r0, #4
 800e67e:	4b04      	ldr	r3, [pc, #16]	@ (800e690 <prvInsertTimerInActiveList+0x4c>)
 800e680:	6818      	ldr	r0, [r3, #0]
 800e682:	f7fe fc68 	bl	800cf56 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e686:	2000      	movs	r0, #0
 800e688:	e7e6      	b.n	800e658 <prvInsertTimerInActiveList+0x14>
 800e68a:	bf00      	nop
 800e68c:	24002f4c 	.word	0x24002f4c
 800e690:	24002f50 	.word	0x24002f50

0800e694 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e694:	b530      	push	{r4, r5, lr}
 800e696:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e698:	f000 fa5c 	bl	800eb54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e69c:	4b11      	ldr	r3, [pc, #68]	@ (800e6e4 <prvCheckForValidListAndQueue+0x50>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	b11b      	cbz	r3, 800e6aa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6a2:	f000 fa79 	bl	800eb98 <vPortExitCritical>
}
 800e6a6:	b003      	add	sp, #12
 800e6a8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800e6aa:	4d0f      	ldr	r5, [pc, #60]	@ (800e6e8 <prvCheckForValidListAndQueue+0x54>)
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f7fe fc39 	bl	800cf24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6b2:	4c0e      	ldr	r4, [pc, #56]	@ (800e6ec <prvCheckForValidListAndQueue+0x58>)
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f7fe fc35 	bl	800cf24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e6f0 <prvCheckForValidListAndQueue+0x5c>)
 800e6bc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6be:	4b0d      	ldr	r3, [pc, #52]	@ (800e6f4 <prvCheckForValidListAndQueue+0x60>)
 800e6c0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6f8 <prvCheckForValidListAndQueue+0x64>)
 800e6c8:	4a0c      	ldr	r2, [pc, #48]	@ (800e6fc <prvCheckForValidListAndQueue+0x68>)
 800e6ca:	2110      	movs	r1, #16
 800e6cc:	200a      	movs	r0, #10
 800e6ce:	f7fe fd69 	bl	800d1a4 <xQueueGenericCreateStatic>
 800e6d2:	4b04      	ldr	r3, [pc, #16]	@ (800e6e4 <prvCheckForValidListAndQueue+0x50>)
 800e6d4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d0e3      	beq.n	800e6a2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6da:	4909      	ldr	r1, [pc, #36]	@ (800e700 <prvCheckForValidListAndQueue+0x6c>)
 800e6dc:	f7ff f978 	bl	800d9d0 <vQueueAddToRegistry>
 800e6e0:	e7df      	b.n	800e6a2 <prvCheckForValidListAndQueue+0xe>
 800e6e2:	bf00      	nop
 800e6e4:	24002f48 	.word	0x24002f48
 800e6e8:	24002f68 	.word	0x24002f68
 800e6ec:	24002f54 	.word	0x24002f54
 800e6f0:	24002f50 	.word	0x24002f50
 800e6f4:	24002f4c 	.word	0x24002f4c
 800e6f8:	24002e50 	.word	0x24002e50
 800e6fc:	24002ea0 	.word	0x24002ea0
 800e700:	0801dfa4 	.word	0x0801dfa4

0800e704 <xTimerCreateTimerTask>:
{
 800e704:	b510      	push	{r4, lr}
 800e706:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e708:	f7ff ffc4 	bl	800e694 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e70c:	4b12      	ldr	r3, [pc, #72]	@ (800e758 <xTimerCreateTimerTask+0x54>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	b1cb      	cbz	r3, 800e746 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e712:	2400      	movs	r4, #0
 800e714:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e716:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e718:	aa07      	add	r2, sp, #28
 800e71a:	a906      	add	r1, sp, #24
 800e71c:	a805      	add	r0, sp, #20
 800e71e:	f7fe fbf5 	bl	800cf0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e722:	9b05      	ldr	r3, [sp, #20]
 800e724:	9302      	str	r3, [sp, #8]
 800e726:	9b06      	ldr	r3, [sp, #24]
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	2302      	movs	r3, #2
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	4623      	mov	r3, r4
 800e730:	9a07      	ldr	r2, [sp, #28]
 800e732:	490a      	ldr	r1, [pc, #40]	@ (800e75c <xTimerCreateTimerTask+0x58>)
 800e734:	480a      	ldr	r0, [pc, #40]	@ (800e760 <xTimerCreateTimerTask+0x5c>)
 800e736:	f7ff fb53 	bl	800dde0 <xTaskCreateStatic>
 800e73a:	4b0a      	ldr	r3, [pc, #40]	@ (800e764 <xTimerCreateTimerTask+0x60>)
 800e73c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e73e:	b110      	cbz	r0, 800e746 <xTimerCreateTimerTask+0x42>
}
 800e740:	2001      	movs	r0, #1
 800e742:	b008      	add	sp, #32
 800e744:	bd10      	pop	{r4, pc}
 800e746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74a:	f383 8811 	msr	BASEPRI, r3
 800e74e:	f3bf 8f6f 	isb	sy
 800e752:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e756:	e7fe      	b.n	800e756 <xTimerCreateTimerTask+0x52>
 800e758:	24002f48 	.word	0x24002f48
 800e75c:	0801dfac 	.word	0x0801dfac
 800e760:	0800ea6d 	.word	0x0800ea6d
 800e764:	24002f44 	.word	0x24002f44

0800e768 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800e768:	b1b8      	cbz	r0, 800e79a <xTimerGenericCommand+0x32>
 800e76a:	469c      	mov	ip, r3
 800e76c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800e76e:	4818      	ldr	r0, [pc, #96]	@ (800e7d0 <xTimerGenericCommand+0x68>)
 800e770:	6800      	ldr	r0, [r0, #0]
 800e772:	b358      	cbz	r0, 800e7cc <xTimerGenericCommand+0x64>
{
 800e774:	b500      	push	{lr}
 800e776:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800e778:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e77a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e77c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e77e:	2905      	cmp	r1, #5
 800e780:	dc1c      	bgt.n	800e7bc <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e782:	f7ff fe4d 	bl	800e420 <xTaskGetSchedulerState>
 800e786:	2802      	cmp	r0, #2
 800e788:	d010      	beq.n	800e7ac <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e78a:	2300      	movs	r3, #0
 800e78c:	461a      	mov	r2, r3
 800e78e:	4669      	mov	r1, sp
 800e790:	480f      	ldr	r0, [pc, #60]	@ (800e7d0 <xTimerGenericCommand+0x68>)
 800e792:	6800      	ldr	r0, [r0, #0]
 800e794:	f7fe fdbe 	bl	800d314 <xQueueGenericSend>
 800e798:	e015      	b.n	800e7c6 <xTimerGenericCommand+0x5e>
 800e79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800e7aa:	e7fe      	b.n	800e7aa <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	9a06      	ldr	r2, [sp, #24]
 800e7b0:	4669      	mov	r1, sp
 800e7b2:	4807      	ldr	r0, [pc, #28]	@ (800e7d0 <xTimerGenericCommand+0x68>)
 800e7b4:	6800      	ldr	r0, [r0, #0]
 800e7b6:	f7fe fdad 	bl	800d314 <xQueueGenericSend>
 800e7ba:	e004      	b.n	800e7c6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4662      	mov	r2, ip
 800e7c0:	4669      	mov	r1, sp
 800e7c2:	f7fe fe6b 	bl	800d49c <xQueueGenericSendFromISR>
}
 800e7c6:	b005      	add	sp, #20
 800e7c8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800e7cc:	2000      	movs	r0, #0
}
 800e7ce:	4770      	bx	lr
 800e7d0:	24002f48 	.word	0x24002f48

0800e7d4 <prvSwitchTimerLists>:
{
 800e7d4:	b570      	push	{r4, r5, r6, lr}
 800e7d6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e848 <prvSwitchTimerLists+0x74>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	b362      	cbz	r2, 800e83a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7e6:	1d25      	adds	r5, r4, #4
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7fe fbcd 	bl	800cf88 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7ee:	6a23      	ldr	r3, [r4, #32]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7f4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e7f8:	f013 0f04 	tst.w	r3, #4
 800e7fc:	d0ec      	beq.n	800e7d8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e7fe:	69a3      	ldr	r3, [r4, #24]
 800e800:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800e802:	429e      	cmp	r6, r3
 800e804:	d207      	bcs.n	800e816 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e806:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e808:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e80a:	4629      	mov	r1, r5
 800e80c:	4b0e      	ldr	r3, [pc, #56]	@ (800e848 <prvSwitchTimerLists+0x74>)
 800e80e:	6818      	ldr	r0, [r3, #0]
 800e810:	f7fe fba1 	bl	800cf56 <vListInsert>
 800e814:	e7e0      	b.n	800e7d8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e816:	2100      	movs	r1, #0
 800e818:	9100      	str	r1, [sp, #0]
 800e81a:	460b      	mov	r3, r1
 800e81c:	4632      	mov	r2, r6
 800e81e:	4620      	mov	r0, r4
 800e820:	f7ff ffa2 	bl	800e768 <xTimerGenericCommand>
				configASSERT( xResult );
 800e824:	2800      	cmp	r0, #0
 800e826:	d1d7      	bne.n	800e7d8 <prvSwitchTimerLists+0x4>
 800e828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	e7fe      	b.n	800e838 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800e83a:	4a04      	ldr	r2, [pc, #16]	@ (800e84c <prvSwitchTimerLists+0x78>)
 800e83c:	6810      	ldr	r0, [r2, #0]
 800e83e:	4902      	ldr	r1, [pc, #8]	@ (800e848 <prvSwitchTimerLists+0x74>)
 800e840:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800e842:	6013      	str	r3, [r2, #0]
}
 800e844:	b002      	add	sp, #8
 800e846:	bd70      	pop	{r4, r5, r6, pc}
 800e848:	24002f50 	.word	0x24002f50
 800e84c:	24002f4c 	.word	0x24002f4c

0800e850 <prvSampleTimeNow>:
{
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800e854:	f7ff fb90 	bl	800df78 <xTaskGetTickCount>
 800e858:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800e85a:	4b07      	ldr	r3, [pc, #28]	@ (800e878 <prvSampleTimeNow+0x28>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4283      	cmp	r3, r0
 800e860:	d805      	bhi.n	800e86e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800e866:	4b04      	ldr	r3, [pc, #16]	@ (800e878 <prvSampleTimeNow+0x28>)
 800e868:	601c      	str	r4, [r3, #0]
}
 800e86a:	4620      	mov	r0, r4
 800e86c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800e86e:	f7ff ffb1 	bl	800e7d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e872:	2301      	movs	r3, #1
 800e874:	602b      	str	r3, [r5, #0]
 800e876:	e7f6      	b.n	800e866 <prvSampleTimeNow+0x16>
 800e878:	24002f40 	.word	0x24002f40

0800e87c <prvProcessExpiredTimer>:
{
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	4606      	mov	r6, r0
 800e882:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e884:	4917      	ldr	r1, [pc, #92]	@ (800e8e4 <prvProcessExpiredTimer+0x68>)
 800e886:	6809      	ldr	r1, [r1, #0]
 800e888:	68c9      	ldr	r1, [r1, #12]
 800e88a:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e88c:	1d20      	adds	r0, r4, #4
 800e88e:	f7fe fb7b 	bl	800cf88 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e892:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800e896:	f01c 0f04 	tst.w	ip, #4
 800e89a:	d108      	bne.n	800e8ae <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e89c:	f02c 0c01 	bic.w	ip, ip, #1
 800e8a0:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8a4:	6a23      	ldr	r3, [r4, #32]
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4798      	blx	r3
}
 800e8aa:	b002      	add	sp, #8
 800e8ac:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8ae:	69a1      	ldr	r1, [r4, #24]
 800e8b0:	4633      	mov	r3, r6
 800e8b2:	462a      	mov	r2, r5
 800e8b4:	4431      	add	r1, r6
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7ff fec4 	bl	800e644 <prvInsertTimerInActiveList>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d0f1      	beq.n	800e8a4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	9100      	str	r1, [sp, #0]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4632      	mov	r2, r6
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f7ff ff4d 	bl	800e768 <xTimerGenericCommand>
			configASSERT( xResult );
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d1e8      	bne.n	800e8a4 <prvProcessExpiredTimer+0x28>
 800e8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	e7fe      	b.n	800e8e2 <prvProcessExpiredTimer+0x66>
 800e8e4:	24002f50 	.word	0x24002f50

0800e8e8 <prvProcessTimerOrBlockTask>:
{
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	4606      	mov	r6, r0
 800e8ee:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800e8f0:	f7ff fb3a 	bl	800df68 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8f4:	a801      	add	r0, sp, #4
 800e8f6:	f7ff ffab 	bl	800e850 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e8fa:	9b01      	ldr	r3, [sp, #4]
 800e8fc:	bb3b      	cbnz	r3, 800e94e <prvProcessTimerOrBlockTask+0x66>
 800e8fe:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e900:	42b0      	cmp	r0, r6
 800e902:	bf28      	it	cs
 800e904:	2c00      	cmpcs	r4, #0
 800e906:	d019      	beq.n	800e93c <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800e908:	b124      	cbz	r4, 800e914 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e90a:	4a13      	ldr	r2, [pc, #76]	@ (800e958 <prvProcessTimerOrBlockTask+0x70>)
 800e90c:	6812      	ldr	r2, [r2, #0]
 800e90e:	6812      	ldr	r2, [r2, #0]
 800e910:	b9da      	cbnz	r2, 800e94a <prvProcessTimerOrBlockTask+0x62>
 800e912:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e914:	4622      	mov	r2, r4
 800e916:	1b71      	subs	r1, r6, r5
 800e918:	4b10      	ldr	r3, [pc, #64]	@ (800e95c <prvProcessTimerOrBlockTask+0x74>)
 800e91a:	6818      	ldr	r0, [r3, #0]
 800e91c:	f7ff f898 	bl	800da50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e920:	f7ff fbbc 	bl	800e09c <xTaskResumeAll>
 800e924:	b9a8      	cbnz	r0, 800e952 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 800e926:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e92a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e92e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	e00a      	b.n	800e952 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 800e93c:	f7ff fbae 	bl	800e09c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e940:	4629      	mov	r1, r5
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ff9a 	bl	800e87c <prvProcessExpiredTimer>
 800e948:	e003      	b.n	800e952 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e94a:	461c      	mov	r4, r3
 800e94c:	e7e2      	b.n	800e914 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 800e94e:	f7ff fba5 	bl	800e09c <xTaskResumeAll>
}
 800e952:	b002      	add	sp, #8
 800e954:	bd70      	pop	{r4, r5, r6, pc}
 800e956:	bf00      	nop
 800e958:	24002f4c 	.word	0x24002f4c
 800e95c:	24002f48 	.word	0x24002f48

0800e960 <prvProcessReceivedCommands>:
{
 800e960:	b510      	push	{r4, lr}
 800e962:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e964:	e002      	b.n	800e96c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	da0f      	bge.n	800e98c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e96c:	2200      	movs	r2, #0
 800e96e:	a904      	add	r1, sp, #16
 800e970:	4b3d      	ldr	r3, [pc, #244]	@ (800ea68 <prvProcessReceivedCommands+0x108>)
 800e972:	6818      	ldr	r0, [r3, #0]
 800e974:	f7fe fe52 	bl	800d61c <xQueueReceive>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d073      	beq.n	800ea64 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e97c:	9b04      	ldr	r3, [sp, #16]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	daf1      	bge.n	800e966 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e982:	9907      	ldr	r1, [sp, #28]
 800e984:	9806      	ldr	r0, [sp, #24]
 800e986:	9b05      	ldr	r3, [sp, #20]
 800e988:	4798      	blx	r3
 800e98a:	e7ec      	b.n	800e966 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e98c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	b113      	cbz	r3, 800e998 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e992:	1d20      	adds	r0, r4, #4
 800e994:	f7fe faf8 	bl	800cf88 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e998:	a803      	add	r0, sp, #12
 800e99a:	f7ff ff59 	bl	800e850 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e99e:	9b04      	ldr	r3, [sp, #16]
 800e9a0:	2b09      	cmp	r3, #9
 800e9a2:	d8e3      	bhi.n	800e96c <prvProcessReceivedCommands+0xc>
 800e9a4:	e8df f003 	tbb	[pc, r3]
 800e9a8:	30050505 	.word	0x30050505
 800e9ac:	05055037 	.word	0x05055037
 800e9b0:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9b6:	f043 0301 	orr.w	r3, r3, #1
 800e9ba:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e9be:	9b05      	ldr	r3, [sp, #20]
 800e9c0:	69a1      	ldr	r1, [r4, #24]
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	4419      	add	r1, r3
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f7ff fe3c 	bl	800e644 <prvInsertTimerInActiveList>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d0cd      	beq.n	800e96c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9d0:	6a23      	ldr	r3, [r4, #32]
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9da:	f013 0f04 	tst.w	r3, #4
 800e9de:	d0c5      	beq.n	800e96c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9e0:	69a2      	ldr	r2, [r4, #24]
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	9100      	str	r1, [sp, #0]
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	9805      	ldr	r0, [sp, #20]
 800e9ea:	4402      	add	r2, r0
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7ff febb 	bl	800e768 <xTimerGenericCommand>
							configASSERT( xResult );
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d1ba      	bne.n	800e96c <prvProcessReceivedCommands+0xc>
 800e9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9fa:	f383 8811 	msr	BASEPRI, r3
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	e7fe      	b.n	800ea06 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea08:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea0c:	f023 0301 	bic.w	r3, r3, #1
 800ea10:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800ea14:	e7aa      	b.n	800e96c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea1a:	f043 0301 	orr.w	r3, r3, #1
 800ea1e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea22:	9905      	ldr	r1, [sp, #20]
 800ea24:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea26:	b131      	cbz	r1, 800ea36 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea28:	4603      	mov	r3, r0
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	4401      	add	r1, r0
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f7ff fe08 	bl	800e644 <prvInsertTimerInActiveList>
					break;
 800ea34:	e79a      	b.n	800e96c <prvProcessReceivedCommands+0xc>
 800ea36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea46:	e7fe      	b.n	800ea46 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea48:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ea4c:	f013 0f02 	tst.w	r3, #2
 800ea50:	d004      	beq.n	800ea5c <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea52:	f023 0301 	bic.w	r3, r3, #1
 800ea56:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800ea5a:	e787      	b.n	800e96c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fab3 	bl	800efc8 <vPortFree>
 800ea62:	e783      	b.n	800e96c <prvProcessReceivedCommands+0xc>
}
 800ea64:	b008      	add	sp, #32
 800ea66:	bd10      	pop	{r4, pc}
 800ea68:	24002f48 	.word	0x24002f48

0800ea6c <prvTimerTask>:
{
 800ea6c:	b500      	push	{lr}
 800ea6e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea70:	a801      	add	r0, sp, #4
 800ea72:	f7ff fdd7 	bl	800e624 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea76:	9901      	ldr	r1, [sp, #4]
 800ea78:	f7ff ff36 	bl	800e8e8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800ea7c:	f7ff ff70 	bl	800e960 <prvProcessReceivedCommands>
	for( ;; )
 800ea80:	e7f6      	b.n	800ea70 <prvTimerTask+0x4>
	...

0800ea84 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea84:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea8a:	4b0d      	ldr	r3, [pc, #52]	@ (800eac0 <prvTaskExitError+0x3c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea92:	d008      	beq.n	800eaa6 <prvTaskExitError+0x22>
 800ea94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	e7fe      	b.n	800eaa4 <prvTaskExitError+0x20>
 800eaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eab6:	9b01      	ldr	r3, [sp, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0fc      	beq.n	800eab6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eabc:	b002      	add	sp, #8
 800eabe:	4770      	bx	lr
 800eac0:	24000010 	.word	0x24000010

0800eac4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eac4:	4808      	ldr	r0, [pc, #32]	@ (800eae8 <prvPortStartFirstTask+0x24>)
 800eac6:	6800      	ldr	r0, [r0, #0]
 800eac8:	6800      	ldr	r0, [r0, #0]
 800eaca:	f380 8808 	msr	MSP, r0
 800eace:	f04f 0000 	mov.w	r0, #0
 800ead2:	f380 8814 	msr	CONTROL, r0
 800ead6:	b662      	cpsie	i
 800ead8:	b661      	cpsie	f
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	df00      	svc	0
 800eae4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eae6:	0000      	.short	0x0000
 800eae8:	e000ed08 	.word	0xe000ed08

0800eaec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eaec:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800eafc <vPortEnableVFP+0x10>
 800eaf0:	6801      	ldr	r1, [r0, #0]
 800eaf2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800eaf6:	6001      	str	r1, [r0, #0]
 800eaf8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eafa:	0000      	.short	0x0000
 800eafc:	e000ed88 	.word	0xe000ed88

0800eb00 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb04:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb08:	f021 0101 	bic.w	r1, r1, #1
 800eb0c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb10:	4b05      	ldr	r3, [pc, #20]	@ (800eb28 <pxPortInitialiseStack+0x28>)
 800eb12:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb16:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb1a:	f06f 0302 	mvn.w	r3, #2
 800eb1e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800eb22:	3844      	subs	r0, #68	@ 0x44
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	0800ea85 	.word	0x0800ea85
 800eb2c:	00000000 	.word	0x00000000

0800eb30 <SVC_Handler>:
	__asm volatile (
 800eb30:	4b07      	ldr	r3, [pc, #28]	@ (800eb50 <pxCurrentTCBConst2>)
 800eb32:	6819      	ldr	r1, [r3, #0]
 800eb34:	6808      	ldr	r0, [r1, #0]
 800eb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3a:	f380 8809 	msr	PSP, r0
 800eb3e:	f3bf 8f6f 	isb	sy
 800eb42:	f04f 0000 	mov.w	r0, #0
 800eb46:	f380 8811 	msr	BASEPRI, r0
 800eb4a:	4770      	bx	lr
 800eb4c:	f3af 8000 	nop.w

0800eb50 <pxCurrentTCBConst2>:
 800eb50:	24002e4c 	.word	0x24002e4c

0800eb54 <vPortEnterCritical>:
 800eb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800eb64:	4a0b      	ldr	r2, [pc, #44]	@ (800eb94 <vPortEnterCritical+0x40>)
 800eb66:	6813      	ldr	r3, [r2, #0]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d000      	beq.n	800eb72 <vPortEnterCritical+0x1e>
}
 800eb70:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb76:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800eb7a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800eb7e:	d0f7      	beq.n	800eb70 <vPortEnterCritical+0x1c>
 800eb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	e7fe      	b.n	800eb90 <vPortEnterCritical+0x3c>
 800eb92:	bf00      	nop
 800eb94:	24000010 	.word	0x24000010

0800eb98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800eb98:	4b09      	ldr	r3, [pc, #36]	@ (800ebc0 <vPortExitCritical+0x28>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	b943      	cbnz	r3, 800ebb0 <vPortExitCritical+0x18>
 800eb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	e7fe      	b.n	800ebae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	4a03      	ldr	r2, [pc, #12]	@ (800ebc0 <vPortExitCritical+0x28>)
 800ebb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebb6:	b90b      	cbnz	r3, 800ebbc <vPortExitCritical+0x24>
	__asm volatile
 800ebb8:	f383 8811 	msr	BASEPRI, r3
}
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	24000010 	.word	0x24000010
	...

0800ebd0 <PendSV_Handler>:
	__asm volatile
 800ebd0:	f3ef 8009 	mrs	r0, PSP
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	4b15      	ldr	r3, [pc, #84]	@ (800ec30 <pxCurrentTCBConst>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	f01e 0f10 	tst.w	lr, #16
 800ebe0:	bf08      	it	eq
 800ebe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ebe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebea:	6010      	str	r0, [r2, #0]
 800ebec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ebf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ebf4:	f380 8811 	msr	BASEPRI, r0
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	f3bf 8f6f 	isb	sy
 800ec00:	f7ff faee 	bl	800e1e0 <vTaskSwitchContext>
 800ec04:	f04f 0000 	mov.w	r0, #0
 800ec08:	f380 8811 	msr	BASEPRI, r0
 800ec0c:	bc09      	pop	{r0, r3}
 800ec0e:	6819      	ldr	r1, [r3, #0]
 800ec10:	6808      	ldr	r0, [r1, #0]
 800ec12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec16:	f01e 0f10 	tst.w	lr, #16
 800ec1a:	bf08      	it	eq
 800ec1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec20:	f380 8809 	msr	PSP, r0
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	f3af 8000 	nop.w

0800ec30 <pxCurrentTCBConst>:
 800ec30:	24002e4c 	.word	0x24002e4c

0800ec34 <xPortSysTickHandler>:
{
 800ec34:	b508      	push	{r3, lr}
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800ec46:	f7ff f99d 	bl	800df84 <xTaskIncrementTick>
 800ec4a:	b128      	cbz	r0, 800ec58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f383 8811 	msr	BASEPRI, r3
}
 800ec5e:	bd08      	pop	{r3, pc}

0800ec60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec60:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800ec64:	2300      	movs	r3, #0
 800ec66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec6a:	4b05      	ldr	r3, [pc, #20]	@ (800ec80 <vPortSetupTimerInterrupt+0x20>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4905      	ldr	r1, [pc, #20]	@ (800ec84 <vPortSetupTimerInterrupt+0x24>)
 800ec70:	fba1 1303 	umull	r1, r3, r1, r3
 800ec74:	099b      	lsrs	r3, r3, #6
 800ec76:	3b01      	subs	r3, #1
 800ec78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ec7a:	2307      	movs	r3, #7
 800ec7c:	6113      	str	r3, [r2, #16]
}
 800ec7e:	4770      	bx	lr
 800ec80:	24000004 	.word	0x24000004
 800ec84:	10624dd3 	.word	0x10624dd3

0800ec88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec8c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ec90:	4b3d      	ldr	r3, [pc, #244]	@ (800ed88 <xPortStartScheduler+0x100>)
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d01c      	beq.n	800ecd0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ec9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ec9e:	4b3b      	ldr	r3, [pc, #236]	@ (800ed8c <xPortStartScheduler+0x104>)
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d01e      	beq.n	800ece2 <xPortStartScheduler+0x5a>
{
 800eca4:	b530      	push	{r4, r5, lr}
 800eca6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eca8:	4b39      	ldr	r3, [pc, #228]	@ (800ed90 <xPortStartScheduler+0x108>)
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	b2d2      	uxtb	r2, r2
 800ecae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ecb0:	22ff      	movs	r2, #255	@ 0xff
 800ecb2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ecbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ecc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ecc4:	4a33      	ldr	r2, [pc, #204]	@ (800ed94 <xPortStartScheduler+0x10c>)
 800ecc6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecc8:	4b33      	ldr	r3, [pc, #204]	@ (800ed98 <xPortStartScheduler+0x110>)
 800ecca:	2207      	movs	r2, #7
 800eccc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecce:	e01b      	b.n	800ed08 <xPortStartScheduler+0x80>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ece0:	e7fe      	b.n	800ece0 <xPortStartScheduler+0x58>
 800ece2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ece6:	f383 8811 	msr	BASEPRI, r3
 800ecea:	f3bf 8f6f 	isb	sy
 800ecee:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ecf2:	e7fe      	b.n	800ecf2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800ecf4:	4a28      	ldr	r2, [pc, #160]	@ (800ed98 <xPortStartScheduler+0x110>)
 800ecf6:	6813      	ldr	r3, [r2, #0]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ecfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ed00:	005b      	lsls	r3, r3, #1
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ed0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed10:	d1f0      	bne.n	800ecf4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed12:	4b21      	ldr	r3, [pc, #132]	@ (800ed98 <xPortStartScheduler+0x110>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b03      	cmp	r3, #3
 800ed18:	d008      	beq.n	800ed2c <xPortStartScheduler+0xa4>
 800ed1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	e7fe      	b.n	800ed2a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed2c:	021b      	lsls	r3, r3, #8
 800ed2e:	4a1a      	ldr	r2, [pc, #104]	@ (800ed98 <xPortStartScheduler+0x110>)
 800ed30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ed36:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed38:	9b01      	ldr	r3, [sp, #4]
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	4a14      	ldr	r2, [pc, #80]	@ (800ed90 <xPortStartScheduler+0x108>)
 800ed3e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed40:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800ed44:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ed48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ed4c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed50:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800ed54:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ed58:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800ed5c:	f7ff ff80 	bl	800ec60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800ed60:	2500      	movs	r5, #0
 800ed62:	4b0e      	ldr	r3, [pc, #56]	@ (800ed9c <xPortStartScheduler+0x114>)
 800ed64:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800ed66:	f7ff fec1 	bl	800eaec <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed6a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800ed6e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ed72:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800ed76:	f7ff fea5 	bl	800eac4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ed7a:	f7ff fa31 	bl	800e1e0 <vTaskSwitchContext>
	prvTaskExitError();
 800ed7e:	f7ff fe81 	bl	800ea84 <prvTaskExitError>
}
 800ed82:	4628      	mov	r0, r5
 800ed84:	b003      	add	sp, #12
 800ed86:	bd30      	pop	{r4, r5, pc}
 800ed88:	410fc271 	.word	0x410fc271
 800ed8c:	410fc270 	.word	0x410fc270
 800ed90:	e000e400 	.word	0xe000e400
 800ed94:	24002f80 	.word	0x24002f80
 800ed98:	24002f7c 	.word	0x24002f7c
 800ed9c:	24000010 	.word	0x24000010

0800eda0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eda0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eda4:	2b0f      	cmp	r3, #15
 800eda6:	d90f      	bls.n	800edc8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eda8:	4a11      	ldr	r2, [pc, #68]	@ (800edf0 <vPortValidateInterruptPriority+0x50>)
 800edaa:	5c9b      	ldrb	r3, [r3, r2]
 800edac:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edae:	4a11      	ldr	r2, [pc, #68]	@ (800edf4 <vPortValidateInterruptPriority+0x54>)
 800edb0:	7812      	ldrb	r2, [r2, #0]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d908      	bls.n	800edc8 <vPortValidateInterruptPriority+0x28>
 800edb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	e7fe      	b.n	800edc6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800edc8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800edcc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800edd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800edd4:	4a08      	ldr	r2, [pc, #32]	@ (800edf8 <vPortValidateInterruptPriority+0x58>)
 800edd6:	6812      	ldr	r2, [r2, #0]
 800edd8:	4293      	cmp	r3, r2
 800edda:	d908      	bls.n	800edee <vPortValidateInterruptPriority+0x4e>
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	e7fe      	b.n	800edec <vPortValidateInterruptPriority+0x4c>
	}
 800edee:	4770      	bx	lr
 800edf0:	e000e3f0 	.word	0xe000e3f0
 800edf4:	24002f80 	.word	0x24002f80
 800edf8:	24002f7c 	.word	0x24002f7c

0800edfc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edfc:	4a12      	ldr	r2, [pc, #72]	@ (800ee48 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edfe:	f012 0f07 	tst.w	r2, #7
 800ee02:	d01e      	beq.n	800ee42 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee04:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee06:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee0a:	f5c1 5370 	rsb	r3, r1, #15360	@ 0x3c00
 800ee0e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee10:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee12:	480e      	ldr	r0, [pc, #56]	@ (800ee4c <prvHeapInit+0x50>)
 800ee14:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee16:	2100      	movs	r1, #0
 800ee18:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee1a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ee1c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee1e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ee22:	480b      	ldr	r0, [pc, #44]	@ (800ee50 <prvHeapInit+0x54>)
 800ee24:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ee26:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee28:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee2a:	1a99      	subs	r1, r3, r2
 800ee2c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee2e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee30:	4b08      	ldr	r3, [pc, #32]	@ (800ee54 <prvHeapInit+0x58>)
 800ee32:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee34:	4b08      	ldr	r3, [pc, #32]	@ (800ee58 <prvHeapInit+0x5c>)
 800ee36:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee38:	4b08      	ldr	r3, [pc, #32]	@ (800ee5c <prvHeapInit+0x60>)
 800ee3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ee3e:	601a      	str	r2, [r3, #0]
}
 800ee40:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ee46:	e7e4      	b.n	800ee12 <prvHeapInit+0x16>
 800ee48:	24002fa4 	.word	0x24002fa4
 800ee4c:	24002f9c 	.word	0x24002f9c
 800ee50:	24002f98 	.word	0x24002f98
 800ee54:	24002f90 	.word	0x24002f90
 800ee58:	24002f94 	.word	0x24002f94
 800ee5c:	24002f84 	.word	0x24002f84

0800ee60 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee60:	4b16      	ldr	r3, [pc, #88]	@ (800eebc <prvInsertBlockIntoFreeList+0x5c>)
 800ee62:	461a      	mov	r2, r3
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4283      	cmp	r3, r0
 800ee68:	d3fb      	bcc.n	800ee62 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee6a:	6851      	ldr	r1, [r2, #4]
 800ee6c:	eb02 0c01 	add.w	ip, r2, r1
 800ee70:	4584      	cmp	ip, r0
 800ee72:	d009      	beq.n	800ee88 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee74:	6841      	ldr	r1, [r0, #4]
 800ee76:	eb00 0c01 	add.w	ip, r0, r1
 800ee7a:	4563      	cmp	r3, ip
 800ee7c:	d009      	beq.n	800ee92 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee7e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee80:	4290      	cmp	r0, r2
 800ee82:	d019      	beq.n	800eeb8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee84:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800ee86:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee88:	6840      	ldr	r0, [r0, #4]
 800ee8a:	4401      	add	r1, r0
 800ee8c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800ee8e:	4610      	mov	r0, r2
 800ee90:	e7f0      	b.n	800ee74 <prvInsertBlockIntoFreeList+0x14>
{
 800ee92:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee94:	4c0a      	ldr	r4, [pc, #40]	@ (800eec0 <prvInsertBlockIntoFreeList+0x60>)
 800ee96:	6824      	ldr	r4, [r4, #0]
 800ee98:	42a3      	cmp	r3, r4
 800ee9a:	d00b      	beq.n	800eeb4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	4419      	add	r1, r3
 800eea0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eea2:	6813      	ldr	r3, [r2, #0]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800eea8:	4290      	cmp	r0, r2
 800eeaa:	d000      	beq.n	800eeae <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eeac:	6010      	str	r0, [r2, #0]
	}
}
 800eeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eeb2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eeb4:	6004      	str	r4, [r0, #0]
 800eeb6:	e7f7      	b.n	800eea8 <prvInsertBlockIntoFreeList+0x48>
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop
 800eebc:	24002f9c 	.word	0x24002f9c
 800eec0:	24002f98 	.word	0x24002f98

0800eec4 <pvPortMalloc>:
{
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800eec8:	f7ff f84e 	bl	800df68 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800eecc:	4b38      	ldr	r3, [pc, #224]	@ (800efb0 <pvPortMalloc+0xec>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	b1b3      	cbz	r3, 800ef00 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eed2:	4b38      	ldr	r3, [pc, #224]	@ (800efb4 <pvPortMalloc+0xf0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	421c      	tst	r4, r3
 800eed8:	d150      	bne.n	800ef7c <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 800eeda:	2c00      	cmp	r4, #0
 800eedc:	d050      	beq.n	800ef80 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 800eede:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eee2:	f014 0f07 	tst.w	r4, #7
 800eee6:	d002      	beq.n	800eeee <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eee8:	f022 0207 	bic.w	r2, r2, #7
 800eeec:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	d055      	beq.n	800ef9e <pvPortMalloc+0xda>
 800eef2:	4b31      	ldr	r3, [pc, #196]	@ (800efb8 <pvPortMalloc+0xf4>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d353      	bcc.n	800efa2 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 800eefa:	4930      	ldr	r1, [pc, #192]	@ (800efbc <pvPortMalloc+0xf8>)
 800eefc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eefe:	e004      	b.n	800ef0a <pvPortMalloc+0x46>
			prvHeapInit();
 800ef00:	f7ff ff7c 	bl	800edfc <prvHeapInit>
 800ef04:	e7e5      	b.n	800eed2 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800ef06:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef08:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef0a:	6863      	ldr	r3, [r4, #4]
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d202      	bcs.n	800ef16 <pvPortMalloc+0x52>
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1f7      	bne.n	800ef06 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800ef16:	4b26      	ldr	r3, [pc, #152]	@ (800efb0 <pvPortMalloc+0xec>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	42a3      	cmp	r3, r4
 800ef1c:	d043      	beq.n	800efa6 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef1e:	680d      	ldr	r5, [r1, #0]
 800ef20:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef26:	6863      	ldr	r3, [r4, #4]
 800ef28:	1a9b      	subs	r3, r3, r2
 800ef2a:	2b10      	cmp	r3, #16
 800ef2c:	d910      	bls.n	800ef50 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef2e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef30:	f010 0f07 	tst.w	r0, #7
 800ef34:	d008      	beq.n	800ef48 <pvPortMalloc+0x84>
 800ef36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef3a:	f383 8811 	msr	BASEPRI, r3
 800ef3e:	f3bf 8f6f 	isb	sy
 800ef42:	f3bf 8f4f 	dsb	sy
 800ef46:	e7fe      	b.n	800ef46 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef48:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef4a:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef4c:	f7ff ff88 	bl	800ee60 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef50:	6862      	ldr	r2, [r4, #4]
 800ef52:	4919      	ldr	r1, [pc, #100]	@ (800efb8 <pvPortMalloc+0xf4>)
 800ef54:	680b      	ldr	r3, [r1, #0]
 800ef56:	1a9b      	subs	r3, r3, r2
 800ef58:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef5a:	4919      	ldr	r1, [pc, #100]	@ (800efc0 <pvPortMalloc+0xfc>)
 800ef5c:	6809      	ldr	r1, [r1, #0]
 800ef5e:	428b      	cmp	r3, r1
 800ef60:	d201      	bcs.n	800ef66 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef62:	4917      	ldr	r1, [pc, #92]	@ (800efc0 <pvPortMalloc+0xfc>)
 800ef64:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef66:	4b13      	ldr	r3, [pc, #76]	@ (800efb4 <pvPortMalloc+0xf0>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800ef72:	4a14      	ldr	r2, [pc, #80]	@ (800efc4 <pvPortMalloc+0x100>)
 800ef74:	6813      	ldr	r3, [r2, #0]
 800ef76:	3301      	adds	r3, #1
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	e002      	b.n	800ef82 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 800ef7c:	2500      	movs	r5, #0
 800ef7e:	e000      	b.n	800ef82 <pvPortMalloc+0xbe>
 800ef80:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800ef82:	f7ff f88b 	bl	800e09c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef86:	f015 0f07 	tst.w	r5, #7
 800ef8a:	d00e      	beq.n	800efaa <pvPortMalloc+0xe6>
 800ef8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	e7fe      	b.n	800ef9c <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800ef9e:	2500      	movs	r5, #0
 800efa0:	e7ef      	b.n	800ef82 <pvPortMalloc+0xbe>
 800efa2:	2500      	movs	r5, #0
 800efa4:	e7ed      	b.n	800ef82 <pvPortMalloc+0xbe>
 800efa6:	2500      	movs	r5, #0
 800efa8:	e7eb      	b.n	800ef82 <pvPortMalloc+0xbe>
}
 800efaa:	4628      	mov	r0, r5
 800efac:	bd38      	pop	{r3, r4, r5, pc}
 800efae:	bf00      	nop
 800efb0:	24002f98 	.word	0x24002f98
 800efb4:	24002f84 	.word	0x24002f84
 800efb8:	24002f94 	.word	0x24002f94
 800efbc:	24002f9c 	.word	0x24002f9c
 800efc0:	24002f90 	.word	0x24002f90
 800efc4:	24002f8c 	.word	0x24002f8c

0800efc8 <vPortFree>:
	if( pv != NULL )
 800efc8:	2800      	cmp	r0, #0
 800efca:	d034      	beq.n	800f036 <vPortFree+0x6e>
{
 800efcc:	b538      	push	{r3, r4, r5, lr}
 800efce:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800efd0:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800efd8:	4a17      	ldr	r2, [pc, #92]	@ (800f038 <vPortFree+0x70>)
 800efda:	6812      	ldr	r2, [r2, #0]
 800efdc:	4213      	tst	r3, r2
 800efde:	d108      	bne.n	800eff2 <vPortFree+0x2a>
 800efe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	e7fe      	b.n	800eff0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eff2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800eff6:	b141      	cbz	r1, 800f00a <vPortFree+0x42>
 800eff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	e7fe      	b.n	800f008 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f00a:	ea23 0302 	bic.w	r3, r3, r2
 800f00e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f012:	f7fe ffa9 	bl	800df68 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f016:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f01a:	4a08      	ldr	r2, [pc, #32]	@ (800f03c <vPortFree+0x74>)
 800f01c:	6813      	ldr	r3, [r2, #0]
 800f01e:	440b      	add	r3, r1
 800f020:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f022:	4628      	mov	r0, r5
 800f024:	f7ff ff1c 	bl	800ee60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f028:	4a05      	ldr	r2, [pc, #20]	@ (800f040 <vPortFree+0x78>)
 800f02a:	6813      	ldr	r3, [r2, #0]
 800f02c:	3301      	adds	r3, #1
 800f02e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f030:	f7ff f834 	bl	800e09c <xTaskResumeAll>
}
 800f034:	bd38      	pop	{r3, r4, r5, pc}
 800f036:	4770      	bx	lr
 800f038:	24002f84 	.word	0x24002f84
 800f03c:	24002f94 	.word	0x24002f94
 800f040:	24002f88 	.word	0x24002f88

0800f044 <_Z11IDFoundLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void IDFoundLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_STATUS, GPIO_PIN_SET);
 800f044:	2201      	movs	r2, #1
 800f046:	2107      	movs	r1, #7
 800f048:	f006 bac2 	b.w	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800f04c <_Z17WaterDetectedLEDSP4LEDS>:
 *
 * @param input leds: LEDS instance pointer
 */
void WaterDetectedLEDS(LEDS* leds) {
#ifdef USE_SMD_LEDs
	leds->SetLED(LED_FAULT, GPIO_PIN_SET);
 800f04c:	2201      	movs	r2, #1
 800f04e:	2109      	movs	r1, #9
 800f050:	f006 babe 	b.w	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>

0800f054 <_Z16CommunicationLEDP4LEDSh>:
 * @param input leds: LEDS instance pointer
 * @param input interface_ID: the interface from Communication that asks for a LED single blinking. The ID should be the same than the LED ID
 */
void CommunicationLED(LEDS* leds, uint8_t interface_ID) {
#ifdef USE_SMD_LEDs
	if (interface_ID == UART_PIC || interface_ID == UART_EXTENSION) return; // no LED for these interfaces
 800f054:	1f4b      	subs	r3, r1, #5
 800f056:	2b01      	cmp	r3, #1
 800f058:	d901      	bls.n	800f05e <_Z16CommunicationLEDP4LEDSh+0xa>

	leds->BlinkOnce(interface_ID);
 800f05a:	f006 bb21 	b.w	80156a0 <_ZN4LEDS9BlinkOnceEh>
#endif
}
 800f05e:	4770      	bx	lr

0800f060 <_Z11StartupLEDSP4LEDS>:
void StartupLEDS(LEDS* leds) {
 800f060:	b510      	push	{r4, lr}
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800f062:	2305      	movs	r3, #5
void StartupLEDS(LEDS* leds) {
 800f064:	b088      	sub	sp, #32
 800f066:	4604      	mov	r4, r0
	leds->ConfigureTimings(LED_STATUS, std::vector<uint8_t>{5}, 10);
 800f068:	2201      	movs	r2, #1
 800f06a:	f88d 3004 	strb.w	r3, [sp, #4]
 800f06e:	ab01      	add	r3, sp, #4
 800f070:	a805      	add	r0, sp, #20
 800f072:	9303      	str	r3, [sp, #12]
 800f074:	2301      	movs	r3, #1
 800f076:	9903      	ldr	r1, [sp, #12]
 800f078:	9304      	str	r3, [sp, #16]
 800f07a:	ab02      	add	r3, sp, #8
 800f07c:	f7f1 fe84 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800f080:	230a      	movs	r3, #10
 800f082:	aa05      	add	r2, sp, #20
 800f084:	2107      	movs	r1, #7
 800f086:	4620      	mov	r0, r4
 800f088:	f006 ffaf 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 800f08c:	a805      	add	r0, sp, #20
 800f08e:	f7f1 fd27 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	leds->Blink(LED_STATUS); 											// blink until ID allocated
 800f092:	2107      	movs	r1, #7
 800f094:	4620      	mov	r0, r4
}
 800f096:	b008      	add	sp, #32
 800f098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	leds->Blink(LED_STATUS); 											// blink until ID allocated
 800f09c:	f006 badd 	b.w	801565a <_ZN4LEDS5BlinkEh>

0800f0a0 <_Z19ControllerFaultLEDSP4LEDS>:
void ControllerFaultLEDS(LEDS* leds) {
 800f0a0:	b510      	push	{r4, lr}
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	b088      	sub	sp, #32
	leds->ClearLED(LED_CONTROLLER);
 800f0a6:	2108      	movs	r1, #8
 800f0a8:	f006 fcb7 	bl	8015a1a <_ZN4LEDS8ClearLEDEh>
	if (leds->UnusedLED(LED_FAULT)) {
 800f0ac:	2109      	movs	r1, #9
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f006 faaf 	bl	8015612 <_ZN4LEDS9UnusedLEDEh>
 800f0b4:	b1e0      	cbz	r0, 800f0f0 <_Z19ControllerFaultLEDSP4LEDS+0x50>
		leds->ConfigureTimings(LED_FAULT, std::vector<uint8_t>{5}, 10);
 800f0b6:	2305      	movs	r3, #5
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	a805      	add	r0, sp, #20
 800f0bc:	f88d 3004 	strb.w	r3, [sp, #4]
 800f0c0:	ab01      	add	r3, sp, #4
 800f0c2:	9303      	str	r3, [sp, #12]
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	9903      	ldr	r1, [sp, #12]
 800f0c8:	9304      	str	r3, [sp, #16]
 800f0ca:	ab02      	add	r3, sp, #8
 800f0cc:	f7f1 fe5c 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800f0d0:	230a      	movs	r3, #10
 800f0d2:	aa05      	add	r2, sp, #20
 800f0d4:	2109      	movs	r1, #9
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f006 ff87 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 800f0dc:	a805      	add	r0, sp, #20
 800f0de:	f7f1 fcff 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		leds->Blink(LED_FAULT);
 800f0e2:	2109      	movs	r1, #9
 800f0e4:	4620      	mov	r0, r4
}
 800f0e6:	b008      	add	sp, #32
 800f0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		leds->Blink(LED_FAULT);
 800f0ec:	f006 bab5 	b.w	801565a <_ZN4LEDS5BlinkEh>
}
 800f0f0:	b008      	add	sp, #32
 800f0f2:	bd10      	pop	{r4, pc}

0800f0f4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>:
 *
 * @param output success: whether successful
 * @return the type ID corresponding to the input template type
 */
template <typename T>
uint8_t Registers::GetTypeID (bool* success) {
 800f0f4:	b510      	push	{r4, lr}
	uint8_t type = 0;

	if (false) {}
#ifdef USE_UINT8_REGISTER
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f0f6:	491e      	ldr	r1, [pc, #120]	@ (800f170 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f0f8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f0fa:	481e      	ldr	r0, [pc, #120]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f0fc:	f00d fdd0 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f100:	bb40      	cbnz	r0, 800f154 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x60>
#endif
#ifdef USE_UINT16_REGISTER
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f102:	491d      	ldr	r1, [pc, #116]	@ (800f178 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x84>)
 800f104:	481b      	ldr	r0, [pc, #108]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f106:	f00d fdcb 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f10a:	bb28      	cbnz	r0, 800f158 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x64>
#endif
#ifdef USE_UINT32_REGISTER
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f10c:	491b      	ldr	r1, [pc, #108]	@ (800f17c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x88>)
 800f10e:	4819      	ldr	r0, [pc, #100]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f110:	f00d fdc6 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f114:	bb10      	cbnz	r0, 800f15c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x68>
#endif
#ifdef USE_UINT64_REGISTER
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f116:	4917      	ldr	r1, [pc, #92]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f118:	4608      	mov	r0, r1
 800f11a:	f00d fdc1 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f11e:	b9f8      	cbnz	r0, 800f160 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x6c>
#endif
#ifdef USE_INT8_REGISTER
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f120:	4917      	ldr	r1, [pc, #92]	@ (800f180 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x8c>)
 800f122:	4814      	ldr	r0, [pc, #80]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f124:	f00d fdbc 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f128:	b9e0      	cbnz	r0, 800f164 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x70>
#endif
#ifdef USE_INT16_REGISTER
	else if (typeid(T) == typeid(int16_t)) 		type = INT16_TYPE;
#endif
#ifdef USE_INT32_REGISTER
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f12a:	4916      	ldr	r1, [pc, #88]	@ (800f184 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x90>)
 800f12c:	4811      	ldr	r0, [pc, #68]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f12e:	f00d fdb7 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f132:	b9c8      	cbnz	r0, 800f168 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x74>
#endif
#ifdef USE_INT64_REGISTER
	else if (typeid(T) == typeid(int64_t)) 		type = INT64_TYPE;
#endif
#ifdef USE_FLOAT_REGISTER
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f134:	4914      	ldr	r1, [pc, #80]	@ (800f188 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x94>)
 800f136:	480f      	ldr	r0, [pc, #60]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f138:	f00d fdb2 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f13c:	b9b0      	cbnz	r0, 800f16c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x78>
#endif
#ifdef USE_DOUBLE_REGISTER
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f13e:	4913      	ldr	r1, [pc, #76]	@ (800f18c <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x98>)
 800f140:	480c      	ldr	r0, [pc, #48]	@ (800f174 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 800f142:	f00d fdad 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
#endif
	else {*success = false; return 0;}
 800f146:	2800      	cmp	r0, #0
 800f148:	bf14      	ite	ne
 800f14a:	2309      	movne	r3, #9
 800f14c:	2300      	moveq	r3, #0
 800f14e:	7020      	strb	r0, [r4, #0]

	*success = true;
	return type;
}
 800f150:	4618      	mov	r0, r3
 800f152:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f154:	2300      	movs	r3, #0
 800f156:	e7fa      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f158:	2301      	movs	r3, #1
 800f15a:	e7f8      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f15c:	2302      	movs	r3, #2
 800f15e:	e7f6      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f160:	2303      	movs	r3, #3
 800f162:	e7f4      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f164:	2304      	movs	r3, #4
 800f166:	e7f2      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f168:	2306      	movs	r3, #6
 800f16a:	e7f0      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f16c:	2308      	movs	r3, #8
 800f16e:	e7ee      	b.n	800f14e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
 800f170:	0801e1c4 	.word	0x0801e1c4
 800f174:	0801e1a4 	.word	0x0801e1a4
 800f178:	0801e1bc 	.word	0x0801e1bc
 800f17c:	0801e1ac 	.word	0x0801e1ac
 800f180:	0801e1cc 	.word	0x0801e1cc
 800f184:	0801e1b4 	.word	0x0801e1b4
 800f188:	0801e19c 	.word	0x0801e19c
 800f18c:	0801e194 	.word	0x0801e194

0800f190 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f190:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f192:	491e      	ldr	r1, [pc, #120]	@ (800f20c <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f194:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f196:	481e      	ldr	r0, [pc, #120]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f198:	f00d fd82 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f19c:	bb40      	cbnz	r0, 800f1f0 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f19e:	491d      	ldr	r1, [pc, #116]	@ (800f214 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x84>)
 800f1a0:	481b      	ldr	r0, [pc, #108]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1a2:	f00d fd7d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1a6:	bb28      	cbnz	r0, 800f1f4 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f1a8:	491b      	ldr	r1, [pc, #108]	@ (800f218 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x88>)
 800f1aa:	4819      	ldr	r0, [pc, #100]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1ac:	f00d fd78 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1b0:	bb10      	cbnz	r0, 800f1f8 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f1b2:	491a      	ldr	r1, [pc, #104]	@ (800f21c <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x8c>)
 800f1b4:	4816      	ldr	r0, [pc, #88]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1b6:	f00d fd73 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1ba:	b9f8      	cbnz	r0, 800f1fc <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f1bc:	4918      	ldr	r1, [pc, #96]	@ (800f220 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x90>)
 800f1be:	4814      	ldr	r0, [pc, #80]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1c0:	f00d fd6e 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1c4:	b9e0      	cbnz	r0, 800f200 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f1c6:	4917      	ldr	r1, [pc, #92]	@ (800f224 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x94>)
 800f1c8:	4811      	ldr	r0, [pc, #68]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1ca:	f00d fd69 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1ce:	b9c8      	cbnz	r0, 800f204 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f1d0:	4915      	ldr	r1, [pc, #84]	@ (800f228 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x98>)
 800f1d2:	480f      	ldr	r0, [pc, #60]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1d4:	f00d fd64 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f1d8:	b9b0      	cbnz	r0, 800f208 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f1da:	490d      	ldr	r1, [pc, #52]	@ (800f210 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x80>)
 800f1dc:	4608      	mov	r0, r1
 800f1de:	f00d fd5f 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	bf14      	ite	ne
 800f1e6:	2309      	movne	r3, #9
 800f1e8:	2300      	moveq	r3, #0
 800f1ea:	7020      	strb	r0, [r4, #0]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e7fa      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e7f8      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	e7f6      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f1fc:	2303      	movs	r3, #3
 800f1fe:	e7f4      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f200:	2304      	movs	r3, #4
 800f202:	e7f2      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f204:	2306      	movs	r3, #6
 800f206:	e7f0      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f208:	2308      	movs	r3, #8
 800f20a:	e7ee      	b.n	800f1ea <_ZN9Registers9GetTypeIDIdEEhPb.isra.0+0x5a>
 800f20c:	0801e1c4 	.word	0x0801e1c4
 800f210:	0801e194 	.word	0x0801e194
 800f214:	0801e1bc 	.word	0x0801e1bc
 800f218:	0801e1ac 	.word	0x0801e1ac
 800f21c:	0801e1a4 	.word	0x0801e1a4
 800f220:	0801e1cc 	.word	0x0801e1cc
 800f224:	0801e1b4 	.word	0x0801e1b4
 800f228:	0801e19c 	.word	0x0801e19c

0800f22c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f22c:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f22e:	491e      	ldr	r1, [pc, #120]	@ (800f2a8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f230:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f232:	481e      	ldr	r0, [pc, #120]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f234:	f00d fd34 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f238:	bb40      	cbnz	r0, 800f28c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f23a:	491c      	ldr	r1, [pc, #112]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f23c:	4608      	mov	r0, r1
 800f23e:	f00d fd2f 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f242:	bb28      	cbnz	r0, 800f290 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f244:	491a      	ldr	r1, [pc, #104]	@ (800f2b0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 800f246:	4819      	ldr	r0, [pc, #100]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f248:	f00d fd2a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f24c:	bb10      	cbnz	r0, 800f294 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f24e:	4919      	ldr	r1, [pc, #100]	@ (800f2b4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 800f250:	4816      	ldr	r0, [pc, #88]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f252:	f00d fd25 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f256:	b9f8      	cbnz	r0, 800f298 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f258:	4917      	ldr	r1, [pc, #92]	@ (800f2b8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 800f25a:	4814      	ldr	r0, [pc, #80]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f25c:	f00d fd20 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f260:	b9e0      	cbnz	r0, 800f29c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f262:	4916      	ldr	r1, [pc, #88]	@ (800f2bc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 800f264:	4811      	ldr	r0, [pc, #68]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f266:	f00d fd1b 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f26a:	b9c8      	cbnz	r0, 800f2a0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f26c:	4914      	ldr	r1, [pc, #80]	@ (800f2c0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 800f26e:	480f      	ldr	r0, [pc, #60]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f270:	f00d fd16 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f274:	b9b0      	cbnz	r0, 800f2a4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f276:	4913      	ldr	r1, [pc, #76]	@ (800f2c4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 800f278:	480c      	ldr	r0, [pc, #48]	@ (800f2ac <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 800f27a:	f00d fd11 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f27e:	2800      	cmp	r0, #0
 800f280:	bf14      	ite	ne
 800f282:	2309      	movne	r3, #9
 800f284:	2300      	moveq	r3, #0
 800f286:	7020      	strb	r0, [r4, #0]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f28c:	2300      	movs	r3, #0
 800f28e:	e7fa      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f290:	2301      	movs	r3, #1
 800f292:	e7f8      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f294:	2302      	movs	r3, #2
 800f296:	e7f6      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f298:	2303      	movs	r3, #3
 800f29a:	e7f4      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f29c:	2304      	movs	r3, #4
 800f29e:	e7f2      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f2a0:	2306      	movs	r3, #6
 800f2a2:	e7f0      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f2a4:	2308      	movs	r3, #8
 800f2a6:	e7ee      	b.n	800f286 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 800f2a8:	0801e1c4 	.word	0x0801e1c4
 800f2ac:	0801e1bc 	.word	0x0801e1bc
 800f2b0:	0801e1ac 	.word	0x0801e1ac
 800f2b4:	0801e1a4 	.word	0x0801e1a4
 800f2b8:	0801e1cc 	.word	0x0801e1cc
 800f2bc:	0801e1b4 	.word	0x0801e1b4
 800f2c0:	0801e19c 	.word	0x0801e19c
 800f2c4:	0801e194 	.word	0x0801e194

0800f2c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f2c8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f2ca:	491e      	ldr	r1, [pc, #120]	@ (800f344 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f2cc:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f2ce:	481e      	ldr	r0, [pc, #120]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f2d0:	f00d fce6 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f2d4:	bb40      	cbnz	r0, 800f328 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f2d6:	491d      	ldr	r1, [pc, #116]	@ (800f34c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 800f2d8:	481b      	ldr	r0, [pc, #108]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f2da:	f00d fce1 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f2de:	bb28      	cbnz	r0, 800f32c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f2e0:	4919      	ldr	r1, [pc, #100]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f2e2:	4608      	mov	r0, r1
 800f2e4:	f00d fcdc 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f2e8:	bb10      	cbnz	r0, 800f330 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f2ea:	4919      	ldr	r1, [pc, #100]	@ (800f350 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 800f2ec:	4816      	ldr	r0, [pc, #88]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f2ee:	f00d fcd7 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f2f2:	b9f8      	cbnz	r0, 800f334 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f2f4:	4917      	ldr	r1, [pc, #92]	@ (800f354 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 800f2f6:	4814      	ldr	r0, [pc, #80]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f2f8:	f00d fcd2 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f2fc:	b9e0      	cbnz	r0, 800f338 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f2fe:	4916      	ldr	r1, [pc, #88]	@ (800f358 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 800f300:	4811      	ldr	r0, [pc, #68]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f302:	f00d fccd 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f306:	b9c8      	cbnz	r0, 800f33c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f308:	4914      	ldr	r1, [pc, #80]	@ (800f35c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 800f30a:	480f      	ldr	r0, [pc, #60]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f30c:	f00d fcc8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f310:	b9b0      	cbnz	r0, 800f340 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f312:	4913      	ldr	r1, [pc, #76]	@ (800f360 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 800f314:	480c      	ldr	r0, [pc, #48]	@ (800f348 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 800f316:	f00d fcc3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f31a:	2800      	cmp	r0, #0
 800f31c:	bf14      	ite	ne
 800f31e:	2309      	movne	r3, #9
 800f320:	2300      	moveq	r3, #0
 800f322:	7020      	strb	r0, [r4, #0]
}
 800f324:	4618      	mov	r0, r3
 800f326:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f328:	2300      	movs	r3, #0
 800f32a:	e7fa      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e7f8      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f330:	2302      	movs	r3, #2
 800f332:	e7f6      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f334:	2303      	movs	r3, #3
 800f336:	e7f4      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f338:	2304      	movs	r3, #4
 800f33a:	e7f2      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f33c:	2306      	movs	r3, #6
 800f33e:	e7f0      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f340:	2308      	movs	r3, #8
 800f342:	e7ee      	b.n	800f322 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 800f344:	0801e1c4 	.word	0x0801e1c4
 800f348:	0801e1ac 	.word	0x0801e1ac
 800f34c:	0801e1bc 	.word	0x0801e1bc
 800f350:	0801e1a4 	.word	0x0801e1a4
 800f354:	0801e1cc 	.word	0x0801e1cc
 800f358:	0801e1b4 	.word	0x0801e1b4
 800f35c:	0801e19c 	.word	0x0801e19c
 800f360:	0801e194 	.word	0x0801e194

0800f364 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 800f364:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f366:	491e      	ldr	r1, [pc, #120]	@ (800f3e0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 800f368:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f36a:	481e      	ldr	r0, [pc, #120]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f36c:	f00d fc98 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f370:	bb40      	cbnz	r0, 800f3c4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f372:	491d      	ldr	r1, [pc, #116]	@ (800f3e8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 800f374:	481b      	ldr	r0, [pc, #108]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f376:	f00d fc93 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f37a:	bb28      	cbnz	r0, 800f3c8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f37c:	491b      	ldr	r1, [pc, #108]	@ (800f3ec <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 800f37e:	4819      	ldr	r0, [pc, #100]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f380:	f00d fc8e 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f384:	bb10      	cbnz	r0, 800f3cc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f386:	491a      	ldr	r1, [pc, #104]	@ (800f3f0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 800f388:	4816      	ldr	r0, [pc, #88]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f38a:	f00d fc89 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f38e:	b9f8      	cbnz	r0, 800f3d0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f390:	4918      	ldr	r1, [pc, #96]	@ (800f3f4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 800f392:	4814      	ldr	r0, [pc, #80]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f394:	f00d fc84 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f398:	b9e0      	cbnz	r0, 800f3d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f39a:	4917      	ldr	r1, [pc, #92]	@ (800f3f8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 800f39c:	4811      	ldr	r0, [pc, #68]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f39e:	f00d fc7f 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f3a2:	b9c8      	cbnz	r0, 800f3d8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f3a4:	490f      	ldr	r1, [pc, #60]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3a6:	4608      	mov	r0, r1
 800f3a8:	f00d fc7a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 800f3ac:	b9b0      	cbnz	r0, 800f3dc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 800f3ae:	4913      	ldr	r1, [pc, #76]	@ (800f3fc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 800f3b0:	480c      	ldr	r0, [pc, #48]	@ (800f3e4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 800f3b2:	f00d fc75 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	bf14      	ite	ne
 800f3ba:	2309      	movne	r3, #9
 800f3bc:	2300      	moveq	r3, #0
 800f3be:	7020      	strb	r0, [r4, #0]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	e7fa      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e7f8      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 800f3cc:	2302      	movs	r3, #2
 800f3ce:	e7f6      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	e7f4      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 800f3d4:	2304      	movs	r3, #4
 800f3d6:	e7f2      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 800f3d8:	2306      	movs	r3, #6
 800f3da:	e7f0      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 800f3dc:	2308      	movs	r3, #8
 800f3de:	e7ee      	b.n	800f3be <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 800f3e0:	0801e1c4 	.word	0x0801e1c4
 800f3e4:	0801e19c 	.word	0x0801e19c
 800f3e8:	0801e1bc 	.word	0x0801e1bc
 800f3ec:	0801e1ac 	.word	0x0801e1ac
 800f3f0:	0801e1a4 	.word	0x0801e1a4
 800f3f4:	0801e1cc 	.word	0x0801e1cc
 800f3f8:	0801e1b4 	.word	0x0801e1b4
 800f3fc:	0801e194 	.word	0x0801e194

0800f400 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>:
 * @param input sensor_register: sensor data register address. This address is stored and accessible as a register from Registers. It is a single register by design
 * @param input publishable: if true, add the sensor data register to the sensor group publisher as a topic if it exists. DEFAULT=true
 * @return whether successful
 */
template<typename T>
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f400:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f402:	b085      	sub	sp, #20
 800f404:	4604      	mov	r4, r0
 800f406:	4616      	mov	r6, r2
 800f408:	461f      	mov	r7, r3
	bool success;
	uint8_t type = registers->GetTypeID<T>(&success);
 800f40a:	f10d 000f 	add.w	r0, sp, #15
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f40e:	460d      	mov	r5, r1
	uint8_t type = registers->GetTypeID<T>(&success);
 800f410:	f7ff ff0c 	bl	800f22c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) return false;
 800f414:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f418:	4603      	mov	r3, r0
	if (!success) return false;
 800f41a:	b12a      	cbz	r2, 800f428 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0+0x28>

	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f41c:	4632      	mov	r2, r6
 800f41e:	4629      	mov	r1, r5
 800f420:	4620      	mov	r0, r4
 800f422:	9700      	str	r7, [sp, #0]
 800f424:	f00c faca 	bl	801b9bc <_ZN7Sensors21AddSensorDataWithTypeEhthb>
}
 800f428:	b005      	add	sp, #20
 800f42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f42c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>:
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f42e:	b085      	sub	sp, #20
 800f430:	4604      	mov	r4, r0
 800f432:	4616      	mov	r6, r2
 800f434:	461f      	mov	r7, r3
	uint8_t type = registers->GetTypeID<T>(&success);
 800f436:	f10d 000f 	add.w	r0, sp, #15
bool Sensors::AddSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool publishable) {
 800f43a:	460d      	mov	r5, r1
	uint8_t type = registers->GetTypeID<T>(&success);
 800f43c:	f7ff ff44 	bl	800f2c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) return false;
 800f440:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f444:	4603      	mov	r3, r0
	if (!success) return false;
 800f446:	b12a      	cbz	r2, 800f454 <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0+0x28>
	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f448:	4632      	mov	r2, r6
 800f44a:	4629      	mov	r1, r5
 800f44c:	4620      	mov	r0, r4
 800f44e:	9700      	str	r7, [sp, #0]
 800f450:	f00c fab4 	bl	801b9bc <_ZN7Sensors21AddSensorDataWithTypeEhthb>
}
 800f454:	b005      	add	sp, #20
 800f456:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f458 <_ZN15PlatformSensorsC1Ev>:
/**
 * @brief Class constructor
 */
PlatformSensors::PlatformSensors() {

}
 800f458:	4770      	bx	lr

0800f45a <_ZN15PlatformSensors4InitEP7SensorsP9RegistersP10PublishersP4LEDS>:
 * @param input leds_: the LEDS instance
 */
void PlatformSensors::Init(Sensors* sensors_, Registers* registers_, Publishers* publishers_, LEDS* leds_) {
	sensors = sensors_;
	registers = registers_;
	publishers = publishers_;
 800f45a:	6083      	str	r3, [r0, #8]
	leds = leds_;
 800f45c:	9b00      	ldr	r3, [sp, #0]
	registers = registers_;
 800f45e:	e9c0 1200 	strd	r1, r2, [r0]
	leds = leds_;
 800f462:	60c3      	str	r3, [r0, #12]
}
 800f464:	4770      	bx	lr
	...

0800f468 <_ZN15PlatformSensors14AddMotorSensorEv>:
}

/**
 * @brief Add motor sensor and setup reading sequences
 */
void PlatformSensors::AddMotorSensor(void) {
 800f468:	b530      	push	{r4, r5, lr}
 800f46a:	4604      	mov	r4, r0
 800f46c:	b085      	sub	sp, #20
	// Add sensor group
	sensors->AddSensorGroup(I2C2_ID, MOTOR, true);
 800f46e:	2301      	movs	r3, #1
 800f470:	2203      	movs	r2, #3
 800f472:	2108      	movs	r1, #8
 800f474:	6800      	ldr	r0, [r0, #0]
 800f476:	f00b ffc7 	bl	801b408 <_ZN7Sensors14AddSensorGroupEhhb>

	// Set group prescaler
	sensors->SetSensorGroupPrescaler(MOTOR, MOTOR_PRESCALER);
 800f47a:	220a      	movs	r2, #10
 800f47c:	2103      	movs	r1, #3
 800f47e:	6820      	ldr	r0, [r4, #0]
 800f480:	f009 fe89 	bl	8019196 <_ZN7Sensors23SetSensorGroupPrescalerEht>

	// Add sensor
	sensors->AddSensor(MOTOR, ENERGY_MONITORING_LTC2947, LTC2947_ADDRESS);
 800f484:	23b8      	movs	r3, #184	@ 0xb8
 800f486:	2204      	movs	r2, #4
 800f488:	2103      	movs	r1, #3
 800f48a:	6820      	ldr	r0, [r4, #0]
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, true);
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, LTC2947_V, LTC2947_V_SIZE);

	// Add reading of motor raw current
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, true);
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, LTC2947_I, LTC2947_I_SIZE);
 800f48c:	2503      	movs	r5, #3
	sensors->AddSensor(MOTOR, ENERGY_MONITORING_LTC2947, LTC2947_ADDRESS);
 800f48e:	f00c f867 	bl	801b560 <_ZN7Sensors9AddSensorEhht>
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, true);
 800f492:	2301      	movs	r3, #1
 800f494:	f240 2223 	movw	r2, #547	@ 0x223
 800f498:	2104      	movs	r1, #4
 800f49a:	6820      	ldr	r0, [r4, #0]
 800f49c:	f7ff ffb0 	bl	800f400 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW, LTC2947_V, LTC2947_V_SIZE);
 800f4a0:	2302      	movs	r3, #2
 800f4a2:	f240 2223 	movw	r2, #547	@ 0x223
 800f4a6:	2104      	movs	r1, #4
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	23a0      	movs	r3, #160	@ 0xa0
 800f4ac:	6820      	ldr	r0, [r4, #0]
 800f4ae:	f00b fad5 	bl	801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, true);
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800f4b8:	2104      	movs	r1, #4
 800f4ba:	6820      	ldr	r0, [r4, #0]
 800f4bc:	f7ff ffb6 	bl	800f42c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW, LTC2947_I, LTC2947_I_SIZE);
 800f4c0:	9500      	str	r5, [sp, #0]
 800f4c2:	2390      	movs	r3, #144	@ 0x90
 800f4c4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800f4c8:	2104      	movs	r1, #4
 800f4ca:	6820      	ldr	r0, [r4, #0]
 800f4cc:	f00b fac6 	bl	801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add reading of motor raw power
	sensors->AddSensorData<uint32_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW, true);
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	f240 2225 	movw	r2, #549	@ 0x225
 800f4d6:	2104      	movs	r1, #4
 800f4d8:	6820      	ldr	r0, [r4, #0]
 800f4da:	f7ff ffa7 	bl	800f42c <_ZN7Sensors13AddSensorDataImEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW, LTC2947_P, LTC2947_P_SIZE);
 800f4de:	2393      	movs	r3, #147	@ 0x93
 800f4e0:	f240 2225 	movw	r2, #549	@ 0x225
 800f4e4:	9500      	str	r5, [sp, #0]
 800f4e6:	2104      	movs	r1, #4
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	f00b fab7 	bl	801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>
	uint8_t type = registers->GetTypeID<T>(&success);
 800f4ee:	f10d 000f 	add.w	r0, sp, #15

	// Add reading of motor raw energy
	sensors->AddSensorData<uint64_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW, true);
 800f4f2:	6825      	ldr	r5, [r4, #0]
 800f4f4:	f7ff fdfe 	bl	800f0f4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) return false;
 800f4f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
	uint8_t type = registers->GetTypeID<T>(&success);
 800f4fc:	4603      	mov	r3, r0
	if (!success) return false;
 800f4fe:	b13a      	cbz	r2, 800f510 <_ZN15PlatformSensors14AddMotorSensorEv+0xa8>
	return AddSensorDataWithType(sensor_ID, sensor_register, type, publishable);
 800f500:	2201      	movs	r2, #1
 800f502:	2104      	movs	r1, #4
 800f504:	4628      	mov	r0, r5
 800f506:	9200      	str	r2, [sp, #0]
 800f508:	f240 2226 	movw	r2, #550	@ 0x226
 800f50c:	f00c fa56 	bl	801b9bc <_ZN7Sensors21AddSensorDataWithTypeEhthb>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW, LTC2947_E1, LTC2947_ENERGY1_SIZE);
 800f510:	2306      	movs	r3, #6
 800f512:	f240 2226 	movw	r2, #550	@ 0x226
 800f516:	2104      	movs	r1, #4
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	6820      	ldr	r0, [r4, #0]
 800f51c:	f00b fa9e 	bl	801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add reading of sensor raw temperature
	sensors->AddSensorData<uint16_t>(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW, true);
 800f520:	6820      	ldr	r0, [r4, #0]
 800f522:	2301      	movs	r3, #1
 800f524:	f240 2227 	movw	r2, #551	@ 0x227
 800f528:	2104      	movs	r1, #4
 800f52a:	f7ff ff69 	bl	800f400 <_ZN7Sensors13AddSensorDataItEEbhtb.isra.0>
	sensors->AddMemoryReadSequence(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW, LTC2947_TEMP, LTC2947_TEMP_SIZE);
 800f52e:	2302      	movs	r3, #2
 800f530:	f240 2227 	movw	r2, #551	@ 0x227
 800f534:	2104      	movs	r1, #4
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	23a2      	movs	r3, #162	@ 0xa2
 800f53a:	6820      	ldr	r0, [r4, #0]
 800f53c:	f00b fa8e 	bl	801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>

	// Add sensor callback
	sensors->AddSensorCallback(ENERGY_MONITORING_LTC2947, (void*) this,
 800f540:	4b04      	ldr	r3, [pc, #16]	@ (800f554 <_ZN15PlatformSensors14AddMotorSensorEv+0xec>)
 800f542:	4622      	mov	r2, r4
 800f544:	2104      	movs	r1, #4
 800f546:	6820      	ldr	r0, [r4, #0]
				  if (success)
					 self->Tmotor = T_raw * 0.204f + 5.5; // in °C
			  }
		  }
	);
}
 800f548:	b005      	add	sp, #20
 800f54a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	sensors->AddSensorCallback(ENERGY_MONITORING_LTC2947, (void*) this,
 800f54e:	f009 bec0 	b.w	80192d2 <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E>
 800f552:	bf00      	nop
 800f554:	0800fa8d 	.word	0x0800fa8d

0800f558 <_ZN15PlatformSensors19ActivateMotorSensorEv>:

/**
 * @brief Activate motor sensor
 */
void PlatformSensors::ActivateMotorSensor(void) {
 800f558:	b510      	push	{r4, lr}
 800f55a:	4604      	mov	r4, r0
	sensors->ActivateSensorData(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW);
#endif

	// Activate sensor
#ifdef ENERGY_MONITORING_LTC2947_ACTIVE
	sensors->ActivateSensor(ENERGY_MONITORING_LTC2947);
 800f55c:	2104      	movs	r1, #4
 800f55e:	6800      	ldr	r0, [r0, #0]
 800f560:	f009 feeb 	bl	801933a <_ZN7Sensors14ActivateSensorEh>
#endif

#ifdef MOTOR_ACTIVE
	// Activate group
	sensors->ActivateSensorGroup(MOTOR);
 800f564:	6820      	ldr	r0, [r4, #0]
 800f566:	2103      	movs	r1, #3
#endif
}
 800f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sensors->ActivateSensorGroup(MOTOR);
 800f56c:	f009 be53 	b.w	8019216 <_ZN7Sensors19ActivateSensorGroupEh>

0800f570 <_ZN15PlatformSensors25SetupMotorSensorPublisherEv>:
/**
 * @brief Setup motor sensor publisher
 *
 * @param input interface_ID: interface to publish data on
 */
void PlatformSensors::SetupMotorSensorPublisher(void) {
 800f570:	b510      	push	{r4, lr}
 800f572:	4604      	mov	r4, r0
	// Link interface to publisher
	publishers->LinkToInterface(MOTOR, PUBLISHER_MOTOR_INTERFACE);
 800f574:	2206      	movs	r2, #6
 800f576:	2103      	movs	r1, #3
 800f578:	6880      	ldr	r0, [r0, #8]
 800f57a:	f008 f929 	bl	80177d0 <_ZN10Publishers15LinkToInterfaceEhh>

	// Setup publisher
	publishers->SetPublisherPrescaler(MOTOR, PUBLISHER_MOTOR_PRESCALER);
 800f57e:	2201      	movs	r2, #1
 800f580:	2103      	movs	r1, #3
 800f582:	68a0      	ldr	r0, [r4, #8]
 800f584:	f007 fe6e 	bl	8017264 <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->SetPublishAddress(MOTOR, PUBLISHER_MOTOR_INTERFACE, PUBLISHER_MOTOR_ADDRESS);
 800f588:	23ff      	movs	r3, #255	@ 0xff
 800f58a:	2206      	movs	r2, #6
 800f58c:	2103      	movs	r1, #3
 800f58e:	68a0      	ldr	r0, [r4, #8]
 800f590:	f007 ff45 	bl	801741e <_ZN10Publishers17SetPublishAddressEhhh>

	// Add topics
	publishers->AddTopic(MOTOR, REG_MOTOR_VOLTAGE);
 800f594:	f44f 720a 	mov.w	r2, #552	@ 0x228
 800f598:	2103      	movs	r1, #3
 800f59a:	68a0      	ldr	r0, [r4, #8]
 800f59c:	f008 f890 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_CURRENT);
 800f5a0:	f240 2229 	movw	r2, #553	@ 0x229
 800f5a4:	2103      	movs	r1, #3
 800f5a6:	68a0      	ldr	r0, [r4, #8]
 800f5a8:	f008 f88a 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_POWER);
 800f5ac:	f240 222a 	movw	r2, #554	@ 0x22a
 800f5b0:	2103      	movs	r1, #3
 800f5b2:	68a0      	ldr	r0, [r4, #8]
 800f5b4:	f008 f884 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_ENERGY_DOUBLE);
 800f5b8:	f240 222b 	movw	r2, #555	@ 0x22b
 800f5bc:	2103      	movs	r1, #3
 800f5be:	68a0      	ldr	r0, [r4, #8]
 800f5c0:	f008 f87e 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_ENERGY_FLOAT);
 800f5c4:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800f5c8:	2103      	movs	r1, #3
 800f5ca:	68a0      	ldr	r0, [r4, #8]
 800f5cc:	f008 f878 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(MOTOR, REG_MOTOR_TEMPERATURE);
 800f5d0:	f240 222d 	movw	r2, #557	@ 0x22d
 800f5d4:	2103      	movs	r1, #3
 800f5d6:	68a0      	ldr	r0, [r4, #8]
 800f5d8:	f008 f872 	bl	80176c0 <_ZN10Publishers8AddTopicEht>

	// Activate topics
#ifdef PUBLISH_MOTOR_TIMEBASE
	publishers->ActivateTopic(MOTOR, REG_TIMEBASE);
 800f5dc:	68a0      	ldr	r0, [r4, #8]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	2103      	movs	r1, #3

#ifdef PUBLISHER_MOTOR_ACTIVE
	// Activate publisher
	publishers->ActivatePublisher(MOTOR);
#endif
}
 800f5e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	publishers->ActivateTopic(MOTOR, REG_TIMEBASE);
 800f5e6:	f007 bee0 	b.w	80173aa <_ZN10Publishers13ActivateTopicEht>

0800f5ea <_ZN15PlatformSensors20ConfigureMotorSensorEv>:

/**
 * @brief Configure motor sensor
 */
void PlatformSensors::ConfigureMotorSensor(void) {
 800f5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Reset the sensor
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_RST, HAL_MAX_DELAY);
 800f5ec:	f04f 35ff 	mov.w	r5, #4294967295
void PlatformSensors::ConfigureMotorSensor(void) {
 800f5f0:	4604      	mov	r4, r0
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_RST, HAL_MAX_DELAY);
 800f5f2:	2380      	movs	r3, #128	@ 0x80
 800f5f4:	22f0      	movs	r2, #240	@ 0xf0
 800f5f6:	2104      	movs	r1, #4
 800f5f8:	9500      	str	r5, [sp, #0]
 800f5fa:	6800      	ldr	r0, [r0, #0]
 800f5fc:	f009 fef9 	bl	80193f2 <_ZN7Sensors15ConfigureSensorEhthm>

	HAL_Delay(100);
 800f600:	2064      	movs	r0, #100	@ 0x64
 800f602:	f7f3 ff69 	bl	80034d8 <HAL_Delay>

	// Configure sensor
//	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_TBCTL, 0xF2, HAL_MAX_DELAY);					// use external oscillator
	sensors->ConfigureSensor(ENERGY_MONITORING_LTC2947, LTC2947_OPCTL, LTC2947_OPCTL_CONT, HAL_MAX_DELAY); 	// continuous reading
 800f606:	2308      	movs	r3, #8
 800f608:	22f0      	movs	r2, #240	@ 0xf0
 800f60a:	2104      	movs	r1, #4
 800f60c:	9500      	str	r5, [sp, #0]
 800f60e:	6820      	ldr	r0, [r4, #0]
 800f610:	f009 feef 	bl	80193f2 <_ZN7Sensors15ConfigureSensorEhthm>
}
 800f614:	b003      	add	sp, #12
 800f616:	bd30      	pop	{r4, r5, pc}

0800f618 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>:
 * @param output length: output length
 * @param input use_semaphore: false to disable the use of semaphores for this access. DEFAULT=true
 * @return whether successful
 */
template <typename T>
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800f620:	4689      	mov	r9, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f622:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f626:	461f      	mov	r7, r3
 800f628:	9000      	str	r0, [sp, #0]
 800f62a:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f62c:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f62e:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f632:	f7fd fbfb 	bl	800ce2c <osSemaphoreAcquire>
	// Find register
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f636:	f10d 020f 	add.w	r2, sp, #15
 800f63a:	4649      	mov	r1, r9
 800f63c:	9800      	ldr	r0, [sp, #0]
 800f63e:	f009 f864 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f642:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f646:	4604      	mov	r4, r0
	if (!success) {
 800f648:	b953      	cbnz	r3, 800f660 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x48>
	}

	// Get type ID
	uint8_t registered_type = GetTypeID<T>(&success);
	if (!success) {
		osSemaphoreRelease(RegistersSemaphore);
 800f64a:	9b00      	ldr	r3, [sp, #0]
		return false;
 800f64c:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	f7fd fc1f 	bl	800ce94 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
		return true;
	}
	osSemaphoreRelease(RegistersSemaphore);
	return true;
}
 800f656:	4650      	mov	r0, sl
 800f658:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800f65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f660:	f10d 000f 	add.w	r0, sp, #15
 800f664:	f7ff fe30 	bl	800f2c8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 800f668:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800f66c:	f1ba 0f00 	cmp.w	sl, #0
 800f670:	d0eb      	beq.n	800f64a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800f672:	7923      	ldrb	r3, [r4, #4]
 800f674:	4283      	cmp	r3, r0
 800f676:	d1e8      	bne.n	800f64a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f678:	3304      	adds	r3, #4
 800f67a:	9a00      	ldr	r2, [sp, #0]
 800f67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0e2      	beq.n	800f64a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800f684:	7a62      	ldrb	r2, [r4, #9]
 800f686:	2a00      	cmp	r2, #0
 800f688:	d05a      	beq.n	800f740 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f68a:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800f68c:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f68e:	e9d3 0300 	ldrd	r0, r3, [r3]
 800f692:	f88d 200f 	strb.w	r2, [sp, #15]
 800f696:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800f698:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f69c:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800f6a0:	d302      	bcc.n	800f6a8 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f6a2:	4838      	ldr	r0, [pc, #224]	@ (800f784 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x16c>)
 800f6a4:	f00d fb1d 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800f6a8:	010b      	lsls	r3, r1, #4
 800f6aa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f6ae:	f850 8003 	ldr.w	r8, [r0, r3]
 800f6b2:	684b      	ldr	r3, [r1, #4]
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	68cb      	ldr	r3, [r1, #12]
 800f6b8:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f6ba:	f1bb 0f00 	cmp.w	fp, #0
 800f6be:	d006      	beq.n	800f6ce <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xb6>
 800f6c0:	68e3      	ldr	r3, [r4, #12]
 800f6c2:	b123      	cbz	r3, 800f6ce <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800f6c4:	f04f 31ff 	mov.w	r1, #4294967295
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f7fd fbaf 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800f6ce:	7863      	ldrb	r3, [r4, #1]
 800f6d0:	b1db      	cbz	r3, 800f70a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
			if (output != NULL) {
 800f6d2:	2d00      	cmp	r5, #0
 800f6d4:	d039      	beq.n	800f74a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x132>
				*callback_output = output;
 800f6d6:	462a      	mov	r2, r5
 800f6d8:	2300      	movs	r3, #0
 800f6da:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800f6dc:	b1ae      	cbz	r6, 800f70a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f6de:	463b      	mov	r3, r7
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	4649      	mov	r1, r9
 800f6e4:	9801      	ldr	r0, [sp, #4]
 800f6e6:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f6e8:	7963      	ldrb	r3, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f6ea:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f6ee:	b373      	cbz	r3, 800f74e <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x136>
 800f6f0:	88e3      	ldrh	r3, [r4, #6]
 800f6f2:	b103      	cbz	r3, 800f6f6 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xde>
					*length = 1;
 800f6f4:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	6819      	ldr	r1, [r3, #0]
 800f6fa:	42a9      	cmp	r1, r5
 800f6fc:	d005      	beq.n	800f70a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
 800f6fe:	b125      	cbz	r5, 800f70a <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xf2>
						output[index] = (*callback_output )[index];
 800f700:	883a      	ldrh	r2, [r7, #0]
 800f702:	4628      	mov	r0, r5
 800f704:	0092      	lsls	r2, r2, #2
 800f706:	f00e faa9 	bl	801dc5c <memcpy>
		if (not success && target_register->mode.pointer) {
 800f70a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800f70e:	b97b      	cbnz	r3, 800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
 800f710:	7823      	ldrb	r3, [r4, #0]
 800f712:	b16b      	cbz	r3, 800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
			success = true;
 800f714:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f716:	7962      	ldrb	r2, [r4, #5]
			success = true;
 800f718:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f71c:	b35a      	cbz	r2, 800f776 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x15e>
 800f71e:	88e2      	ldrh	r2, [r4, #6]
 800f720:	bb02      	cbnz	r2, 800f764 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x14c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f722:	e9d8 1300 	ldrd	r1, r3, [r8]
 800f726:	1a5b      	subs	r3, r3, r1
				*length = register_vector->size();
 800f728:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800f72c:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800f72e:	b9ad      	cbnz	r5, 800f75c <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x144>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f730:	f1bb 0f00 	cmp.w	fp, #0
 800f734:	d004      	beq.n	800f740 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
 800f736:	68e3      	ldr	r3, [r4, #12]
 800f738:	b113      	cbz	r3, 800f740 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x128>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800f73a:	6818      	ldr	r0, [r3, #0]
 800f73c:	f7fd fbaa 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800f740:	9b00      	ldr	r3, [sp, #0]
 800f742:	6818      	ldr	r0, [r3, #0]
 800f744:	f7fd fba6 	bl	800ce94 <osSemaphoreRelease>
	return true;
 800f748:	e785      	b.n	800f656 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800f74a:	aa04      	add	r2, sp, #16
 800f74c:	e7c4      	b.n	800f6d8 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xc0>
					*length = 1;
 800f74e:	2301      	movs	r3, #1
 800f750:	e7d0      	b.n	800f6f4 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0xdc>
						output[index] = (*register_vector)[index];
 800f752:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800f756:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
					for (uint16_t index = 0; index < *length; index++) {
 800f75a:	3201      	adds	r2, #1
 800f75c:	b290      	uxth	r0, r2
 800f75e:	4298      	cmp	r0, r3
 800f760:	d3f7      	bcc.n	800f752 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x13a>
 800f762:	e7e5      	b.n	800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*length = target_register->register_info.length;
 800f764:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800f766:	2d00      	cmp	r5, #0
 800f768:	d0e2      	beq.n	800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f76a:	0092      	lsls	r2, r2, #2
 800f76c:	4641      	mov	r1, r8
 800f76e:	4628      	mov	r0, r5
 800f770:	f00e f97c 	bl	801da6c <memmove>
	  return __result + _Num;
 800f774:	e7dc      	b.n	800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
				*length = 1;
 800f776:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800f778:	2d00      	cmp	r5, #0
 800f77a:	d0d9      	beq.n	800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
					*output = *callbacks.pointer;
 800f77c:	f8d8 3000 	ldr.w	r3, [r8]
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	e7d5      	b.n	800f730 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb+0x118>
 800f784:	0801dfb4 	.word	0x0801dfb4

0800f788 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	4606      	mov	r6, r0
 800f78e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f792:	4688      	mov	r8, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f794:	6800      	ldr	r0, [r0, #0]
 800f796:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f79a:	4615      	mov	r5, r2
 800f79c:	469b      	mov	fp, r3
 800f79e:	f89d a238 	ldrb.w	sl, [sp, #568]	@ 0x238
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f7a2:	f7fd fb43 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f7a6:	f10d 020f 	add.w	r2, sp, #15
 800f7aa:	4641      	mov	r1, r8
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f008 ffac 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f7b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f7b6:	4604      	mov	r4, r0
	if (!success) {
 800f7b8:	b94a      	cbnz	r2, 800f7ce <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x46>
		return false;
 800f7ba:	f04f 0900 	mov.w	r9, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f7be:	6830      	ldr	r0, [r6, #0]
 800f7c0:	f7fd fb68 	bl	800ce94 <osSemaphoreRelease>
}
 800f7c4:	4648      	mov	r0, r9
 800f7c6:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 800f7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f7ce:	f10d 000f 	add.w	r0, sp, #15
 800f7d2:	f7ff fd2b 	bl	800f22c <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 800f7d6:	f89d 900f 	ldrb.w	r9, [sp, #15]
 800f7da:	f1b9 0f00 	cmp.w	r9, #0
 800f7de:	d0ec      	beq.n	800f7ba <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800f7e0:	7922      	ldrb	r2, [r4, #4]
 800f7e2:	4282      	cmp	r2, r0
 800f7e4:	d1e9      	bne.n	800f7ba <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f7e6:	3204      	adds	r2, #4
 800f7e8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800f7ec:	2a00      	cmp	r2, #0
 800f7ee:	d0e4      	beq.n	800f7ba <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800f7f0:	7a61      	ldrb	r1, [r4, #9]
 800f7f2:	2900      	cmp	r1, #0
 800f7f4:	d057      	beq.n	800f8a6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	e9d2 7000 	ldrd	r7, r0, [r2]
 800f7fc:	f88d 100f 	strb.w	r1, [sp, #15]
 800f800:	1bc0      	subs	r0, r0, r7
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f802:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 800f804:	ebb1 1f20 	cmp.w	r1, r0, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f808:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (__n >= this->size())
 800f80c:	d302      	bcc.n	800f814 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x8c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f80e:	4840      	ldr	r0, [pc, #256]	@ (800f910 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x188>)
 800f810:	f00d fa67 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800f814:	010a      	lsls	r2, r1, #4
 800f816:	eb07 1101 	add.w	r1, r7, r1, lsl #4
 800f81a:	58bb      	ldr	r3, [r7, r2]
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	684b      	ldr	r3, [r1, #4]
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	68cb      	ldr	r3, [r1, #12]
 800f824:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f826:	f1ba 0f00 	cmp.w	sl, #0
 800f82a:	d006      	beq.n	800f83a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xb2>
 800f82c:	68e2      	ldr	r2, [r4, #12]
 800f82e:	b122      	cbz	r2, 800f83a <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xb2>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800f830:	f04f 31ff 	mov.w	r1, #4294967295
 800f834:	6810      	ldr	r0, [r2, #0]
 800f836:	f7fd faf9 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800f83a:	7862      	ldrb	r2, [r4, #1]
 800f83c:	b1b2      	cbz	r2, 800f86c <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
			if (output != NULL) {
 800f83e:	2d00      	cmp	r5, #0
 800f840:	d035      	beq.n	800f8ae <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x126>
				*callback_output = output;
 800f842:	4629      	mov	r1, r5
 800f844:	2200      	movs	r2, #0
 800f846:	6011      	str	r1, [r2, #0]
			if (callbacks.read != NULL) {
 800f848:	b187      	cbz	r7, 800f86c <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f84a:	465b      	mov	r3, fp
 800f84c:	4641      	mov	r1, r8
 800f84e:	9801      	ldr	r0, [sp, #4]
 800f850:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f852:	7962      	ldrb	r2, [r4, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f854:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f858:	b35a      	cbz	r2, 800f8b2 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x12a>
 800f85a:	88e2      	ldrh	r2, [r4, #6]
 800f85c:	b10a      	cbz	r2, 800f862 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xda>
					*length = 1;
 800f85e:	f8ab 2000 	strh.w	r2, [fp]
				if (*callback_output != output && output != NULL) {
 800f862:	2200      	movs	r2, #0
 800f864:	6811      	ldr	r1, [r2, #0]
 800f866:	42a9      	cmp	r1, r5
 800f868:	d000      	beq.n	800f86c <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
 800f86a:	bb85      	cbnz	r5, 800f8ce <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x146>
		if (not success && target_register->mode.pointer) {
 800f86c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f870:	b98a      	cbnz	r2, 800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
 800f872:	7822      	ldrb	r2, [r4, #0]
 800f874:	b17a      	cbz	r2, 800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
			success = true;
 800f876:	2201      	movs	r2, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f878:	7961      	ldrb	r1, [r4, #5]
			success = true;
 800f87a:	f88d 200f 	strb.w	r2, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800f87e:	2900      	cmp	r1, #0
 800f880:	d03d      	beq.n	800f8fe <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x176>
 800f882:	88e2      	ldrh	r2, [r4, #6]
 800f884:	bb8a      	cbnz	r2, 800f8ea <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x162>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f886:	9b00      	ldr	r3, [sp, #0]
 800f888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f88c:	1a09      	subs	r1, r1, r0
 800f88e:	1049      	asrs	r1, r1, #1
				*length = register_vector->size();
 800f890:	f8ab 1000 	strh.w	r1, [fp]
				if (output != NULL) {
 800f894:	bb1d      	cbnz	r5, 800f8de <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x156>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f896:	f1ba 0f00 	cmp.w	sl, #0
 800f89a:	d004      	beq.n	800f8a6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
 800f89c:	68e3      	ldr	r3, [r4, #12]
 800f89e:	b113      	cbz	r3, 800f8a6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x11e>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800f8a0:	6818      	ldr	r0, [r3, #0]
 800f8a2:	f7fd faf7 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800f8a6:	6830      	ldr	r0, [r6, #0]
 800f8a8:	f7fd faf4 	bl	800ce94 <osSemaphoreRelease>
	return true;
 800f8ac:	e78a      	b.n	800f7c4 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x3c>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800f8ae:	a904      	add	r1, sp, #16
 800f8b0:	e7c8      	b.n	800f844 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xbc>
					*length = 1;
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	e7d3      	b.n	800f85e <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xd6>
						output[index] = (*callback_output )[index];
 800f8b6:	b290      	uxth	r0, r2
 800f8b8:	3201      	adds	r2, #1
 800f8ba:	f831 c010 	ldrh.w	ip, [r1, r0, lsl #1]
 800f8be:	f825 c010 	strh.w	ip, [r5, r0, lsl #1]
					for (uint16_t index = 0; index < *length; index++) {
 800f8c2:	f8bb c000 	ldrh.w	ip, [fp]
 800f8c6:	b290      	uxth	r0, r2
 800f8c8:	4584      	cmp	ip, r0
 800f8ca:	d8f4      	bhi.n	800f8b6 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x12e>
 800f8cc:	e7ce      	b.n	800f86c <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0xe4>
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	e7f7      	b.n	800f8c2 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x13a>
	return *(this->_M_impl._M_start + __n);
 800f8d2:	b291      	uxth	r1, r2
 800f8d4:	3201      	adds	r2, #1
						output[index] = (*register_vector)[index];
 800f8d6:	f830 7011 	ldrh.w	r7, [r0, r1, lsl #1]
 800f8da:	f825 7011 	strh.w	r7, [r5, r1, lsl #1]
					for (uint16_t index = 0; index < *length; index++) {
 800f8de:	f8bb 7000 	ldrh.w	r7, [fp]
 800f8e2:	b291      	uxth	r1, r2
 800f8e4:	428f      	cmp	r7, r1
 800f8e6:	d8f4      	bhi.n	800f8d2 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x14a>
 800f8e8:	e7d5      	b.n	800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
				*length = target_register->register_info.length;
 800f8ea:	f8ab 2000 	strh.w	r2, [fp]
				if (output != NULL) {
 800f8ee:	2d00      	cmp	r5, #0
 800f8f0:	d0d1      	beq.n	800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f8f2:	0052      	lsls	r2, r2, #1
 800f8f4:	9900      	ldr	r1, [sp, #0]
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f00e f8b8 	bl	801da6c <memmove>
	  return __result + _Num;
 800f8fc:	e7cb      	b.n	800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
				*length = 1;
 800f8fe:	f8ab 2000 	strh.w	r2, [fp]
				if (output != NULL) {
 800f902:	2d00      	cmp	r5, #0
 800f904:	d0c7      	beq.n	800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
					*output = *callbacks.pointer;
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	802b      	strh	r3, [r5, #0]
 800f90c:	e7c3      	b.n	800f896 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb+0x10e>
 800f90e:	bf00      	nop
 800f910:	0801dfb4 	.word	0x0801dfb4

0800f914 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 800f91c:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f91e:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f922:	461f      	mov	r7, r3
 800f924:	9000      	str	r0, [sp, #0]
 800f926:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f928:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800f92a:	f89d b838 	ldrb.w	fp, [sp, #2104]	@ 0x838
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800f92e:	f7fd fa7d 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f932:	f10d 020f 	add.w	r2, sp, #15
 800f936:	4649      	mov	r1, r9
 800f938:	9800      	ldr	r0, [sp, #0]
 800f93a:	f008 fee6 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800f93e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800f942:	4605      	mov	r5, r0
	if (!success) {
 800f944:	b953      	cbnz	r3, 800f95c <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 800f946:	9b00      	ldr	r3, [sp, #0]
		return false;
 800f948:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800f94c:	6818      	ldr	r0, [r3, #0]
 800f94e:	f7fd faa1 	bl	800ce94 <osSemaphoreRelease>
}
 800f952:	4650      	mov	r0, sl
 800f954:	f60d 0d14 	addw	sp, sp, #2068	@ 0x814
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800f95c:	f10d 000f 	add.w	r0, sp, #15
 800f960:	f7ff fbc8 	bl	800f0f4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) {
 800f964:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800f968:	f1ba 0f00 	cmp.w	sl, #0
 800f96c:	d0eb      	beq.n	800f946 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800f96e:	792b      	ldrb	r3, [r5, #4]
 800f970:	4283      	cmp	r3, r0
 800f972:	d1e8      	bne.n	800f946 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800f974:	3304      	adds	r3, #4
 800f976:	9a00      	ldr	r2, [sp, #0]
 800f978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d0e2      	beq.n	800f946 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800f980:	7a6a      	ldrb	r2, [r5, #9]
 800f982:	2a00      	cmp	r2, #0
 800f984:	d060      	beq.n	800fa48 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f986:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800f988:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f98a:	e9d3 0300 	ldrd	r0, r3, [r3]
 800f98e:	f88d 200f 	strb.w	r2, [sp, #15]
 800f992:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 800f994:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f998:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 800f99c:	d302      	bcc.n	800f9a4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x90>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800f99e:	483a      	ldr	r0, [pc, #232]	@ (800fa88 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x174>)
 800f9a0:	f00d f99f 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 800f9a4:	010b      	lsls	r3, r1, #4
 800f9a6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800f9aa:	f850 8003 	ldr.w	r8, [r0, r3]
 800f9ae:	684b      	ldr	r3, [r1, #4]
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	68cb      	ldr	r3, [r1, #12]
 800f9b4:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800f9b6:	f1bb 0f00 	cmp.w	fp, #0
 800f9ba:	d006      	beq.n	800f9ca <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xb6>
 800f9bc:	68eb      	ldr	r3, [r5, #12]
 800f9be:	b123      	cbz	r3, 800f9ca <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xb6>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800f9c0:	f04f 31ff 	mov.w	r1, #4294967295
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f7fd fa31 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800f9ca:	786b      	ldrb	r3, [r5, #1]
 800f9cc:	b1e3      	cbz	r3, 800fa08 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
			if (output != NULL) {
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d03f      	beq.n	800fa52 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x13e>
				*callback_output = output;
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800f9d8:	b1b6      	cbz	r6, 800fa08 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f9da:	463b      	mov	r3, r7
 800f9dc:	2200      	movs	r2, #0
 800f9de:	4649      	mov	r1, r9
 800f9e0:	9801      	ldr	r0, [sp, #4]
 800f9e2:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f9e4:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800f9e6:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d033      	beq.n	800fa56 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x142>
 800f9ee:	88eb      	ldrh	r3, [r5, #6]
 800f9f0:	b103      	cbz	r3, 800f9f4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xe0>
					*length = 1;
 800f9f2:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	6819      	ldr	r1, [r3, #0]
 800f9f8:	42a1      	cmp	r1, r4
 800f9fa:	d005      	beq.n	800fa08 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
 800f9fc:	b124      	cbz	r4, 800fa08 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xf4>
						output[index] = (*callback_output )[index];
 800f9fe:	883a      	ldrh	r2, [r7, #0]
 800fa00:	4620      	mov	r0, r4
 800fa02:	00d2      	lsls	r2, r2, #3
 800fa04:	f00e f92a 	bl	801dc5c <memcpy>
		if (not success && target_register->mode.pointer) {
 800fa08:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800fa0c:	b9a3      	cbnz	r3, 800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800fa0e:	782b      	ldrb	r3, [r5, #0]
 800fa10:	b193      	cbz	r3, 800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
			success = true;
 800fa12:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fa14:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800fa16:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fa1a:	b362      	cbz	r2, 800fa76 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x162>
 800fa1c:	88ea      	ldrh	r2, [r5, #6]
 800fa1e:	bb0a      	cbnz	r2, 800fa64 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x150>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fa20:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fa24:	1a9b      	subs	r3, r3, r2
 800fa26:	10db      	asrs	r3, r3, #3
				*length = register_vector->size();
 800fa28:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fa2a:	b12c      	cbz	r4, 800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	3a08      	subs	r2, #8
 800fa30:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
					for (uint16_t index = 0; index < *length; index++) {
 800fa34:	429c      	cmp	r4, r3
 800fa36:	d110      	bne.n	800fa5a <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x146>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fa38:	f1bb 0f00 	cmp.w	fp, #0
 800fa3c:	d004      	beq.n	800fa48 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
 800fa3e:	68eb      	ldr	r3, [r5, #12]
 800fa40:	b113      	cbz	r3, 800fa48 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x134>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fa42:	6818      	ldr	r0, [r3, #0]
 800fa44:	f7fd fa26 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800fa48:	9b00      	ldr	r3, [sp, #0]
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	f7fd fa22 	bl	800ce94 <osSemaphoreRelease>
	return true;
 800fa50:	e77f      	b.n	800f952 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800fa52:	aa04      	add	r2, sp, #16
 800fa54:	e7be      	b.n	800f9d4 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xc0>
					*length = 1;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e7cb      	b.n	800f9f2 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0xde>
						output[index] = (*register_vector)[index];
 800fa5a:	e9f2 0102 	ldrd	r0, r1, [r2, #8]!
 800fa5e:	e8e4 0102 	strd	r0, r1, [r4], #8
					for (uint16_t index = 0; index < *length; index++) {
 800fa62:	e7e7      	b.n	800fa34 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x120>
				*length = target_register->register_info.length;
 800fa64:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800fa66:	2c00      	cmp	r4, #0
 800fa68:	d0e6      	beq.n	800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fa6a:	00d2      	lsls	r2, r2, #3
 800fa6c:	4641      	mov	r1, r8
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f00d fffc 	bl	801da6c <memmove>
	  return __result + _Num;
 800fa74:	e7e0      	b.n	800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
				*length = 1;
 800fa76:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fa78:	2c00      	cmp	r4, #0
 800fa7a:	d0dd      	beq.n	800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
					*output = *callbacks.pointer;
 800fa7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fa80:	e9c4 2300 	strd	r2, r3, [r4]
 800fa84:	e7d8      	b.n	800fa38 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb+0x124>
 800fa86:	bf00      	nop
 800fa88:	0801dfb4 	.word	0x0801dfb4

0800fa8c <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_>:
		  [](void* context) -> void {
 800fa8c:	b510      	push	{r4, lr}
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW)) {
 800fa8e:	f240 2223 	movw	r2, #547	@ 0x223
		  [](void* context) -> void {
 800fa92:	b086      	sub	sp, #24
 800fa94:	4604      	mov	r4, r0
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_VOLTAGE_RAW)) {
 800fa96:	2104      	movs	r1, #4
 800fa98:	6800      	ldr	r0, [r0, #0]
 800fa9a:	f009 fcee 	bl	801947a <_ZN7Sensors18IsSensorDataActiveEht>
 800fa9e:	b1b0      	cbz	r0, 800face <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x42>
				  success = self->registers->ReadRegister<uint16_t>(REG_MOTOR_VOLTAGE_RAW, &V_raw, &length, false);
 800faa0:	2300      	movs	r3, #0
 800faa2:	aa04      	add	r2, sp, #16
 800faa4:	f240 2123 	movw	r1, #547	@ 0x223
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	f10d 030e 	add.w	r3, sp, #14
 800faae:	6860      	ldr	r0, [r4, #4]
 800fab0:	f7ff fe6a 	bl	800f788 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>
				  if (success)
 800fab4:	b158      	cbz	r0, 800face <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x42>
					 self->Vmotor = V_raw * 0.002f; // LSB = 2mV
 800fab6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800faba:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fbe0 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x154>
 800fabe:	ee07 3a90 	vmov	s15, r3
 800fac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800faca:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_CURRENT_RAW)) {
 800face:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800fad2:	2104      	movs	r1, #4
 800fad4:	6820      	ldr	r0, [r4, #0]
 800fad6:	f009 fcd0 	bl	801947a <_ZN7Sensors18IsSensorDataActiveEht>
 800fada:	b1c0      	cbz	r0, 800fb0e <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x82>
				  success = self->registers->ReadRegister<uint32_t>(REG_MOTOR_CURRENT_RAW, &I_raw, &length, false);
 800fadc:	2300      	movs	r3, #0
 800fade:	aa04      	add	r2, sp, #16
 800fae0:	f44f 7109 	mov.w	r1, #548	@ 0x224
 800fae4:	9300      	str	r3, [sp, #0]
 800fae6:	f10d 030e 	add.w	r3, sp, #14
 800faea:	6860      	ldr	r0, [r4, #4]
 800faec:	f7ff fd94 	bl	800f618 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
				  if (success)
 800faf0:	b168      	cbz	r0, 800fb0e <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x82>
					 self->Imotor = I_raw * 0.003f * 0.999f; // LSB = 3mA + correction factor of 0.999 for a 60um copper thickness PCB
 800faf2:	eddd 7a04 	vldr	s15, [sp, #16]
 800faf6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fbe4 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x158>
 800fafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb02:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800fbe8 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fb06:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb0a:	edc4 7a15 	vstr	s15, [r4, #84]	@ 0x54
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_POWER_RAW)) {
 800fb0e:	f240 2225 	movw	r2, #549	@ 0x225
 800fb12:	2104      	movs	r1, #4
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	f009 fcb0 	bl	801947a <_ZN7Sensors18IsSensorDataActiveEht>
 800fb1a:	b1c0      	cbz	r0, 800fb4e <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0xc2>
				  success = self->registers->ReadRegister<uint32_t>(REG_MOTOR_POWER_RAW, &P_raw, &length, false);
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	aa04      	add	r2, sp, #16
 800fb20:	f240 2125 	movw	r1, #549	@ 0x225
 800fb24:	9300      	str	r3, [sp, #0]
 800fb26:	f10d 030e 	add.w	r3, sp, #14
 800fb2a:	6860      	ldr	r0, [r4, #4]
 800fb2c:	f7ff fd74 	bl	800f618 <_ZN9Registers12ReadRegisterImEEbtPT_Ptb>
				  if (success)
 800fb30:	b168      	cbz	r0, 800fb4e <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0xc2>
					 self->Pmotor = P_raw * 0.05f * 0.999f; // LSB = 50mW + correction factor of 0.999 for a 60um copper thickness PCB
 800fb32:	eddd 7a04 	vldr	s15, [sp, #16]
 800fb36:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800fbec <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x160>
 800fb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb42:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800fbe8 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fb46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb4a:	edc4 7a16 	vstr	s15, [r4, #88]	@ 0x58
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_ENERGY_RAW)) {
 800fb4e:	f240 2226 	movw	r2, #550	@ 0x226
 800fb52:	2104      	movs	r1, #4
 800fb54:	6820      	ldr	r0, [r4, #0]
 800fb56:	f009 fc90 	bl	801947a <_ZN7Sensors18IsSensorDataActiveEht>
 800fb5a:	b1f0      	cbz	r0, 800fb9a <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x10e>
				  success = self->registers->ReadRegister<uint64_t>(REG_MOTOR_ENERGY_RAW, &E_raw, &length, false);
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	aa04      	add	r2, sp, #16
 800fb60:	f240 2126 	movw	r1, #550	@ 0x226
 800fb64:	9300      	str	r3, [sp, #0]
 800fb66:	f10d 030e 	add.w	r3, sp, #14
 800fb6a:	6860      	ldr	r0, [r4, #4]
 800fb6c:	f7ff fed2 	bl	800f914 <_ZN9Registers12ReadRegisterIyEEbtPT_Ptb>
				  if (success) {
 800fb70:	b198      	cbz	r0, 800fb9a <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x10e>
					 self->Emotor = E_raw * 0.00001989f * 0.999f; // LSB = 19.89E-06 Ws or 0.6416 * 1/fEXT * 2^PRE * (DIV+1) [Ws] + correction factor of 0.999 for a 60um copper thickness PCB
 800fb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb76:	f7f0 fc85 	bl	8000484 <__aeabi_ul2f>
 800fb7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800fbf0 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x164>
 800fb7e:	ee07 0a90 	vmov	s15, r0
 800fb82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb86:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fbe8 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x15c>
 800fb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
				  	 self->Emotor_float = (float) self->Emotor;
 800fb92:	edc4 7a1a 	vstr	s15, [r4, #104]	@ 0x68
					 self->Emotor = E_raw * 0.00001989f * 0.999f; // LSB = 19.89E-06 Ws or 0.6416 * 1/fEXT * 2^PRE * (DIV+1) [Ws] + correction factor of 0.999 for a 60um copper thickness PCB
 800fb96:	ed84 6b18 	vstr	d6, [r4, #96]	@ 0x60
			  if (self->sensors->IsSensorDataActive(ENERGY_MONITORING_LTC2947, REG_MOTOR_TEMPERATURE_RAW)) {
 800fb9a:	f240 2227 	movw	r2, #551	@ 0x227
 800fb9e:	2104      	movs	r1, #4
 800fba0:	6820      	ldr	r0, [r4, #0]
 800fba2:	f009 fc6a 	bl	801947a <_ZN7Sensors18IsSensorDataActiveEht>
 800fba6:	b1c0      	cbz	r0, 800fbda <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x14e>
				  success = self->registers->ReadRegister<uint16_t>(REG_MOTOR_TEMPERATURE_RAW, &T_raw, &length, false);
 800fba8:	2300      	movs	r3, #0
 800fbaa:	aa04      	add	r2, sp, #16
 800fbac:	f240 2127 	movw	r1, #551	@ 0x227
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	f10d 030e 	add.w	r3, sp, #14
 800fbb6:	6860      	ldr	r0, [r4, #4]
 800fbb8:	f7ff fde6 	bl	800f788 <_ZN9Registers12ReadRegisterItEEbtPT_Ptb>
				  if (success)
 800fbbc:	b168      	cbz	r0, 800fbda <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x14e>
					 self->Tmotor = T_raw * 0.204f + 5.5; // in °C
 800fbbe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fbc2:	eef1 7a06 	vmov.f32	s15, #22	@ 0x40b00000  5.5
 800fbc6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800fbf4 <_ZZN15PlatformSensors14AddMotorSensorEvENUlPvE_4_FUNES0_+0x168>
 800fbca:	ee07 3a10 	vmov	s14, r3
 800fbce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fbd2:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fbd6:	edc4 7a1b 	vstr	s15, [r4, #108]	@ 0x6c
		  }
 800fbda:	b006      	add	sp, #24
 800fbdc:	bd10      	pop	{r4, pc}
 800fbde:	bf00      	nop
 800fbe0:	3b03126f 	.word	0x3b03126f
 800fbe4:	3b449ba6 	.word	0x3b449ba6
 800fbe8:	3f7fbe77 	.word	0x3f7fbe77
 800fbec:	3d4ccccd 	.word	0x3d4ccccd
 800fbf0:	37a6d973 	.word	0x37a6d973
 800fbf4:	3e50e560 	.word	0x3e50e560

0800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>:
      at(size_type __n)
 800fbf8:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fbfa:	e9d0 5400 	ldrd	r5, r4, [r0]
 800fbfe:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 800fc00:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fc04:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 800fc08:	d302      	bcc.n	800fc10 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800fc0a:	4803      	ldr	r0, [pc, #12]	@ (800fc18 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj+0x20>)
 800fc0c:	f00d f869 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800fc10:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop
 800fc18:	0801dfb4 	.word	0x0801dfb4

0800fc1c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 800fc24:	4689      	mov	r9, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fc26:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fc2a:	461f      	mov	r7, r3
 800fc2c:	9000      	str	r0, [sp, #0]
 800fc2e:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fc30:	6800      	ldr	r0, [r0, #0]
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 800fc32:	f89d b438 	ldrb.w	fp, [sp, #1080]	@ 0x438
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fc36:	f7fd f8f9 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800fc3a:	f10d 020f 	add.w	r2, sp, #15
 800fc3e:	4649      	mov	r1, r9
 800fc40:	9800      	ldr	r0, [sp, #0]
 800fc42:	f008 fd62 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800fc46:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800fc4a:	4605      	mov	r5, r0
	if (!success) {
 800fc4c:	b953      	cbnz	r3, 800fc64 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x48>
		osSemaphoreRelease(RegistersSemaphore);
 800fc4e:	9b00      	ldr	r3, [sp, #0]
		return false;
 800fc50:	f04f 0a00 	mov.w	sl, #0
		osSemaphoreRelease(RegistersSemaphore);
 800fc54:	6818      	ldr	r0, [r3, #0]
 800fc56:	f7fd f91d 	bl	800ce94 <osSemaphoreRelease>
}
 800fc5a:	4650      	mov	r0, sl
 800fc5c:	f20d 4d14 	addw	sp, sp, #1044	@ 0x414
 800fc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800fc64:	f10d 000f 	add.w	r0, sp, #15
 800fc68:	f7ff fb7c 	bl	800f364 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800fc6c:	f89d a00f 	ldrb.w	sl, [sp, #15]
 800fc70:	f1ba 0f00 	cmp.w	sl, #0
 800fc74:	d0eb      	beq.n	800fc4e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->register_info.type != registered_type) {
 800fc76:	792b      	ldrb	r3, [r5, #4]
 800fc78:	4283      	cmp	r3, r0
 800fc7a:	d1e8      	bne.n	800fc4e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	9a00      	ldr	r2, [sp, #0]
 800fc80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d0e2      	beq.n	800fc4e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x32>
	if (target_register->access.read) {
 800fc88:	7a6b      	ldrb	r3, [r5, #9]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d052      	beq.n	800fd34 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fc8e:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fc90:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 800fc92:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 800fc96:	f7ff ffaf 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
 800fc9a:	e9d0 8300 	ldrd	r8, r3, [r0]
 800fc9e:	9301      	str	r3, [sp, #4]
 800fca0:	68c3      	ldr	r3, [r0, #12]
 800fca2:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fca4:	f1bb 0f00 	cmp.w	fp, #0
 800fca8:	d006      	beq.n	800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x9c>
 800fcaa:	68eb      	ldr	r3, [r5, #12]
 800fcac:	b123      	cbz	r3, 800fcb8 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x9c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 800fcae:	f04f 31ff 	mov.w	r1, #4294967295
 800fcb2:	6818      	ldr	r0, [r3, #0]
 800fcb4:	f7fd f8ba 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 800fcb8:	786b      	ldrb	r3, [r5, #1]
 800fcba:	b1e3      	cbz	r3, 800fcf6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
			if (output != NULL) {
 800fcbc:	2c00      	cmp	r4, #0
 800fcbe:	d03e      	beq.n	800fd3e <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x122>
				*callback_output = output;
 800fcc0:	4622      	mov	r2, r4
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 800fcc6:	b1b6      	cbz	r6, 800fcf6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fcc8:	463b      	mov	r3, r7
 800fcca:	2200      	movs	r2, #0
 800fccc:	4649      	mov	r1, r9
 800fcce:	9801      	ldr	r0, [sp, #4]
 800fcd0:	47b0      	blx	r6
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fcd2:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 800fcd4:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d032      	beq.n	800fd42 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x126>
 800fcdc:	88eb      	ldrh	r3, [r5, #6]
 800fcde:	b103      	cbz	r3, 800fce2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc6>
					*length = 1;
 800fce0:	803b      	strh	r3, [r7, #0]
				if (*callback_output != output && output != NULL) {
 800fce2:	2300      	movs	r3, #0
 800fce4:	6819      	ldr	r1, [r3, #0]
 800fce6:	42a1      	cmp	r1, r4
 800fce8:	d005      	beq.n	800fcf6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
 800fcea:	b124      	cbz	r4, 800fcf6 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xda>
						output[index] = (*callback_output )[index];
 800fcec:	883a      	ldrh	r2, [r7, #0]
 800fcee:	4620      	mov	r0, r4
 800fcf0:	0092      	lsls	r2, r2, #2
 800fcf2:	f00d ffb3 	bl	801dc5c <memcpy>
		if (not success && target_register->mode.pointer) {
 800fcf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800fcfa:	b99b      	cbnz	r3, 800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
 800fcfc:	782b      	ldrb	r3, [r5, #0]
 800fcfe:	b18b      	cbz	r3, 800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
			success = true;
 800fd00:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fd02:	796a      	ldrb	r2, [r5, #5]
			success = true;
 800fd04:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 800fd08:	b35a      	cbz	r2, 800fd62 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x146>
 800fd0a:	88ea      	ldrh	r2, [r5, #6]
 800fd0c:	bb02      	cbnz	r2, 800fd50 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x134>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd0e:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	109b      	asrs	r3, r3, #2
				*length = register_vector->size();
 800fd16:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fd18:	b124      	cbz	r4, 800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
					for (uint16_t index = 0; index < *length; index++) {
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d110      	bne.n	800fd46 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x12a>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 800fd24:	f1bb 0f00 	cmp.w	fp, #0
 800fd28:	d004      	beq.n	800fd34 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
 800fd2a:	68eb      	ldr	r3, [r5, #12]
 800fd2c:	b113      	cbz	r3, 800fd34 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x118>
			osSemaphoreRelease(*(target_register->register_semaphore));
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	f7fd f8b0 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 800fd34:	9b00      	ldr	r3, [sp, #0]
 800fd36:	6818      	ldr	r0, [r3, #0]
 800fd38:	f7fd f8ac 	bl	800ce94 <osSemaphoreRelease>
	return true;
 800fd3c:	e78d      	b.n	800fc5a <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x3e>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 800fd3e:	aa04      	add	r2, sp, #16
 800fd40:	e7bf      	b.n	800fcc2 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xa6>
					*length = 1;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e7cc      	b.n	800fce0 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0xc4>
						output[index] = (*register_vector)[index];
 800fd46:	f852 1b04 	ldr.w	r1, [r2], #4
 800fd4a:	f844 1b04 	str.w	r1, [r4], #4
					for (uint16_t index = 0; index < *length; index++) {
 800fd4e:	e7e7      	b.n	800fd20 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x104>
				*length = target_register->register_info.length;
 800fd50:	803a      	strh	r2, [r7, #0]
				if (output != NULL) {
 800fd52:	2c00      	cmp	r4, #0
 800fd54:	d0e6      	beq.n	800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fd56:	0092      	lsls	r2, r2, #2
 800fd58:	4641      	mov	r1, r8
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f00d fe86 	bl	801da6c <memmove>
	  return __result + _Num;
 800fd60:	e7e0      	b.n	800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
				*length = 1;
 800fd62:	803b      	strh	r3, [r7, #0]
				if (output != NULL) {
 800fd64:	2c00      	cmp	r4, #0
 800fd66:	d0dd      	beq.n	800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>
					*output = *callbacks.pointer;
 800fd68:	f8d8 3000 	ldr.w	r3, [r8]
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	e7d9      	b.n	800fd24 <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb+0x108>

0800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fd70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	e9d0 9a00 	ldrd	r9, sl, [r0]
 800fd78:	4617      	mov	r7, r2
	if (max_size() - size() < __n)
 800fd7a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd7e:	ebaa 0209 	sub.w	r2, sl, r9
 800fd82:	4680      	mov	r8, r0
 800fd84:	468b      	mov	fp, r1
	if (max_size() - size() < __n)
 800fd86:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd8a:	ea4f 1522 	mov.w	r5, r2, asr #4
	if (max_size() - size() < __n)
 800fd8e:	d102      	bne.n	800fd96 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800fd90:	4826      	ldr	r0, [pc, #152]	@ (800fe2c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 800fd92:	f00c ffa3 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 800fd96:	45ca      	cmp	sl, r9
 800fd98:	bf14      	ite	ne
 800fd9a:	462a      	movne	r2, r5
 800fd9c:	2201      	moveq	r2, #1
 800fd9e:	eba1 0409 	sub.w	r4, r1, r9
 800fda2:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fda4:	d232      	bcs.n	800fe0c <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fda6:	b39d      	cbz	r5, 800fe10 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fda8:	429d      	cmp	r5, r3
 800fdaa:	bf28      	it	cs
 800fdac:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fdae:	0128      	lsls	r0, r5, #4
 800fdb0:	f00c fedf 	bl	801cb72 <_Znwj>
 800fdb4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fdb6:	4434      	add	r4, r6
      _ForwardIterator __cur = __result;
 800fdb8:	46b4      	mov	ip, r6
 800fdba:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fdbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fdc2:	464c      	mov	r4, r9
      for (; __first != __last; ++__first, (void)++__cur)
 800fdc4:	45a3      	cmp	fp, r4
 800fdc6:	f10c 0c10 	add.w	ip, ip, #16
 800fdca:	f104 0710 	add.w	r7, r4, #16
 800fdce:	d121      	bne.n	800fe14 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
 800fdd0:	eba7 0709 	sub.w	r7, r7, r9
 800fdd4:	46a4      	mov	ip, r4
 800fdd6:	4437      	add	r7, r6
 800fdd8:	46be      	mov	lr, r7
 800fdda:	4554      	cmp	r4, sl
 800fddc:	f10e 0e10 	add.w	lr, lr, #16
 800fde0:	d11e      	bne.n	800fe20 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
 800fde2:	eba4 040c 	sub.w	r4, r4, ip
 800fde6:	4427      	add	r7, r4
	if (__p)
 800fde8:	f1b9 0f00 	cmp.w	r9, #0
 800fdec:	d006      	beq.n	800fdfc <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800fdee:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800fdf2:	4648      	mov	r0, r9
 800fdf4:	eba1 0109 	sub.w	r1, r1, r9
 800fdf8:	f00c fe96 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800fdfc:	e9c8 6700 	strd	r6, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fe00:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 800fe04:	f8c8 6008 	str.w	r6, [r8, #8]
    }
 800fe08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fe0c:	461d      	mov	r5, r3
 800fe0e:	e7ce      	b.n	800fdae <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fe10:	462e      	mov	r6, r5
 800fe12:	e7d0      	b.n	800fdb6 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fe14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fe18:	463c      	mov	r4, r7
 800fe1a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 800fe1e:	e7d1      	b.n	800fdc4 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 800fe20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fe24:	3410      	adds	r4, #16
 800fe26:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
 800fe2a:	e7d6      	b.n	800fdda <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
 800fe2c:	0801dd74 	.word	0x0801dd74

0800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 800fe30:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fe32:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 800fe36:	4605      	mov	r5, r0
 800fe38:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fe3a:	429c      	cmp	r4, r3
 800fe3c:	d005      	beq.n	800fe4a <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x1a>
 800fe3e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fe40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800fe44:	3410      	adds	r4, #16
 800fe46:	606c      	str	r4, [r5, #4]
      }
 800fe48:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f7ff ff90 	bl	800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800fe50:	e7fa      	b.n	800fe48 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_+0x18>

0800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 800fe52:	b570      	push	{r4, r5, r6, lr}
 800fe54:	4604      	mov	r4, r0
 800fe56:	b086      	sub	sp, #24
 800fe58:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800fe5a:	6800      	ldr	r0, [r0, #0]
 800fe5c:	f04f 31ff 	mov.w	r1, #4294967295
 800fe60:	f7fc ffe4 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 800fe64:	f10d 0207 	add.w	r2, sp, #7
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f008 fc4d 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 800fe70:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800fe74:	b125      	cbz	r5, 800fe80 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 800fe76:	6820      	ldr	r0, [r4, #0]
 800fe78:	f7fd f80c 	bl	800ce94 <osSemaphoreRelease>
}
 800fe7c:	b006      	add	sp, #24
 800fe7e:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800fe80:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 800fe84:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 800fe88:	f7ff fa6c 	bl	800f364 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f8ad 600a 	strh.w	r6, [sp, #10]
 800fe92:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 800fe96:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 800fe9a:	f88d 000c 	strb.w	r0, [sp, #12]
 800fe9e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 800fea2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d0e5      	beq.n	800fe76 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 800feaa:	a902      	add	r1, sp, #8
 800feac:	1d20      	adds	r0, r4, #4
 800feae:	f7ff ffbf 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 800feb2:	e7e0      	b.n	800fe76 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

0800feb4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800feb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800feb8:	e9d0 8900 	ldrd	r8, r9, [r0]
 800febc:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 800febe:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fec2:	eba9 0208 	sub.w	r2, r9, r8
 800fec6:	4607      	mov	r7, r0
 800fec8:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 800feca:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fece:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 800fed2:	d102      	bne.n	800feda <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 800fed4:	4820      	ldr	r0, [pc, #128]	@ (800ff58 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 800fed6:	f00c ff01 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 800feda:	45c1      	cmp	r9, r8
 800fedc:	bf14      	ite	ne
 800fede:	4622      	movne	r2, r4
 800fee0:	2201      	moveq	r2, #1
 800fee2:	eba1 0508 	sub.w	r5, r1, r8
 800fee6:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fee8:	d231      	bcs.n	800ff4e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800feea:	b394      	cbz	r4, 800ff52 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800feec:	429c      	cmp	r4, r3
 800feee:	bf28      	it	cs
 800fef0:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fef2:	0120      	lsls	r0, r4, #4
 800fef4:	f00c fe3d 	bl	801cb72 <_Znwj>
 800fef8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800fefa:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800ff04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800ff08:	dd04      	ble.n	800ff14 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	4641      	mov	r1, r8
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f00d fdac 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 800ff14:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 800ff18:	3510      	adds	r5, #16
      if (__count > 0)
 800ff1a:	f1b9 0f00 	cmp.w	r9, #0
 800ff1e:	4435      	add	r5, r6
 800ff20:	dd04      	ble.n	800ff2c <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ff22:	464a      	mov	r2, r9
 800ff24:	4651      	mov	r1, sl
 800ff26:	4628      	mov	r0, r5
 800ff28:	f00d fe98 	bl	801dc5c <memcpy>
      return __result + __count;
 800ff2c:	444d      	add	r5, r9
	if (__p)
 800ff2e:	f1b8 0f00 	cmp.w	r8, #0
 800ff32:	d005      	beq.n	800ff40 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 800ff34:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800ff36:	4640      	mov	r0, r8
 800ff38:	eba1 0108 	sub.w	r1, r1, r8
 800ff3c:	f00c fdf4 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 800ff40:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ff44:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 800ff48:	60be      	str	r6, [r7, #8]
    }
 800ff4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ff4e:	461c      	mov	r4, r3
 800ff50:	e7cf      	b.n	800fef2 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ff52:	4626      	mov	r6, r4
 800ff54:	e7d1      	b.n	800fefa <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 800ff56:	bf00      	nop
 800ff58:	0801dd74 	.word	0x0801dd74

0800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800ff5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff5e:	460d      	mov	r5, r1
 800ff60:	b087      	sub	sp, #28
 800ff62:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ff64:	f04f 31ff 	mov.w	r1, #4294967295
 800ff68:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 800ff6a:	4614      	mov	r4, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 800ff6c:	f7fc ff5e 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ff70:	4629      	mov	r1, r5
 800ff72:	f10d 0207 	add.w	r2, sp, #7
 800ff76:	4630      	mov	r0, r6
 800ff78:	f008 fbc7 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 800ff7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 800ff80:	4605      	mov	r5, r0
	if (!success) {
 800ff82:	b923      	cbnz	r3, 800ff8e <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 800ff84:	6830      	ldr	r0, [r6, #0]
 800ff86:	f7fc ff85 	bl	800ce94 <osSemaphoreRelease>
}
 800ff8a:	b007      	add	sp, #28
 800ff8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 800ff8e:	f10d 0007 	add.w	r0, sp, #7
 800ff92:	f7ff f9e7 	bl	800f364 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 800ff96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d0f2      	beq.n	800ff84 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 800ff9e:	792b      	ldrb	r3, [r5, #4]
 800ffa0:	4298      	cmp	r0, r3
 800ffa2:	d1ef      	bne.n	800ff84 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 800ffa4:	3004      	adds	r0, #4
 800ffa6:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 800ffaa:	2f00      	cmp	r7, #0
 800ffac:	d0ea      	beq.n	800ff84 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 800ffae:	782b      	ldrb	r3, [r5, #0]
 800ffb0:	b9db      	cbnz	r3, 800ffea <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x8e>
 800ffb2:	786b      	ldrb	r3, [r5, #1]
 800ffb4:	b9cb      	cbnz	r3, 800ffea <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x8e>
		callback.pointer = pointer;
 800ffb6:	9402      	str	r4, [sp, #8]
      size() const _GLIBCXX_NOEXCEPT
 800ffb8:	aa02      	add	r2, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ffba:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ffbe:	1ae3      	subs	r3, r4, r3
 800ffc0:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 800ffc2:	816b      	strh	r3, [r5, #10]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	429c      	cmp	r4, r3
 800ffc8:	d00a      	beq.n	800ffe0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x84>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ffca:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ffcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 800ffd0:	3410      	adds	r4, #16
 800ffd2:	607c      	str	r4, [r7, #4]
	target_register->mode.pointer = true;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 800ffd8:	f240 1301 	movw	r3, #257	@ 0x101
 800ffdc:	812b      	strh	r3, [r5, #8]
 800ffde:	e7d1      	b.n	800ff84 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	  _M_realloc_insert(end(), __x);
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	f7ff ff66 	bl	800feb4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 800ffe8:	e7f4      	b.n	800ffd4 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 800ffea:	8969      	ldrh	r1, [r5, #10]
 800ffec:	4638      	mov	r0, r7
 800ffee:	f7ff fe03 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 800fff2:	6004      	str	r4, [r0, #0]
 800fff4:	e7ee      	b.n	800ffd4 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
	...

0800fff8 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fffc:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010000:	4b26      	ldr	r3, [pc, #152]	@ (801009c <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 8010002:	4607      	mov	r7, r0
 8010004:	eba9 0408 	sub.w	r4, r9, r8
 8010008:	468a      	mov	sl, r1
 801000a:	4693      	mov	fp, r2
 801000c:	1124      	asrs	r4, r4, #4
 801000e:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 8010010:	4b23      	ldr	r3, [pc, #140]	@ (80100a0 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
 8010012:	429c      	cmp	r4, r3
 8010014:	d102      	bne.n	801001c <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8010016:	4823      	ldr	r0, [pc, #140]	@ (80100a4 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>)
 8010018:	f00c fe60 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801001c:	45c1      	cmp	r9, r8
 801001e:	bf14      	ite	ne
 8010020:	4622      	movne	r2, r4
 8010022:	2201      	moveq	r2, #1
 8010024:	eba1 0508 	sub.w	r5, r1, r8
 8010028:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801002a:	d232      	bcs.n	8010092 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801002c:	b39c      	cbz	r4, 8010096 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801002e:	429c      	cmp	r4, r3
 8010030:	bf28      	it	cs
 8010032:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010034:	2050      	movs	r0, #80	@ 0x50
 8010036:	4360      	muls	r0, r4
 8010038:	f00c fd9b 	bl	801cb72 <_Znwj>
 801003c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801003e:	2250      	movs	r2, #80	@ 0x50
 8010040:	4659      	mov	r1, fp
 8010042:	1970      	adds	r0, r6, r5
 8010044:	f00d fe0a 	bl	801dc5c <memcpy>
      if (__count > 0)
 8010048:	2d00      	cmp	r5, #0
 801004a:	dd04      	ble.n	8010056 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801004c:	462a      	mov	r2, r5
 801004e:	4641      	mov	r1, r8
 8010050:	4630      	mov	r0, r6
 8010052:	f00d fd0b 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8010056:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801005a:	3550      	adds	r5, #80	@ 0x50
      if (__count > 0)
 801005c:	f1b9 0f00 	cmp.w	r9, #0
 8010060:	4435      	add	r5, r6
 8010062:	dd04      	ble.n	801006e <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010064:	464a      	mov	r2, r9
 8010066:	4651      	mov	r1, sl
 8010068:	4628      	mov	r0, r5
 801006a:	f00d fdf7 	bl	801dc5c <memcpy>
      return __result + __count;
 801006e:	444d      	add	r5, r9
	if (__p)
 8010070:	f1b8 0f00 	cmp.w	r8, #0
 8010074:	d005      	beq.n	8010082 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010076:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010078:	4640      	mov	r0, r8
 801007a:	eba1 0108 	sub.w	r1, r1, r8
 801007e:	f00c fd53 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010082:	2350      	movs	r3, #80	@ 0x50
      this->_M_impl._M_finish = __new_finish;
 8010084:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010088:	fb03 6604 	mla	r6, r3, r4, r6
 801008c:	60be      	str	r6, [r7, #8]
    }
 801008e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010092:	461c      	mov	r4, r3
 8010094:	e7ce      	b.n	8010034 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010096:	4626      	mov	r6, r4
 8010098:	e7d1      	b.n	801003e <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801009a:	bf00      	nop
 801009c:	cccccccd 	.word	0xcccccccd
 80100a0:	01999999 	.word	0x01999999
 80100a4:	0801dd74 	.word	0x0801dd74

080100a8 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80100a8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80100aa:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 80100ae:	4604      	mov	r4, r0
 80100b0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80100b2:	42ab      	cmp	r3, r5
 80100b4:	d007      	beq.n	80100c6 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80100b6:	4618      	mov	r0, r3
 80100b8:	2250      	movs	r2, #80	@ 0x50
 80100ba:	f00d fdcf 	bl	801dc5c <memcpy>
	    ++this->_M_impl._M_finish;
 80100be:	6863      	ldr	r3, [r4, #4]
 80100c0:	3350      	adds	r3, #80	@ 0x50
 80100c2:	6063      	str	r3, [r4, #4]
      }
 80100c4:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 80100c6:	4619      	mov	r1, r3
 80100c8:	f7ff ff96 	bl	800fff8 <_ZNSt6vectorI9I2CAccessSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80100cc:	e7fa      	b.n	80100c4 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_+0x1c>
	...

080100d0 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80100d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80100d4:	e9d0 8900 	ldrd	r8, r9, [r0]
 80100d8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80100da:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80100de:	eba9 0208 	sub.w	r2, r9, r8
 80100e2:	4607      	mov	r7, r0
 80100e4:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 80100e6:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80100ea:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 80100ee:	d102      	bne.n	80100f6 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80100f0:	4820      	ldr	r0, [pc, #128]	@ (8010174 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 80100f2:	f00c fdf3 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 80100f6:	45c1      	cmp	r9, r8
 80100f8:	bf14      	ite	ne
 80100fa:	4622      	movne	r2, r4
 80100fc:	2201      	moveq	r2, #1
 80100fe:	eba1 0508 	sub.w	r5, r1, r8
 8010102:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010104:	d231      	bcs.n	801016a <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010106:	b394      	cbz	r4, 801016e <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010108:	429c      	cmp	r4, r3
 801010a:	bf28      	it	cs
 801010c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801010e:	0120      	lsls	r0, r4, #4
 8010110:	f00c fd2f 	bl	801cb72 <_Znwj>
 8010114:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010116:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 801011a:	2d00      	cmp	r5, #0
 801011c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8010120:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8010124:	dd04      	ble.n	8010130 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010126:	462a      	mov	r2, r5
 8010128:	4641      	mov	r1, r8
 801012a:	4630      	mov	r0, r6
 801012c:	f00d fc9e 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8010130:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8010134:	3510      	adds	r5, #16
      if (__count > 0)
 8010136:	f1b9 0f00 	cmp.w	r9, #0
 801013a:	4435      	add	r5, r6
 801013c:	dd04      	ble.n	8010148 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801013e:	464a      	mov	r2, r9
 8010140:	4651      	mov	r1, sl
 8010142:	4628      	mov	r0, r5
 8010144:	f00d fd8a 	bl	801dc5c <memcpy>
      return __result + __count;
 8010148:	444d      	add	r5, r9
	if (__p)
 801014a:	f1b8 0f00 	cmp.w	r8, #0
 801014e:	d005      	beq.n	801015c <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010150:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010152:	4640      	mov	r0, r8
 8010154:	eba1 0108 	sub.w	r1, r1, r8
 8010158:	f00c fce6 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801015c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010160:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8010164:	60be      	str	r6, [r7, #8]
    }
 8010166:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801016a:	461c      	mov	r4, r3
 801016c:	e7cf      	b.n	801010e <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801016e:	4626      	mov	r6, r4
 8010170:	e7d1      	b.n	8010116 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8010172:	bf00      	nop
 8010174:	0801dd74 	.word	0x0801dd74

08010178 <_ZN15PlatformSensors23AddMotorSensorRegistersEv>:
void PlatformSensors::AddMotorSensorRegisters(void) {
 8010178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Vmotor = 0;
 801017c:	f04f 0800 	mov.w	r8, #0
void PlatformSensors::AddMotorSensorRegisters(void) {
 8010180:	4604      	mov	r4, r0
 8010182:	b086      	sub	sp, #24
	registers->AddRegister<float>(REG_MOTOR_VOLTAGE);
 8010184:	f44f 710a 	mov.w	r1, #552	@ 0x228
	Vmotor = 0;
 8010188:	f8c0 8050 	str.w	r8, [r0, #80]	@ 0x50
	registers->AddRegister<float>(REG_MOTOR_VOLTAGE);
 801018c:	6840      	ldr	r0, [r0, #4]
 801018e:	f7ff fe60 	bl	800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_VOLTAGE);
 8010192:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8010196:	6860      	ldr	r0, [r4, #4]
 8010198:	f008 faf0 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_VOLTAGE, &(sensors->SensorsSemaphore));
 801019c:	6822      	ldr	r2, [r4, #0]
 801019e:	f44f 710a 	mov.w	r1, #552	@ 0x228
 80101a2:	6860      	ldr	r0, [r4, #4]
 80101a4:	f008 fad0 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_VOLTAGE, &Vmotor);
 80101a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80101ac:	f44f 710a 	mov.w	r1, #552	@ 0x228
 80101b0:	6860      	ldr	r0, [r4, #4]
 80101b2:	f7ff fed3 	bl	800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_VOLTAGE, READ_PERMISSION);
 80101b6:	2202      	movs	r2, #2
 80101b8:	f44f 710a 	mov.w	r1, #552	@ 0x228
 80101bc:	6860      	ldr	r0, [r4, #4]
 80101be:	f008 fb18 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_CURRENT);
 80101c2:	f240 2129 	movw	r1, #553	@ 0x229
 80101c6:	6860      	ldr	r0, [r4, #4]
	Imotor = 0;
 80101c8:	f8c4 8054 	str.w	r8, [r4, #84]	@ 0x54
	registers->AddRegister<float>(REG_MOTOR_CURRENT);
 80101cc:	f7ff fe41 	bl	800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_CURRENT);
 80101d0:	f240 2129 	movw	r1, #553	@ 0x229
 80101d4:	6860      	ldr	r0, [r4, #4]
 80101d6:	f008 fad1 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_CURRENT, &(sensors->SensorsSemaphore));
 80101da:	6822      	ldr	r2, [r4, #0]
 80101dc:	f240 2129 	movw	r1, #553	@ 0x229
 80101e0:	6860      	ldr	r0, [r4, #4]
 80101e2:	f008 fab1 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_CURRENT, &Imotor);
 80101e6:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 80101ea:	f240 2129 	movw	r1, #553	@ 0x229
 80101ee:	6860      	ldr	r0, [r4, #4]
 80101f0:	f7ff feb4 	bl	800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_CURRENT, READ_PERMISSION);
 80101f4:	2202      	movs	r2, #2
 80101f6:	f240 2129 	movw	r1, #553	@ 0x229
 80101fa:	6860      	ldr	r0, [r4, #4]
 80101fc:	f008 faf9 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_POWER);
 8010200:	f240 212a 	movw	r1, #554	@ 0x22a
 8010204:	6860      	ldr	r0, [r4, #4]
	Pmotor = 0;
 8010206:	f8c4 8058 	str.w	r8, [r4, #88]	@ 0x58
	registers->AddRegister<float>(REG_MOTOR_POWER);
 801020a:	f7ff fe22 	bl	800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_POWER);
 801020e:	f240 212a 	movw	r1, #554	@ 0x22a
 8010212:	6860      	ldr	r0, [r4, #4]
 8010214:	f008 fab2 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_POWER, &(sensors->SensorsSemaphore));
 8010218:	6822      	ldr	r2, [r4, #0]
 801021a:	f240 212a 	movw	r1, #554	@ 0x22a
 801021e:	6860      	ldr	r0, [r4, #4]
 8010220:	f008 fa92 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_POWER, &Pmotor);
 8010224:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 8010228:	f240 212a 	movw	r1, #554	@ 0x22a
 801022c:	6860      	ldr	r0, [r4, #4]
 801022e:	f7ff fe95 	bl	800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_POWER, READ_PERMISSION);
 8010232:	2202      	movs	r2, #2
 8010234:	f240 212a 	movw	r1, #554	@ 0x22a
 8010238:	6860      	ldr	r0, [r4, #4]
 801023a:	f008 fada 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	Emotor = 0;
 801023e:	2200      	movs	r2, #0
 8010240:	2300      	movs	r3, #0
	registers->AddRegister<double>(REG_MOTOR_ENERGY_DOUBLE);
 8010242:	6865      	ldr	r5, [r4, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010244:	f04f 31ff 	mov.w	r1, #4294967295
 8010248:	6828      	ldr	r0, [r5, #0]
	Emotor = 0;
 801024a:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
 801024e:	f7fc fded 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8010252:	f10d 0207 	add.w	r2, sp, #7
 8010256:	f240 212b 	movw	r1, #555	@ 0x22b
 801025a:	4628      	mov	r0, r5
 801025c:	f008 fa55 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8010260:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8010264:	2e00      	cmp	r6, #0
 8010266:	d069      	beq.n	801033c <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x1c4>
	osSemaphoreRelease(RegistersSemaphore);
 8010268:	6828      	ldr	r0, [r5, #0]
 801026a:	f7fc fe13 	bl	800ce94 <osSemaphoreRelease>
	registers->SetRegisterAsSingle(REG_MOTOR_ENERGY_DOUBLE);
 801026e:	f240 212b 	movw	r1, #555	@ 0x22b
 8010272:	6860      	ldr	r0, [r4, #4]
 8010274:	f008 fa82 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENERGY_DOUBLE, &(sensors->SensorsSemaphore));
 8010278:	6822      	ldr	r2, [r4, #0]
 801027a:	f240 212b 	movw	r1, #555	@ 0x22b
 801027e:	6860      	ldr	r0, [r4, #4]
 8010280:	f008 fa62 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<double>(REG_MOTOR_ENERGY_DOUBLE, &Emotor);
 8010284:	6867      	ldr	r7, [r4, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010286:	f04f 31ff 	mov.w	r1, #4294967295
 801028a:	6838      	ldr	r0, [r7, #0]
 801028c:	f7fc fdce 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010290:	f10d 0207 	add.w	r2, sp, #7
 8010294:	f240 212b 	movw	r1, #555	@ 0x22b
 8010298:	4638      	mov	r0, r7
 801029a:	f008 fa36 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801029e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80102a2:	4605      	mov	r5, r0
	if (!success) {
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d161      	bne.n	801036c <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x1f4>
	osSemaphoreRelease(RegistersSemaphore);
 80102a8:	6838      	ldr	r0, [r7, #0]
 80102aa:	f7fc fdf3 	bl	800ce94 <osSemaphoreRelease>
	registers->SetRegisterPermissions(REG_MOTOR_ENERGY_DOUBLE, READ_PERMISSION);
 80102ae:	2202      	movs	r2, #2
 80102b0:	f240 212b 	movw	r1, #555	@ 0x22b
 80102b4:	6860      	ldr	r0, [r4, #4]
 80102b6:	f008 fa9c 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_ENERGY_FLOAT);
 80102ba:	6860      	ldr	r0, [r4, #4]
 80102bc:	f44f 710b 	mov.w	r1, #556	@ 0x22c
	Emotor_float = 0;
 80102c0:	f8c4 8068 	str.w	r8, [r4, #104]	@ 0x68
	registers->AddRegister<float>(REG_MOTOR_ENERGY_FLOAT);
 80102c4:	f7ff fdc5 	bl	800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENERGY_FLOAT);
 80102c8:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80102cc:	6860      	ldr	r0, [r4, #4]
 80102ce:	f008 fa55 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENERGY_FLOAT, &(sensors->SensorsSemaphore));
 80102d2:	6822      	ldr	r2, [r4, #0]
 80102d4:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80102d8:	6860      	ldr	r0, [r4, #4]
 80102da:	f008 fa35 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_ENERGY_FLOAT, &Emotor_float);
 80102de:	f104 0268 	add.w	r2, r4, #104	@ 0x68
 80102e2:	6860      	ldr	r0, [r4, #4]
 80102e4:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80102e8:	f7ff fe38 	bl	800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_ENERGY_FLOAT, READ_PERMISSION);
 80102ec:	2202      	movs	r2, #2
 80102ee:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80102f2:	6860      	ldr	r0, [r4, #4]
 80102f4:	f008 fa7d 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_TEMPERATURE);
 80102f8:	6860      	ldr	r0, [r4, #4]
 80102fa:	f240 212d 	movw	r1, #557	@ 0x22d
	Tmotor = 0;
 80102fe:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
	registers->AddRegister<float>(REG_MOTOR_TEMPERATURE);
 8010302:	f7ff fda6 	bl	800fe52 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TEMPERATURE);
 8010306:	f240 212d 	movw	r1, #557	@ 0x22d
 801030a:	6860      	ldr	r0, [r4, #4]
 801030c:	f008 fa36 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TEMPERATURE, &(sensors->SensorsSemaphore));
 8010310:	6822      	ldr	r2, [r4, #0]
 8010312:	f240 212d 	movw	r1, #557	@ 0x22d
 8010316:	6860      	ldr	r0, [r4, #4]
 8010318:	f008 fa16 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_TEMPERATURE, &Tmotor);
 801031c:	f104 026c 	add.w	r2, r4, #108	@ 0x6c
 8010320:	6860      	ldr	r0, [r4, #4]
 8010322:	f240 212d 	movw	r1, #557	@ 0x22d
 8010326:	f7ff fe19 	bl	800ff5c <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_TEMPERATURE, READ_PERMISSION);
 801032a:	2202      	movs	r2, #2
 801032c:	f240 212d 	movw	r1, #557	@ 0x22d
 8010330:	6860      	ldr	r0, [r4, #4]
}
 8010332:	b006      	add	sp, #24
 8010334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->SetRegisterPermissions(REG_MOTOR_TEMPERATURE, READ_PERMISSION);
 8010338:	f008 ba5b 	b.w	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801033c:	f10d 0007 	add.w	r0, sp, #7
 8010340:	f7fe ff26 	bl	800f190 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>
	configuration_.mode = mode;
 8010344:	4b27      	ldr	r3, [pc, #156]	@ (80103e4 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x26c>)
	configuration_.register_info = register_;
 8010346:	f88d 000c 	strb.w	r0, [sp, #12]
	configuration_.mode = mode;
 801034a:	9302      	str	r3, [sp, #8]
	configuration_.register_info = register_;
 801034c:	2301      	movs	r3, #1
 801034e:	f88d 600d 	strb.w	r6, [sp, #13]
 8010352:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8010356:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_semaphore = NULL;
 801035a:	e9cd 6604 	strd	r6, r6, [sp, #16]
	if (success) {
 801035e:	2b00      	cmp	r3, #0
 8010360:	d082      	beq.n	8010268 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0xf0>
		registers.push_back(configuration_);
 8010362:	a902      	add	r1, sp, #8
 8010364:	1d28      	adds	r0, r5, #4
 8010366:	f7ff fd63 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801036a:	e77d      	b.n	8010268 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0xf0>
	uint8_t registered_type = GetTypeID<T>(&success);
 801036c:	f10d 0007 	add.w	r0, sp, #7
 8010370:	f7fe ff0e 	bl	800f190 <_ZN9Registers9GetTypeIDIdEEhPb.isra.0>
	if (!success) {
 8010374:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d095      	beq.n	80102a8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (target_register->register_info.type != registered_type) {
 801037c:	792b      	ldrb	r3, [r5, #4]
 801037e:	4298      	cmp	r0, r3
 8010380:	d192      	bne.n	80102a8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010382:	3004      	adds	r0, #4
 8010384:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8010388:	f1bc 0f00 	cmp.w	ip, #0
 801038c:	d08c      	beq.n	80102a8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801038e:	7829      	ldrb	r1, [r5, #0]
	registers->AddRegisterPointer<double>(REG_MOTOR_ENERGY_DOUBLE, &Emotor);
 8010390:	f104 0060 	add.w	r0, r4, #96	@ 0x60
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010394:	e9dc 3600 	ldrd	r3, r6, [ip]
 8010398:	1af2      	subs	r2, r6, r3
 801039a:	1112      	asrs	r2, r2, #4
 801039c:	b9c1      	cbnz	r1, 80103d0 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x258>
 801039e:	7869      	ldrb	r1, [r5, #1]
 80103a0:	b9b1      	cbnz	r1, 80103d0 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x258>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80103a2:	f8dc 1008 	ldr.w	r1, [ip, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80103a6:	816a      	strh	r2, [r5, #10]
 80103a8:	aa02      	add	r2, sp, #8
 80103aa:	42b1      	cmp	r1, r6
		callback.pointer = pointer;
 80103ac:	9002      	str	r0, [sp, #8]
 80103ae:	d00b      	beq.n	80103c8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x250>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80103b0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80103b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80103b6:	3610      	adds	r6, #16
 80103b8:	f8cc 6004 	str.w	r6, [ip, #4]
	target_register->mode.pointer = true;
 80103bc:	2301      	movs	r3, #1
 80103be:	702b      	strb	r3, [r5, #0]
	target_register->access.write = true;
 80103c0:	f240 1301 	movw	r3, #257	@ 0x101
 80103c4:	812b      	strh	r3, [r5, #8]
 80103c6:	e76f      	b.n	80102a8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x130>
	  _M_realloc_insert(end(), __x);
 80103c8:	4660      	mov	r0, ip
 80103ca:	f7ff fe81 	bl	80100d0 <_ZNSt6vectorI17RegisterCallbacksIdESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 80103ce:	e7f5      	b.n	80103bc <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x244>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80103d0:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 80103d2:	4291      	cmp	r1, r2
 80103d4:	d302      	bcc.n	80103dc <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x264>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80103d6:	4804      	ldr	r0, [pc, #16]	@ (80103e8 <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x270>)
 80103d8:	f00c fc83 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 80103dc:	0109      	lsls	r1, r1, #4
 80103de:	5058      	str	r0, [r3, r1]
 80103e0:	e7ec      	b.n	80103bc <_ZN15PlatformSensors23AddMotorSensorRegistersEv+0x244>
 80103e2:	bf00      	nop
 80103e4:	022b0000 	.word	0x022b0000
 80103e8:	0801dfb4 	.word	0x0801dfb4

080103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 80103ec:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80103ee:	b170      	cbz	r0, 801040e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80103f0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80103f4:	d306      	bcc.n	8010404 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80103f6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80103fa:	d301      	bcc.n	8010400 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 80103fc:	f00c fc6b 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8010400:	f00c fc66 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010404:	0080      	lsls	r0, r0, #2
      }
 8010406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801040a:	f00c bbb2 	b.w	801cb72 <_Znwj>
 801040e:	bd08      	pop	{r3, pc}

08010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010410:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8010412:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010414:	d006      	beq.n	8010424 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010416:	da01      	bge.n	801041c <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8010418:	f00c fc5a 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 801041c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010420:	f00c bba7 	b.w	801cb72 <_Znwj>
 8010424:	bd08      	pop	{r3, pc}
	...

08010428 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8010428:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801042a:	491e      	ldr	r1, [pc, #120]	@ (80104a4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801042c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801042e:	481e      	ldr	r0, [pc, #120]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010430:	f00c fc36 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010434:	bb40      	cbnz	r0, 8010488 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010436:	491d      	ldr	r1, [pc, #116]	@ (80104ac <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 8010438:	481b      	ldr	r0, [pc, #108]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801043a:	f00c fc31 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801043e:	bb28      	cbnz	r0, 801048c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010440:	491b      	ldr	r1, [pc, #108]	@ (80104b0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 8010442:	4819      	ldr	r0, [pc, #100]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010444:	f00c fc2c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010448:	bb10      	cbnz	r0, 8010490 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801044a:	491a      	ldr	r1, [pc, #104]	@ (80104b4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 801044c:	4816      	ldr	r0, [pc, #88]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801044e:	f00c fc27 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010452:	b9f8      	cbnz	r0, 8010494 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010454:	4918      	ldr	r1, [pc, #96]	@ (80104b8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 8010456:	4814      	ldr	r0, [pc, #80]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010458:	f00c fc22 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801045c:	b9e0      	cbnz	r0, 8010498 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801045e:	4917      	ldr	r1, [pc, #92]	@ (80104bc <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 8010460:	4811      	ldr	r0, [pc, #68]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010462:	f00c fc1d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010466:	b9c8      	cbnz	r0, 801049c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010468:	490f      	ldr	r1, [pc, #60]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801046a:	4608      	mov	r0, r1
 801046c:	f00c fc18 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010470:	b9b0      	cbnz	r0, 80104a0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8010472:	4913      	ldr	r1, [pc, #76]	@ (80104c0 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 8010474:	480c      	ldr	r0, [pc, #48]	@ (80104a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8010476:	f00c fc13 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801047a:	2800      	cmp	r0, #0
 801047c:	bf14      	ite	ne
 801047e:	2309      	movne	r3, #9
 8010480:	2300      	moveq	r3, #0
 8010482:	7020      	strb	r0, [r4, #0]
}
 8010484:	4618      	mov	r0, r3
 8010486:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010488:	2300      	movs	r3, #0
 801048a:	e7fa      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801048c:	2301      	movs	r3, #1
 801048e:	e7f8      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010490:	2302      	movs	r3, #2
 8010492:	e7f6      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010494:	2303      	movs	r3, #3
 8010496:	e7f4      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010498:	2304      	movs	r3, #4
 801049a:	e7f2      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801049c:	2306      	movs	r3, #6
 801049e:	e7f0      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80104a0:	2308      	movs	r3, #8
 80104a2:	e7ee      	b.n	8010482 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 80104a4:	0801e1c4 	.word	0x0801e1c4
 80104a8:	0801e19c 	.word	0x0801e19c
 80104ac:	0801e1bc 	.word	0x0801e1bc
 80104b0:	0801e1ac 	.word	0x0801e1ac
 80104b4:	0801e1a4 	.word	0x0801e1a4
 80104b8:	0801e1cc 	.word	0x0801e1cc
 80104bc:	0801e1b4 	.word	0x0801e1b4
 80104c0:	0801e194 	.word	0x0801e194

080104c4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80104c4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80104c6:	491e      	ldr	r1, [pc, #120]	@ (8010540 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80104c8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80104ca:	481e      	ldr	r0, [pc, #120]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104cc:	f00c fbe8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80104d0:	bb40      	cbnz	r0, 8010524 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80104d2:	491d      	ldr	r1, [pc, #116]	@ (8010548 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x84>)
 80104d4:	481b      	ldr	r0, [pc, #108]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104d6:	f00c fbe3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80104da:	bb28      	cbnz	r0, 8010528 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80104dc:	491b      	ldr	r1, [pc, #108]	@ (801054c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x88>)
 80104de:	4819      	ldr	r0, [pc, #100]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104e0:	f00c fbde 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80104e4:	bb10      	cbnz	r0, 801052c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80104e6:	491a      	ldr	r1, [pc, #104]	@ (8010550 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x8c>)
 80104e8:	4816      	ldr	r0, [pc, #88]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104ea:	f00c fbd9 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80104ee:	b9f8      	cbnz	r0, 8010530 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80104f0:	4914      	ldr	r1, [pc, #80]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104f2:	4608      	mov	r0, r1
 80104f4:	f00c fbd4 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80104f8:	b9e0      	cbnz	r0, 8010534 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80104fa:	4916      	ldr	r1, [pc, #88]	@ (8010554 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x90>)
 80104fc:	4811      	ldr	r0, [pc, #68]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 80104fe:	f00c fbcf 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010502:	b9c8      	cbnz	r0, 8010538 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010504:	4914      	ldr	r1, [pc, #80]	@ (8010558 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x94>)
 8010506:	480f      	ldr	r0, [pc, #60]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 8010508:	f00c fbca 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801050c:	b9b0      	cbnz	r0, 801053c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801050e:	4913      	ldr	r1, [pc, #76]	@ (801055c <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x98>)
 8010510:	480c      	ldr	r0, [pc, #48]	@ (8010544 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x80>)
 8010512:	f00c fbc5 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8010516:	2800      	cmp	r0, #0
 8010518:	bf14      	ite	ne
 801051a:	2309      	movne	r3, #9
 801051c:	2300      	moveq	r3, #0
 801051e:	7020      	strb	r0, [r4, #0]
}
 8010520:	4618      	mov	r0, r3
 8010522:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010524:	2300      	movs	r3, #0
 8010526:	e7fa      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8010528:	2301      	movs	r3, #1
 801052a:	e7f8      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801052c:	2302      	movs	r3, #2
 801052e:	e7f6      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010530:	2303      	movs	r3, #3
 8010532:	e7f4      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010534:	2304      	movs	r3, #4
 8010536:	e7f2      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8010538:	2306      	movs	r3, #6
 801053a:	e7f0      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801053c:	2308      	movs	r3, #8
 801053e:	e7ee      	b.n	801051e <_ZN9Registers9GetTypeIDIaEEhPb.isra.0+0x5a>
 8010540:	0801e1c4 	.word	0x0801e1c4
 8010544:	0801e1cc 	.word	0x0801e1cc
 8010548:	0801e1bc 	.word	0x0801e1bc
 801054c:	0801e1ac 	.word	0x0801e1ac
 8010550:	0801e1a4 	.word	0x0801e1a4
 8010554:	0801e1b4 	.word	0x0801e1b4
 8010558:	0801e19c 	.word	0x0801e19c
 801055c:	0801e194 	.word	0x0801e194

08010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>:
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010560:	e9d0 3000 	ldrd	r3, r0, [r0]
 * @param input start_index: the index to start the extraction
 * @param output success: whether successful
 * @return the typed extracted value
 */
template<typename T>
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 8010564:	b510      	push	{r4, lr}
 8010566:	1ac0      	subs	r0, r0, r3
	uint64_t data = 0;
	uint8_t type_length = sizeof(T);

	// Check payload length
	if (payload.size() < start_index + type_length) {
 8010568:	1d0c      	adds	r4, r1, #4
 801056a:	42a0      	cmp	r0, r4
 801056c:	d310      	bcc.n	8010590 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x30>
 801056e:	4419      	add	r1, r3
 8010570:	2018      	movs	r0, #24
	uint64_t data = 0;
 8010572:	2300      	movs	r3, #0
		return 0;
	}

	// Fill a uint64 variable
	for (uint8_t index = 0; index < type_length; index++) {
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 8010574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010578:	4084      	lsls	r4, r0
	for (uint8_t index = 0; index < type_length; index++) {
 801057a:	3808      	subs	r0, #8
 801057c:	f110 0f08 	cmn.w	r0, #8
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 8010580:	ea43 0304 	orr.w	r3, r3, r4
	for (uint8_t index = 0; index < type_length; index++) {
 8010584:	d1f6      	bne.n	8010574 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x14>
	// Recast to the expected type
    T* reinterpreted_data = reinterpret_cast<T*>(&data);

    // Return data
    *success = true;
	return *reinterpreted_data;
 8010586:	ee00 3a10 	vmov	s0, r3
 801058a:	2301      	movs	r3, #1
		*success = false;
 801058c:	7013      	strb	r3, [r2, #0]
}
 801058e:	bd10      	pop	{r4, pc}
 8010590:	2300      	movs	r3, #0
		return 0;
 8010592:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010598 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x38>
 8010596:	e7f9      	b.n	801058c <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0+0x2c>
 8010598:	00000000 	.word	0x00000000

0801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 801059c:	b510      	push	{r4, lr}
 801059e:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 80105a2:	1c48      	adds	r0, r1, #1
 80105a4:	1b1b      	subs	r3, r3, r4
 80105a6:	4283      	cmp	r3, r0
		*success = false;
 80105a8:	bf33      	iteet	cc
 80105aa:	2300      	movcc	r3, #0
    *success = true;
 80105ac:	2301      	movcs	r3, #1
	return *reinterpreted_data;
 80105ae:	5660      	ldrsbcs	r0, [r4, r1]
		return 0;
 80105b0:	4618      	movcc	r0, r3
 80105b2:	7013      	strb	r3, [r2, #0]
}
 80105b4:	bd10      	pop	{r4, pc}

080105b6 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>:
T Communication::ExtractSingle(std::vector<uint8_t> payload, uint16_t start_index, bool* success) {
 80105b6:	b510      	push	{r4, lr}
 80105b8:	e9d0 4300 	ldrd	r4, r3, [r0]
	if (payload.size() < start_index + type_length) {
 80105bc:	1c48      	adds	r0, r1, #1
 80105be:	1b1b      	subs	r3, r3, r4
 80105c0:	4283      	cmp	r3, r0
		*success = false;
 80105c2:	bf33      	iteet	cc
 80105c4:	2300      	movcc	r3, #0
    *success = true;
 80105c6:	2301      	movcs	r3, #1
		data |= (payload[start_index + index] << ((type_length - 1 - index) << 3));
 80105c8:	5c60      	ldrbcs	r0, [r4, r1]
		return 0;
 80105ca:	4618      	movcc	r0, r3
 80105cc:	7013      	strb	r3, [r2, #0]
}
 80105ce:	bd10      	pop	{r4, pc}

080105d0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80105d0:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 80105d2:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80105d4:	d006      	beq.n	80105e4 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80105d6:	da01      	bge.n	80105dc <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 80105d8:	f00c fb7a 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 80105dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80105e0:	f00c bac7 	b.w	801cb72 <_Znwj>
 80105e4:	bd08      	pop	{r3, pc}
	...

080105e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80105e8:	491e      	ldr	r1, [pc, #120]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80105ea:	b510      	push	{r4, lr}
 80105ec:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80105ee:	4608      	mov	r0, r1
 80105f0:	f00c fb56 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80105f4:	bb40      	cbnz	r0, 8010648 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80105f6:	491c      	ldr	r1, [pc, #112]	@ (8010668 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 80105f8:	481a      	ldr	r0, [pc, #104]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80105fa:	f00c fb51 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80105fe:	bb28      	cbnz	r0, 801064c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010600:	491a      	ldr	r1, [pc, #104]	@ (801066c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8010602:	4818      	ldr	r0, [pc, #96]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8010604:	f00c fb4c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010608:	bb10      	cbnz	r0, 8010650 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801060a:	4919      	ldr	r1, [pc, #100]	@ (8010670 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801060c:	4815      	ldr	r0, [pc, #84]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801060e:	f00c fb47 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010612:	b9f8      	cbnz	r0, 8010654 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010614:	4917      	ldr	r1, [pc, #92]	@ (8010674 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8010616:	4813      	ldr	r0, [pc, #76]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8010618:	f00c fb42 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801061c:	b9e0      	cbnz	r0, 8010658 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801061e:	4916      	ldr	r1, [pc, #88]	@ (8010678 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8010620:	4810      	ldr	r0, [pc, #64]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8010622:	f00c fb3d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010626:	b9c8      	cbnz	r0, 801065c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010628:	4914      	ldr	r1, [pc, #80]	@ (801067c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801062a:	480e      	ldr	r0, [pc, #56]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801062c:	f00c fb38 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8010630:	b9b0      	cbnz	r0, 8010660 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8010632:	4913      	ldr	r1, [pc, #76]	@ (8010680 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8010634:	480b      	ldr	r0, [pc, #44]	@ (8010664 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8010636:	f00c fb33 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801063a:	2800      	cmp	r0, #0
 801063c:	bf14      	ite	ne
 801063e:	2309      	movne	r3, #9
 8010640:	2300      	moveq	r3, #0
 8010642:	7020      	strb	r0, [r4, #0]
}
 8010644:	4618      	mov	r0, r3
 8010646:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8010648:	2300      	movs	r3, #0
 801064a:	e7fa      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801064c:	2301      	movs	r3, #1
 801064e:	e7f8      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8010650:	2302      	movs	r3, #2
 8010652:	e7f6      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8010654:	2303      	movs	r3, #3
 8010656:	e7f4      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8010658:	2304      	movs	r3, #4
 801065a:	e7f2      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801065c:	2306      	movs	r3, #6
 801065e:	e7f0      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8010660:	2308      	movs	r3, #8
 8010662:	e7ee      	b.n	8010642 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8010664:	0801e1c4 	.word	0x0801e1c4
 8010668:	0801e1bc 	.word	0x0801e1bc
 801066c:	0801e1ac 	.word	0x0801e1ac
 8010670:	0801e1a4 	.word	0x0801e1a4
 8010674:	0801e1cc 	.word	0x0801e1cc
 8010678:	0801e1b4 	.word	0x0801e1b4
 801067c:	0801e19c 	.word	0x0801e19c
 8010680:	0801e194 	.word	0x0801e194

08010684 <_ZN13CommunicationC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010684:	2200      	movs	r2, #0
 8010686:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801068a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801068e:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8010692:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8010696:	6382      	str	r2, [r0, #56]	@ 0x38

/**
 * @brief class Constructor
 */
Communication::Communication() {
	address = UNKNOWN;
 8010698:	22fd      	movs	r2, #253	@ 0xfd
 801069a:	7502      	strb	r2, [r0, #20]
}
 801069c:	4770      	bx	lr

0801069e <_ZN13Communication4InitEP9RegistersP8ServicesP17MasterSubscribersP4LEDS>:
 * @param input registers_: the Registers instance
 * @param input services_: the Services instance
 * @param input subscribers_: the MasterSubscribers instance
 * @param input leds_: the LEDS instance
 */
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 801069e:	b510      	push	{r4, lr}
	registers = registers_;
	services = services_;
 80106a0:	e9c0 1201 	strd	r1, r2, [r0, #4]
	subscribers = subscribers_;
 80106a4:	60c3      	str	r3, [r0, #12]
	leds = leds_;

	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 80106a6:	2101      	movs	r1, #1
	leds = leds_;
 80106a8:	9b02      	ldr	r3, [sp, #8]
void Communication::Init(Registers* registers_, Services* services_, MasterSubscribers* subscribers_, LEDS* leds_) {
 80106aa:	4604      	mov	r4, r0
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 80106ac:	2200      	movs	r2, #0
	leds = leds_;
 80106ae:	6103      	str	r3, [r0, #16]
	CommunicationSemaphore = osSemaphoreNew(1,1,NULL);
 80106b0:	4608      	mov	r0, r1
 80106b2:	f7fc fb5f 	bl	800cd74 <osSemaphoreNew>
 80106b6:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(CommunicationSemaphore);
}
 80106b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(CommunicationSemaphore);
 80106bc:	f7fc bbea 	b.w	800ce94 <osSemaphoreRelease>

080106c0 <_ZN13Communication12FindProtocolEhPb>:
 *
 * @param input ID: the protocol ID to find
 * @param output success: true if protocol found
 * @return the protocol pointer
 */
CommunicationProtocol* Communication::FindProtocol(uint8_t ID, bool* success) {
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	460e      	mov	r6, r1
 80106c6:	4615      	mov	r5, r2
 80106c8:	e9d0 4809 	ldrd	r4, r8, [r0, #36]	@ 0x24
	for (CommunicationProtocol* &protocol : protocols) {
 80106cc:	45a0      	cmp	r8, r4
 80106ce:	4627      	mov	r7, r4
 80106d0:	d102      	bne.n	80106d8 <_ZN13Communication12FindProtocolEhPb+0x18>
 80106d2:	2300      	movs	r3, #0
			*success = true;
			return protocol_pointer;
		}
	}
	*success = false;
	return NULL;
 80106d4:	4618      	mov	r0, r3
 80106d6:	e008      	b.n	80106ea <_ZN13Communication12FindProtocolEhPb+0x2a>
		if (protocol->InterfaceExists(ID)) {
 80106d8:	4631      	mov	r1, r6
 80106da:	6838      	ldr	r0, [r7, #0]
 80106dc:	f005 fd7b 	bl	80161d6 <_ZN21CommunicationProtocol15InterfaceExistsEh>
 80106e0:	3404      	adds	r4, #4
 80106e2:	4603      	mov	r3, r0
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d0f1      	beq.n	80106cc <_ZN13Communication12FindProtocolEhPb+0xc>
			CommunicationProtocol* protocol_pointer = protocol;
 80106e8:	6838      	ldr	r0, [r7, #0]
			*success = true;
 80106ea:	702b      	strb	r3, [r5, #0]
}
 80106ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106f0 <_ZN13Communication16InGroupAddressesEh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80106f0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 *
 * @param input address: a 8-bit address
 * @return true if the input adddress is part of the group addresses
 */
bool Communication::InGroupAddresses(uint8_t address) {
	for (uint8_t group_address : group_addresses) {
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d101      	bne.n	80106fc <_ZN13Communication16InGroupAddressesEh+0xc>
		if (group_address == address) return true;
	}
	return false;
 80106f8:	2000      	movs	r0, #0
 80106fa:	4770      	bx	lr
	for (uint8_t group_address : group_addresses) {
 80106fc:	f813 0b01 	ldrb.w	r0, [r3], #1
		if (group_address == address) return true;
 8010700:	4288      	cmp	r0, r1
 8010702:	d1f7      	bne.n	80106f4 <_ZN13Communication16InGroupAddressesEh+0x4>
 8010704:	2001      	movs	r0, #1
}
 8010706:	4770      	bx	lr

08010708 <_ZN13Communication13AcceptMessageE13MessageHeader>:
	return (message.target_address == ALL || message.target_address == address || InGroupAddresses(message.target_address));
 8010708:	7c09      	ldrb	r1, [r1, #16]
 801070a:	29ff      	cmp	r1, #255	@ 0xff
 801070c:	d004      	beq.n	8010718 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 801070e:	7d03      	ldrb	r3, [r0, #20]
 8010710:	428b      	cmp	r3, r1
 8010712:	d001      	beq.n	8010718 <_ZN13Communication13AcceptMessageE13MessageHeader+0x10>
 8010714:	f7ff bfec 	b.w	80106f0 <_ZN13Communication16InGroupAddressesEh>
}
 8010718:	2001      	movs	r0, #1
 801071a:	4770      	bx	lr

0801071c <_ZN13Communication5GetIDEPvPb>:
 *
 * @param input handle: base pointer of an hardware interface
 * @param output success: return true if the protocol has been successfully found
 * @return the registered interface ID of the input hardware handle
 */
uint8_t Communication::GetID(void* handle, bool* success) {
 801071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071e:	460e      	mov	r6, r1
 8010720:	4614      	mov	r4, r2
 8010722:	e9d0 5709 	ldrd	r5, r7, [r0, #36]	@ 0x24
	uint8_t ID;
	for (CommunicationProtocol* protocol : protocols) {
 8010726:	42af      	cmp	r7, r5
 8010728:	d101      	bne.n	801072e <_ZN13Communication5GetIDEPvPb+0x12>
		ID = protocol->GetID(handle, success);
		if (*success)
			return ID;
	}
	return 0;
 801072a:	2000      	movs	r0, #0
 801072c:	e009      	b.n	8010742 <_ZN13Communication5GetIDEPvPb+0x26>
	for (CommunicationProtocol* protocol : protocols) {
 801072e:	f855 0b04 	ldr.w	r0, [r5], #4
		ID = protocol->GetID(handle, success);
 8010732:	4622      	mov	r2, r4
 8010734:	4631      	mov	r1, r6
 8010736:	6803      	ldr	r3, [r0, #0]
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	4798      	blx	r3
		if (*success)
 801073c:	7823      	ldrb	r3, [r4, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d0f1      	beq.n	8010726 <_ZN13Communication5GetIDEPvPb+0xa>
}
 8010742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010744 <_ZN13Communication9GetBufferEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the memory pointer successfully found
 * @return the memory pointer allocated to the hardware interface
 */
std::vector<uint8_t>* Communication::GetBuffer(uint8_t ID, bool* success) {
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	460c      	mov	r4, r1
 8010748:	4615      	mov	r5, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801074a:	f7ff ffb9 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 801074e:	462a      	mov	r2, r5
 8010750:	4621      	mov	r1, r4
		if (*success)
			return buffer;
	}
}
 8010752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		std::vector<uint8_t>* buffer = protocol->GetBuffer(ID, success);
 8010756:	f005 bd55 	b.w	8016204 <_ZN21CommunicationProtocol9GetBufferEhPb>

0801075a <_ZN13Communication14GetBufferIndexEhPb>:
 *
 * @param input ID: the interface ID
 * @param output success: return true if the index has been successfully found
 * @return the pointer to the index variable
 */
uint16_t* Communication::GetBufferIndex(uint8_t ID, bool* success) {
 801075a:	b538      	push	{r3, r4, r5, lr}
 801075c:	4614      	mov	r4, r2
 801075e:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 8010760:	f7ff ffae 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
	if (*success) {
 8010764:	7823      	ldrb	r3, [r4, #0]
 8010766:	b12b      	cbz	r3, 8010774 <_ZN13Communication14GetBufferIndexEhPb+0x1a>
		uint16_t* buffer_index = protocol->GetBufferIndex(ID, success);
 8010768:	4622      	mov	r2, r4
 801076a:	4629      	mov	r1, r5
 801076c:	f005 fd58 	bl	8016220 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>
		if (*success)
 8010770:	7823      	ldrb	r3, [r4, #0]
 8010772:	b903      	cbnz	r3, 8010776 <_ZN13Communication14GetBufferIndexEhPb+0x1c>
			return buffer_index;
	}
	return NULL;
 8010774:	2000      	movs	r0, #0
}
 8010776:	bd38      	pop	{r3, r4, r5, pc}

08010778 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>:
 *
 * @param input ID: the protocol ID
 * @param output success: return true if protocol found
 * @return the maximum payload size of the input protocol
 */
uint16_t Communication::GetProtocolPayloadMaxLength(uint8_t ID, bool* success) {
 8010778:	b510      	push	{r4, lr}
 801077a:	4614      	mov	r4, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 801077c:	f7ff ffa0 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
	if (not *success)
 8010780:	7823      	ldrb	r3, [r4, #0]
 8010782:	b11b      	cbz	r3, 801078c <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb+0x14>
		return 0;

	return protocol->GetProtocolPayloadMaxLength();
}
 8010784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->GetProtocolPayloadMaxLength();
 8010788:	f005 bd58 	b.w	801623c <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>
}
 801078c:	4618      	mov	r0, r3
 801078e:	bd10      	pop	{r4, pc}

08010790 <_ZN13Communication17ActivateReceptionEh>:
 * @brief Activate the hardware reading of the input protocol
 *
 * @param input ID: the protocol ID
 * @return the status of the reading activation request
 */
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 8010790:	b513      	push	{r0, r1, r4, lr}
	bool success;
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 8010792:	f10d 0207 	add.w	r2, sp, #7
HAL_StatusTypeDef Communication::ActivateReception(uint8_t ID) {
 8010796:	460c      	mov	r4, r1
	CommunicationProtocol* protocol = FindProtocol(ID, &success);
 8010798:	f7ff ff92 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
	if (not success) return HAL_ERROR;
 801079c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80107a0:	b132      	cbz	r2, 80107b0 <_ZN13Communication17ActivateReceptionEh+0x20>
	return protocol->ActivateReception(ID);
 80107a2:	6803      	ldr	r3, [r0, #0]
 80107a4:	4621      	mov	r1, r4
 80107a6:	685b      	ldr	r3, [r3, #4]
}
 80107a8:	b002      	add	sp, #8
 80107aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return protocol->ActivateReception(ID);
 80107ae:	4718      	bx	r3
}
 80107b0:	2001      	movs	r0, #1
 80107b2:	b002      	add	sp, #8
 80107b4:	bd10      	pop	{r4, pc}

080107b6 <_ZN13Communication16SetModuleAddressEh>:
 * @brief Set the module address
 *
 * @param input address_: the new module address
 * @return whether successful
 */
bool Communication::SetModuleAddress(uint8_t address_) {
 80107b6:	b538      	push	{r3, r4, r5, lr}
 80107b8:	4604      	mov	r4, r0
 80107ba:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 80107bc:	6800      	ldr	r0, [r0, #0]
 80107be:	f04f 31ff 	mov.w	r1, #4294967295
 80107c2:	f7fc fb33 	bl	800ce2c <osSemaphoreAcquire>
	address = address_;
	osSemaphoreRelease(CommunicationSemaphore);
 80107c6:	6820      	ldr	r0, [r4, #0]
	address = address_;
 80107c8:	7525      	strb	r5, [r4, #20]
	osSemaphoreRelease(CommunicationSemaphore);
 80107ca:	f7fc fb63 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 80107ce:	2001      	movs	r0, #1
 80107d0:	bd38      	pop	{r3, r4, r5, pc}

080107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80107d2:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80107d4:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80107d6:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80107d8:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80107da:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80107de:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80107e0:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80107e2:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80107e4:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80107e6:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80107e8:	688d      	ldr	r5, [r1, #8]
 80107ea:	6085      	str	r5, [r0, #8]
      }
 80107ec:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80107ee:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80107f0:	e9c1 3300 	strd	r3, r3, [r1]
 80107f4:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80107f8:	f7f0 f972 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 80107fc:	b005      	add	sp, #20
 80107fe:	bd30      	pop	{r4, r5, pc}

08010800 <_ZNSt6vectorIhSaIhEE5clearEv>:
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8010800:	e9d0 3200 	ldrd	r3, r2, [r0]
 8010804:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 8010806:	bf18      	it	ne
 8010808:	6043      	strne	r3, [r0, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 801080a:	4770      	bx	lr

0801080c <_ZN13Communication17ClearGroupAddressEv>:
/**
 * @brief Clear the list of group addresses
 *
 * @return whether successful
 */
bool Communication::ClearGroupAddress(void) {
 801080c:	b538      	push	{r3, r4, r5, lr}
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 801080e:	4605      	mov	r5, r0
bool Communication::ClearGroupAddress(void) {
 8010810:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010812:	f04f 31ff 	mov.w	r1, #4294967295
 8010816:	f855 0b18 	ldr.w	r0, [r5], #24
 801081a:	f7fc fb07 	bl	800ce2c <osSemaphoreAcquire>
	group_addresses.clear();
 801081e:	4628      	mov	r0, r5
 8010820:	f7ff ffee 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
	osSemaphoreRelease(CommunicationSemaphore);
 8010824:	6820      	ldr	r0, [r4, #0]
 8010826:	f7fc fb35 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 801082a:	2001      	movs	r0, #1
 801082c:	bd38      	pop	{r3, r4, r5, pc}

0801082e <_ZZN13Communication12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->ClearGroupAddress();
 801082e:	f7ff bfed 	b.w	801080c <_ZN13Communication17ClearGroupAddressEv>
	...

08010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>:
      at(size_type __n)
 8010834:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010836:	e9d0 5400 	ldrd	r5, r4, [r0]
 801083a:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 801083c:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010840:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 8010844:	d302      	bcc.n	801084c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8010846:	4803      	ldr	r0, [pc, #12]	@ (8010854 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj+0x20>)
 8010848:	f00c fa4b 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 801084c:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8010850:	bd38      	pop	{r3, r4, r5, pc}
 8010852:	bf00      	nop
 8010854:	0801dfb4 	.word	0x0801dfb4

08010858 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 801085a:	f101 0314 	add.w	r3, r1, #20
      : _M_current(__i) { }
 801085e:	6844      	ldr	r4, [r0, #4]
 8010860:	4607      	mov	r7, r0
 8010862:	460e      	mov	r6, r1
      if (__position + 1 != end())
 8010864:	429c      	cmp	r4, r3
 8010866:	d008      	beq.n	801087a <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x22>
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010868:	1ae4      	subs	r4, r4, r3
 801086a:	4b10      	ldr	r3, [pc, #64]	@ (80108ac <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x54>)
 801086c:	1d08      	adds	r0, r1, #4
 801086e:	10a4      	asrs	r4, r4, #2
 8010870:	435c      	muls	r4, r3
 8010872:	2c00      	cmp	r4, #0
 8010874:	f100 0514 	add.w	r5, r0, #20
 8010878:	dc08      	bgt.n	801088c <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x34>
      --this->_M_impl._M_finish;
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f1a0 0314 	sub.w	r3, r0, #20
      }
 8010880:	3810      	subs	r0, #16
 8010882:	607b      	str	r3, [r7, #4]
 8010884:	f7f0 f92c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    }
 8010888:	4630      	mov	r0, r6
 801088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct MessageHeader {
 801088c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8010890:	4629      	mov	r1, r5
 8010892:	3c01      	subs	r4, #1
 8010894:	f805 3c18 	strb.w	r3, [r5, #-24]
 8010898:	f7ff ff9b 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 801089c:	7b2b      	ldrb	r3, [r5, #12]
 801089e:	4628      	mov	r0, r5
 80108a0:	f805 3c08 	strb.w	r3, [r5, #-8]
 80108a4:	7b6b      	ldrb	r3, [r5, #13]
 80108a6:	f805 3c07 	strb.w	r3, [r5, #-7]
 80108aa:	e7e2      	b.n	8010872 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x1a>
 80108ac:	cccccccd 	.word	0xcccccccd

080108b0 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80108b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80108b4:	e9d0 8a00 	ldrd	r8, sl, [r0]
 80108b8:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 80108ba:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80108be:	ebaa 0208 	sub.w	r2, sl, r8
 80108c2:	4607      	mov	r7, r0
 80108c4:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 80108c6:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80108ca:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 80108ce:	d102      	bne.n	80108d6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80108d0:	481e      	ldr	r0, [pc, #120]	@ (801094c <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>)
 80108d2:	f00c fa03 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80108d6:	45c2      	cmp	sl, r8
 80108d8:	bf14      	ite	ne
 80108da:	4622      	movne	r2, r4
 80108dc:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80108de:	eba1 0508 	sub.w	r5, r1, r8
 80108e2:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80108e4:	d22e      	bcs.n	8010944 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80108e6:	b37c      	cbz	r4, 8010948 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80108e8:	429c      	cmp	r4, r3
 80108ea:	bf28      	it	cs
 80108ec:	461c      	movcs	r4, r3
 80108ee:	00a0      	lsls	r0, r4, #2
 80108f0:	f00c f93f 	bl	801cb72 <_Znwj>
 80108f4:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80108f6:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 80108fa:	2d00      	cmp	r5, #0
 80108fc:	5173      	str	r3, [r6, r5]
 80108fe:	dd04      	ble.n	801090a <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010900:	462a      	mov	r2, r5
 8010902:	4641      	mov	r1, r8
 8010904:	4630      	mov	r0, r6
 8010906:	f00d f8b1 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801090a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801090e:	3504      	adds	r5, #4
      if (__count > 0)
 8010910:	f1ba 0f00 	cmp.w	sl, #0
 8010914:	4435      	add	r5, r6
 8010916:	dd04      	ble.n	8010922 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010918:	4652      	mov	r2, sl
 801091a:	4649      	mov	r1, r9
 801091c:	4628      	mov	r0, r5
 801091e:	f00d f99d 	bl	801dc5c <memcpy>
      return __result + __count;
 8010922:	4455      	add	r5, sl
	if (__p)
 8010924:	f1b8 0f00 	cmp.w	r8, #0
 8010928:	d005      	beq.n	8010936 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 801092a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801092c:	4640      	mov	r0, r8
 801092e:	eba1 0108 	sub.w	r1, r1, r8
 8010932:	f00c f8f9 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010936:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801093a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 801093e:	60be      	str	r6, [r7, #8]
    }
 8010940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010944:	461c      	mov	r4, r3
 8010946:	e7d2      	b.n	80108ee <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010948:	4626      	mov	r6, r4
 801094a:	e7d4      	b.n	80108f6 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801094c:	0801dd74 	.word	0x0801dd74

08010950 <_ZN13Communication11AddProtocolEP21CommunicationProtocol>:
void Communication::AddProtocol(CommunicationProtocol* protocol) {
 8010950:	b513      	push	{r0, r1, r4, lr}
 8010952:	4604      	mov	r4, r0
 8010954:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010956:	6800      	ldr	r0, [r0, #0]
 8010958:	f04f 31ff 	mov.w	r1, #4294967295
 801095c:	f7fc fa66 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010960:	e9d4 130a 	ldrd	r1, r3, [r4, #40]	@ 0x28
 8010964:	4299      	cmp	r1, r3
 8010966:	d008      	beq.n	801097a <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x2a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010968:	9b01      	ldr	r3, [sp, #4]
 801096a:	f841 3b04 	str.w	r3, [r1], #4
	    ++this->_M_impl._M_finish;
 801096e:	62a1      	str	r1, [r4, #40]	@ 0x28
	osSemaphoreRelease(CommunicationSemaphore);
 8010970:	6820      	ldr	r0, [r4, #0]
 8010972:	f7fc fa8f 	bl	800ce94 <osSemaphoreRelease>
}
 8010976:	b002      	add	sp, #8
 8010978:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 801097a:	aa01      	add	r2, sp, #4
 801097c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010980:	f7ff ff96 	bl	80108b0 <_ZNSt6vectorIP21CommunicationProtocolSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8010984:	e7f4      	b.n	8010970 <_ZN13Communication11AddProtocolEP21CommunicationProtocol+0x20>

08010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8010986:	b570      	push	{r4, r5, r6, lr}
 8010988:	4604      	mov	r4, r0
 801098a:	b086      	sub	sp, #24
 801098c:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801098e:	6800      	ldr	r0, [r0, #0]
 8010990:	f04f 31ff 	mov.w	r1, #4294967295
 8010994:	f7fc fa4a 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8010998:	f10d 0207 	add.w	r2, sp, #7
 801099c:	4631      	mov	r1, r6
 801099e:	4620      	mov	r0, r4
 80109a0:	f007 feb3 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80109a4:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80109a8:	b125      	cbz	r5, 80109b4 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80109aa:	6820      	ldr	r0, [r4, #0]
 80109ac:	f7fc fa72 	bl	800ce94 <osSemaphoreRelease>
}
 80109b0:	b006      	add	sp, #24
 80109b2:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80109b4:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80109b8:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80109bc:	f7ff fe14 	bl	80105e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80109c0:	2301      	movs	r3, #1
 80109c2:	f8ad 600a 	strh.w	r6, [sp, #10]
 80109c6:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80109ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80109ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80109d2:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80109d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0e5      	beq.n	80109aa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 80109de:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80109e0:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80109e4:	429d      	cmp	r5, r3
 80109e6:	d005      	beq.n	80109f4 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 80109e8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80109ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80109ee:	3510      	adds	r5, #16
 80109f0:	60a5      	str	r5, [r4, #8]
 80109f2:	e7da      	b.n	80109aa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 80109f4:	4629      	mov	r1, r5
 80109f6:	1d20      	adds	r0, r4, #4
 80109f8:	f7ff f9ba 	bl	800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80109fc:	e7d5      	b.n	80109aa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08010a00 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a04:	e9d0 8900 	ldrd	r8, r9, [r0]
 8010a08:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8010a0a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a0e:	eba9 0208 	sub.w	r2, r9, r8
 8010a12:	4607      	mov	r7, r0
 8010a14:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8010a16:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010a1a:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8010a1e:	d102      	bne.n	8010a26 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8010a20:	4820      	ldr	r0, [pc, #128]	@ (8010aa4 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8010a22:	f00c f95b 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8010a26:	45c1      	cmp	r9, r8
 8010a28:	bf14      	ite	ne
 8010a2a:	4622      	movne	r2, r4
 8010a2c:	2201      	moveq	r2, #1
 8010a2e:	eba1 0508 	sub.w	r5, r1, r8
 8010a32:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010a34:	d231      	bcs.n	8010a9a <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010a36:	b394      	cbz	r4, 8010a9e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010a38:	429c      	cmp	r4, r3
 8010a3a:	bf28      	it	cs
 8010a3c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8010a3e:	0120      	lsls	r0, r4, #4
 8010a40:	f00c f897 	bl	801cb72 <_Znwj>
 8010a44:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010a46:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8010a4a:	2d00      	cmp	r5, #0
 8010a4c:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8010a50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8010a54:	dd04      	ble.n	8010a60 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010a56:	462a      	mov	r2, r5
 8010a58:	4641      	mov	r1, r8
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	f00d f806 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8010a60:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8010a64:	3510      	adds	r5, #16
      if (__count > 0)
 8010a66:	f1b9 0f00 	cmp.w	r9, #0
 8010a6a:	4435      	add	r5, r6
 8010a6c:	dd04      	ble.n	8010a78 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010a6e:	464a      	mov	r2, r9
 8010a70:	4651      	mov	r1, sl
 8010a72:	4628      	mov	r0, r5
 8010a74:	f00d f8f2 	bl	801dc5c <memcpy>
      return __result + __count;
 8010a78:	444d      	add	r5, r9
	if (__p)
 8010a7a:	f1b8 0f00 	cmp.w	r8, #0
 8010a7e:	d005      	beq.n	8010a8c <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010a80:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010a82:	4640      	mov	r0, r8
 8010a84:	eba1 0108 	sub.w	r1, r1, r8
 8010a88:	f00c f84e 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010a8c:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010a90:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8010a94:	60be      	str	r6, [r7, #8]
    }
 8010a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010a9a:	461c      	mov	r4, r3
 8010a9c:	e7cf      	b.n	8010a3e <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010a9e:	4626      	mov	r6, r4
 8010aa0:	e7d1      	b.n	8010a46 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8010aa2:	bf00      	nop
 8010aa4:	0801dd74 	.word	0x0801dd74

08010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8010aa8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010aaa:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8010aae:	4605      	mov	r5, r0
 8010ab0:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010ab2:	429c      	cmp	r4, r3
 8010ab4:	d005      	beq.n	8010ac2 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010ab6:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8010abc:	3410      	adds	r4, #16
 8010abe:	606c      	str	r4, [r5, #4]
      }
 8010ac0:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	f7ff ff9c 	bl	8010a00 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010ac8:	e7fa      	b.n	8010ac0 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_+0x18>

08010aca <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8010aca:	b570      	push	{r4, r5, r6, lr}
 8010acc:	460c      	mov	r4, r1
 8010ace:	b086      	sub	sp, #24
 8010ad0:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8010ad6:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8010ad8:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010ada:	f7fc f9a7 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010ade:	4621      	mov	r1, r4
 8010ae0:	f10d 0207 	add.w	r2, sp, #7
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	f007 fe10 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010aee:	4604      	mov	r4, r0
	if (!success) {
 8010af0:	b923      	cbnz	r3, 8010afc <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8010af2:	6828      	ldr	r0, [r5, #0]
 8010af4:	f7fc f9ce 	bl	800ce94 <osSemaphoreRelease>
}
 8010af8:	b006      	add	sp, #24
 8010afa:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010afc:	f10d 0007 	add.w	r0, sp, #7
 8010b00:	f7ff fd72 	bl	80105e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8010b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d0f2      	beq.n	8010af2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8010b0c:	7923      	ldrb	r3, [r4, #4]
 8010b0e:	4298      	cmp	r0, r3
 8010b10:	d1ef      	bne.n	8010af2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010b12:	3004      	adds	r0, #4
 8010b14:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	d0ea      	beq.n	8010af2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8010b1c:	7823      	ldrb	r3, [r4, #0]
 8010b1e:	b983      	cbnz	r3, 8010b42 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 8010b20:	7863      	ldrb	r3, [r4, #1]
 8010b22:	b973      	cbnz	r3, 8010b42 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8010b24:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8010b26:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010b28:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010b2c:	1a9b      	subs	r3, r3, r2
 8010b2e:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8010b30:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8010b32:	f7ff ffb9 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8010b36:	2301      	movs	r3, #1
 8010b38:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 8010b3a:	f240 1301 	movw	r3, #257	@ 0x101
 8010b3e:	8123      	strh	r3, [r4, #8]
 8010b40:	e7d7      	b.n	8010af2 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8010b42:	8961      	ldrh	r1, [r4, #10]
 8010b44:	f7ff fe76 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 8010b48:	6006      	str	r6, [r0, #0]
 8010b4a:	e7f4      	b.n	8010b36 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

08010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8010b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b4e:	460c      	mov	r4, r1
 8010b50:	b087      	sub	sp, #28
 8010b52:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010b54:	f04f 31ff 	mov.w	r1, #4294967295
 8010b58:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8010b5a:	461e      	mov	r6, r3
 8010b5c:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8010b5e:	f7fc f965 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010b62:	4621      	mov	r1, r4
 8010b64:	f10d 0207 	add.w	r2, sp, #7
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f007 fdce 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8010b6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8010b72:	4604      	mov	r4, r0
	if (!success) {
 8010b74:	b923      	cbnz	r3, 8010b80 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8010b76:	6828      	ldr	r0, [r5, #0]
 8010b78:	f7fc f98c 	bl	800ce94 <osSemaphoreRelease>
}
 8010b7c:	b007      	add	sp, #28
 8010b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8010b80:	f10d 0007 	add.w	r0, sp, #7
 8010b84:	f7ff fd30 	bl	80105e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8010b88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d0f2      	beq.n	8010b76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 8010b90:	7923      	ldrb	r3, [r4, #4]
 8010b92:	4298      	cmp	r0, r3
 8010b94:	d1ef      	bne.n	8010b76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8010b96:	3004      	adds	r0, #4
 8010b98:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	d0ea      	beq.n	8010b76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8010ba0:	7823      	ldrb	r3, [r4, #0]
 8010ba2:	b983      	cbnz	r3, 8010bc6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8010ba4:	7863      	ldrb	r3, [r4, #1]
 8010ba6:	b973      	cbnz	r3, 8010bc6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8010ba8:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8010baa:	a902      	add	r1, sp, #8
 8010bac:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 8010bb0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8010bb4:	1a9b      	subs	r3, r3, r2
 8010bb6:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8010bb8:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8010bba:	f7ff ff75 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8010bc2:	7223      	strb	r3, [r4, #8]
 8010bc4:	e7d7      	b.n	8010b76 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8010bc6:	8961      	ldrh	r1, [r4, #10]
 8010bc8:	f7ff fe34 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8010bcc:	e9c0 7601 	strd	r7, r6, [r0, #4]
 8010bd0:	e7f5      	b.n	8010bbe <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>
	...

08010bd4 <_ZN13Communication12AddRegistersEv>:
void Communication::AddRegisters(void) {
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_COM_ID_PROPAGATION);
 8010bd8:	2101      	movs	r1, #1
 8010bda:	6840      	ldr	r0, [r0, #4]
 8010bdc:	f7ff fed3 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ID_PROPAGATION);
 8010be0:	2101      	movs	r1, #1
 8010be2:	6860      	ldr	r0, [r4, #4]
 8010be4:	f007 fdca 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ID_PROPAGATION, (void*) this,
 8010be8:	4b32      	ldr	r3, [pc, #200]	@ (8010cb4 <_ZN13Communication12AddRegistersEv+0xe0>)
 8010bea:	4622      	mov	r2, r4
 8010bec:	6860      	ldr	r0, [r4, #4]
 8010bee:	2101      	movs	r1, #1
 8010bf0:	f7ff ffac 	bl	8010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADDRESS);
 8010bf4:	6860      	ldr	r0, [r4, #4]
 8010bf6:	2102      	movs	r1, #2
 8010bf8:	f7ff fec5 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADDRESS);
 8010bfc:	2102      	movs	r1, #2
 8010bfe:	6860      	ldr	r0, [r4, #4]
 8010c00:	f007 fdbc 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_COM_ADDRESS, &CommunicationSemaphore);
 8010c04:	4622      	mov	r2, r4
 8010c06:	2102      	movs	r1, #2
 8010c08:	6860      	ldr	r0, [r4, #4]
 8010c0a:	f007 fd9d 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer(REG_COM_ADDRESS, &address);
 8010c0e:	f104 0214 	add.w	r2, r4, #20
 8010c12:	6860      	ldr	r0, [r4, #4]
 8010c14:	2102      	movs	r1, #2
 8010c16:	f7ff ff58 	bl	8010aca <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_ADD_GROUP_ADDRESS);
 8010c1a:	6860      	ldr	r0, [r4, #4]
 8010c1c:	2103      	movs	r1, #3
 8010c1e:	f7ff feb2 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_ADD_GROUP_ADDRESS);
 8010c22:	2103      	movs	r1, #3
 8010c24:	6860      	ldr	r0, [r4, #4]
 8010c26:	f007 fda9 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_ADD_GROUP_ADDRESS, (void*) this,
 8010c2a:	4622      	mov	r2, r4
 8010c2c:	4b22      	ldr	r3, [pc, #136]	@ (8010cb8 <_ZN13Communication12AddRegistersEv+0xe4>)
 8010c2e:	2103      	movs	r1, #3
 8010c30:	6860      	ldr	r0, [r4, #4]
 8010c32:	f7ff ff8b 	bl	8010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS);
 8010c36:	6860      	ldr	r0, [r4, #4]
 8010c38:	2104      	movs	r1, #4
 8010c3a:	f7ff fea4 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_REMOVE_GROUP_ADDRESS);
 8010c3e:	2104      	movs	r1, #4
 8010c40:	6860      	ldr	r0, [r4, #4]
 8010c42:	f007 fd9b 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_REMOVE_GROUP_ADDRESS, (void*) this,
 8010c46:	4622      	mov	r2, r4
 8010c48:	4b1c      	ldr	r3, [pc, #112]	@ (8010cbc <_ZN13Communication12AddRegistersEv+0xe8>)
 8010c4a:	2104      	movs	r1, #4
 8010c4c:	6860      	ldr	r0, [r4, #4]
 8010c4e:	f7ff ff7d 	bl	8010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS);
 8010c52:	6860      	ldr	r0, [r4, #4]
 8010c54:	2105      	movs	r1, #5
 8010c56:	f7ff fe96 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_COM_CLEAR_GROUP_ADDRESS);
 8010c5a:	2105      	movs	r1, #5
 8010c5c:	6860      	ldr	r0, [r4, #4]
 8010c5e:	f007 fd8d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_CLEAR_GROUP_ADDRESS, (void*) this,
 8010c62:	4b17      	ldr	r3, [pc, #92]	@ (8010cc0 <_ZN13Communication12AddRegistersEv+0xec>)
 8010c64:	4622      	mov	r2, r4
 8010c66:	6860      	ldr	r0, [r4, #4]
 8010c68:	2105      	movs	r1, #5
 8010c6a:	f7ff ff6f 	bl	8010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_COM_GET_GROUP_ADDRESS);
 8010c6e:	6860      	ldr	r0, [r4, #4]
 8010c70:	2106      	movs	r1, #6
 8010c72:	f7ff fe88 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_GET_GROUP_ADDRESS);
 8010c76:	2106      	movs	r1, #6
 8010c78:	6860      	ldr	r0, [r4, #4]
 8010c7a:	f007 fdb7 	bl	80187ec <_ZN9Registers19SetRegisterAsVectorEt>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8010c7e:	f104 0218 	add.w	r2, r4, #24
 8010c82:	6860      	ldr	r0, [r4, #4]
 8010c84:	2106      	movs	r1, #6
 8010c86:	f7ff ff20 	bl	8010aca <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_COM_GET_GROUP_ADDRESS, READ_PERMISSION);
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	2106      	movs	r1, #6
 8010c8e:	6860      	ldr	r0, [r4, #4]
 8010c90:	f007 fdaf 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_COM_FORWARD_MESSAGE);
 8010c94:	6860      	ldr	r0, [r4, #4]
 8010c96:	2107      	movs	r1, #7
 8010c98:	f7ff fe75 	bl	8010986 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_COM_FORWARD_MESSAGE);
 8010c9c:	2107      	movs	r1, #7
 8010c9e:	6860      	ldr	r0, [r4, #4]
 8010ca0:	f007 fda4 	bl	80187ec <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	6860      	ldr	r0, [r4, #4]
 8010ca8:	2107      	movs	r1, #7
 8010caa:	4b06      	ldr	r3, [pc, #24]	@ (8010cc4 <_ZN13Communication12AddRegistersEv+0xf0>)
}
 8010cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_COM_FORWARD_MESSAGE, (void*) this,
 8010cb0:	f7ff bf4c 	b.w	8010b4c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8010cb4:	08012041 	.word	0x08012041
 8010cb8:	08010e45 	.word	0x08010e45
 8010cbc:	08010f25 	.word	0x08010f25
 8010cc0:	0801082f 	.word	0x0801082f
 8010cc4:	08011ced 	.word	0x08011ced

08010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8010ccc:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8010cce:	b118      	cbz	r0, 8010cd8 <_ZNSt12_Vector_baseIaSaIaEED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010cd0:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010cd2:	1a09      	subs	r1, r1, r0
 8010cd4:	f00b ff28 	bl	801cb28 <_ZdlPvj>
      }
 8010cd8:	4620      	mov	r0, r4
 8010cda:	bd10      	pop	{r4, pc}

08010cdc <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010cdc:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010cde:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010ce0:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010ce2:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8010ce4:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8010ce8:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010cea:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010cec:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010cee:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010cf0:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010cf2:	688d      	ldr	r5, [r1, #8]
 8010cf4:	6085      	str	r5, [r0, #8]
      }
 8010cf6:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8010cf8:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010cfa:	e9c1 3300 	strd	r3, r3, [r1]
 8010cfe:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010d02:	f7ff ffe1 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 8010d06:	b005      	add	sp, #20
 8010d08:	bd30      	pop	{r4, r5, pc}

08010d0a <_ZN23SubscriberConfigurationD1Ev>:
struct SubscriberConfiguration {
 8010d0a:	b510      	push	{r4, lr}
 8010d0c:	4604      	mov	r4, r0
      }
 8010d0e:	301c      	adds	r0, #28
 8010d10:	f7ef fee6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8010d14:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8010d16:	b118      	cbz	r0, 8010d20 <_ZN23SubscriberConfigurationD1Ev+0x16>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010d18:	69a1      	ldr	r1, [r4, #24]
 8010d1a:	1a09      	subs	r1, r1, r0
 8010d1c:	f00b ff04 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 8010d20:	6860      	ldr	r0, [r4, #4]
	if (__p)
 8010d22:	b118      	cbz	r0, 8010d2c <_ZN23SubscriberConfigurationD1Ev+0x22>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010d24:	68e1      	ldr	r1, [r4, #12]
 8010d26:	1a09      	subs	r1, r1, r0
 8010d28:	f00b fefe 	bl	801cb28 <_ZdlPvj>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	bd10      	pop	{r4, pc}

08010d30 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010d30:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8010d32:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8010d34:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8010d36:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8010d38:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8010d3c:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8010d3e:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010d40:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8010d42:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8010d44:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8010d46:	688d      	ldr	r5, [r1, #8]
 8010d48:	6085      	str	r5, [r0, #8]
      }
 8010d4a:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8010d4c:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8010d4e:	e9c1 3300 	strd	r3, r3, [r1]
 8010d52:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8010d56:	f7f1 f921 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 8010d5a:	b005      	add	sp, #20
 8010d5c:	bd30      	pop	{r4, r5, pc}
	...

08010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8010d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010d64:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      vector<_Tp, _Alloc>::
 8010d68:	4605      	mov	r5, r0
 8010d6a:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010d6c:	429c      	cmp	r4, r3
 8010d6e:	d006      	beq.n	8010d7e <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010d70:	780b      	ldrb	r3, [r1, #0]
 8010d72:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 8010d74:	6843      	ldr	r3, [r0, #4]
 8010d76:	3301      	adds	r3, #1
 8010d78:	6043      	str	r3, [r0, #4]
      }
 8010d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010d7e:	4a10      	ldr	r2, [pc, #64]	@ (8010dc0 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x60>)
 8010d80:	2101      	movs	r1, #1
 8010d82:	f7ef fece 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8010d86:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010d88:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 8010d8a:	f7ff fc21 	bl	80105d0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8010d8e:	1be4      	subs	r4, r4, r7
 8010d90:	f899 3000 	ldrb.w	r3, [r9]
 8010d94:	4606      	mov	r6, r0
      if (__count > 0)
 8010d96:	2c00      	cmp	r4, #0
 8010d98:	5503      	strb	r3, [r0, r4]
 8010d9a:	dd03      	ble.n	8010da4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010d9c:	4622      	mov	r2, r4
 8010d9e:	4639      	mov	r1, r7
 8010da0:	f00c fe64 	bl	801da6c <memmove>
	      ++__new_finish;
 8010da4:	3401      	adds	r4, #1
 8010da6:	4434      	add	r4, r6
	if (__p)
 8010da8:	b127      	cbz	r7, 8010db4 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010daa:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010dac:	4638      	mov	r0, r7
 8010dae:	1bc9      	subs	r1, r1, r7
 8010db0:	f00b feba 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010db4:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010db8:	4446      	add	r6, r8
 8010dba:	60ae      	str	r6, [r5, #8]
      }
 8010dbc:	e7dd      	b.n	8010d7a <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x1a>
 8010dbe:	bf00      	nop
 8010dc0:	0801dd74 	.word	0x0801dd74

08010dc4 <_ZN13Communication15AddGroupAddressEh>:
bool Communication::AddGroupAddress(uint8_t address) {
 8010dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dc8:	4604      	mov	r4, r0
 8010dca:	4689      	mov	r9, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010dcc:	6800      	ldr	r0, [r0, #0]
 8010dce:	f04f 31ff 	mov.w	r1, #4294967295
 8010dd2:	f7fc f82b 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010dd6:	e9d4 5307 	ldrd	r5, r3, [r4, #28]
 8010dda:	429d      	cmp	r5, r3
 8010ddc:	d00a      	beq.n	8010df4 <_ZN13Communication15AddGroupAddressEh+0x30>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010dde:	f885 9000 	strb.w	r9, [r5]
	    ++this->_M_impl._M_finish;
 8010de2:	69e3      	ldr	r3, [r4, #28]
 8010de4:	3301      	adds	r3, #1
 8010de6:	61e3      	str	r3, [r4, #28]
	osSemaphoreRelease(CommunicationSemaphore);
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	f7fc f853 	bl	800ce94 <osSemaphoreRelease>
}
 8010dee:	2001      	movs	r0, #1
 8010df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010df4:	4a12      	ldr	r2, [pc, #72]	@ (8010e40 <_ZN13Communication15AddGroupAddressEh+0x7c>)
 8010df6:	2101      	movs	r1, #1
 8010df8:	f104 0018 	add.w	r0, r4, #24
 8010dfc:	f7ef fe91 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8010e00:	f8d4 8018 	ldr.w	r8, [r4, #24]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010e04:	4607      	mov	r7, r0
      pointer __new_start(this->_M_allocate(__len));
 8010e06:	f7ff fbe3 	bl	80105d0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8010e0a:	eba5 0508 	sub.w	r5, r5, r8
 8010e0e:	4606      	mov	r6, r0
      if (__count > 0)
 8010e10:	2d00      	cmp	r5, #0
 8010e12:	f800 9005 	strb.w	r9, [r0, r5]
 8010e16:	dd03      	ble.n	8010e20 <_ZN13Communication15AddGroupAddressEh+0x5c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8010e18:	462a      	mov	r2, r5
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	f00c fe26 	bl	801da6c <memmove>
	      ++__new_finish;
 8010e20:	3501      	adds	r5, #1
 8010e22:	4435      	add	r5, r6
	if (__p)
 8010e24:	f1b8 0f00 	cmp.w	r8, #0
 8010e28:	d005      	beq.n	8010e36 <_ZN13Communication15AddGroupAddressEh+0x72>
		    this->_M_impl._M_end_of_storage - __old_start);
 8010e2a:	6a21      	ldr	r1, [r4, #32]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8010e2c:	4640      	mov	r0, r8
 8010e2e:	eba1 0108 	sub.w	r1, r1, r8
 8010e32:	f00b fe79 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8010e36:	e9c4 6506 	strd	r6, r5, [r4, #24]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010e3a:	443e      	add	r6, r7
 8010e3c:	6226      	str	r6, [r4, #32]
 8010e3e:	e7d3      	b.n	8010de8 <_ZN13Communication15AddGroupAddressEh+0x24>
 8010e40:	0801dd74 	.word	0x0801dd74

08010e44 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->AddGroupAddress(*input);
 8010e44:	7811      	ldrb	r1, [r2, #0]
 8010e46:	f7ff bfbd 	b.w	8010dc4 <_ZN13Communication15AddGroupAddressEh>
	...

08010e4c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>:
      at(size_type __n)
 8010e4c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010e4e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8010e52:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 8010e54:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010e58:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 8010e5c:	d302      	bcc.n	8010e64 <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8010e5e:	4803      	ldr	r0, [pc, #12]	@ (8010e6c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj+0x20>)
 8010e60:	f00b ff3f 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8010e64:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8010e68:	bd38      	pop	{r3, r4, r5, pc}
 8010e6a:	bf00      	nop
 8010e6c:	0801dfb4 	.word	0x0801dfb4

08010e70 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8010e70:	b510      	push	{r4, lr}
 8010e72:	4604      	mov	r4, r0
 8010e74:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010e76:	e9d4 2300 	ldrd	r2, r3, [r4]
	if (max_size() - size() < __n)
 8010e7a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010e7e:	1a9b      	subs	r3, r3, r2
	if (max_size() - size() < __n)
 8010e80:	1ae2      	subs	r2, r4, r3
 8010e82:	428a      	cmp	r2, r1
 8010e84:	d201      	bcs.n	8010e8a <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x1a>
	  __throw_length_error(__N(__s));
 8010e86:	f00b ff29 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8010e8a:	4299      	cmp	r1, r3
 8010e8c:	bf38      	it	cc
 8010e8e:	4619      	movcc	r1, r3
 8010e90:	185b      	adds	r3, r3, r1
 8010e92:	d204      	bcs.n	8010e9e <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2e>
 8010e94:	42a3      	cmp	r3, r4
 8010e96:	bf28      	it	cs
 8010e98:	4623      	movcs	r3, r4
 8010e9a:	4618      	mov	r0, r3
      }
 8010e9c:	bd10      	pop	{r4, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	e7fc      	b.n	8010e9c <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc+0x2c>

08010ea2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8010ea2:	b538      	push	{r3, r4, r5, lr}
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	4610      	mov	r0, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010ea8:	e9d3 3500 	ldrd	r3, r5, [r3]
 8010eac:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 8010eae:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010eb2:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 8010eb4:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 8010eb8:	428d      	cmp	r5, r1
 8010eba:	d201      	bcs.n	8010ec0 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 8010ebc:	f00b ff0e 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8010ec0:	42a1      	cmp	r1, r4
 8010ec2:	bf38      	it	cc
 8010ec4:	4621      	movcc	r1, r4
 8010ec6:	1864      	adds	r4, r4, r1
 8010ec8:	d204      	bcs.n	8010ed4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x32>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010eca:	429c      	cmp	r4, r3
 8010ecc:	4620      	mov	r0, r4
 8010ece:	bf28      	it	cs
 8010ed0:	4618      	movcs	r0, r3
      }
 8010ed2:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	e7fc      	b.n	8010ed2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x30>

08010ed8 <_ZN13Communication18RemoveGroupAddressEh>:
bool Communication::RemoveGroupAddress(uint8_t address_) {
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	4604      	mov	r4, r0
 8010edc:	460d      	mov	r5, r1
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010ede:	6800      	ldr	r0, [r0, #0]
 8010ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8010ee4:	f7fb ffa2 	bl	800ce2c <osSemaphoreAcquire>
      : _M_current(__i) { }
 8010ee8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
	for (uint8_t address : group_addresses) {
 8010eec:	4603      	mov	r3, r0
 8010eee:	428b      	cmp	r3, r1
 8010ef0:	d104      	bne.n	8010efc <_ZN13Communication18RemoveGroupAddressEh+0x24>
	osSemaphoreRelease(CommunicationSemaphore);
 8010ef2:	6820      	ldr	r0, [r4, #0]
 8010ef4:	f7fb ffce 	bl	800ce94 <osSemaphoreRelease>
	return false;
 8010ef8:	2000      	movs	r0, #0
 8010efa:	e010      	b.n	8010f1e <_ZN13Communication18RemoveGroupAddressEh+0x46>
 8010efc:	461a      	mov	r2, r3
		if (address == address_) {
 8010efe:	f812 6b01 	ldrb.w	r6, [r2], #1
 8010f02:	42ae      	cmp	r6, r5
 8010f04:	d10c      	bne.n	8010f20 <_ZN13Communication18RemoveGroupAddressEh+0x48>
      { return __normal_iterator(_M_current + __n); }
 8010f06:	1a1a      	subs	r2, r3, r0
 8010f08:	fa50 f282 	uxtab	r2, r0, r2
 8010f0c:	1c50      	adds	r0, r2, #1
      if (__position + 1 != end())
 8010f0e:	4281      	cmp	r1, r0
 8010f10:	d001      	beq.n	8010f16 <_ZN13Communication18RemoveGroupAddressEh+0x3e>
			      _Category>::__copy_m(__first, __last, __result);
 8010f12:	f7f0 fe8f 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      --this->_M_impl._M_finish;
 8010f16:	69e3      	ldr	r3, [r4, #28]
			return true;
 8010f18:	2001      	movs	r0, #1
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	61e3      	str	r3, [r4, #28]
}
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}
 8010f20:	4613      	mov	r3, r2
 8010f22:	e7e4      	b.n	8010eee <_ZN13Communication18RemoveGroupAddressEh+0x16>

08010f24 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->RemoveGroupAddress(*input);
 8010f24:	7811      	ldrb	r1, [r2, #0]
 8010f26:	f7ff bfd7 	b.w	8010ed8 <_ZN13Communication18RemoveGroupAddressEh>

08010f2a <_ZN14MessageElementC1ERKS_>:
struct MessageElement {
 8010f2a:	b510      	push	{r4, lr}
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	4604      	mov	r4, r0
 8010f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f34:	7a1a      	ldrb	r2, [r3, #8]
 8010f36:	80a1      	strh	r1, [r4, #4]
 8010f38:	88d9      	ldrh	r1, [r3, #6]
 8010f3a:	6020      	str	r0, [r4, #0]
 8010f3c:	f104 000c 	add.w	r0, r4, #12
 8010f40:	80e1      	strh	r1, [r4, #6]
 8010f42:	f103 010c 	add.w	r1, r3, #12
 8010f46:	7222      	strb	r2, [r4, #8]
 8010f48:	f7ef fe7a 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	bd10      	pop	{r4, pc}

08010f50 <_ZN13MessageHeaderC1ERKS_>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	460d      	mov	r5, r1
 8010f54:	f811 3b04 	ldrb.w	r3, [r1], #4
 8010f58:	4604      	mov	r4, r0
 8010f5a:	f800 3b04 	strb.w	r3, [r0], #4
 8010f5e:	f7ef fe6f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8010f62:	8a2b      	ldrh	r3, [r5, #16]
 8010f64:	4620      	mov	r0, r4
 8010f66:	8223      	strh	r3, [r4, #16]
 8010f68:	bd38      	pop	{r3, r4, r5, pc}
	...

08010f6c <_ZN13Communication4SpinEv>:
void Communication::Spin(void) {
 8010f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = 0;
 8010f70:	2500      	movs	r5, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010f72:	4f29      	ldr	r7, [pc, #164]	@ (8011018 <_ZN13Communication4SpinEv+0xac>)
void Communication::Spin(void) {
 8010f74:	b08d      	sub	sp, #52	@ 0x34
 8010f76:	4604      	mov	r4, r0
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8010f78:	f04f 31ff 	mov.w	r1, #4294967295
 8010f7c:	6800      	ldr	r0, [r0, #0]
 8010f7e:	f7fb ff55 	bl	800ce2c <osSemaphoreAcquire>
 8010f82:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8010f86:	1a9b      	subs	r3, r3, r2
 8010f88:	109b      	asrs	r3, r3, #2
 8010f8a:	437b      	muls	r3, r7
	while (index < pending_messages.size()) {
 8010f8c:	429d      	cmp	r5, r3
 8010f8e:	d308      	bcc.n	8010fa2 <_ZN13Communication4SpinEv+0x36>
	osSemaphoreRelease(CommunicationSemaphore);
 8010f90:	6820      	ldr	r0, [r4, #0]
 8010f92:	f7fb ff7f 	bl	800ce94 <osSemaphoreRelease>
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 8010f96:	2064      	movs	r0, #100	@ 0x64
}
 8010f98:	b00d      	add	sp, #52	@ 0x34
 8010f9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	osDelay(DEFAULT_COMMUNICATION_PERIOD);
 8010f9e:	f7fb bedb 	b.w	800cd58 <osDelay>
	return *(this->_M_impl._M_start + __n);
 8010fa2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
		MessageHeader message = pending_messages[index];
 8010fa6:	a802      	add	r0, sp, #8
 8010fa8:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8010fac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8010fb0:	f7ff ffce 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8010fb4:	f10d 0207 	add.w	r2, sp, #7
 8010fb8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7ff fb7f 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
		if (!success)
 8010fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8010fc6:	4606      	mov	r6, r0
		if (!success)
 8010fc8:	b92b      	cbnz	r3, 8010fd6 <_ZN13Communication4SpinEv+0x6a>
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8010fd0:	4441      	add	r1, r8
 8010fd2:	f7ff fc41 	bl	8010858 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
		message.source_address = address; // set the source address as the module address
 8010fd6:	7d23      	ldrb	r3, [r4, #20]
		HAL_StatusTypeDef status = protocol->Send(message);
 8010fd8:	a902      	add	r1, sp, #8
 8010fda:	a807      	add	r0, sp, #28
		message.source_address = address; // set the source address as the module address
 8010fdc:	f88d 3019 	strb.w	r3, [sp, #25]
		HAL_StatusTypeDef status = protocol->Send(message);
 8010fe0:	6833      	ldr	r3, [r6, #0]
 8010fe2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8010fe6:	f7ff ffb3 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8010fea:	a907      	add	r1, sp, #28
 8010fec:	4630      	mov	r0, r6
 8010fee:	47c8      	blx	r9
 8010ff0:	4606      	mov	r6, r0
      }
 8010ff2:	a808      	add	r0, sp, #32
 8010ff4:	f7ef fd74 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (status == HAL_OK || status == HAL_ERROR)
 8010ff8:	2e01      	cmp	r6, #1
 8010ffa:	d809      	bhi.n	8011010 <_ZN13Communication4SpinEv+0xa4>
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f850 1f30 	ldr.w	r1, [r0, #48]!
      { return _M_erase(begin() + (__position - cbegin())); }
 8011002:	4441      	add	r1, r8
 8011004:	f7ff fc28 	bl	8010858 <_ZNSt6vectorI13MessageHeaderSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
      }
 8011008:	a803      	add	r0, sp, #12
 801100a:	f7ef fd69 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801100e:	e7b8      	b.n	8010f82 <_ZN13Communication4SpinEv+0x16>
			index++;
 8011010:	3501      	adds	r5, #1
 8011012:	b2ed      	uxtb	r5, r5
 8011014:	e7f8      	b.n	8011008 <_ZN13Communication4SpinEv+0x9c>
 8011016:	bf00      	nop
 8011018:	cccccccd 	.word	0xcccccccd

0801101c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801101c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011020:	e9d0 7900 	ldrd	r7, r9, [r0]
 8011024:	4b3f      	ldr	r3, [pc, #252]	@ (8011124 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x108>)
 8011026:	4606      	mov	r6, r0
 8011028:	eba9 0507 	sub.w	r5, r9, r7
 801102c:	4688      	mov	r8, r1
 801102e:	4614      	mov	r4, r2
 8011030:	10ad      	asrs	r5, r5, #2
 8011032:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 8011034:	4b3c      	ldr	r3, [pc, #240]	@ (8011128 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x10c>)
 8011036:	429d      	cmp	r5, r3
 8011038:	d102      	bne.n	8011040 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801103a:	483c      	ldr	r0, [pc, #240]	@ (801112c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x110>)
 801103c:	f00b fe4e 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8011040:	45b9      	cmp	r9, r7
 8011042:	bf14      	ite	ne
 8011044:	462a      	movne	r2, r5
 8011046:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8011048:	eba1 0b07 	sub.w	fp, r1, r7
 801104c:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801104e:	d22d      	bcs.n	80110ac <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011050:	b375      	cbz	r5, 80110b0 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011052:	429d      	cmp	r5, r3
 8011054:	bf28      	it	cs
 8011056:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011058:	2014      	movs	r0, #20
 801105a:	4368      	muls	r0, r5
 801105c:	f00b fd89 	bl	801cb72 <_Znwj>
 8011060:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011062:	4621      	mov	r1, r4
 8011064:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011068:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 801106a:	46d3      	mov	fp, sl
 801106c:	f7ff ff70 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
      for (; __first != __last; ++__first, (void)++__cur)
 8011070:	45a0      	cmp	r8, r4
 8011072:	f04f 0300 	mov.w	r3, #0
 8011076:	f10b 0b14 	add.w	fp, fp, #20
 801107a:	d11b      	bne.n	80110b4 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801107c:	f04f 0800 	mov.w	r8, #0
 8011080:	454c      	cmp	r4, r9
 8011082:	465b      	mov	r3, fp
 8011084:	f10b 0b14 	add.w	fp, fp, #20
 8011088:	d12f      	bne.n	80110ea <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xce>
	if (__p)
 801108a:	b137      	cbz	r7, 801109a <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801108c:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801108e:	4638      	mov	r0, r7
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	1bc9      	subs	r1, r1, r7
 8011094:	f00b fd48 	bl	801cb28 <_ZdlPvj>
 8011098:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 801109a:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801109e:	2314      	movs	r3, #20
 80110a0:	fb03 a305 	mla	r3, r3, r5, sl
 80110a4:	60b3      	str	r3, [r6, #8]
    }
 80110a6:	b003      	add	sp, #12
 80110a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ac:	461d      	mov	r5, r3
 80110ae:	e7d3      	b.n	8011058 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80110b0:	46aa      	mov	sl, r5
 80110b2:	e7d6      	b.n	8011062 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80110b4:	7822      	ldrb	r2, [r4, #0]
      }
 80110b6:	1d20      	adds	r0, r4, #4
 80110b8:	f80b 2c14 	strb.w	r2, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80110bc:	6862      	ldr	r2, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80110be:	6063      	str	r3, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80110c0:	f84b 2c10 	str.w	r2, [fp, #-16]
 80110c4:	68a2      	ldr	r2, [r4, #8]
 80110c6:	f84b 2c0c 	str.w	r2, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 80110ca:	68e2      	ldr	r2, [r4, #12]
 80110cc:	f84b 2c08 	str.w	r2, [fp, #-8]
 80110d0:	7c22      	ldrb	r2, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80110d2:	e9c4 3302 	strd	r3, r3, [r4, #8]
 80110d6:	f80b 2c04 	strb.w	r2, [fp, #-4]
 80110da:	3414      	adds	r4, #20
 80110dc:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 80110e0:	f80b 2c03 	strb.w	r2, [fp, #-3]
      }
 80110e4:	f7ef fcfc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80110e8:	e7c2      	b.n	8011070 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 80110ea:	7823      	ldrb	r3, [r4, #0]
 80110ec:	1d20      	adds	r0, r4, #4
 80110ee:	f80b 3c14 	strb.w	r3, [fp, #-20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80110f2:	6863      	ldr	r3, [r4, #4]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80110f4:	f8c4 8004 	str.w	r8, [r4, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80110f8:	f84b 3c10 	str.w	r3, [fp, #-16]
 80110fc:	68a3      	ldr	r3, [r4, #8]
 80110fe:	f84b 3c0c 	str.w	r3, [fp, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8011102:	68e3      	ldr	r3, [r4, #12]
 8011104:	f84b 3c08 	str.w	r3, [fp, #-8]
 8011108:	7c23      	ldrb	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801110a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801110e:	f80b 3c04 	strb.w	r3, [fp, #-4]
 8011112:	3414      	adds	r4, #20
 8011114:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 8011118:	f80b 3c03 	strb.w	r3, [fp, #-3]
      }
 801111c:	f7ef fce0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011120:	e7ae      	b.n	8011080 <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x64>
 8011122:	bf00      	nop
 8011124:	cccccccd 	.word	0xcccccccd
 8011128:	06666666 	.word	0x06666666
 801112c:	0801dd74 	.word	0x0801dd74

08011130 <_ZN13Communication4SendE13MessageHeader>:
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 8011130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011132:	b087      	sub	sp, #28
 8011134:	460d      	mov	r5, r1
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011136:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef Communication::Send(MessageHeader message) {
 8011138:	4604      	mov	r4, r0
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 801113a:	f10d 0203 	add.w	r2, sp, #3
 801113e:	f7ff fabf 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
	if (!success) return HAL_ERROR;
 8011142:	f89d 3003 	ldrb.w	r3, [sp, #3]
	CommunicationProtocol* protocol = FindProtocol(message.interface, &success);
 8011146:	4606      	mov	r6, r0
	if (!success) return HAL_ERROR;
 8011148:	2b00      	cmp	r3, #0
 801114a:	d032      	beq.n	80111b2 <_ZN13Communication4SendE13MessageHeader+0x82>
	message.source_address = address; // set the source address as the module address
 801114c:	7d23      	ldrb	r3, [r4, #20]
	CommunicationLED(leds, message.interface);
 801114e:	7829      	ldrb	r1, [r5, #0]
	message.source_address = address; // set the source address as the module address
 8011150:	746b      	strb	r3, [r5, #17]
	CommunicationLED(leds, message.interface);
 8011152:	6920      	ldr	r0, [r4, #16]
 8011154:	f7fd ff7e 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever);
 8011158:	f04f 31ff 	mov.w	r1, #4294967295
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	f7fb fe65 	bl	800ce2c <osSemaphoreAcquire>
	HAL_StatusTypeDef status = protocol->Send(message);
 8011162:	6833      	ldr	r3, [r6, #0]
 8011164:	4629      	mov	r1, r5
 8011166:	a801      	add	r0, sp, #4
 8011168:	689f      	ldr	r7, [r3, #8]
 801116a:	f7ff fef1 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801116e:	a901      	add	r1, sp, #4
 8011170:	4630      	mov	r0, r6
 8011172:	47b8      	blx	r7
 8011174:	4606      	mov	r6, r0
 8011176:	a802      	add	r0, sp, #8
 8011178:	f7ef fcb2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (status == HAL_BUSY || status == HAL_TIMEOUT) {
 801117c:	1eb3      	subs	r3, r6, #2
 801117e:	b2db      	uxtb	r3, r3
 8011180:	2b01      	cmp	r3, #1
 8011182:	d809      	bhi.n	8011198 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011184:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	@ 0x34
 8011188:	4298      	cmp	r0, r3
 801118a:	d00b      	beq.n	80111a4 <_ZN13Communication4SendE13MessageHeader+0x74>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801118c:	4629      	mov	r1, r5
 801118e:	f7ff fedf 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
	    ++this->_M_impl._M_finish;
 8011192:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011194:	3314      	adds	r3, #20
 8011196:	6363      	str	r3, [r4, #52]	@ 0x34
	osSemaphoreRelease(CommunicationSemaphore);
 8011198:	6820      	ldr	r0, [r4, #0]
 801119a:	f7fb fe7b 	bl	800ce94 <osSemaphoreRelease>
}
 801119e:	4630      	mov	r0, r6
 80111a0:	b007      	add	sp, #28
 80111a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 80111a4:	4601      	mov	r1, r0
 80111a6:	462a      	mov	r2, r5
 80111a8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80111ac:	f7ff ff36 	bl	801101c <_ZNSt6vectorI13MessageHeaderSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80111b0:	e7f2      	b.n	8011198 <_ZN13Communication4SendE13MessageHeader+0x68>
	if (!success) return HAL_ERROR;
 80111b2:	2601      	movs	r6, #1
 80111b4:	e7f3      	b.n	801119e <_ZN13Communication4SendE13MessageHeader+0x6e>

080111b6 <_ZN23SubscriberConfigurationC1ERKS_>:
 80111b6:	b570      	push	{r4, r5, r6, lr}
 80111b8:	880b      	ldrh	r3, [r1, #0]
 80111ba:	4604      	mov	r4, r0
 80111bc:	460d      	mov	r5, r1
 80111be:	8003      	strh	r3, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111c0:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80111c2:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80111ca:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 80111cc:	60c3      	str	r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80111ce:	d043      	beq.n	8011258 <_ZN23SubscriberConfigurationC1ERKS_+0xa2>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80111d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80111d4:	429e      	cmp	r6, r3
 80111d6:	d301      	bcc.n	80111dc <_ZN23SubscriberConfigurationC1ERKS_+0x26>
	      std::__throw_bad_array_new_length();
 80111d8:	f00b fd7d 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80111dc:	4630      	mov	r0, r6
 80111de:	f00b fcc8 	bl	801cb72 <_Znwj>
 80111e2:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111e4:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80111e6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80111ea:	60e6      	str	r6, [r4, #12]
      : _M_current(__i) { }
 80111ec:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
	  if (_Num)
 80111f0:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 80111f2:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 80111f6:	d004      	beq.n	8011202 <_ZN23SubscriberConfigurationC1ERKS_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80111f8:	4618      	mov	r0, r3
 80111fa:	4632      	mov	r2, r6
 80111fc:	f00c fc36 	bl	801da6c <memmove>
 8011200:	4603      	mov	r3, r0
	  return __result + _Num;
 8011202:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011204:	e9d5 2604 	ldrd	r2, r6, [r5, #16]
	this->_M_impl._M_finish =
 8011208:	60a3      	str	r3, [r4, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801120a:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801120c:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801120e:	61a3      	str	r3, [r4, #24]
 8011210:	e9c4 3304 	strd	r3, r3, [r4, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011214:	d022      	beq.n	801125c <_ZN23SubscriberConfigurationC1ERKS_+0xa6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011216:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801121a:	429e      	cmp	r6, r3
 801121c:	d2dc      	bcs.n	80111d8 <_ZN23SubscriberConfigurationC1ERKS_+0x22>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801121e:	4630      	mov	r0, r6
 8011220:	f00b fca7 	bl	801cb72 <_Znwj>
 8011224:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011226:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011228:	e9c4 3304 	strd	r3, r3, [r4, #16]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801122c:	61a6      	str	r6, [r4, #24]
 801122e:	e9d5 1204 	ldrd	r1, r2, [r5, #16]
	  if (_Num)
 8011232:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8011234:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8011238:	d004      	beq.n	8011244 <_ZN23SubscriberConfigurationC1ERKS_+0x8e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801123a:	4618      	mov	r0, r3
 801123c:	4632      	mov	r2, r6
 801123e:	f00c fc15 	bl	801da6c <memmove>
 8011242:	4603      	mov	r3, r0
	  return __result + _Num;
 8011244:	4433      	add	r3, r6
 8011246:	f105 011c 	add.w	r1, r5, #28
 801124a:	f104 001c 	add.w	r0, r4, #28
	this->_M_impl._M_finish =
 801124e:	6163      	str	r3, [r4, #20]
 8011250:	f7ef fcf6 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011254:	4620      	mov	r0, r4
 8011256:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011258:	4633      	mov	r3, r6
 801125a:	e7c3      	b.n	80111e4 <_ZN23SubscriberConfigurationC1ERKS_+0x2e>
 801125c:	4633      	mov	r3, r6
 801125e:	e7e2      	b.n	8011226 <_ZN23SubscriberConfigurationC1ERKS_+0x70>

08011260 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
 * @param input length: the number of values to extract
 * @param output success: whether successful
 * @return a vector with extracted values
 */
template<typename T>
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011264:	2600      	movs	r6, #0
 8011266:	4605      	mov	r5, r0
 8011268:	4688      	mov	r8, r1
 801126a:	4691      	mov	r9, r2
 801126c:	ed2d 8b02 	vpush	{d8}
 8011270:	b087      	sub	sp, #28
 8011272:	6086      	str	r6, [r0, #8]
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	e9c0 6600 	strd	r6, r6, [r0]
 801127a:	b2f4      	uxtb	r4, r6
	std::vector<T> data;
	uint8_t type_length = sizeof(T);

	for (uint8_t index = 0; index < length; index++) {
 801127c:	9b01      	ldr	r3, [sp, #4]
 801127e:	429c      	cmp	r4, r3
 8011280:	db05      	blt.n	801128e <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x2e>
		if (not *success)
			return data;
		data.push_back(element);
	}
	return data;
}
 8011282:	4628      	mov	r0, r5
 8011284:	b007      	add	sp, #28
 8011286:	ecbd 8b02 	vpop	{d8}
 801128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 801128e:	4641      	mov	r1, r8
 8011290:	a803      	add	r0, sp, #12
 8011292:	f7ef fcd5 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011296:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011298:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 801129c:	a803      	add	r0, sp, #12
 801129e:	b289      	uxth	r1, r1
 80112a0:	f7ff f95e 	bl	8010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80112a4:	a803      	add	r0, sp, #12
 80112a6:	eeb0 8a40 	vmov.f32	s16, s0
 80112aa:	f7ef fc19 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80112ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d0e5      	beq.n	8011282 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x22>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80112b6:	e9d5 4301 	ldrd	r4, r3, [r5, #4]
 80112ba:	429c      	cmp	r4, r3
 80112bc:	d004      	beq.n	80112c8 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80112be:	eca4 8a01 	vstmia	r4!, {s16}
	    ++this->_M_impl._M_finish;
 80112c2:	606c      	str	r4, [r5, #4]
	for (uint8_t index = 0; index < length; index++) {
 80112c4:	3601      	adds	r6, #1
 80112c6:	e7d8      	b.n	801127a <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1a>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80112c8:	2101      	movs	r1, #1
 80112ca:	4a13      	ldr	r2, [pc, #76]	@ (8011318 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb8>)
 80112cc:	4628      	mov	r0, r5
 80112ce:	f7ff fde8 	bl	8010ea2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 80112d2:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80112d4:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 80112d6:	f7ff f889 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 80112da:	eba4 0b07 	sub.w	fp, r4, r7
 80112de:	4604      	mov	r4, r0
 80112e0:	eb00 010b 	add.w	r1, r0, fp
      if (__count > 0)
 80112e4:	f1bb 0f00 	cmp.w	fp, #0
 80112e8:	ed81 8a00 	vstr	s16, [r1]
 80112ec:	dd03      	ble.n	80112f6 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x96>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80112ee:	465a      	mov	r2, fp
 80112f0:	4639      	mov	r1, r7
 80112f2:	f00c fbbb 	bl	801da6c <memmove>
	      ++__new_finish;
 80112f6:	f10b 0204 	add.w	r2, fp, #4
 80112fa:	eb04 0b02 	add.w	fp, r4, r2
	if (__p)
 80112fe:	b127      	cbz	r7, 801130a <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xaa>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011300:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011302:	4638      	mov	r0, r7
 8011304:	1bc9      	subs	r1, r1, r7
 8011306:	f00b fc0f 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801130a:	e9c5 4b00 	strd	r4, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801130e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8011312:	60ac      	str	r4, [r5, #8]
 8011314:	e7d6      	b.n	80112c4 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x64>
 8011316:	bf00      	nop
 8011318:	0801dd74 	.word	0x0801dd74

0801131c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 801131c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011320:	ed2d 8b02 	vpush	{d8}
 8011324:	b085      	sub	sp, #20
 8011326:	4607      	mov	r7, r0
 8011328:	4688      	mov	r8, r1
 801132a:	4691      	mov	r9, r2
 801132c:	461d      	mov	r5, r3
 801132e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
 8011332:	2600      	movs	r6, #0
 8011334:	b2f4      	uxtb	r4, r6
	for (uint8_t index = 0; index < length; index++) {
 8011336:	42ac      	cmp	r4, r5
 8011338:	db04      	blt.n	8011344 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x28>
}
 801133a:	b005      	add	sp, #20
 801133c:	ecbd 8b02 	vpop	{d8}
 8011340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011348:	4641      	mov	r1, r8
 801134a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 801134e:	a801      	add	r0, sp, #4
 8011350:	f7ef fc76 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011354:	4652      	mov	r2, sl
 8011356:	b2a1      	uxth	r1, r4
 8011358:	a801      	add	r0, sp, #4
 801135a:	f7ff f901 	bl	8010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 801135e:	a801      	add	r0, sp, #4
 8011360:	eeb0 8a40 	vmov.f32	s16, s0
 8011364:	f7ef fbbc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8011368:	f89a 3000 	ldrb.w	r3, [sl]
 801136c:	3601      	adds	r6, #1
 801136e:	2b00      	cmp	r3, #0
 8011370:	d0e3      	beq.n	801133a <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1e>
		data[index] = element;
 8011372:	44bb      	add	fp, r7
 8011374:	ed8b 8a00 	vstr	s16, [fp]
	for (uint8_t index = 0; index < length; index++) {
 8011378:	e7dc      	b.n	8011334 <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x18>

0801137a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801137a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137e:	b09f      	sub	sp, #124	@ 0x7c
 8011380:	461c      	mov	r4, r3
 8011382:	4690      	mov	r8, r2
 8011384:	4689      	mov	r9, r1
	T array_values[element.element_register.length];
 8011386:	8895      	ldrh	r5, [r2, #4]
 8011388:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801138a:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 801138c:	00ab      	lsls	r3, r5, #2
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 801138e:	4683      	mov	fp, r0
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011390:	3104      	adds	r1, #4
 8011392:	f107 061f 	add.w	r6, r7, #31
	T array_values[element.element_register.length];
 8011396:	3307      	adds	r3, #7
 8011398:	f107 0a3c 	add.w	sl, r7, #60	@ 0x3c
 801139c:	08db      	lsrs	r3, r3, #3
 801139e:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80113a2:	469d      	mov	sp, r3
 80113a4:	ab02      	add	r3, sp, #8
 80113a6:	617b      	str	r3, [r7, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80113a8:	2300      	movs	r3, #0
 80113aa:	e9c7 330c 	strd	r3, r3, [r7, #48]	@ 0x30
 80113ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (not element.element_register.isArray) {
 80113b0:	f898 3003 	ldrb.w	r3, [r8, #3]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d145      	bne.n	8011444 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xca>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80113b8:	f107 0048 	add.w	r0, r7, #72	@ 0x48
		length_to_extract = 1;
 80113bc:	2501      	movs	r5, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80113be:	f7ef fc3f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80113c2:	4632      	mov	r2, r6
 80113c4:	4621      	mov	r1, r4
 80113c6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80113ca:	f7ff f8c9 	bl	8010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 80113ce:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80113d2:	ed87 0a08 	vstr	s0, [r7, #32]
 80113d6:	f7ef fb83 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = &single_value;
 80113da:	f107 0320 	add.w	r3, r7, #32
 80113de:	617b      	str	r3, [r7, #20]
	subscriber_information.interface.interface = message.interface;
 80113e0:	f899 3000 	ldrb.w	r3, [r9]
 80113e4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
	subscribers->Receive<T>(subscriber_information, data);
 80113e8:	f8db 600c 	ldr.w	r6, [fp, #12]
	subscriber_information.interface.interface = message.interface;
 80113ec:	60fb      	str	r3, [r7, #12]
	subscriber_information.interface.address = message.source_address;
 80113ee:	f899 3011 	ldrb.w	r3, [r9, #17]
 * @param input data: published data for the input register
 */
template<typename T>
void MasterSubscribers::Receive(SubscriberInput information, T* data) {
	uint8_t index = 0;
	for (SubscriberConfiguration configuration : configurations) {
 80113f2:	f04f 0900 	mov.w	r9, #0
 80113f6:	85bd      	strh	r5, [r7, #44]	@ 0x2c
 80113f8:	60bb      	str	r3, [r7, #8]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8011400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011404:	68bb      	ldr	r3, [r7, #8]
		// Check that the subscriber is active
		if (configuration.activated) {
			// Check that the sucriber is subscribed to the input published register
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8011406:	f8c7 a010 	str.w	sl, [r7, #16]
 801140a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801140e:	4653      	mov	r3, sl
	subscriber_information.register_ = element.element_register;
 8011410:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011414:	6278      	str	r0, [r7, #36]	@ 0x24
 8011416:	8539      	strh	r1, [r7, #40]	@ 0x28
 8011418:	f897 8026 	ldrb.w	r8, [r7, #38]	@ 0x26
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801141c:	ca07      	ldmia	r2, {r0, r1, r2}
 801141e:	c303      	stmia	r3!, {r0, r1}
 8011420:	801a      	strh	r2, [r3, #0]
      : _M_current(__i) { }
 8011422:	6933      	ldr	r3, [r6, #16]
 8011424:	607b      	str	r3, [r7, #4]
	for (SubscriberConfiguration configuration : configurations) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	455b      	cmp	r3, fp
 801142a:	d13d      	bne.n	80114a8 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x12e>
	return start_index + sizeof(T) * length_to_extract;
 801142c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011430:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8011434:	f7f0 fdb2 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
}
 8011438:	3774      	adds	r7, #116	@ 0x74
	return start_index + sizeof(T) * length_to_extract;
 801143a:	b2a4      	uxth	r4, r4
}
 801143c:	4620      	mov	r0, r4
 801143e:	46bd      	mov	sp, r7
 8011440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011444:	b185      	cbz	r5, 8011468 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xee>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011446:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 801144a:	f7ef fbf9 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801144e:	9600      	str	r6, [sp, #0]
 8011450:	6978      	ldr	r0, [r7, #20]
 8011452:	462b      	mov	r3, r5
 8011454:	4622      	mov	r2, r4
 8011456:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801145a:	f7ff ff5f 	bl	801131c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801145e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8011462:	f7ef fb3d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 8011466:	e7bb      	b.n	80113e0 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x66>
		length_to_extract = message.payload[start_index];
 8011468:	f8d9 3004 	ldr.w	r3, [r9, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801146c:	4650      	mov	r0, sl
		length_to_extract = message.payload[start_index];
 801146e:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 8011470:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011472:	f7ef fbe5 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011476:	4651      	mov	r1, sl
		start_index++;
 8011478:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801147a:	462b      	mov	r3, r5
 801147c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8011480:	9600      	str	r6, [sp, #0]
 8011482:	4622      	mov	r2, r4
 8011484:	f7ff feec 	bl	8011260 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011488:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801148c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8011490:	f7ff fc4e 	bl	8010d30 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 8011494:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8011498:	f7f0 fd80 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801149c:	4650      	mov	r0, sl
 801149e:	f7ef fb1f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80114a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a4:	617b      	str	r3, [r7, #20]
 80114a6:	e79b      	b.n	80113e0 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x66>
 80114a8:	4659      	mov	r1, fp
 80114aa:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80114ae:	f7ff fe82 	bl	80111b6 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 80114b2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80114b6:	b1f3      	cbz	r3, 80114f6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 80114b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80114bc:	4630      	mov	r0, r6
 80114be:	f897 a048 	ldrb.w	sl, [r7, #72]	@ 0x48
 80114c2:	f887 803e 	strb.w	r8, [r7, #62]	@ 0x3e
 80114c6:	f8ad 3000 	strh.w	r3, [sp]
 80114ca:	4651      	mov	r1, sl
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	cb0c      	ldmia	r3, {r2, r3}
 80114d0:	f00a fee6 	bl	801c2a0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 80114d4:	b178      	cbz	r0, 80114f6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
				// Check that the address passes the filters
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 80114d6:	68ba      	ldr	r2, [r7, #8]
 80114d8:	4651      	mov	r1, sl
 80114da:	4630      	mov	r0, r6
 80114dc:	f00a fe32 	bl	801c144 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 80114e0:	b148      	cbz	r0, 80114f6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>

#ifdef USE_COM_LED_SUBSCRIBER_INPUT
					CommunicationLED(leds, information.interface.interface);
 80114e2:	68f9      	ldr	r1, [r7, #12]
 80114e4:	6870      	ldr	r0, [r6, #4]
 80114e6:	f7fd fdb5 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
#endif

					// Forward the data to the subscriber
					switch (information.register_.type) {
 80114ea:	f1b8 0f04 	cmp.w	r8, #4
 80114ee:	d00b      	beq.n	8011508 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x18e>
 80114f0:	f1b8 0f08 	cmp.w	r8, #8
 80114f4:	d018      	beq.n	8011528 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x1ae>
	for (SubscriberConfiguration configuration : configurations) {
 80114f6:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80114fa:	f109 0901 	add.w	r9, r9, #1
 80114fe:	f10b 0b28 	add.w	fp, fp, #40	@ 0x28
 8011502:	f7ff fc02 	bl	8010d0a <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 8011506:	e78e      	b.n	8011426 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0xac>
	return *(this->_M_impl._M_start + __n);
 8011508:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveUINT64(information, (uint64_t*) data);
						break;
#endif
#if defined(USE_INT8_COMMUNICATION) && defined(USE_INT8_REGISTER)
					case INT8_TYPE:
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 801150c:	69b2      	ldr	r2, [r6, #24]
 801150e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011512:	6803      	ldr	r3, [r0, #0]
 8011514:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveINT64(information, (int64_t*) data);
						break;
#endif
#if defined(USE_FLOAT_COMMUNICATION) && defined(USE_FLOAT_REGISTER)
					case FLOAT_TYPE:
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	f887 803e 	strb.w	r8, [r7, #62]	@ 0x3e
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011524:	47d0      	blx	sl
						break;
 8011526:	e7e6      	b.n	80114f6 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x17c>
 8011528:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 801152c:	69b2      	ldr	r2, [r6, #24]
 801152e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011532:	6803      	ldr	r3, [r0, #0]
 8011534:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011538:	e7ee      	b.n	8011518 <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt+0x19e>

0801153a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 801153a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153e:	b099      	sub	sp, #100	@ 0x64
 8011540:	468c      	mov	ip, r1
 8011542:	4683      	mov	fp, r0
 8011544:	461c      	mov	r4, r3
 8011546:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8011548:	f89c 3000 	ldrb.w	r3, [ip]
 801154c:	f89c a011 	ldrb.w	sl, [ip, #17]
 8011550:	f107 0544 	add.w	r5, r7, #68	@ 0x44
	service_information.access = element.access;
 8011554:	7a16      	ldrb	r6, [r2, #8]
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8011556:	617b      	str	r3, [r7, #20]
	service_information.register_ = element.element_register;
 8011558:	e892 0003 	ldmia.w	r2, {r0, r1}
 801155c:	6238      	str	r0, [r7, #32]
	if (element.command) {
 801155e:	79d0      	ldrb	r0, [r2, #7]
	service_information.register_ = element.element_register;
 8011560:	84b9      	strh	r1, [r7, #36]	@ 0x24
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011562:	f10c 0104 	add.w	r1, ip, #4
	if (element.command) {
 8011566:	b340      	cbz	r0, 80115ba <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011568:	4628      	mov	r0, r5
 801156a:	f7ef fb69 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801156e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8011572:	4621      	mov	r1, r4
 8011574:	4628      	mov	r0, r5
 8011576:	f7ff f81e 	bl	80105b6 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 801157a:	4680      	mov	r8, r0
      }
 801157c:	4628      	mov	r0, r5
 801157e:	f7ef faaf 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011582:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011586:	b18b      	cbz	r3, 80115ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8011588:	2301      	movs	r3, #1
 801158a:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 801158e:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 8011592:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f8db 0008 	ldr.w	r0, [fp, #8]
 801159a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 801159e:	f107 0320 	add.w	r3, r7, #32
 80115a2:	f8cd 8000 	str.w	r8, [sp]
 80115a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80115a8:	f00a fc7d 	bl	801bea6 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 80115ac:	3401      	adds	r4, #1
 80115ae:	b2a4      	uxth	r4, r4
}
 80115b0:	4620      	mov	r0, r4
 80115b2:	3754      	adds	r7, #84	@ 0x54
 80115b4:	46bd      	mov	sp, r7
 80115b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 80115ba:	bb1e      	cbnz	r6, 8011604 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 80115bc:	4628      	mov	r0, r5
 80115be:	f7ef fb3f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80115c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80115c6:	4621      	mov	r1, r4
 80115c8:	4628      	mov	r0, r5
 80115ca:	f7fe fff4 	bl	80105b6 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 80115ce:	4680      	mov	r8, r0
 80115d0:	4628      	mov	r0, r5
 80115d2:	f7ef fa85 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 80115d6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d0e6      	beq.n	80115ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 80115de:	2301      	movs	r3, #1
 80115e0:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 80115e4:	f887 602a 	strb.w	r6, [r7, #42]	@ 0x2a
 80115e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	f8db 0008 	ldr.w	r0, [fp, #8]
 80115f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80115f4:	f107 0320 	add.w	r3, r7, #32
 80115f8:	f8cd 8000 	str.w	r8, [sp]
 80115fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80115fe:	f00a fc15 	bl	801be2c <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8011602:	e7d3      	b.n	80115ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8011604:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011608:	466e      	mov	r6, sp
	}
 801160a:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 801160e:	ea4f 0388 	mov.w	r3, r8, lsl #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011612:	6378      	str	r0, [r7, #52]	@ 0x34
 8011614:	3307      	adds	r3, #7
 8011616:	08db      	lsrs	r3, r3, #3
 8011618:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
 801161c:	f107 061e 	add.w	r6, r7, #30
 8011620:	469d      	mov	sp, r3
		if (not element.element_register.isArray) {
 8011622:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8011624:	f10d 0910 	add.w	r9, sp, #16
 8011628:	e9c7 000b 	strd	r0, r0, [r7, #44]	@ 0x2c
		if (not element.element_register.isArray) {
 801162c:	2b00      	cmp	r3, #0
 801162e:	d13d      	bne.n	80116ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x172>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011630:	4628      	mov	r0, r5
			data = &single_value;
 8011632:	f107 0938 	add.w	r9, r7, #56	@ 0x38
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011636:	f7ef fb03 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 801163a:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 801163e:	4632      	mov	r2, r6
 8011640:	4621      	mov	r1, r4
 8011642:	4628      	mov	r0, r5
 8011644:	f7fe ff8c 	bl	8010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8011648:	4628      	mov	r0, r5
 801164a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 801164e:	f7ef fa47 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011652:	ea4f 0288 	mov.w	r2, r8, lsl #2
		if (success)
 8011656:	7fbb      	ldrb	r3, [r7, #30]
 8011658:	613a      	str	r2, [r7, #16]
 801165a:	b1eb      	cbz	r3, 8011698 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>
 801165c:	697b      	ldr	r3, [r7, #20]
			services->ReceiveRead<T>(service_information, data);
 801165e:	f8db 6008 	ldr.w	r6, [fp, #8]
 8011662:	f04f 0b01 	mov.w	fp, #1
 8011666:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 801166a:	f107 0320 	add.w	r3, r7, #32
 801166e:	f887 a029 	strb.w	sl, [r7, #41]	@ 0x29
 8011672:	f8a7 8026 	strh.w	r8, [r7, #38]	@ 0x26
 8011676:	f887 b02a 	strb.w	fp, [r7, #42]	@ 0x2a
 801167a:	f897 a022 	ldrb.w	sl, [r7, #34]	@ 0x22
 * @param input information: the service feedback information
 * @param input data: returned data from the remote module
 */
template<typename T>
void Services::ReceiveRead(ServiceConfiguration information, T* data) {
	bool success = true;
 801167e:	f887 b01f 	strb.w	fp, [r7, #31]
 8011682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801168c:	444b      	add	r3, r9
	uint8_t start_index = 0;
 801168e:	2100      	movs	r1, #0
 8011690:	60fb      	str	r3, [r7, #12]
	while (success) {
 8011692:	7ffb      	ldrb	r3, [r7, #31]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d13b      	bne.n	8011710 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x1d6>
		return start_index + sizeof(T) * length_to_extract;
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801169e:	441c      	add	r4, r3
 80116a0:	f7f0 fc7c 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80116a4:	f8d7 d008 	ldr.w	sp, [r7, #8]
 80116a8:	b2a4      	uxth	r4, r4
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80116aa:	e781      	b.n	80115b0 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 80116ac:	f1b8 0f00 	cmp.w	r8, #0
 80116b0:	d00d      	beq.n	80116ce <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x194>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 80116b2:	4628      	mov	r0, r5
 80116b4:	f7ef fac4 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80116b8:	4648      	mov	r0, r9
 80116ba:	4643      	mov	r3, r8
 80116bc:	4622      	mov	r2, r4
 80116be:	4629      	mov	r1, r5
 80116c0:	9600      	str	r6, [sp, #0]
 80116c2:	f7ff fe2b 	bl	801131c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 80116c6:	4628      	mov	r0, r5
 80116c8:	f7ef fa0a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 80116cc:	e7c1      	b.n	8011652 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
			length_to_extract = message.payload[start_index];
 80116ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80116d2:	f107 0038 	add.w	r0, r7, #56	@ 0x38
			length_to_extract = message.payload[start_index];
 80116d6:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 80116da:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80116dc:	f7ef fab0 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80116e0:	f107 0138 	add.w	r1, r7, #56	@ 0x38
			start_index++;
 80116e4:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80116e6:	4643      	mov	r3, r8
 80116e8:	4628      	mov	r0, r5
 80116ea:	9600      	str	r6, [sp, #0]
 80116ec:	4622      	mov	r2, r4
 80116ee:	f7ff fdb7 	bl	8011260 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80116f2:	4629      	mov	r1, r5
 80116f4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80116f8:	f7ff fb1a 	bl	8010d30 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
 80116fc:	4628      	mov	r0, r5
 80116fe:	f7f0 fc4d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8011702:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011706:	f7ef f9eb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 801170a:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 801170e:	e7a0      	b.n	8011652 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x118>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011710:	f107 031f 	add.w	r3, r7, #31
 8011714:	f887 a046 	strb.w	sl, [r7, #70]	@ 0x46
 8011718:	4630      	mov	r0, r6
 801171a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801171e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011722:	f8ad 3000 	strh.w	r3, [sp]
 8011726:	e895 000c 	ldmia.w	r5, {r2, r3}
 801172a:	f00a fb40 	bl	801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801172e:	7ffa      	ldrb	r2, [r7, #31]
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011730:	6078      	str	r0, [r7, #4]
		if (not success) return;
 8011732:	2a00      	cmp	r2, #0
 8011734:	d0b0      	beq.n	8011698 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>

		if (information.length > SERVICES_BUFFER_SIZE) return;
 8011736:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 801173a:	d8ad      	bhi.n	8011698 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x15e>

#ifdef USE_COM_LED_SERVICES_RECEPTION
		CommunicationLED(leds, information.interface.interface);
 801173c:	6979      	ldr	r1, [r7, #20]
 801173e:	f8d6 0c40 	ldr.w	r0, [r6, #3136]	@ 0xc40
 8011742:	f7fd fc87 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
#endif

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8011746:	f04f 31ff 	mov.w	r1, #4294967295
 801174a:	6830      	ldr	r0, [r6, #0]
 801174c:	f7fb fb6e 	bl	800ce2c <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8011750:	2218      	movs	r2, #24
 8011752:	687b      	ldr	r3, [r7, #4]

		// Transfer data to the service buffer
		switch (information.register_.type) {
 8011754:	f1ba 0f04 	cmp.w	sl, #4
		services[index].configuration.length = information.length;
 8011758:	fb02 6203 	mla	r2, r2, r3, r6
 801175c:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8011760:	d005      	beq.n	801176e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x234>
 8011762:	f1ba 0f08 	cmp.w	sl, #8
 8011766:	d01c      	beq.n	80117a2 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x268>
 8011768:	f1ba 0f00 	cmp.w	sl, #0
 801176c:	d107      	bne.n	801177e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x244>
			TranferData<uint64_t>((uint64_t*) data, &buffer_uint64[index][0], information.length);
			break;
#endif
#if defined(USE_INT8_COMMUNICATION) && defined(USE_INT8_REGISTER)
		case INT8_TYPE:
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 801176e:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 8011772:	2200      	movs	r2, #0
 8011774:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 * @param output to: base pointer to copy data to
 * @param input length: number of elements to copy
 */
template<typename T>
void Services::TranferData(T* from, T* to, uint16_t length) {
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011778:	b290      	uxth	r0, r2
 801177a:	4580      	cmp	r8, r0
 801177c:	d80c      	bhi.n	8011798 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x25e>
		services[index].reception_flag = true;
 801177e:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8011780:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8011782:	607b      	str	r3, [r7, #4]
 8011784:	fb02 6203 	mla	r2, r2, r3, r6
 8011788:	f882 b009 	strb.w	fp, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801178c:	f7fb fb82 	bl	800ce94 <osSemaphoreRelease>
		start_index = index + 1;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	1c59      	adds	r1, r3, #1
 8011794:	b2c9      	uxtb	r1, r1
 8011796:	e77c      	b.n	8011692 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x158>
		to[buffer_index] = from[buffer_index];
 8011798:	f919 0002 	ldrsb.w	r0, [r9, r2]
 801179c:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 801179e:	3201      	adds	r2, #1
 80117a0:	e7ea      	b.n	8011778 <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x23e>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 80117a2:	eb06 2283 	add.w	r2, r6, r3, lsl #10
 80117a6:	4649      	mov	r1, r9
 80117a8:	f502 6287 	add.w	r2, r2, #1080	@ 0x438
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	4288      	cmp	r0, r1
 80117b0:	d0e5      	beq.n	801177e <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x244>
		to[buffer_index] = from[buffer_index];
 80117b2:	f851 0b04 	ldr.w	r0, [r1], #4
 80117b6:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 80117ba:	e7f7      	b.n	80117ac <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt+0x272>

080117bc <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>:
std::vector<T> Communication::ExtractVector(std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 80117c0:	2600      	movs	r6, #0
 80117c2:	b087      	sub	sp, #28
 80117c4:	4604      	mov	r4, r0
 80117c6:	4691      	mov	r9, r2
 80117c8:	9100      	str	r1, [sp, #0]
 80117ca:	9301      	str	r3, [sp, #4]
 80117cc:	6086      	str	r6, [r0, #8]
 80117ce:	e9c0 6600 	strd	r6, r6, [r0]
 80117d2:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 80117d4:	9b01      	ldr	r3, [sp, #4]
 80117d6:	429d      	cmp	r5, r3
 80117d8:	db03      	blt.n	80117e2 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x26>
}
 80117da:	4620      	mov	r0, r4
 80117dc:	b007      	add	sp, #28
 80117de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80117e2:	9900      	ldr	r1, [sp, #0]
 80117e4:	a803      	add	r0, sp, #12
 80117e6:	f7ef fa2b 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80117ea:	eb05 0109 	add.w	r1, r5, r9
 80117ee:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80117f0:	a803      	add	r0, sp, #12
 80117f2:	b289      	uxth	r1, r1
 80117f4:	f7fe fed2 	bl	801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80117f8:	4607      	mov	r7, r0
      }
 80117fa:	a803      	add	r0, sp, #12
 80117fc:	f7ef f970 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 8011800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d0e8      	beq.n	80117da <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x1e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011808:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
 801180c:	429d      	cmp	r5, r3
 801180e:	d005      	beq.n	801181c <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x60>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011810:	702f      	strb	r7, [r5, #0]
	    ++this->_M_impl._M_finish;
 8011812:	6863      	ldr	r3, [r4, #4]
 8011814:	3301      	adds	r3, #1
 8011816:	6063      	str	r3, [r4, #4]
	for (uint8_t index = 0; index < length; index++) {
 8011818:	3601      	adds	r6, #1
 801181a:	e7da      	b.n	80117d2 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x16>
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801181c:	4a13      	ldr	r2, [pc, #76]	@ (801186c <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xb0>)
 801181e:	2101      	movs	r1, #1
 8011820:	4620      	mov	r0, r4
 8011822:	f7ff fb25 	bl	8010e70 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8011826:	f8d4 b000 	ldr.w	fp, [r4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801182a:	4682      	mov	sl, r0
      pointer __new_start(this->_M_allocate(__len));
 801182c:	f7fe fdf0 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 8011830:	eba5 080b 	sub.w	r8, r5, fp
 8011834:	4605      	mov	r5, r0
      if (__count > 0)
 8011836:	f1b8 0f00 	cmp.w	r8, #0
 801183a:	f800 7008 	strb.w	r7, [r0, r8]
 801183e:	dd03      	ble.n	8011848 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011840:	4642      	mov	r2, r8
 8011842:	4659      	mov	r1, fp
 8011844:	f00c f912 	bl	801da6c <memmove>
	      ++__new_finish;
 8011848:	f108 0201 	add.w	r2, r8, #1
 801184c:	18af      	adds	r7, r5, r2
	if (__p)
 801184e:	f1bb 0f00 	cmp.w	fp, #0
 8011852:	d005      	beq.n	8011860 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0xa4>
		    this->_M_impl._M_end_of_storage - __old_start);
 8011854:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011856:	4658      	mov	r0, fp
 8011858:	eba1 010b 	sub.w	r1, r1, fp
 801185c:	f00b f964 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8011860:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011864:	4455      	add	r5, sl
 8011866:	60a5      	str	r5, [r4, #8]
 8011868:	e7d6      	b.n	8011818 <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0+0x5c>
 801186a:	bf00      	nop
 801186c:	0801dd74 	.word	0x0801dd74

08011870 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>:
void Communication::ExtractArray(T* data, std::vector<uint8_t> payload, uint16_t start_index, uint16_t length, bool* success) {
 8011870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011874:	b085      	sub	sp, #20
 8011876:	4607      	mov	r7, r0
 8011878:	4688      	mov	r8, r1
 801187a:	4691      	mov	r9, r2
 801187c:	461c      	mov	r4, r3
 801187e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011882:	2600      	movs	r6, #0
 8011884:	b2f5      	uxtb	r5, r6
	for (uint8_t index = 0; index < length; index++) {
 8011886:	42a5      	cmp	r5, r4
 8011888:	db02      	blt.n	8011890 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x20>
}
 801188a:	b005      	add	sp, #20
 801188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 8011890:	4641      	mov	r1, r8
 8011892:	a801      	add	r0, sp, #4
 8011894:	f7ef f9d4 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011898:	eb05 0109 	add.w	r1, r5, r9
 801189c:	465a      	mov	r2, fp
 801189e:	a801      	add	r0, sp, #4
 80118a0:	b289      	uxth	r1, r1
		if (not *success)
 80118a2:	3601      	adds	r6, #1
		T element = ExtractSingle<T>(payload, start_index + (uint16_t) (index * type_length), success);
 80118a4:	f7fe fe7a 	bl	801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 80118a8:	4682      	mov	sl, r0
      }
 80118aa:	a801      	add	r0, sp, #4
 80118ac:	f7ef f918 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success)
 80118b0:	f89b 3000 	ldrb.w	r3, [fp]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d0e8      	beq.n	801188a <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x1a>
		data[index] = element;
 80118b8:	f807 a005 	strb.w	sl, [r7, r5]
	for (uint8_t index = 0; index < length; index++) {
 80118bc:	e7e2      	b.n	8011884 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0+0x14>

080118be <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80118be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c2:	b09d      	sub	sp, #116	@ 0x74
 80118c4:	461c      	mov	r4, r3
 80118c6:	4690      	mov	r8, r2
 80118c8:	4689      	mov	r9, r1
	T array_values[element.element_register.length];
 80118ca:	8895      	ldrh	r5, [r2, #4]
 80118cc:	466a      	mov	r2, sp
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80118ce:	af02      	add	r7, sp, #8
	T array_values[element.element_register.length];
 80118d0:	1deb      	adds	r3, r5, #7
uint16_t Communication::ProcessSubscriber(MessageHeader message, MessageElement element, uint16_t start_index) {
 80118d2:	4683      	mov	fp, r0
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80118d4:	3104      	adds	r1, #4
 80118d6:	f107 061b 	add.w	r6, r7, #27
	T array_values[element.element_register.length];
 80118da:	08db      	lsrs	r3, r3, #3
 80118dc:	f107 0a34 	add.w	sl, r7, #52	@ 0x34
 80118e0:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 80118e4:	469d      	mov	sp, r3
 80118e6:	ab02      	add	r3, sp, #8
 80118e8:	617b      	str	r3, [r7, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80118ea:	2300      	movs	r3, #0
 80118ec:	e9c7 330a 	strd	r3, r3, [r7, #40]	@ 0x28
 80118f0:	633b      	str	r3, [r7, #48]	@ 0x30
	if (not element.element_register.isArray) {
 80118f2:	f898 3003 	ldrb.w	r3, [r8, #3]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d143      	bne.n	8011982 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xc4>
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 80118fa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
		length_to_extract = 1;
 80118fe:	2501      	movs	r5, #1
		single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011900:	f7ef f99e 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011904:	4632      	mov	r2, r6
 8011906:	4621      	mov	r1, r4
 8011908:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801190c:	f7fe fe46 	bl	801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011910:	76b8      	strb	r0, [r7, #26]
      }
 8011912:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8011916:	f7ef f8e3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = &single_value;
 801191a:	f107 031a 	add.w	r3, r7, #26
 801191e:	617b      	str	r3, [r7, #20]
	subscriber_information.interface.interface = message.interface;
 8011920:	f899 3000 	ldrb.w	r3, [r9]
 8011924:	f107 021c 	add.w	r2, r7, #28
	subscribers->Receive<T>(subscriber_information, data);
 8011928:	f8db 600c 	ldr.w	r6, [fp, #12]
	subscriber_information.interface.interface = message.interface;
 801192c:	60fb      	str	r3, [r7, #12]
	subscriber_information.interface.address = message.source_address;
 801192e:	f899 3011 	ldrb.w	r3, [r9, #17]
	for (SubscriberConfiguration configuration : configurations) {
 8011932:	f04f 0900 	mov.w	r9, #0
 8011936:	84bd      	strh	r5, [r7, #36]	@ 0x24
 8011938:	60bb      	str	r3, [r7, #8]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8011940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011944:	68bb      	ldr	r3, [r7, #8]
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 8011946:	f8c7 a010 	str.w	sl, [r7, #16]
 801194a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801194e:	4653      	mov	r3, sl
	subscriber_information.register_ = element.element_register;
 8011950:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011954:	61f8      	str	r0, [r7, #28]
 8011956:	8439      	strh	r1, [r7, #32]
 8011958:	f897 801e 	ldrb.w	r8, [r7, #30]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801195c:	ca07      	ldmia	r2, {r0, r1, r2}
 801195e:	c303      	stmia	r3!, {r0, r1}
 8011960:	801a      	strh	r2, [r3, #0]
      : _M_current(__i) { }
 8011962:	6933      	ldr	r3, [r6, #16]
 8011964:	607b      	str	r3, [r7, #4]
	for (SubscriberConfiguration configuration : configurations) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	455b      	cmp	r3, fp
 801196a:	d13c      	bne.n	80119e6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x128>
	return start_index + sizeof(T) * length_to_extract;
 801196c:	442c      	add	r4, r5
 801196e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8011972:	f7ff f9a9 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
}
 8011976:	376c      	adds	r7, #108	@ 0x6c
	return start_index + sizeof(T) * length_to_extract;
 8011978:	b2a4      	uxth	r4, r4
}
 801197a:	4620      	mov	r0, r4
 801197c:	46bd      	mov	sp, r7
 801197e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011982:	b185      	cbz	r5, 80119a6 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xe8>
		ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011984:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8011988:	f7ef f95a 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801198c:	9600      	str	r6, [sp, #0]
 801198e:	6978      	ldr	r0, [r7, #20]
 8011990:	462b      	mov	r3, r5
 8011992:	4622      	mov	r2, r4
 8011994:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011998:	f7ff ff6a 	bl	8011870 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 801199c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80119a0:	f7ef f89e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		data = array_values;
 80119a4:	e7bc      	b.n	8011920 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x62>
		length_to_extract = message.payload[start_index];
 80119a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80119aa:	4650      	mov	r0, sl
		length_to_extract = message.payload[start_index];
 80119ac:	5d1d      	ldrb	r5, [r3, r4]
		start_index++;
 80119ae:	3401      	adds	r4, #1
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80119b0:	f7ef f946 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80119b4:	4651      	mov	r1, sl
		start_index++;
 80119b6:	b2a4      	uxth	r4, r4
		vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 80119b8:	462b      	mov	r3, r5
 80119ba:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80119be:	9600      	str	r6, [sp, #0]
 80119c0:	4622      	mov	r2, r4
 80119c2:	f7ff fefb 	bl	80117bc <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 80119c6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80119ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80119ce:	f7ff f985 	bl	8010cdc <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 80119d2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80119d6:	f7ff f977 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80119da:	4650      	mov	r0, sl
 80119dc:	f7ef f880 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 80119e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119e2:	617b      	str	r3, [r7, #20]
 80119e4:	e79c      	b.n	8011920 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x62>
 80119e6:	4659      	mov	r1, fp
 80119e8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80119ec:	f7ff fbe3 	bl	80111b6 <_ZN23SubscriberConfigurationC1ERKS_>
		if (configuration.activated) {
 80119f0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80119f4:	b1eb      	cbz	r3, 8011a32 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
			if (SubscribedToRemoteRegister(configuration.ID, information.register_, information.interface)) {
 80119f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80119f8:	4630      	mov	r0, r6
 80119fa:	f897 a040 	ldrb.w	sl, [r7, #64]	@ 0x40
 80119fe:	f887 8036 	strb.w	r8, [r7, #54]	@ 0x36
 8011a02:	f8ad 3000 	strh.w	r3, [sp]
 8011a06:	4651      	mov	r1, sl
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	cb0c      	ldmia	r3, {r2, r3}
 8011a0c:	f00a fc48 	bl	801c2a0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>
 8011a10:	b178      	cbz	r0, 8011a32 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
				if (AddressAccepted(configuration.ID, information.interface.address)) {
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	4651      	mov	r1, sl
 8011a16:	4630      	mov	r0, r6
 8011a18:	f00a fb94 	bl	801c144 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 8011a1c:	b148      	cbz	r0, 8011a32 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
					CommunicationLED(leds, information.interface.interface);
 8011a1e:	68f9      	ldr	r1, [r7, #12]
 8011a20:	6870      	ldr	r0, [r6, #4]
 8011a22:	f7fd fb17 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
					switch (information.register_.type) {
 8011a26:	f1b8 0f04 	cmp.w	r8, #4
 8011a2a:	d00b      	beq.n	8011a44 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x186>
 8011a2c:	f1b8 0f08 	cmp.w	r8, #8
 8011a30:	d018      	beq.n	8011a64 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x1a6>
	for (SubscriberConfiguration configuration : configurations) {
 8011a32:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8011a36:	f109 0901 	add.w	r9, r9, #1
 8011a3a:	f10b 0b28 	add.w	fp, fp, #40	@ 0x28
 8011a3e:	f7ff f964 	bl	8010d0a <_ZN23SubscriberConfigurationD1Ev>
	return *this;
 8011a42:	e790      	b.n	8011966 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0xa8>
	return *(this->_M_impl._M_start + __n);
 8011a44:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveINT8(information, (int8_t*) data);
 8011a48:	69b2      	ldr	r2, [r6, #24]
 8011a4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a4e:	6803      	ldr	r3, [r0, #0]
 8011a50:	f8d3 a000 	ldr.w	sl, [r3]
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	f887 8036 	strb.w	r8, [r7, #54]	@ 0x36
 8011a5a:	9300      	str	r3, [sp, #0]
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011a60:	47d0      	blx	sl
						break;
 8011a62:	e7e6      	b.n	8011a32 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x174>
 8011a64:	fa5f f389 	uxtb.w	r3, r9
						subscribers[index]->ReceiveFLOAT(information, (float*) data);
 8011a68:	69b2      	ldr	r2, [r6, #24]
 8011a6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a6e:	6803      	ldr	r3, [r0, #0]
 8011a70:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011a74:	e7ee      	b.n	8011a54 <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt+0x196>

08011a76 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>:
uint16_t Communication::ProcessService(MessageHeader message, MessageElement element, uint16_t start_index) {
 8011a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7a:	468c      	mov	ip, r1
 8011a7c:	b097      	sub	sp, #92	@ 0x5c
 8011a7e:	461c      	mov	r4, r3
 8011a80:	4683      	mov	fp, r0
 8011a82:	af04      	add	r7, sp, #16
	service_information.interface = ServiceInterface{.interface=message.interface, .address=message.source_address};
 8011a84:	f89c 3000 	ldrb.w	r3, [ip]
 8011a88:	f89c a011 	ldrb.w	sl, [ip, #17]
 8011a8c:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8011a90:	60fb      	str	r3, [r7, #12]
	if (element.command) {
 8011a92:	79d3      	ldrb	r3, [r2, #7]
	service_information.access = element.access;
 8011a94:	7a16      	ldrb	r6, [r2, #8]
	service_information.register_ = element.element_register;
 8011a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a9a:	83b9      	strh	r1, [r7, #28]
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011a9c:	f10c 0104 	add.w	r1, ip, #4
	service_information.register_ = element.element_register;
 8011aa0:	61b8      	str	r0, [r7, #24]
	if (element.command) {
 8011aa2:	b343      	cbz	r3, 8011af6 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x80>
		uint8_t error = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	f7ef f8cb 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011aaa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011aae:	4621      	mov	r1, r4
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	f7fe fd80 	bl	80105b6 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011ab6:	4680      	mov	r8, r0
      }
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f7ef f811 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011abe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8011ac2:	b18b      	cbz	r3, 8011ae8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveError(service_information, error);//services->ReceiveError(element.element_register, message.interface, message.source_address, element.access, error);
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 8011aca:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8011ace:	83fb      	strh	r3, [r7, #30]
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011ad6:	f887 3020 	strb.w	r3, [r7, #32]
 8011ada:	f107 0318 	add.w	r3, r7, #24
 8011ade:	f8cd 8000 	str.w	r8, [sp]
 8011ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ae4:	f00a f9df 	bl	801bea6 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>
		return start_index + 1;
 8011ae8:	3401      	adds	r4, #1
 8011aea:	b2a4      	uxth	r4, r4
}
 8011aec:	4620      	mov	r0, r4
 8011aee:	374c      	adds	r7, #76	@ 0x4c
 8011af0:	46bd      	mov	sp, r7
 8011af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (element.access == WRITE) {
 8011af6:	bb1e      	cbnz	r6, 8011b40 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0xca>
		uint8_t value = ExtractSingle<uint8_t>(message.payload, start_index, &success); // extract the feedback message
 8011af8:	4628      	mov	r0, r5
 8011afa:	f7ef f8a1 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011afe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011b02:	4621      	mov	r1, r4
 8011b04:	4628      	mov	r0, r5
 8011b06:	f7fe fd56 	bl	80105b6 <_ZN13Communication13ExtractSingleIhEET_St6vectorIhSaIhEEtPb.isra.0>
 8011b0a:	4680      	mov	r8, r0
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7ee ffe7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011b12:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0e6      	beq.n	8011ae8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
			services->ReceiveWrite(service_information, value);//services->ReceiveWrite(element.element_register, message.interface, message.source_address, value);
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 8011b20:	f887 6022 	strb.w	r6, [r7, #34]	@ 0x22
 8011b24:	83fb      	strh	r3, [r7, #30]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011b2c:	f887 3020 	strb.w	r3, [r7, #32]
 8011b30:	f107 0318 	add.w	r3, r7, #24
 8011b34:	f8cd 8000 	str.w	r8, [sp]
 8011b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011b3a:	f00a f977 	bl	801be2c <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>
 8011b3e:	e7d3      	b.n	8011ae8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x72>
		T array_values[element.element_register.length];
 8011b40:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011b44:	466e      	mov	r6, sp
	}
 8011b46:	f8c7 d008 	str.w	sp, [r7, #8]
		T array_values[element.element_register.length];
 8011b4a:	f108 0007 	add.w	r0, r8, #7
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b50:	08c0      	lsrs	r0, r0, #3
 8011b52:	eba6 00c0 	sub.w	r0, r6, r0, lsl #3
 8011b56:	f107 0617 	add.w	r6, r7, #23
 8011b5a:	4685      	mov	sp, r0
 8011b5c:	e9c7 3309 	strd	r3, r3, [r7, #36]	@ 0x24
		if (not element.element_register.isArray) {
 8011b60:	78d3      	ldrb	r3, [r2, #3]
		T array_values[element.element_register.length];
 8011b62:	f10d 0910 	add.w	r9, sp, #16
		if (not element.element_register.isArray) {
 8011b66:	bbc3      	cbnz	r3, 8011bda <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x164>
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011b68:	4628      	mov	r0, r5
			data = &single_value;
 8011b6a:	f107 0916 	add.w	r9, r7, #22
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011b6e:	f7ef f867 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
			length_to_extract = 1;
 8011b72:	f04f 0801 	mov.w	r8, #1
			single_value = ExtractSingle<T>(message.payload, start_index, &success);
 8011b76:	4632      	mov	r2, r6
 8011b78:	4621      	mov	r1, r4
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f7fe fd0e 	bl	801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8011b80:	75b8      	strb	r0, [r7, #22]
      }
 8011b82:	4628      	mov	r0, r5
 8011b84:	f7ee ffac 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8011b88:	7dfb      	ldrb	r3, [r7, #23]
 8011b8a:	b1eb      	cbz	r3, 8011bc8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
 8011b8c:	68fb      	ldr	r3, [r7, #12]
			services->ReceiveRead<T>(service_information, data);
 8011b8e:	f8db 6008 	ldr.w	r6, [fp, #8]
 8011b92:	f04f 0b01 	mov.w	fp, #1
 8011b96:	f887 3020 	strb.w	r3, [r7, #32]
 8011b9a:	f107 0318 	add.w	r3, r7, #24
 8011b9e:	f887 a021 	strb.w	sl, [r7, #33]	@ 0x21
 8011ba2:	f8a7 801e 	strh.w	r8, [r7, #30]
 8011ba6:	f887 b022 	strb.w	fp, [r7, #34]	@ 0x22
 8011baa:	f897 a01a 	ldrb.w	sl, [r7, #26]
	bool success = true;
 8011bae:	f887 b030 	strb.w	fp, [r7, #48]	@ 0x30
 8011bb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011bb6:	eb09 0388 	add.w	r3, r9, r8, lsl #2
 8011bba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	uint8_t start_index = 0;
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	607b      	str	r3, [r7, #4]
	while (success) {
 8011bc2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8011bc6:	bbd3      	cbnz	r3, 8011c3e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x1c8>
		return start_index + sizeof(T) * length_to_extract;
 8011bc8:	4444      	add	r4, r8
 8011bca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011bce:	f7ff f87b 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8011bd2:	f8d7 d008 	ldr.w	sp, [r7, #8]
 8011bd6:	b2a4      	uxth	r4, r4
 8011bd8:	e788      	b.n	8011aec <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x76>
		} else if (element.element_register.isArray && element.element_register.length > 0) {
 8011bda:	f1b8 0f00 	cmp.w	r8, #0
 8011bde:	d00d      	beq.n	8011bfc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x186>
			ExtractArray<T>(array_values, message.payload, start_index, length_to_extract, &success);
 8011be0:	4628      	mov	r0, r5
 8011be2:	f7ef f82d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011be6:	4648      	mov	r0, r9
 8011be8:	4643      	mov	r3, r8
 8011bea:	4622      	mov	r2, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	9600      	str	r6, [sp, #0]
 8011bf0:	f7ff fe3e 	bl	8011870 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f7ee ff73 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			data = array_values;
 8011bfa:	e7c5      	b.n	8011b88 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
			length_to_extract = message.payload[start_index];
 8011bfc:	f8dc 3004 	ldr.w	r3, [ip, #4]
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011c00:	f107 0030 	add.w	r0, r7, #48	@ 0x30
			length_to_extract = message.payload[start_index];
 8011c04:	f813 8004 	ldrb.w	r8, [r3, r4]
			start_index++;
 8011c08:	3401      	adds	r4, #1
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011c0a:	f7ef f819 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8011c0e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
			start_index++;
 8011c12:	b2a4      	uxth	r4, r4
			vector_values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8011c14:	4643      	mov	r3, r8
 8011c16:	4628      	mov	r0, r5
 8011c18:	9600      	str	r6, [sp, #0]
 8011c1a:	4622      	mov	r2, r4
 8011c1c:	f7ff fdce 	bl	80117bc <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8011c20:	4629      	mov	r1, r5
 8011c22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011c26:	f7ff f859 	bl	8010cdc <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f7ff f84c 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8011c30:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8011c34:	f7ee ff54 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return _M_data_ptr(this->_M_impl._M_start); }
 8011c38:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8011c3c:	e7a4      	b.n	8011b88 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x112>
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011c3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011c42:	f887 a03e 	strb.w	sl, [r7, #62]	@ 0x3e
 8011c46:	4630      	mov	r0, r6
 8011c48:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011c50:	f8ad 3000 	strh.w	r3, [sp]
 8011c54:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011c58:	f00a f8a9 	bl	801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 8011c5c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 8011c60:	6038      	str	r0, [r7, #0]
		if (not success) return;
 8011c62:	2a00      	cmp	r2, #0
 8011c64:	d0b0      	beq.n	8011bc8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		if (information.length > SERVICES_BUFFER_SIZE) return;
 8011c66:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
 8011c6a:	d8ad      	bhi.n	8011bc8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x152>
		CommunicationLED(leds, information.interface.interface);
 8011c6c:	68f9      	ldr	r1, [r7, #12]
 8011c6e:	f8d6 0c40 	ldr.w	r0, [r6, #3136]	@ 0xc40
 8011c72:	f7fd f9ef 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 8011c76:	f04f 31ff 	mov.w	r1, #4294967295
 8011c7a:	6830      	ldr	r0, [r6, #0]
 8011c7c:	f7fb f8d6 	bl	800ce2c <osSemaphoreAcquire>
		services[index].configuration.length = information.length;
 8011c80:	2218      	movs	r2, #24
 8011c82:	683b      	ldr	r3, [r7, #0]
		switch (information.register_.type) {
 8011c84:	f1ba 0f04 	cmp.w	sl, #4
		services[index].configuration.length = information.length;
 8011c88:	fb02 6203 	mla	r2, r2, r3, r6
 8011c8c:	f8a2 8010 	strh.w	r8, [r2, #16]
		switch (information.register_.type) {
 8011c90:	d005      	beq.n	8011c9e <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x228>
 8011c92:	f1ba 0f08 	cmp.w	sl, #8
 8011c96:	d01c      	beq.n	8011cd2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x25c>
 8011c98:	f1ba 0f00 	cmp.w	sl, #0
 8011c9c:	d107      	bne.n	8011cae <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x238>
			TranferData<int8_t>((int8_t*) data, &buffer_int8[index][0], information.length);
 8011c9e:	eb06 2103 	add.w	r1, r6, r3, lsl #8
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f501 710e 	add.w	r1, r1, #568	@ 0x238
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011ca8:	b290      	uxth	r0, r2
 8011caa:	4580      	cmp	r8, r0
 8011cac:	d80c      	bhi.n	8011cc8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x252>
		services[index].reception_flag = true;
 8011cae:	2218      	movs	r2, #24
		osSemaphoreRelease(ServiceSemaphore);
 8011cb0:	6830      	ldr	r0, [r6, #0]
		services[index].reception_flag = true;
 8011cb2:	603b      	str	r3, [r7, #0]
 8011cb4:	fb02 6203 	mla	r2, r2, r3, r6
 8011cb8:	f882 b009 	strb.w	fp, [r2, #9]
		osSemaphoreRelease(ServiceSemaphore);
 8011cbc:	f7fb f8ea 	bl	800ce94 <osSemaphoreRelease>
		start_index = index + 1;
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	1c59      	adds	r1, r3, #1
 8011cc4:	b2c9      	uxtb	r1, r1
 8011cc6:	e77c      	b.n	8011bc2 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x14c>
		to[buffer_index] = from[buffer_index];
 8011cc8:	f919 0002 	ldrsb.w	r0, [r9, r2]
 8011ccc:	5488      	strb	r0, [r1, r2]
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011cce:	3201      	adds	r2, #1
 8011cd0:	e7ea      	b.n	8011ca8 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x232>
			TranferData<float>((float*) data, &buffer_float[index][0], information.length);
 8011cd2:	eb06 2283 	add.w	r2, r6, r3, lsl #10
 8011cd6:	4649      	mov	r1, r9
 8011cd8:	f502 6287 	add.w	r2, r2, #1080	@ 0x438
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	4281      	cmp	r1, r0
 8011ce0:	d0e5      	beq.n	8011cae <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x238>
		to[buffer_index] = from[buffer_index];
 8011ce2:	f851 0b04 	ldr.w	r0, [r1], #4
 8011ce6:	f842 0b04 	str.w	r0, [r2], #4
	for (uint16_t buffer_index = 0; buffer_index < length; buffer_index++) {
 8011cea:	e7f7      	b.n	8011cdc <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt+0x266>

08011cec <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 8011cec:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8011cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	b08b      	sub	sp, #44	@ 0x2c
 8011cf4:	4615      	mov	r5, r2
 8011cf6:	f04f 0400 	mov.w	r4, #0
			if (length < 3) return false;
 8011cfa:	d92e      	bls.n	8011d5a <_ZZN13Communication12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x6e>
			msg.interface = input[0];
 8011cfc:	7812      	ldrb	r2, [r2, #0]
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8011cfe:	18ef      	adds	r7, r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011d00:	9403      	str	r4, [sp, #12]
			msg.interface = input[0];
 8011d02:	f88d 2000 	strb.w	r2, [sp]
			msg.target_address = input[1];
 8011d06:	786a      	ldrb	r2, [r5, #1]
 8011d08:	e9cd 4401 	strd	r4, r4, [sp, #4]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8011d0c:	1e9c      	subs	r4, r3, #2
 8011d0e:	f88d 2010 	strb.w	r2, [sp, #16]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7fe fc5c 	bl	80105d0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011d18:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011d1a:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8011d1c:	4639      	mov	r1, r7
 8011d1e:	9005      	str	r0, [sp, #20]
 8011d20:	1ca8      	adds	r0, r5, #2
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011d22:	9407      	str	r4, [sp, #28]
 8011d24:	f7ee ff80 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			msg.payload = std::vector<uint8_t> (&input[2], &input[length]);
 8011d28:	a905      	add	r1, sp, #20
	  this->_M_impl._M_finish =
 8011d2a:	9006      	str	r0, [sp, #24]
 8011d2c:	a801      	add	r0, sp, #4
 8011d2e:	f7fe fd50 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011d32:	a805      	add	r0, sp, #20
 8011d34:	f7ee fed4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			return self->Send(msg);
 8011d38:	4669      	mov	r1, sp
 8011d3a:	a805      	add	r0, sp, #20
 8011d3c:	f7ff f908 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8011d40:	a905      	add	r1, sp, #20
 8011d42:	4630      	mov	r0, r6
 8011d44:	f7ff f9f4 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 8011d48:	1e04      	subs	r4, r0, #0
 8011d4a:	a806      	add	r0, sp, #24
 8011d4c:	bf18      	it	ne
 8011d4e:	2401      	movne	r4, #1
 8011d50:	f7ee fec6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011d54:	a801      	add	r0, sp, #4
 8011d56:	f7ee fec3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	b00b      	add	sp, #44	@ 0x2c
 8011d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d60 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 8011d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (__first != __last)
 8011d64:	429a      	cmp	r2, r3
      : _M_current(__i) { }
 8011d66:	f8d0 a000 	ldr.w	sl, [r0]
 8011d6a:	4604      	mov	r4, r0
 8011d6c:	460d      	mov	r5, r1
 8011d6e:	4617      	mov	r7, r2
 8011d70:	4699      	mov	r9, r3
    { return __lhs.base() - __rhs.base(); }
 8011d72:	eba1 0b0a 	sub.w	fp, r1, sl
 8011d76:	d020      	beq.n	8011dba <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8011d78:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 8011d7c:	e9d0 6201 	ldrd	r6, r2, [r0, #4]
 8011d80:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8011d82:	4590      	cmp	r8, r2
 8011d84:	d836      	bhi.n	8011df4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x94>
 8011d86:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8011d8a:	45d0      	cmp	r8, sl
 8011d8c:	d21a      	bcs.n	8011dc4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x64>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8011d8e:	eba6 0a08 	sub.w	sl, r6, r8
 8011d92:	4632      	mov	r2, r6
 8011d94:	4631      	mov	r1, r6
 8011d96:	4650      	mov	r0, sl
 8011d98:	f7ef ff4c 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8011d9c:	6863      	ldr	r3, [r4, #4]
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8011d9e:	ebba 0205 	subs.w	r2, sl, r5
 8011da2:	4443      	add	r3, r8
 8011da4:	6063      	str	r3, [r4, #4]
 8011da6:	d003      	beq.n	8011db0 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x50>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011da8:	4629      	mov	r1, r5
 8011daa:	1ab0      	subs	r0, r6, r2
 8011dac:	f00b fe5e 	bl	801da6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8011db0:	462a      	mov	r2, r5
 8011db2:	4649      	mov	r1, r9
 8011db4:	4638      	mov	r0, r7
 8011db6:	f7ee ff37 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      { return __normal_iterator(_M_current + __n); }
 8011dba:	6820      	ldr	r0, [r4, #0]
	}
 8011dbc:	4458      	add	r0, fp
 8011dbe:	b003      	add	sp, #12
 8011dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8011dc4:	eb07 030a 	add.w	r3, r7, sl
 8011dc8:	4632      	mov	r2, r6
 8011dca:	4649      	mov	r1, r9
		    this->_M_impl._M_finish += __n - __elems_after;
 8011dcc:	eba8 080a 	sub.w	r8, r8, sl
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	9301      	str	r3, [sp, #4]
 8011dd4:	f7ee ff28 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011dd8:	6862      	ldr	r2, [r4, #4]
 8011dda:	4631      	mov	r1, r6
 8011ddc:	4628      	mov	r0, r5
 8011dde:	4442      	add	r2, r8
 8011de0:	6062      	str	r2, [r4, #4]
 8011de2:	f7ef ff27 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8011de6:	6862      	ldr	r2, [r4, #4]
 8011de8:	9b01      	ldr	r3, [sp, #4]
 8011dea:	4452      	add	r2, sl
 8011dec:	4619      	mov	r1, r3
 8011dee:	6062      	str	r2, [r4, #4]
 8011df0:	462a      	mov	r2, r5
 8011df2:	e7df      	b.n	8011db4 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x54>
		  _M_check_len(__n, "vector::_M_range_insert");
 8011df4:	4641      	mov	r1, r8
 8011df6:	4a13      	ldr	r2, [pc, #76]	@ (8011e44 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xe4>)
 8011df8:	f7ee fe93 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8011dfc:	9001      	str	r0, [sp, #4]
		pointer __new_start(this->_M_allocate(__len));
 8011dfe:	f7fe fbe7 	bl	80105d0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8011e02:	4629      	mov	r1, r5
 8011e04:	4602      	mov	r2, r0
 8011e06:	4680      	mov	r8, r0
 8011e08:	4650      	mov	r0, sl
 8011e0a:	f7ef ff13 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011e0e:	4649      	mov	r1, r9
 8011e10:	4602      	mov	r2, r0
 8011e12:	4638      	mov	r0, r7
 8011e14:	f7ee ff08 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011e18:	4631      	mov	r1, r6
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7ef ff09 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8011e22:	4605      	mov	r5, r0
	if (__p)
 8011e24:	f1ba 0f00 	cmp.w	sl, #0
 8011e28:	d005      	beq.n	8011e36 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0xd6>
			      this->_M_impl._M_end_of_storage - __old_start);
 8011e2a:	68a1      	ldr	r1, [r4, #8]
 8011e2c:	4650      	mov	r0, sl
 8011e2e:	eba1 010a 	sub.w	r1, r1, sl
 8011e32:	f00a fe79 	bl	801cb28 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8011e36:	9b01      	ldr	r3, [sp, #4]
 8011e38:	4443      	add	r3, r8
		this->_M_impl._M_finish = __new_finish;
 8011e3a:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8011e3e:	60a3      	str	r3, [r4, #8]
 8011e40:	e7bb      	b.n	8011dba <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_+0x5a>
 8011e42:	bf00      	nop
 8011e44:	0801ddbf 	.word	0x0801ddbf

08011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>:
bool Communication::BuildPayload(MessageHeader* message, MessageElement element) {
 8011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	b085      	sub	sp, #20
 8011e4e:	4614      	mov	r4, r2
 8011e50:	4606      	mov	r6, r0
 8011e52:	9303      	str	r3, [sp, #12]
 8011e54:	460d      	mov	r5, r1
 8011e56:	e9cd 3301 	strd	r3, r3, [sp, #4]
	if (element.ack) header|= ACK_MASK;
 8011e5a:	7993      	ldrb	r3, [r2, #6]
	if (element.command) header|= COMMAND_MASK;
 8011e5c:	79d2      	ldrb	r2, [r2, #7]
	if (element.ack) header|= ACK_MASK;
 8011e5e:	01db      	lsls	r3, r3, #7
 8011e60:	b2db      	uxtb	r3, r3
	if (element.command) header|= COMMAND_MASK;
 8011e62:	b10a      	cbz	r2, 8011e68 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x20>
 8011e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	if (element.access) header|= ACCESS_MASK;
 8011e68:	7a22      	ldrb	r2, [r4, #8]
 8011e6a:	b10a      	cbz	r2, 8011e70 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x28>
 8011e6c:	f043 0320 	orr.w	r3, r3, #32
	coded_element.push_back(header | ((element.element_register.address >> 8) & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)));
 8011e70:	8822      	ldrh	r2, [r4, #0]
      { emplace_back(std::move(__x)); }
 8011e72:	f10d 0103 	add.w	r1, sp, #3
 8011e76:	a801      	add	r0, sp, #4
 8011e78:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	f88d 3003 	strb.w	r3, [sp, #3]
 8011e82:	f7fe ff6d 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.push_back(element.element_register.address & 0xFF);
 8011e86:	8823      	ldrh	r3, [r4, #0]
 8011e88:	f10d 0103 	add.w	r1, sp, #3
 8011e8c:	a801      	add	r0, sp, #4
 8011e8e:	f88d 3003 	strb.w	r3, [sp, #3]
 8011e92:	f7fe ff65 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	if (element.element_register.isArray && element.element_register.length == 0)
 8011e96:	78e3      	ldrb	r3, [r4, #3]
 8011e98:	b15b      	cbz	r3, 8011eb2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 8011e9a:	88a3      	ldrh	r3, [r4, #4]
 8011e9c:	b94b      	cbnz	r3, 8011eb2 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0x6a>
 8011e9e:	f10d 0103 	add.w	r1, sp, #3
 8011ea2:	a801      	add	r0, sp, #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011ea4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8011ea8:	1a9b      	subs	r3, r3, r2
		coded_element.push_back(element.data.size());
 8011eaa:	f88d 3003 	strb.w	r3, [sp, #3]
      { emplace_back(std::move(__x)); }
 8011eae:	f7fe ff57 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_element.insert(coded_element.end(), element.data.begin(), element.data.end()); // Big-Endian representation, MSB first
 8011eb2:	9902      	ldr	r1, [sp, #8]
 8011eb4:	a801      	add	r0, sp, #4
 8011eb6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8011eba:	f7ff ff51 	bl	8011d60 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
	uint16_t max_length = GetProtocolPayloadMaxLength(message->interface, &success);
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f10d 0203 	add.w	r2, sp, #3
 8011ec4:	7829      	ldrb	r1, [r5, #0]
 8011ec6:	f7fe fc57 	bl	8010778 <_ZN13Communication27GetProtocolPayloadMaxLengthEhPb>
	if (not success) return false;
 8011eca:	f89d 6003 	ldrb.w	r6, [sp, #3]
 8011ece:	b15e      	cbz	r6, 8011ee8 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011ed0:	68a9      	ldr	r1, [r5, #8]
 8011ed2:	686c      	ldr	r4, [r5, #4]
 8011ed4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011ed8:	1b0c      	subs	r4, r1, r4
 8011eda:	1a9f      	subs	r7, r3, r2
	if (message->payload.size() + coded_element.size() > max_length)
 8011edc:	443c      	add	r4, r7
 8011ede:	4284      	cmp	r4, r0
 8011ee0:	d808      	bhi.n	8011ef4 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xac>
	message->payload.insert(message->payload.end(), coded_element.begin(), coded_element.end());
 8011ee2:	1d28      	adds	r0, r5, #4
 8011ee4:	f7ff ff3c 	bl	8011d60 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8011ee8:	a801      	add	r0, sp, #4
 8011eea:	f7ee fdf9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011eee:	4630      	mov	r0, r6
 8011ef0:	b005      	add	sp, #20
 8011ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (not success) return false;
 8011ef4:	2600      	movs	r6, #0
 8011ef6:	e7f7      	b.n	8011ee8 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement+0xa0>

08011ef8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>:
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8011ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011efc:	461c      	mov	r4, r3
 8011efe:	b097      	sub	sp, #92	@ 0x5c
	uint16_t register_id = element->element_register.address;
 8011f00:	f8b3 9000 	ldrh.w	r9, [r3]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8011f04:	4605      	mov	r5, r0
	if (not element->ack && element->command) {
 8011f06:	799b      	ldrb	r3, [r3, #6]
bool Communication::FindRegister(MessageHeader message, MessageHeader* response, MessageElement* element) {
 8011f08:	4617      	mov	r7, r2
 8011f0a:	f10d 0820 	add.w	r8, sp, #32
	if (not element->ack && element->command) {
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d165      	bne.n	8011fde <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xe6>
 8011f12:	79e3      	ldrb	r3, [r4, #7]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d07c      	beq.n	8012012 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x11a>
		if (registers->IsRegistered(register_id))
 8011f18:	4649      	mov	r1, r9
 8011f1a:	6868      	ldr	r0, [r5, #4]
 8011f1c:	f006 fc88 	bl	8018830 <_ZN9Registers12IsRegisteredEt>
 8011f20:	4606      	mov	r6, r0
 8011f22:	b168      	cbz	r0, 8011f40 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x48>
			element->element_register = registers->FindRegister(register_id, &success);
 8011f24:	4643      	mov	r3, r8
 8011f26:	464a      	mov	r2, r9
 8011f28:	6869      	ldr	r1, [r5, #4]
 8011f2a:	a804      	add	r0, sp, #16
 8011f2c:	f006 fbfe 	bl	801872c <_ZN9Registers12FindRegisterEtPb>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011f30:	9804      	ldr	r0, [sp, #16]
	return success;
 8011f32:	f89d 6020 	ldrb.w	r6, [sp, #32]
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8011f36:	6020      	str	r0, [r4, #0]
 8011f38:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011f3c:	80a3      	strh	r3, [r4, #4]
	return success;
 8011f3e:	e04a      	b.n	8011fd6 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xde>
			response_content.ack = true;
 8011f40:	f240 1301 	movw	r3, #257	@ 0x101
	: _M_start(), _M_finish(), _M_end_of_storage()
 8011f44:	900f      	str	r0, [sp, #60]	@ 0x3c
			response_content.element_register.address = register_id;
 8011f46:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
			response_content.ack = true;
 8011f4a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
			response_content.access = element->access;
 8011f4e:	7a23      	ldrb	r3, [r4, #8]
 8011f50:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
			response_content.data = std::vector<uint8_t>{UNKNOWN_REGISTER};
 8011f54:	230f      	movs	r3, #15
 8011f56:	f88d 3018 	strb.w	r3, [sp, #24]
 8011f5a:	ab06      	add	r3, sp, #24
 8011f5c:	9308      	str	r3, [sp, #32]
 8011f5e:	2301      	movs	r3, #1
 8011f60:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8011f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f66:	a810      	add	r0, sp, #64	@ 0x40
 8011f68:	ab07      	add	r3, sp, #28
 8011f6a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011f6e:	f7ee ff0b 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8011f72:	a910      	add	r1, sp, #64	@ 0x40
 8011f74:	a80d      	add	r0, sp, #52	@ 0x34
 8011f76:	f7fe fc2c 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8011f7a:	a810      	add	r0, sp, #64	@ 0x40
 8011f7c:	f7ee fdb0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			if (not BuildPayload(response, response_content)) {
 8011f80:	a90a      	add	r1, sp, #40	@ 0x28
 8011f82:	a810      	add	r0, sp, #64	@ 0x40
 8011f84:	f7fe ffd1 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8011f88:	aa10      	add	r2, sp, #64	@ 0x40
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f7ff ff5b 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011f92:	4604      	mov	r4, r0
 8011f94:	a813      	add	r0, sp, #76	@ 0x4c
 8011f96:	f7ee fda3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011f9a:	b9cc      	cbnz	r4, 8011fd0 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0xd8>
				Send(*response);
 8011f9c:	4639      	mov	r1, r7
 8011f9e:	a810      	add	r0, sp, #64	@ 0x40
 8011fa0:	f7fe ffd6 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8011fa4:	a910      	add	r1, sp, #64	@ 0x40
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f7ff f8c2 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 8011fac:	a811      	add	r0, sp, #68	@ 0x44
 8011fae:	f7ee fd97 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
				response->payload.clear();
 8011fb2:	1d38      	adds	r0, r7, #4
 8011fb4:	f7fe fc24 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
				BuildPayload(response, response_content);
 8011fb8:	a90a      	add	r1, sp, #40	@ 0x28
 8011fba:	a810      	add	r0, sp, #64	@ 0x40
 8011fbc:	f7fe ffb5 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8011fc0:	aa10      	add	r2, sp, #64	@ 0x40
 8011fc2:	4639      	mov	r1, r7
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	f7ff ff3f 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8011fca:	a813      	add	r0, sp, #76	@ 0x4c
 8011fcc:	f7ee fd88 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8011fd0:	a80d      	add	r0, sp, #52	@ 0x34
 8011fd2:	f7ee fd85 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	b017      	add	sp, #92	@ 0x5c
 8011fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		element->element_register = services->FindRemoteRegister(Register{.address=register_id}, ServiceInterface{.interface=message.interface, .address=message.source_address}, element->access, &success);
 8011fde:	2300      	movs	r3, #0
 8011fe0:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8011fe4:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8011fe8:	780b      	ldrb	r3, [r1, #0]
 8011fea:	f88d 3018 	strb.w	r3, [sp, #24]
 8011fee:	7c4b      	ldrb	r3, [r1, #17]
 8011ff0:	f8cd 8008 	str.w	r8, [sp, #8]
 8011ff4:	f88d 3019 	strb.w	r3, [sp, #25]
 8011ff8:	7a23      	ldrb	r3, [r4, #8]
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012000:	f8ad 3000 	strh.w	r3, [sp]
 8012004:	6881      	ldr	r1, [r0, #8]
 8012006:	a804      	add	r0, sp, #16
 8012008:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801200c:	f009 ff8d 	bl	801bf2a <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>
 8012010:	e78e      	b.n	8011f30 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>
		element->element_register = subscribers->FindRemoteRegister(Register{.address=register_id}, SubscriberInterface{.interface=message.interface, .address=message.source_address}, &success);
 8012012:	f8cd 3042 	str.w	r3, [sp, #66]	@ 0x42
 8012016:	a804      	add	r0, sp, #16
 8012018:	780b      	ldrb	r3, [r1, #0]
 801201a:	f8ad 9040 	strh.w	r9, [sp, #64]	@ 0x40
 801201e:	f88d 301c 	strb.w	r3, [sp, #28]
 8012022:	7c4b      	ldrb	r3, [r1, #17]
 8012024:	f8cd 8004 	str.w	r8, [sp, #4]
 8012028:	f88d 301d 	strb.w	r3, [sp, #29]
 801202c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012030:	f8ad 3000 	strh.w	r3, [sp]
 8012034:	68e9      	ldr	r1, [r5, #12]
 8012036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801203a:	f00a f945 	bl	801c2c8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>
 801203e:	e777      	b.n	8011f30 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement+0x38>

08012040 <_ZZN13Communication12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012040:	b530      	push	{r4, r5, lr}
 8012042:	4604      	mov	r4, r0
 8012044:	b093      	sub	sp, #76	@ 0x4c
			self->SetModuleAddress(*input);
 8012046:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8012048:	4615      	mov	r5, r2
			self->SetModuleAddress(*input);
 801204a:	f7fe fbb4 	bl	80107b6 <_ZN13Communication16SetModuleAddressEh>
			IDFoundLEDS(self->leds);
 801204e:	6920      	ldr	r0, [r4, #16]
 8012050:	f7fc fff8 	bl	800f044 <_Z11IDFoundLEDSP4LEDS>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012054:	2300      	movs	r3, #0
			message.interface = UART_BACK;
 8012056:	2203      	movs	r2, #3
      { emplace_back(std::move(__x)); }
 8012058:	a90c      	add	r1, sp, #48	@ 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 801205a:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801205c:	a809      	add	r0, sp, #36	@ 0x24
	: _M_start(), _M_finish(), _M_end_of_storage()
 801205e:	930b      	str	r3, [sp, #44]	@ 0x2c
			element.access = WRITE;
 8012060:	f88d 3020 	strb.w	r3, [sp, #32]
			message.interface = UART_BACK;
 8012064:	f88d 2004 	strb.w	r2, [sp, #4]
			element.ack = false;
 8012068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801206c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012070:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
			element.data.push_back(*input + 1);
 8012074:	782b      	ldrb	r3, [r5, #0]
			element.ack = false;
 8012076:	f8ad 201e 	strh.w	r2, [sp, #30]
			element.data.push_back(*input + 1);
 801207a:	3301      	adds	r3, #1
 801207c:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
      { emplace_back(std::move(__x)); }
 8012080:	f7fe fe6e 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
			element.element_register = self->registers->FindRegister(REG_COM_ID_PROPAGATION, &success);
 8012084:	f10d 0303 	add.w	r3, sp, #3
 8012088:	2201      	movs	r2, #1
 801208a:	6861      	ldr	r1, [r4, #4]
 801208c:	a806      	add	r0, sp, #24
 801208e:	f006 fb4d 	bl	801872c <_ZN9Registers12FindRegisterEtPb>
			self->BuildPayload(&message, element);
 8012092:	a906      	add	r1, sp, #24
 8012094:	a80c      	add	r0, sp, #48	@ 0x30
 8012096:	f7fe ff48 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 801209a:	aa0c      	add	r2, sp, #48	@ 0x30
 801209c:	a901      	add	r1, sp, #4
 801209e:	4620      	mov	r0, r4
 80120a0:	f7ff fed2 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 80120a4:	a80f      	add	r0, sp, #60	@ 0x3c
 80120a6:	f7ee fd1b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			self->Send(message);
 80120aa:	a901      	add	r1, sp, #4
 80120ac:	a80c      	add	r0, sp, #48	@ 0x30
 80120ae:	f7fe ff4f 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 80120b2:	a90c      	add	r1, sp, #48	@ 0x30
 80120b4:	4620      	mov	r0, r4
 80120b6:	f7ff f83b 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 80120ba:	a80d      	add	r0, sp, #52	@ 0x34
 80120bc:	f7ee fd10 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80120c0:	a809      	add	r0, sp, #36	@ 0x24
 80120c2:	f7ee fd0d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80120c6:	a802      	add	r0, sp, #8
 80120c8:	f7ee fd0a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80120cc:	2001      	movs	r0, #1
 80120ce:	b013      	add	sp, #76	@ 0x4c
 80120d0:	bd30      	pop	{r4, r5, pc}

080120d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80120d2:	b510      	push	{r4, lr}
	  if (__n > 0)
 80120d4:	460a      	mov	r2, r1
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80120d6:	4604      	mov	r4, r0
	  if (__n > 0)
 80120d8:	b141      	cbz	r1, 80120ec <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80120da:	2100      	movs	r1, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
 80120dc:	2a01      	cmp	r2, #1
 80120de:	f800 1b01 	strb.w	r1, [r0], #1
 80120e2:	d005      	beq.n	80120f0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1e>
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
 80120e4:	4414      	add	r4, r2
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 80120e6:	3a01      	subs	r2, #1
 80120e8:	f00b fcda 	bl	801daa0 <memset>
	}
 80120ec:	4620      	mov	r0, r4
 80120ee:	bd10      	pop	{r4, pc}
	      ++__first;
 80120f0:	4604      	mov	r4, r0
 80120f2:	e7fb      	b.n	80120ec <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_+0x1a>

080120f4 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 80120f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120f8:	4604      	mov	r4, r0
      if (__n != 0)
 80120fa:	460d      	mov	r5, r1
 80120fc:	b159      	cbz	r1, 8012116 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
					 - this->_M_impl._M_finish);
 80120fe:	6882      	ldr	r2, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012100:	e9d0 7300 	ldrd	r7, r3, [r0]
 8012104:	1ad2      	subs	r2, r2, r3
 8012106:	eba3 0807 	sub.w	r8, r3, r7
	  if (__navail >= __n)
 801210a:	428a      	cmp	r2, r1
 801210c:	d305      	bcc.n	801211a <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x26>
	__uninit_default_n(__first, __n);
 801210e:	4618      	mov	r0, r3
 8012110:	f7ff ffdf 	bl	80120d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
	      this->_M_impl._M_finish =
 8012114:	6060      	str	r0, [r4, #4]
    }
 8012116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 801211a:	4a11      	ldr	r2, [pc, #68]	@ (8012160 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x6c>)
 801211c:	f7fe fea8 	bl	8010e70 <_ZNKSt6vectorIaSaIaEE12_M_check_lenEjPKc>
 8012120:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012122:	f7fe f975 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012126:	4629      	mov	r1, r5
 8012128:	4606      	mov	r6, r0
 801212a:	4440      	add	r0, r8
 801212c:	f7ff ffd1 	bl	80120d2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPajEET_S3_T0_>
      if (__count > 0)
 8012130:	f1b8 0f00 	cmp.w	r8, #0
 8012134:	d00a      	beq.n	801214c <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x58>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8012136:	4642      	mov	r2, r8
 8012138:	4639      	mov	r1, r7
 801213a:	4630      	mov	r0, r6
 801213c:	f00b fc96 	bl	801da6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012140:	68a1      	ldr	r1, [r4, #8]
 8012142:	4638      	mov	r0, r7
 8012144:	1bc9      	subs	r1, r1, r7
 8012146:	f00a fcef 	bl	801cb28 <_ZdlPvj>
      { __a.deallocate(__p, __n); }
 801214a:	e001      	b.n	8012150 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x5c>
	if (__p)
 801214c:	2f00      	cmp	r7, #0
 801214e:	d1f7      	bne.n	8012140 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x4c>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012150:	4445      	add	r5, r8
	      this->_M_impl._M_start = __new_start;
 8012152:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012154:	4435      	add	r5, r6
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012156:	444e      	add	r6, r9
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8012158:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 801215a:	60a6      	str	r6, [r4, #8]
    }
 801215c:	e7db      	b.n	8012116 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj+0x22>
 801215e:	bf00      	nop
 8012160:	0801dffe 	.word	0x0801dffe

08012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012164:	b510      	push	{r4, lr}
	  if (_Num)
 8012166:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012168:	4613      	mov	r3, r2
	  if (_Num)
 801216a:	d005      	beq.n	8012178 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801216c:	4601      	mov	r1, r0
 801216e:	4622      	mov	r2, r4
 8012170:	4618      	mov	r0, r3
 8012172:	f00b fc7b 	bl	801da6c <memmove>
 8012176:	4603      	mov	r3, r0
	}
 8012178:	1918      	adds	r0, r3, r4
 801217a:	bd10      	pop	{r4, pc}

0801217c <_ZNSt6vectorIaSaIaEEC1ERKS1_>:
      vector(const vector& __x)
 801217c:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801217e:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 8012182:	4604      	mov	r4, r0
 8012184:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012186:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012188:	2300      	movs	r3, #0
 801218a:	e9c0 3300 	strd	r3, r3, [r0]
 801218e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012190:	4630      	mov	r0, r6
 8012192:	f7fe f93d 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012196:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8012198:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801219a:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801219c:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 80121a0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80121a4:	f7ff ffde 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 80121a8:	6060      	str	r0, [r4, #4]
      }
 80121aa:	4620      	mov	r0, r4
 80121ac:	bd70      	pop	{r4, r5, r6, pc}

080121ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80121ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b2:	b085      	sub	sp, #20
 80121b4:	4606      	mov	r6, r0
 80121b6:	4688      	mov	r8, r1
 80121b8:	461f      	mov	r7, r3
 80121ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80121be:	f04f 31ff 	mov.w	r1, #4294967295
 80121c2:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 80121c4:	4615      	mov	r5, r2
 80121c6:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80121c8:	f7fa fe30 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80121cc:	f10d 020f 	add.w	r2, sp, #15
 80121d0:	4641      	mov	r1, r8
 80121d2:	4630      	mov	r0, r6
 80121d4:	f006 fa99 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80121d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80121dc:	4604      	mov	r4, r0
	if (!success) {
 80121de:	b933      	cbnz	r3, 80121ee <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 80121e0:	6830      	ldr	r0, [r6, #0]
 80121e2:	f7fa fe57 	bl	800ce94 <osSemaphoreRelease>
		return false;
 80121e6:	2000      	movs	r0, #0
}
 80121e8:	b005      	add	sp, #20
 80121ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80121ee:	f10d 000f 	add.w	r0, sp, #15
 80121f2:	f7fe f967 	bl	80104c4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 80121f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0f0      	beq.n	80121e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 80121fe:	7923      	ldrb	r3, [r4, #4]
 8012200:	4283      	cmp	r3, r0
 8012202:	d1ed      	bne.n	80121e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012204:	3304      	adds	r3, #4
 8012206:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801220a:	2800      	cmp	r0, #0
 801220c:	d0e8      	beq.n	80121e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
	if (target_register->access.write) {
 801220e:	7a23      	ldrb	r3, [r4, #8]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d0e5      	beq.n	80121e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x32>
		success = false;
 8012214:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012216:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012218:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 801221c:	f7fe fe16 	bl	8010e4c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012220:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012222:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012226:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 801222a:	b133      	cbz	r3, 801223a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
 801222c:	68e3      	ldr	r3, [r4, #12]
 801222e:	b123      	cbz	r3, 801223a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012230:	f04f 31ff 	mov.w	r1, #4294967295
 8012234:	6818      	ldr	r0, [r3, #0]
 8012236:	f7fa fdf9 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 801223a:	7823      	ldrb	r3, [r4, #0]
 801223c:	b1db      	cbz	r3, 8012276 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
			success = true;
 801223e:	2301      	movs	r3, #1
 8012240:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012244:	7963      	ldrb	r3, [r4, #5]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d045      	beq.n	80122d6 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x128>
 801224a:	88e1      	ldrh	r1, [r4, #6]
 801224c:	2900      	cmp	r1, #0
 801224e:	d13c      	bne.n	80122ca <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x11c>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012250:	e9db 3100 	ldrd	r3, r1, [fp]
 8012254:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8012256:	bf18      	it	ne
 8012258:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801225c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012260:	1ac1      	subs	r1, r0, r3
	if (__new_size > size())
 8012262:	428f      	cmp	r7, r1
 8012264:	d924      	bls.n	80122b0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x102>
	  _M_default_append(__new_size - size());
 8012266:	1a79      	subs	r1, r7, r1
 8012268:	4658      	mov	r0, fp
 801226a:	f7ff ff43 	bl	80120f4 <_ZNSt6vectorIaSaIaEE17_M_default_appendEj>
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 801226e:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012270:	b299      	uxth	r1, r3
 8012272:	42b9      	cmp	r1, r7
 8012274:	d323      	bcc.n	80122be <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x110>
		if (target_register->mode.callbacks) {
 8012276:	7863      	ldrb	r3, [r4, #1]
 8012278:	b16b      	cbz	r3, 8012296 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
			if (callbacks.write != NULL) {
 801227a:	f1b9 0f00 	cmp.w	r9, #0
 801227e:	d00a      	beq.n	8012296 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xe8>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012280:	7963      	ldrb	r3, [r4, #5]
 8012282:	b36b      	cbz	r3, 80122e0 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x132>
 8012284:	88e3      	ldrh	r3, [r4, #6]
 8012286:	b903      	cbnz	r3, 801228a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>
					success = callbacks.write(callbacks.context, ID, value, length);
 8012288:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 801228a:	462a      	mov	r2, r5
 801228c:	4641      	mov	r1, r8
 801228e:	4650      	mov	r0, sl
 8012290:	47c8      	blx	r9
 8012292:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012296:	9b01      	ldr	r3, [sp, #4]
 8012298:	b123      	cbz	r3, 80122a4 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
 801229a:	68e3      	ldr	r3, [r4, #12]
 801229c:	b113      	cbz	r3, 80122a4 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xf6>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801229e:	6818      	ldr	r0, [r3, #0]
 80122a0:	f7fa fdf8 	bl	800ce94 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 80122a4:	6830      	ldr	r0, [r6, #0]
 80122a6:	f7fa fdf5 	bl	800ce94 <osSemaphoreRelease>
		return success;
 80122aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80122ae:	e79b      	b.n	80121e8 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0x3a>
	else if (__new_size < size())
 80122b0:	d2dd      	bcs.n	801226e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80122b2:	443b      	add	r3, r7
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80122b4:	4298      	cmp	r0, r3
 80122b6:	d0da      	beq.n	801226e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
	    this->_M_impl._M_finish = __pos;
 80122b8:	f8cb 3004 	str.w	r3, [fp, #4]
 80122bc:	e7d7      	b.n	801226e <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc0>
					(*register_vector)[index] = value[index];
 80122be:	56e8      	ldrsb	r0, [r5, r3]
 80122c0:	f8db 1000 	ldr.w	r1, [fp]
 80122c4:	54c8      	strb	r0, [r1, r3]
				for (uint16_t index = 0; index < length; index++) {
 80122c6:	3301      	adds	r3, #1
 80122c8:	e7d2      	b.n	8012270 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc2>
 80122ca:	465a      	mov	r2, fp
 80122cc:	4429      	add	r1, r5
 80122ce:	4628      	mov	r0, r5
 80122d0:	f7ff ff48 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80122d4:	e7cf      	b.n	8012276 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
				*(callbacks.pointer) = *value;
 80122d6:	f995 3000 	ldrsb.w	r3, [r5]
 80122da:	f88b 3000 	strb.w	r3, [fp]
 80122de:	e7ca      	b.n	8012276 <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xc8>
					success = callbacks.write(callbacks.context, ID, value, 1);
 80122e0:	2301      	movs	r3, #1
 80122e2:	e7d2      	b.n	801228a <_ZN9Registers13WriteRegisterIaEEbtPT_tb+0xdc>

080122e4 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80122e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e8:	b091      	sub	sp, #68	@ 0x44
 80122ea:	4605      	mov	r5, r0
 80122ec:	4691      	mov	r9, r2
 80122ee:	4608      	mov	r0, r1
 80122f0:	af02      	add	r7, sp, #8
 80122f2:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 80122f4:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80122f6:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 80122fa:	f107 060b 	add.w	r6, r7, #11
 80122fe:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012302:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012306:	f1b8 0f00 	cmp.w	r8, #0
 801230a:	d176      	bne.n	80123fa <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x116>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 801230c:	f107 0020 	add.w	r0, r7, #32
 8012310:	f7ee fc96 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012314:	4632      	mov	r2, r6
 8012316:	4621      	mov	r1, r4
 8012318:	f107 0020 	add.w	r0, r7, #32
 801231c:	f7fe f93e 	bl	801059c <_ZN13Communication13ExtractSingleIaEET_St6vectorIhSaIhEEtPb.isra.0>
 8012320:	7538      	strb	r0, [r7, #20]
      }
 8012322:	f107 0020 	add.w	r0, r7, #32
 8012326:	f7ee fbdb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801232a:	7afb      	ldrb	r3, [r7, #11]
 801232c:	b153      	cbz	r3, 8012344 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x60>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 801232e:	2301      	movs	r3, #1
 8012330:	f8bb 1000 	ldrh.w	r1, [fp]
 8012334:	f107 0214 	add.w	r2, r7, #20
 8012338:	9300      	str	r3, [sp, #0]
 801233a:	4643      	mov	r3, r8
 801233c:	6868      	ldr	r0, [r5, #4]
 801233e:	f7ff ff36 	bl	80121ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012342:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012344:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012348:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 801234a:	f10a 060c 	add.w	r6, sl, #12
 801234e:	f107 0214 	add.w	r2, r7, #20
 8012352:	f107 010c 	add.w	r1, r7, #12
	if (success)
 8012356:	2b00      	cmp	r3, #0
 8012358:	f000 80ce 	beq.w	80124f8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x214>
		response_content.data = std::vector<uint8_t>{OK};
 801235c:	2300      	movs	r3, #0
 801235e:	723b      	strb	r3, [r7, #8]
 8012360:	f107 0308 	add.w	r3, r7, #8
 8012364:	60fb      	str	r3, [r7, #12]
 8012366:	2301      	movs	r3, #1
 8012368:	613b      	str	r3, [r7, #16]
 801236a:	4613      	mov	r3, r2
 801236c:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 801236e:	f107 0020 	add.w	r0, r7, #32
 8012372:	f7ee fd09 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012376:	f107 0120 	add.w	r1, r7, #32
 801237a:	4630      	mov	r0, r6
 801237c:	f7fe fa29 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012380:	f107 0020 	add.w	r0, r7, #32
 8012384:	f7ee fbac 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012388:	4651      	mov	r1, sl
 801238a:	f107 0020 	add.w	r0, r7, #32
 801238e:	f7fe fdcc 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012392:	f107 0220 	add.w	r2, r7, #32
 8012396:	4649      	mov	r1, r9
 8012398:	4628      	mov	r0, r5
 801239a:	f7ff fd55 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801239e:	4606      	mov	r6, r0
 80123a0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80123a4:	f7ee fb9c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80123a8:	bb06      	cbnz	r6, 80123ec <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x108>
		Send(*response);
 80123aa:	4649      	mov	r1, r9
 80123ac:	f107 0020 	add.w	r0, r7, #32
 80123b0:	f7fe fdce 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 80123b4:	f107 0120 	add.w	r1, r7, #32
 80123b8:	4628      	mov	r0, r5
 80123ba:	f7fe feb9 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 80123be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80123c2:	f7ee fb8d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 80123c6:	f109 0004 	add.w	r0, r9, #4
 80123ca:	f7fe fa19 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 80123ce:	4651      	mov	r1, sl
 80123d0:	f107 0020 	add.w	r0, r7, #32
 80123d4:	f7fe fda9 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 80123d8:	f107 0220 	add.w	r2, r7, #32
 80123dc:	4649      	mov	r1, r9
 80123de:	4628      	mov	r0, r5
 80123e0:	f7ff fd32 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 80123e4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80123e8:	f7ee fb7a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 80123ec:	eb04 0008 	add.w	r0, r4, r8
}
 80123f0:	373c      	adds	r7, #60	@ 0x3c
 80123f2:	b280      	uxth	r0, r0
 80123f4:	46bd      	mov	sp, r7
 80123f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 80123fa:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 80123fe:	f1b8 0f00 	cmp.w	r8, #0
 8012402:	d029      	beq.n	8012458 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x174>
		T values[length_to_extract];
 8012404:	f108 0307 	add.w	r3, r8, #7
 8012408:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 801240a:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801240e:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012412:	08db      	lsrs	r3, r3, #3
 8012414:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012418:	469d      	mov	sp, r3
 801241a:	ab02      	add	r3, sp, #8
 801241c:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 801241e:	f7ee fc0f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012422:	9600      	str	r6, [sp, #0]
 8012424:	4643      	mov	r3, r8
 8012426:	4622      	mov	r2, r4
 8012428:	f107 0120 	add.w	r1, r7, #32
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7ff fa1f 	bl	8011870 <_ZN13Communication12ExtractArrayIaEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012432:	f107 0020 	add.w	r0, r7, #32
 8012436:	f7ee fb53 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 801243a:	7afb      	ldrb	r3, [r7, #11]
 801243c:	b14b      	cbz	r3, 8012452 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x16e>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 801243e:	2301      	movs	r3, #1
 8012440:	f8bb 1000 	ldrh.w	r1, [fp]
 8012444:	9300      	str	r3, [sp, #0]
 8012446:	2300      	movs	r3, #0
 8012448:	687a      	ldr	r2, [r7, #4]
 801244a:	6868      	ldr	r0, [r5, #4]
 801244c:	f7ff feaf 	bl	80121ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 8012450:	72f8      	strb	r0, [r7, #11]
 8012452:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012456:	e777      	b.n	8012348 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
		length_to_extract = message.payload[start_index];
 8012458:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801245a:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 801245e:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012462:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012464:	f7ee fbec 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012468:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 801246c:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 801246e:	4643      	mov	r3, r8
 8012470:	f107 0014 	add.w	r0, r7, #20
 8012474:	9600      	str	r6, [sp, #0]
 8012476:	4622      	mov	r2, r4
 8012478:	f7ff f9a0 	bl	80117bc <_ZN13Communication13ExtractVectorIaEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 801247c:	f107 0020 	add.w	r0, r7, #32
 8012480:	f7ee fb2e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012484:	7afb      	ldrb	r3, [r7, #11]
 8012486:	b1fb      	cbz	r3, 80124c8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e4>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012488:	686e      	ldr	r6, [r5, #4]
 801248a:	f107 0114 	add.w	r1, r7, #20
 801248e:	f8bb b000 	ldrh.w	fp, [fp]
 8012492:	f107 0020 	add.w	r0, r7, #32
 8012496:	f7ff fe71 	bl	801217c <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801249a:	f04f 31ff 	mov.w	r1, #4294967295
 801249e:	6830      	ldr	r0, [r6, #0]
 80124a0:	f7fa fcc4 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80124a4:	f107 020c 	add.w	r2, r7, #12
 80124a8:	4659      	mov	r1, fp
 80124aa:	4630      	mov	r0, r6
 80124ac:	f006 f92d 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80124b0:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80124b2:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 80124b4:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 80124b6:	b962      	cbnz	r2, 80124d2 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1ee>
		osSemaphoreRelease(RegistersSemaphore);
 80124b8:	f7fa fcec 	bl	800ce94 <osSemaphoreRelease>
		return false;
 80124bc:	2000      	movs	r0, #0
 80124be:	72f8      	strb	r0, [r7, #11]
 80124c0:	f107 0020 	add.w	r0, r7, #32
 80124c4:	f7fe fc00 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80124c8:	f107 0014 	add.w	r0, r7, #20
 80124cc:	f7fe fbfc 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80124d0:	e73a      	b.n	8012348 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x64>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 80124d2:	795a      	ldrb	r2, [r3, #5]
 80124d4:	2a00      	cmp	r2, #0
 80124d6:	d0ef      	beq.n	80124b8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
 80124d8:	88db      	ldrh	r3, [r3, #6]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d1ec      	bne.n	80124b8 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d4>
	osSemaphoreRelease(RegistersSemaphore);
 80124de:	f7fa fcd9 	bl	800ce94 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 80124e2:	2101      	movs	r1, #1
 80124e4:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80124e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80124ea:	9100      	str	r1, [sp, #0]
 80124ec:	4659      	mov	r1, fp
 80124ee:	1a9b      	subs	r3, r3, r2
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	f7ff fe5c 	bl	80121ae <_ZN9Registers13WriteRegisterIaEEbtPT_tb>
 80124f6:	e7e2      	b.n	80124be <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x1da>
		response_content.data = std::vector<uint8_t>{ERROR};
 80124f8:	23ff      	movs	r3, #255	@ 0xff
 80124fa:	723b      	strb	r3, [r7, #8]
 80124fc:	f107 0308 	add.w	r3, r7, #8
 8012500:	617b      	str	r3, [r7, #20]
 8012502:	2301      	movs	r3, #1
 8012504:	61bb      	str	r3, [r7, #24]
 8012506:	460b      	mov	r3, r1
 8012508:	ca06      	ldmia	r2, {r1, r2}
 801250a:	e730      	b.n	801236e <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t+0x8a>

0801250c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012510:	460f      	mov	r7, r1
 8012512:	b0b1      	sub	sp, #196	@ 0xc4
 8012514:	461c      	mov	r4, r3
 8012516:	4680      	mov	r8, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012518:	f04f 0900 	mov.w	r9, #0
 801251c:	f8bd a0e8 	ldrh.w	sl, [sp, #232]	@ 0xe8
 8012520:	9203      	str	r2, [sp, #12]
 8012522:	ad2a      	add	r5, sp, #168	@ 0xa8
 8012524:	f8cd 9074 	str.w	r9, [sp, #116]	@ 0x74
	response_content.element_register = element.element_register;
 8012528:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.ack = true;
 801252c:	2301      	movs	r3, #1
	response_content.element_register = element.element_register;
 801252e:	9018      	str	r0, [sp, #96]	@ 0x60
	response_content.ack = true;
 8012530:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
	response_content.access = element.access;
 8012534:	7a23      	ldrb	r3, [r4, #8]
	response_content.element_register = element.element_register;
 8012536:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 801253a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801253e:	7839      	ldrb	r1, [r7, #0]
	response_content.access = element.access;
 8012540:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012544:	e9cd 991b 	strd	r9, r9, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012548:	f7fc fd84 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 801254c:	7a23      	ldrb	r3, [r4, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 801254e:	4639      	mov	r1, r7
	if (element.access == WRITE) {
 8012550:	bb1b      	cbnz	r3, 801259a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012552:	a81e      	add	r0, sp, #120	@ 0x78
 8012554:	f7fe fcfc 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012558:	a918      	add	r1, sp, #96	@ 0x60
 801255a:	a824      	add	r0, sp, #144	@ 0x90
 801255c:	f7fe fce5 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012560:	4621      	mov	r1, r4
 8012562:	4628      	mov	r0, r5
 8012564:	f7fe fce1 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012568:	ab24      	add	r3, sp, #144	@ 0x90
 801256a:	9a03      	ldr	r2, [sp, #12]
 801256c:	a91e      	add	r1, sp, #120	@ 0x78
 801256e:	4640      	mov	r0, r8
 8012570:	e9cd 5a00 	strd	r5, sl, [sp]
 8012574:	f7ff feb6 	bl	80122e4 <_ZN13Communication12ProcessWriteIaEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012578:	4682      	mov	sl, r0
      }
 801257a:	a82d      	add	r0, sp, #180	@ 0xb4
 801257c:	f7ee fab0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012580:	a827      	add	r0, sp, #156	@ 0x9c
 8012582:	f7ee faad 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012586:	a81f      	add	r0, sp, #124	@ 0x7c
 8012588:	f7ee faaa 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801258c:	a81b      	add	r0, sp, #108	@ 0x6c
 801258e:	f7ee faa7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012592:	4650      	mov	r0, sl
 8012594:	b031      	add	sp, #196	@ 0xc4
 8012596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 801259a:	a813      	add	r0, sp, #76	@ 0x4c
 801259c:	f7fe fcd8 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 80125a0:	a918      	add	r1, sp, #96	@ 0x60
 80125a2:	a81e      	add	r0, sp, #120	@ 0x78
 80125a4:	f7fe fcc1 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 80125a8:	4621      	mov	r1, r4
 80125aa:	a824      	add	r0, sp, #144	@ 0x90
 80125ac:	f7fe fcbd 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
uint16_t Communication::ProcessRead(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 80125b0:	f8d8 7004 	ldr.w	r7, [r8, #4]
std::vector<uint8_t> Communication::ReadElement(MessageElement* element, bool* success) {
	std::vector<uint8_t> data;

	T register_read;
	uint16_t length;
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80125b4:	f8bd b090 	ldrh.w	fp, [sp, #144]	@ 0x90
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80125b8:	f04f 31ff 	mov.w	r1, #4294967295
 80125bc:	6838      	ldr	r0, [r7, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80125be:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80125c2:	e9cd 9907 	strd	r9, r9, [sp, #28]
 80125c6:	f7fa fc31 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80125ca:	462a      	mov	r2, r5
 80125cc:	4659      	mov	r1, fp
 80125ce:	4638      	mov	r0, r7
 80125d0:	f006 f89b 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80125d4:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80125d8:	4604      	mov	r4, r0
	if (!success) {
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d15c      	bne.n	8012698 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x18c>
		osSemaphoreRelease(RegistersSemaphore);
 80125de:	6838      	ldr	r0, [r7, #0]
 80125e0:	f7fa fc58 	bl	800ce94 <osSemaphoreRelease>
		return false;
 80125e4:	2300      	movs	r3, #0
 80125e6:	9304      	str	r3, [sp, #16]
	response_content.data = ReadElement<T>(&element, &success);
 80125e8:	a907      	add	r1, sp, #28
 80125ea:	a821      	add	r0, sp, #132	@ 0x84
 80125ec:	f7fe f8f1 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80125f0:	a807      	add	r0, sp, #28
 80125f2:	f7ee fa75 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 80125f6:	9b04      	ldr	r3, [sp, #16]
 80125f8:	b9ab      	cbnz	r3, 8012626 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x11a>
		response_content.data = std::vector<uint8_t>{ERROR};
 80125fa:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 80125fc:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 80125fe:	4628      	mov	r0, r5
 8012600:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 8012604:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 8012606:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 801260a:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801260e:	ab0d      	add	r3, sp, #52	@ 0x34
 8012610:	2201      	movs	r2, #1
 8012612:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012614:	f7ee fbb8 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012618:	a821      	add	r0, sp, #132	@ 0x84
 801261a:	4629      	mov	r1, r5
 801261c:	f7fe f8d9 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012620:	4628      	mov	r0, r5
 8012622:	f7ee fa5d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012626:	a91e      	add	r1, sp, #120	@ 0x78
 8012628:	4628      	mov	r0, r5
 801262a:	f7fe fc7e 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 801262e:	462a      	mov	r2, r5
 8012630:	9903      	ldr	r1, [sp, #12]
 8012632:	4640      	mov	r0, r8
 8012634:	f7ff fc08 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012638:	2800      	cmp	r0, #0
 801263a:	f040 812e 	bne.w	801289a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x38e>
 801263e:	9b03      	ldr	r3, [sp, #12]
 8012640:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8012644:	1ae4      	subs	r4, r4, r3
 8012646:	bf18      	it	ne
 8012648:	2401      	movne	r4, #1
 801264a:	a82d      	add	r0, sp, #180	@ 0xb4
 801264c:	f7ee fa48 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012650:	b1d4      	cbz	r4, 8012688 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x17c>
		Send(*response);
 8012652:	9903      	ldr	r1, [sp, #12]
 8012654:	a82a      	add	r0, sp, #168	@ 0xa8
 8012656:	f7fe fc7b 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801265a:	a92a      	add	r1, sp, #168	@ 0xa8
 801265c:	4640      	mov	r0, r8
 801265e:	f7fe fd67 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 8012662:	a82b      	add	r0, sp, #172	@ 0xac
 8012664:	f7ee fa3c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012668:	9b03      	ldr	r3, [sp, #12]
 801266a:	1d18      	adds	r0, r3, #4
 801266c:	f7fe f8c8 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012670:	a91e      	add	r1, sp, #120	@ 0x78
 8012672:	a82a      	add	r0, sp, #168	@ 0xa8
 8012674:	f7fe fc59 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012678:	aa2a      	add	r2, sp, #168	@ 0xa8
 801267a:	9903      	ldr	r1, [sp, #12]
 801267c:	4640      	mov	r0, r8
 801267e:	f7ff fbe3 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012682:	a82d      	add	r0, sp, #180	@ 0xb4
 8012684:	f7ee fa2c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012688:	a827      	add	r0, sp, #156	@ 0x9c
 801268a:	f7ee fa29 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801268e:	a821      	add	r0, sp, #132	@ 0x84
 8012690:	f7ee fa26 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012694:	a814      	add	r0, sp, #80	@ 0x50
 8012696:	e777      	b.n	8012588 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	uint8_t registered_type = GetTypeID<T>(&success);
 8012698:	4628      	mov	r0, r5
 801269a:	f7fd ff13 	bl	80104c4 <_ZN9Registers9GetTypeIDIaEEhPb.isra.0>
	if (!success) {
 801269e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80126a2:	9304      	str	r3, [sp, #16]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d09a      	beq.n	80125de <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->register_info.type != registered_type) {
 80126a8:	7923      	ldrb	r3, [r4, #4]
 80126aa:	4298      	cmp	r0, r3
 80126ac:	d197      	bne.n	80125de <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (callbacks[target_register->register_info.type] == NULL) {
 80126ae:	3004      	adds	r0, #4
 80126b0:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d092      	beq.n	80125de <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xd2>
	if (target_register->access.read) {
 80126b8:	7a63      	ldrb	r3, [r4, #9]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d031      	beq.n	8012722 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80126be:	8961      	ldrh	r1, [r4, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 80126c0:	f88d 90a8 	strb.w	r9, [sp, #168]	@ 0xa8
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 80126c4:	f7fe fbc2 	bl	8010e4c <_ZNSt6vectorI17RegisterCallbacksIaESaIS1_EE2atEj>
 80126c8:	e9d0 9300 	ldrd	r9, r3, [r0]
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	68c3      	ldr	r3, [r0, #12]
 80126d0:	461e      	mov	r6, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 80126d2:	68e3      	ldr	r3, [r4, #12]
 80126d4:	b123      	cbz	r3, 80126e0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1d4>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 80126d6:	f04f 31ff 	mov.w	r1, #4294967295
 80126da:	6818      	ldr	r0, [r3, #0]
 80126dc:	f7fa fba6 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 80126e0:	7863      	ldrb	r3, [r4, #1]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d161      	bne.n	80127aa <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x29e>
		if (not success && target_register->mode.pointer) {
 80126e6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80126ea:	b9ab      	cbnz	r3, 8012718 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
 80126ec:	7823      	ldrb	r3, [r4, #0]
 80126ee:	b19b      	cbz	r3, 8012718 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
			success = true;
 80126f0:	2301      	movs	r3, #1
 80126f2:	f88d 30a8 	strb.w	r3, [sp, #168]	@ 0xa8
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 80126f6:	7962      	ldrb	r2, [r4, #5]
 80126f8:	2a00      	cmp	r2, #0
 80126fa:	f000 8088 	beq.w	801280e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x302>
 80126fe:	88e1      	ldrh	r1, [r4, #6]
 8012700:	2900      	cmp	r1, #0
 8012702:	d17c      	bne.n	80127fe <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2f2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012704:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012708:	1a9b      	subs	r3, r3, r2
 801270a:	aa06      	add	r2, sp, #24
				*length = register_vector->size();
 801270c:	b29b      	uxth	r3, r3
 801270e:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 8012712:	b288      	uxth	r0, r1
 8012714:	4283      	cmp	r3, r0
 8012716:	d86b      	bhi.n	80127f0 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2e4>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012718:	68e3      	ldr	r3, [r4, #12]
 801271a:	b113      	cbz	r3, 8012722 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x216>
			osSemaphoreRelease(*(target_register->register_semaphore));
 801271c:	6818      	ldr	r0, [r3, #0]
 801271e:	f7fa fbb9 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8012722:	6838      	ldr	r0, [r7, #0]
 8012724:	f7fa fbb6 	bl	800ce94 <osSemaphoreRelease>

	if (not *success)
		return data;

	// Get vector of type T
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012728:	a924      	add	r1, sp, #144	@ 0x90
 801272a:	4628      	mov	r0, r5
 801272c:	f7fe fbfd 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012730:	2300      	movs	r3, #0
 8012732:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8012736:	930c      	str	r3, [sp, #48]	@ 0x30
	if (not element.element_register.isArray) {
 8012738:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 801273c:	2b00      	cmp	r3, #0
 801273e:	d16d      	bne.n	801281c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x310>
		vector = std::vector<T>{*data};
 8012740:	f89d 3018 	ldrb.w	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012744:	2001      	movs	r0, #1
 8012746:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801274a:	f7fd fe61 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 801274e:	f10d 0135 	add.w	r1, sp, #53	@ 0x35
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012752:	1c43      	adds	r3, r0, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012754:	4602      	mov	r2, r0
 8012756:	9010      	str	r0, [sp, #64]	@ 0x40
 8012758:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801275a:	9312      	str	r3, [sp, #72]	@ 0x48
 801275c:	f7ff fd02 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012760:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8012762:	9011      	str	r0, [sp, #68]	@ 0x44
 8012764:	a80a      	add	r0, sp, #40	@ 0x28
 8012766:	f7fe fab9 	bl	8010cdc <_ZNSt6vectorIaSaIaEEaSEOS1_.isra.0>
      }
 801276a:	a810      	add	r0, sp, #64	@ 0x40
 801276c:	f7fe faac 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8012770:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012772:	2400      	movs	r4, #0
      }
 8012774:	f7ee f9b4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>

	// transform it in vector of uint8_t
	data = BuildVector<T>(register_read_vector_cast);
 8012778:	a90a      	add	r1, sp, #40	@ 0x28
 801277a:	a810      	add	r0, sp, #64	@ 0x40
 801277c:	f7ff fcfe 	bl	801217c <_ZNSt6vectorIaSaIaEEC1ERKS1_>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012780:	940f      	str	r4, [sp, #60]	@ 0x3c
      : _M_current(__i) { }
 8012782:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	@ 0x40
 8012786:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
    for (T input : inputs) {
 801278a:	45b9      	cmp	r9, r7
 801278c:	d16f      	bne.n	801286e <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x362>
	data = BuildVector<T>(register_read_vector_cast);
 801278e:	a90d      	add	r1, sp, #52	@ 0x34
 8012790:	a807      	add	r0, sp, #28
 8012792:	f7fe f81e 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012796:	a80d      	add	r0, sp, #52	@ 0x34
 8012798:	f7ee f9a2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801279c:	a810      	add	r0, sp, #64	@ 0x40
 801279e:	f7fe fa93 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80127a2:	a80a      	add	r0, sp, #40	@ 0x28
 80127a4:	f7fe fa90 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80127a8:	e71e      	b.n	80125e8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0xdc>
				*callback_output = output;
 80127aa:	2200      	movs	r2, #0
 80127ac:	ab06      	add	r3, sp, #24
 80127ae:	6013      	str	r3, [r2, #0]
			if (callbacks.read != NULL) {
 80127b0:	2e00      	cmp	r6, #0
 80127b2:	d098      	beq.n	80126e6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 80127b4:	f10d 031a 	add.w	r3, sp, #26
 80127b8:	4659      	mov	r1, fp
 80127ba:	9805      	ldr	r0, [sp, #20]
 80127bc:	47b0      	blx	r6
 80127be:	f88d 00a8 	strb.w	r0, [sp, #168]	@ 0xa8
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 80127c2:	7963      	ldrb	r3, [r4, #5]
 80127c4:	b143      	cbz	r3, 80127d8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2cc>
 80127c6:	88e3      	ldrh	r3, [r4, #6]
 80127c8:	b10b      	cbz	r3, 80127ce <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2c2>
					*length = 1;
 80127ca:	f8ad 301a 	strh.w	r3, [sp, #26]
					for (uint16_t index = 0; index < *length; index++) {
 80127ce:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80127d2:	a906      	add	r1, sp, #24
 80127d4:	2300      	movs	r3, #0
 80127d6:	e007      	b.n	80127e8 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2dc>
					*length = 1;
 80127d8:	2301      	movs	r3, #1
 80127da:	e7f6      	b.n	80127ca <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2be>
						output[index] = (*callback_output )[index];
 80127dc:	2200      	movs	r2, #0
 80127de:	6812      	ldr	r2, [r2, #0]
 80127e0:	5cd2      	ldrb	r2, [r2, r3]
 80127e2:	3301      	adds	r3, #1
 80127e4:	f801 2b01 	strb.w	r2, [r1], #1
					for (uint16_t index = 0; index < *length; index++) {
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	4290      	cmp	r0, r2
 80127ec:	d8f6      	bhi.n	80127dc <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x2d0>
 80127ee:	e77a      	b.n	80126e6 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x1da>
						output[index] = (*register_vector)[index];
 80127f0:	f8d9 0000 	ldr.w	r0, [r9]
 80127f4:	5640      	ldrsb	r0, [r0, r1]
 80127f6:	3101      	adds	r1, #1
 80127f8:	f802 0b01 	strb.w	r0, [r2], #1
					for (uint16_t index = 0; index < *length; index++) {
 80127fc:	e789      	b.n	8012712 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x206>
				*length = target_register->register_info.length;
 80127fe:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012802:	aa06      	add	r2, sp, #24
 8012804:	4449      	add	r1, r9
 8012806:	4648      	mov	r0, r9
 8012808:	f7ff fcac 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801280c:	e784      	b.n	8012718 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
				*length = 1;
 801280e:	f8ad 301a 	strh.w	r3, [sp, #26]
					*output = *callbacks.pointer;
 8012812:	f999 3000 	ldrsb.w	r3, [r9]
 8012816:	f88d 3018 	strb.w	r3, [sp, #24]
 801281a:	e77d      	b.n	8012718 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x20c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 801281c:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	@ 0xac
 8012820:	b154      	cbz	r4, 8012838 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x32c>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012822:	4620      	mov	r0, r4
 8012824:	f7fd fdf4 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012828:	1903      	adds	r3, r0, r4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801282a:	4602      	mov	r2, r0
 801282c:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801282e:	9312      	str	r3, [sp, #72]	@ 0x48
			      _Category>::__copy_m(__first, __last, __result);
 8012830:	ab06      	add	r3, sp, #24
 8012832:	1919      	adds	r1, r3, r4
 8012834:	4618      	mov	r0, r3
 8012836:	e791      	b.n	801275c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x250>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012838:	e9dd 9b06 	ldrd	r9, fp, [sp, #24]
	  if (__xlen > capacity())
 801283c:	ebbb 0709 	subs.w	r7, fp, r9
 8012840:	d00f      	beq.n	8012862 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x356>
	  pointer __result = this->_M_allocate(__n);
 8012842:	4638      	mov	r0, r7
 8012844:	f7fd fde4 	bl	8010410 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8012848:	4604      	mov	r4, r0
 801284a:	4602      	mov	r2, r0
 801284c:	4659      	mov	r1, fp
 801284e:	4648      	mov	r0, r9
 8012850:	f7ff fc88 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012854:	940a      	str	r4, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012856:	443c      	add	r4, r7
 8012858:	940c      	str	r4, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801285a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801285c:	443b      	add	r3, r7
 801285e:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012860:	e786      	b.n	8012770 <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x264>
 8012862:	463a      	mov	r2, r7
 8012864:	4659      	mov	r1, fp
 8012866:	4648      	mov	r0, r9
 8012868:	f7ff fc7c 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801286c:	e7f5      	b.n	801285a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x34e>
    for (T input : inputs) {
 801286e:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8012872:	f10d 0119 	add.w	r1, sp, #25
 8012876:	4628      	mov	r0, r5
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012878:	942c      	str	r4, [sp, #176]	@ 0xb0
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 801287a:	f88d 3019 	strb.w	r3, [sp, #25]
 801287e:	e9cd 442a 	strd	r4, r4, [sp, #168]	@ 0xa8
      { emplace_back(std::move(__x)); }
 8012882:	f7fe fa6d 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
        data.insert(data.end(), single.begin(), single.end());
 8012886:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012888:	a80d      	add	r0, sp, #52	@ 0x34
 801288a:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 801288e:	f7ff fa67 	bl	8011d60 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8012892:	4628      	mov	r0, r5
 8012894:	f7ee f924 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 8012898:	e777      	b.n	801278a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x27e>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 801289a:	2400      	movs	r4, #0
 801289c:	e6d5      	b.n	801264a <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt+0x13e>

0801289e <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801289e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128a0:	461c      	mov	r4, r3
 80128a2:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 80128a4:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 80128a6:	4605      	mov	r5, r0
 80128a8:	4617      	mov	r7, r2
 80128aa:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 80128ae:	b9cb      	cbnz	r3, 80128e4 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x46>
 80128b0:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 80128b2:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 80128b4:	b323      	cbz	r3, 8012900 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 80128b6:	f7fe fb4b 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 80128ba:	4621      	mov	r1, r4
 80128bc:	a808      	add	r0, sp, #32
 80128be:	f7fe fb34 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 80128c2:	ab08      	add	r3, sp, #32
 80128c4:	463a      	mov	r2, r7
 80128c6:	a903      	add	r1, sp, #12
 80128c8:	4628      	mov	r0, r5
 80128ca:	9600      	str	r6, [sp, #0]
 80128cc:	f7ff fe1e 	bl	801250c <_ZN13Communication14ProcessCommandIaEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 80128d0:	4604      	mov	r4, r0
 80128d2:	a80b      	add	r0, sp, #44	@ 0x2c
 80128d4:	f7ee f904 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80128d8:	a804      	add	r0, sp, #16
 80128da:	f7ee f901 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80128de:	4620      	mov	r0, r4
 80128e0:	b00f      	add	sp, #60	@ 0x3c
 80128e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 80128e4:	a803      	add	r0, sp, #12
 80128e6:	f7fe fb33 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 80128ea:	4621      	mov	r1, r4
 80128ec:	a808      	add	r0, sp, #32
 80128ee:	f7fe fb1c 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 80128f2:	4633      	mov	r3, r6
 80128f4:	aa08      	add	r2, sp, #32
 80128f6:	a903      	add	r1, sp, #12
 80128f8:	4628      	mov	r0, r5
 80128fa:	f7ff f8bc 	bl	8011a76 <_ZN13Communication14ProcessServiceIaEEt13MessageHeader14MessageElementt>
 80128fe:	e7e7      	b.n	80128d0 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8012900:	f7fe fb26 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012904:	4621      	mov	r1, r4
 8012906:	a808      	add	r0, sp, #32
 8012908:	f7fe fb0f 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 801290c:	4633      	mov	r3, r6
 801290e:	aa08      	add	r2, sp, #32
 8012910:	a903      	add	r1, sp, #12
 8012912:	4628      	mov	r0, r5
 8012914:	f7fe ffd3 	bl	80118be <_ZN13Communication17ProcessSubscriberIaEEt13MessageHeader14MessageElementt>
 8012918:	e7da      	b.n	80128d0 <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt+0x32>

0801291a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>:
 801291a:	4603      	mov	r3, r0
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 801291c:	b510      	push	{r4, lr}
	  if (__n > 0)
 801291e:	b179      	cbz	r1, 8012940 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
 8012920:	2200      	movs	r2, #0
      if (__n <= 0)
 8012922:	1e4c      	subs	r4, r1, #1
 8012924:	f843 2b04 	str.w	r2, [r3], #4
 8012928:	d00a      	beq.n	8012940 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_+0x26>
      std::__fill_a(__first, __first + __n, __value);
 801292a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	*__first = __tmp;
 801292e:	2100      	movs	r1, #0
 8012930:	1a24      	subs	r4, r4, r0
 8012932:	4618      	mov	r0, r3
 8012934:	3c04      	subs	r4, #4
 8012936:	4622      	mov	r2, r4
 8012938:	f00b f8b2 	bl	801daa0 <memset>
 801293c:	4603      	mov	r3, r0
 801293e:	4423      	add	r3, r4
	}
 8012940:	4618      	mov	r0, r3
 8012942:	bd10      	pop	{r4, pc}

08012944 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8012944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012948:	4604      	mov	r4, r0
      if (__n != 0)
 801294a:	460e      	mov	r6, r1
 801294c:	b171      	cbz	r1, 801296c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
					 - this->_M_impl._M_finish);
 801294e:	6883      	ldr	r3, [r0, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012950:	e9d0 8200 	ldrd	r8, r2, [r0]
 8012954:	1a9b      	subs	r3, r3, r2
 8012956:	eba2 0a08 	sub.w	sl, r2, r8
	  if (__navail >= __n)
 801295a:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 801295e:	ea4f 07aa 	mov.w	r7, sl, asr #2
 8012962:	d805      	bhi.n	8012970 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2c>
	__uninit_default_n(__first, __n);
 8012964:	4610      	mov	r0, r2
 8012966:	f7ff ffd8 	bl	801291a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
	      this->_M_impl._M_finish =
 801296a:	6060      	str	r0, [r4, #4]
    }
 801296c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		_M_check_len(__n, "vector::_M_default_append");
 8012970:	4a12      	ldr	r2, [pc, #72]	@ (80129bc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x78>)
 8012972:	f7fe fa96 	bl	8010ea2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8012976:	4681      	mov	r9, r0
	      pointer __new_start(this->_M_allocate(__len));
 8012978:	f7fd fd38 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 801297c:	4631      	mov	r1, r6
 801297e:	4605      	mov	r5, r0
 8012980:	4450      	add	r0, sl
 8012982:	f7ff ffca 	bl	801291a <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPfjEET_S3_T0_>
      if (__count > 0)
 8012986:	f1ba 0f00 	cmp.w	sl, #0
 801298a:	d00b      	beq.n	80129a4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801298c:	4652      	mov	r2, sl
 801298e:	4641      	mov	r1, r8
 8012990:	4628      	mov	r0, r5
 8012992:	f00b f86b 	bl	801da6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8012996:	68a1      	ldr	r1, [r4, #8]
 8012998:	4640      	mov	r0, r8
 801299a:	eba1 0108 	sub.w	r1, r1, r8
 801299e:	f00a f8c3 	bl	801cb28 <_ZdlPvj>
      }
 80129a2:	e002      	b.n	80129aa <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x66>
	if (__p)
 80129a4:	f1b8 0f00 	cmp.w	r8, #0
 80129a8:	d1f5      	bne.n	8012996 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80129aa:	4437      	add	r7, r6
	      this->_M_impl._M_start = __new_start;
 80129ac:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80129ae:	eb05 0787 	add.w	r7, r5, r7, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80129b2:	eb05 0589 	add.w	r5, r5, r9, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 80129b6:	6067      	str	r7, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80129b8:	60a5      	str	r5, [r4, #8]
    }
 80129ba:	e7d7      	b.n	801296c <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x28>
 80129bc:	0801dffe 	.word	0x0801dffe

080129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	  if (_Num)
 80129c0:	4281      	cmp	r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80129c2:	4613      	mov	r3, r2
 80129c4:	b510      	push	{r4, lr}
	  const ptrdiff_t _Num = __last - __first;
 80129c6:	eba1 0400 	sub.w	r4, r1, r0
	  if (_Num)
 80129ca:	d005      	beq.n	80129d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80129cc:	4601      	mov	r1, r0
 80129ce:	4622      	mov	r2, r4
 80129d0:	4618      	mov	r0, r3
 80129d2:	f00b f84b 	bl	801da6c <memmove>
 80129d6:	4603      	mov	r3, r0
	}
 80129d8:	1918      	adds	r0, r3, r4
 80129da:	bd10      	pop	{r4, pc}

080129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80129dc:	b570      	push	{r4, r5, r6, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129de:	e9d1 3600 	ldrd	r3, r6, [r1]
      vector(const vector& __x)
 80129e2:	4604      	mov	r4, r0
 80129e4:	460d      	mov	r5, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80129e6:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80129e8:	2300      	movs	r3, #0
 80129ea:	e9c0 3300 	strd	r3, r3, [r0]
 80129ee:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80129f0:	10b0      	asrs	r0, r6, #2
 80129f2:	f7fd fcfb 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80129f6:	4406      	add	r6, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80129f8:	4602      	mov	r2, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80129fa:	60a6      	str	r6, [r4, #8]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80129fc:	e9c4 0000 	strd	r0, r0, [r4]
			      _Category>::__copy_m(__first, __last, __result);
 8012a00:	e9d5 0100 	ldrd	r0, r1, [r5]
 8012a04:	f7ff ffdc 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	this->_M_impl._M_finish =
 8012a08:	6060      	str	r0, [r4, #4]
      }
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	bd70      	pop	{r4, r5, r6, pc}

08012a0e <_ZN9Registers13WriteRegisterIfEEbtPT_tb>:
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a12:	b085      	sub	sp, #20
 8012a14:	4606      	mov	r6, r0
 8012a16:	4688      	mov	r8, r1
 8012a18:	461f      	mov	r7, r3
 8012a1a:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8012a22:	6800      	ldr	r0, [r0, #0]
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012a24:	4615      	mov	r5, r2
 8012a26:	9301      	str	r3, [sp, #4]
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012a28:	f7fa fa00 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a2c:	f10d 020f 	add.w	r2, sp, #15
 8012a30:	4641      	mov	r1, r8
 8012a32:	4630      	mov	r0, r6
 8012a34:	f005 fe69 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012a38:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012a3c:	4604      	mov	r4, r0
	if (!success) {
 8012a3e:	b933      	cbnz	r3, 8012a4e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x40>
		osSemaphoreRelease(RegistersSemaphore);
 8012a40:	6830      	ldr	r0, [r6, #0]
 8012a42:	f7fa fa27 	bl	800ce94 <osSemaphoreRelease>
		return false;
 8012a46:	2000      	movs	r0, #0
}
 8012a48:	b005      	add	sp, #20
 8012a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8012a4e:	f10d 000f 	add.w	r0, sp, #15
 8012a52:	f7fd fce9 	bl	8010428 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8012a56:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d0f0      	beq.n	8012a40 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->register_info.type != registered_type) {
 8012a5e:	7923      	ldrb	r3, [r4, #4]
 8012a60:	4283      	cmp	r3, r0
 8012a62:	d1ed      	bne.n	8012a40 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (callbacks[target_register->register_info.type] == NULL) {
 8012a64:	3304      	adds	r3, #4
 8012a66:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	d0e8      	beq.n	8012a40 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
	if (target_register->access.write) {
 8012a6e:	7a23      	ldrb	r3, [r4, #8]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d0e5      	beq.n	8012a40 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x32>
		success = false;
 8012a74:	2300      	movs	r3, #0
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a76:	8961      	ldrh	r1, [r4, #10]
		success = false;
 8012a78:	f88d 300f 	strb.w	r3, [sp, #15]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a7c:	f7fd f8bc 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012a80:	9b01      	ldr	r3, [sp, #4]
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8012a82:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8012a86:	e9d0 ba00 	ldrd	fp, sl, [r0]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012a8a:	b133      	cbz	r3, 8012a9a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
 8012a8c:	68e3      	ldr	r3, [r4, #12]
 8012a8e:	b123      	cbz	r3, 8012a9a <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x8c>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8012a90:	f04f 31ff 	mov.w	r1, #4294967295
 8012a94:	6818      	ldr	r0, [r3, #0]
 8012a96:	f7fa f9c9 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.pointer) {
 8012a9a:	7823      	ldrb	r3, [r4, #0]
 8012a9c:	b1eb      	cbz	r3, 8012ada <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
			success = true;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012aa4:	7963      	ldrb	r3, [r4, #5]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d04d      	beq.n	8012b46 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x138>
 8012aaa:	88e1      	ldrh	r1, [r4, #6]
 8012aac:	2900      	cmp	r1, #0
 8012aae:	d143      	bne.n	8012b38 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x12a>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012ab0:	e9db 3100 	ldrd	r3, r1, [fp]
 8012ab4:	428b      	cmp	r3, r1
	    this->_M_impl._M_finish = __pos;
 8012ab6:	bf18      	it	ne
 8012ab8:	f8cb 3004 	strne.w	r3, [fp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012abc:	f8db 0004 	ldr.w	r0, [fp, #4]
 8012ac0:	1ac1      	subs	r1, r0, r3
 8012ac2:	1089      	asrs	r1, r1, #2
	if (__new_size > size())
 8012ac4:	428f      	cmp	r7, r1
 8012ac6:	d925      	bls.n	8012b14 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x106>
	  _M_default_append(__new_size - size());
 8012ac8:	1a79      	subs	r1, r7, r1
 8012aca:	4658      	mov	r0, fp
 8012acc:	f7ff ff3a 	bl	8012944 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
 8012ad0:	4628      	mov	r0, r5
bool Registers::WriteRegister(uint16_t ID, T* value, uint16_t length, bool use_semaphore) {
 8012ad2:	2300      	movs	r3, #0
				for (uint16_t index = 0; index < length; index++) {
 8012ad4:	b299      	uxth	r1, r3
 8012ad6:	42b9      	cmp	r1, r7
 8012ad8:	d324      	bcc.n	8012b24 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x116>
		if (target_register->mode.callbacks) {
 8012ada:	7863      	ldrb	r3, [r4, #1]
 8012adc:	b16b      	cbz	r3, 8012afa <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
			if (callbacks.write != NULL) {
 8012ade:	f1b9 0f00 	cmp.w	r9, #0
 8012ae2:	d00a      	beq.n	8012afa <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xec>
				if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8012ae4:	7963      	ldrb	r3, [r4, #5]
 8012ae6:	b393      	cbz	r3, 8012b4e <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x140>
 8012ae8:	88e3      	ldrh	r3, [r4, #6]
 8012aea:	b903      	cbnz	r3, 8012aee <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>
					success = callbacks.write(callbacks.context, ID, value, length);
 8012aec:	463b      	mov	r3, r7
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012aee:	462a      	mov	r2, r5
 8012af0:	4641      	mov	r1, r8
 8012af2:	4650      	mov	r0, sl
 8012af4:	47c8      	blx	r9
 8012af6:	f88d 000f 	strb.w	r0, [sp, #15]
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8012afa:	9b01      	ldr	r3, [sp, #4]
 8012afc:	b123      	cbz	r3, 8012b08 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
 8012afe:	68e3      	ldr	r3, [r4, #12]
 8012b00:	b113      	cbz	r3, 8012b08 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xfa>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	f7fa f9c6 	bl	800ce94 <osSemaphoreRelease>
		osSemaphoreRelease(RegistersSemaphore);
 8012b08:	6830      	ldr	r0, [r6, #0]
 8012b0a:	f7fa f9c3 	bl	800ce94 <osSemaphoreRelease>
		return success;
 8012b0e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8012b12:	e799      	b.n	8012a48 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0x3a>
	else if (__new_size < size())
 8012b14:	d2dc      	bcs.n	8012ad0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8012b16:	eb03 0387 	add.w	r3, r3, r7, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8012b1a:	4298      	cmp	r0, r3
 8012b1c:	d0d8      	beq.n	8012ad0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
	    this->_M_impl._M_finish = __pos;
 8012b1e:	f8cb 3004 	str.w	r3, [fp, #4]
 8012b22:	e7d5      	b.n	8012ad0 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc2>
					(*register_vector)[index] = value[index];
 8012b24:	f8db 1000 	ldr.w	r1, [fp]
 8012b28:	f850 cb04 	ldr.w	ip, [r0], #4
 8012b2c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012b30:	3301      	adds	r3, #1
 8012b32:	f8c1 c000 	str.w	ip, [r1]
				for (uint16_t index = 0; index < length; index++) {
 8012b36:	e7cd      	b.n	8012ad4 <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xc6>
 8012b38:	465a      	mov	r2, fp
 8012b3a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f7ff ff3e 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012b44:	e7c9      	b.n	8012ada <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
				*(callbacks.pointer) = *value;
 8012b46:	682b      	ldr	r3, [r5, #0]
 8012b48:	f8cb 3000 	str.w	r3, [fp]
 8012b4c:	e7c5      	b.n	8012ada <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xcc>
					success = callbacks.write(callbacks.context, ID, value, 1);
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e7cd      	b.n	8012aee <_ZN9Registers13WriteRegisterIfEEbtPT_tb+0xe0>

08012b52 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>:
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b56:	b091      	sub	sp, #68	@ 0x44
 8012b58:	4605      	mov	r5, r0
 8012b5a:	4691      	mov	r9, r2
 8012b5c:	4608      	mov	r0, r1
 8012b5e:	af02      	add	r7, sp, #8
 8012b60:	469a      	mov	sl, r3
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012b62:	3104      	adds	r1, #4
uint16_t Communication::ProcessWrite(MessageHeader message, MessageHeader* response, MessageElement response_content, MessageElement element, uint16_t start_index) {
 8012b64:	f8d7 b060 	ldr.w	fp, [r7, #96]	@ 0x60
 8012b68:	f107 060b 	add.w	r6, r7, #11
 8012b6c:	f8b7 4064 	ldrh.w	r4, [r7, #100]	@ 0x64
	if (not element.element_register.isArray) {
 8012b70:	f89b 8003 	ldrb.w	r8, [fp, #3]
 8012b74:	f1b8 0f00 	cmp.w	r8, #0
 8012b78:	d177      	bne.n	8012c6a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x118>
		T value = ExtractSingle<T>(message.payload, start_index, &success);
 8012b7a:	f107 0020 	add.w	r0, r7, #32
 8012b7e:	f7ee f85f 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012b82:	4632      	mov	r2, r6
 8012b84:	4621      	mov	r1, r4
 8012b86:	f107 0020 	add.w	r0, r7, #32
 8012b8a:	f7fd fce9 	bl	8010560 <_ZN13Communication13ExtractSingleIfEET_St6vectorIhSaIhEEtPb.isra.0>
      }
 8012b8e:	f107 0020 	add.w	r0, r7, #32
 8012b92:	ed87 0a05 	vstr	s0, [r7, #20]
 8012b96:	f7ed ffa3 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012b9a:	7afb      	ldrb	r3, [r7, #11]
 8012b9c:	b153      	cbz	r3, 8012bb4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x62>
			success = registers->WriteRegister<T>(element.element_register.address, &value);
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	f8bb 1000 	ldrh.w	r1, [fp]
 8012ba4:	f107 0214 	add.w	r2, r7, #20
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	4643      	mov	r3, r8
 8012bac:	6868      	ldr	r0, [r5, #4]
 8012bae:	f7ff ff2e 	bl	8012a0e <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012bb2:	72f8      	strb	r0, [r7, #11]
		length_to_extract = 1;
 8012bb4:	f04f 0801 	mov.w	r8, #1
	if (success)
 8012bb8:	7afb      	ldrb	r3, [r7, #11]
		response_content.data = std::vector<uint8_t>{OK};
 8012bba:	f10a 060c 	add.w	r6, sl, #12
 8012bbe:	f107 0214 	add.w	r2, r7, #20
 8012bc2:	f107 010c 	add.w	r1, r7, #12
	if (success)
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 80d0 	beq.w	8012d6c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x21a>
		response_content.data = std::vector<uint8_t>{OK};
 8012bcc:	2300      	movs	r3, #0
 8012bce:	723b      	strb	r3, [r7, #8]
 8012bd0:	f107 0308 	add.w	r3, r7, #8
 8012bd4:	60fb      	str	r3, [r7, #12]
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	613b      	str	r3, [r7, #16]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	c906      	ldmia	r1, {r1, r2}
		response_content.data = std::vector<uint8_t>{ERROR};
 8012bde:	f107 0020 	add.w	r0, r7, #32
 8012be2:	f7ee f8d1 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012be6:	f107 0120 	add.w	r1, r7, #32
 8012bea:	4630      	mov	r0, r6
 8012bec:	f7fd fdf1 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012bf0:	f107 0020 	add.w	r0, r7, #32
 8012bf4:	f7ed ff74 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content)) {
 8012bf8:	4651      	mov	r1, sl
 8012bfa:	f107 0020 	add.w	r0, r7, #32
 8012bfe:	f7fe f994 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012c02:	f107 0220 	add.w	r2, r7, #32
 8012c06:	4649      	mov	r1, r9
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f7ff f91d 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012c0e:	4606      	mov	r6, r0
 8012c10:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012c14:	f7ed ff64 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012c18:	bb06      	cbnz	r6, 8012c5c <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x10a>
		Send(*response);
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	f107 0020 	add.w	r0, r7, #32
 8012c20:	f7fe f996 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012c24:	f107 0120 	add.w	r1, r7, #32
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f7fe fa81 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 8012c2e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012c32:	f7ed ff55 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012c36:	f109 0004 	add.w	r0, r9, #4
 8012c3a:	f7fd fde1 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012c3e:	4651      	mov	r1, sl
 8012c40:	f107 0020 	add.w	r0, r7, #32
 8012c44:	f7fe f971 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012c48:	f107 0220 	add.w	r2, r7, #32
 8012c4c:	4649      	mov	r1, r9
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f7ff f8fa 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012c54:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8012c58:	f7ed ff42 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return start_index + sizeof(T) * length_to_extract;
 8012c5c:	eb04 0088 	add.w	r0, r4, r8, lsl #2
}
 8012c60:	373c      	adds	r7, #60	@ 0x3c
 8012c62:	b280      	uxth	r0, r0
 8012c64:	46bd      	mov	sp, r7
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (element.element_register.isArray && element.element_register.length > 0) {
 8012c6a:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8012c6e:	f1b8 0f00 	cmp.w	r8, #0
 8012c72:	d02a      	beq.n	8012cca <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x178>
		T values[length_to_extract];
 8012c74:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8012c78:	466a      	mov	r2, sp
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012c7a:	f8c7 d000 	str.w	sp, [r7]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012c7e:	f107 0020 	add.w	r0, r7, #32
		T values[length_to_extract];
 8012c82:	3307      	adds	r3, #7
 8012c84:	08db      	lsrs	r3, r3, #3
 8012c86:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
 8012c8a:	469d      	mov	sp, r3
 8012c8c:	ab02      	add	r3, sp, #8
 8012c8e:	607b      	str	r3, [r7, #4]
		ExtractArray<T>(values, message.payload, start_index, length_to_extract, &success);
 8012c90:	f7ed ffd6 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012c94:	9600      	str	r6, [sp, #0]
 8012c96:	4643      	mov	r3, r8
 8012c98:	4622      	mov	r2, r4
 8012c9a:	f107 0120 	add.w	r1, r7, #32
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7fe fb3c 	bl	801131c <_ZN13Communication12ExtractArrayIfEEvPT_St6vectorIhSaIhEEttPb.isra.0>
 8012ca4:	f107 0020 	add.w	r0, r7, #32
 8012ca8:	f7ed ff1a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012cac:	7afb      	ldrb	r3, [r7, #11]
 8012cae:	b14b      	cbz	r3, 8012cc4 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x172>
			success = registers->WriteRegister<T>(element.element_register.address, values);
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	f8bb 1000 	ldrh.w	r1, [fp]
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	2300      	movs	r3, #0
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	6868      	ldr	r0, [r5, #4]
 8012cbe:	f7ff fea6 	bl	8012a0e <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012cc2:	72f8      	strb	r0, [r7, #11]
 8012cc4:	f8d7 d000 	ldr.w	sp, [r7]
	} else if (element.element_register.isArray && element.element_register.length == 0) {
 8012cc8:	e776      	b.n	8012bb8 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
		length_to_extract = message.payload[start_index];
 8012cca:	6843      	ldr	r3, [r0, #4]
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012ccc:	f107 0020 	add.w	r0, r7, #32
		length_to_extract = message.payload[start_index];
 8012cd0:	f813 8004 	ldrb.w	r8, [r3, r4]
		start_index++;
 8012cd4:	3401      	adds	r4, #1
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012cd6:	f7ed ffb3 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8012cda:	f107 0120 	add.w	r1, r7, #32
		start_index++;
 8012cde:	b2a4      	uxth	r4, r4
		std::vector<T> values = ExtractVector<T> (message.payload, start_index, length_to_extract, &success);
 8012ce0:	4643      	mov	r3, r8
 8012ce2:	f107 0014 	add.w	r0, r7, #20
 8012ce6:	9600      	str	r6, [sp, #0]
 8012ce8:	4622      	mov	r2, r4
 8012cea:	f7fe fab9 	bl	8011260 <_ZN13Communication13ExtractVectorIfEESt6vectorIT_SaIS2_EES1_IhSaIhEEttPb.isra.0>
 8012cee:	f107 0020 	add.w	r0, r7, #32
 8012cf2:	f7ed fef5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (success)
 8012cf6:	7afb      	ldrb	r3, [r7, #11]
 8012cf8:	b1fb      	cbz	r3, 8012d3a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1e8>
			success = registers->WriteVectorRegister<T>(element.element_register.address, values); // previously &values
 8012cfa:	686e      	ldr	r6, [r5, #4]
 8012cfc:	f107 0114 	add.w	r1, r7, #20
 8012d00:	f8bb b000 	ldrh.w	fp, [fp]
 8012d04:	f107 0020 	add.w	r0, r7, #32
 8012d08:	f7ff fe68 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8012d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8012d10:	6830      	ldr	r0, [r6, #0]
 8012d12:	f7fa f88b 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012d16:	f107 020c 	add.w	r2, r7, #12
 8012d1a:	4659      	mov	r1, fp
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	f005 fcf4 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8012d22:	7b3a      	ldrb	r2, [r7, #12]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8012d24:	4603      	mov	r3, r0
		osSemaphoreRelease(RegistersSemaphore);
 8012d26:	6830      	ldr	r0, [r6, #0]
	if (!success) {
 8012d28:	b962      	cbnz	r2, 8012d44 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1f2>
		osSemaphoreRelease(RegistersSemaphore);
 8012d2a:	f7fa f8b3 	bl	800ce94 <osSemaphoreRelease>
		return false;
 8012d2e:	2000      	movs	r0, #0
 8012d30:	72f8      	strb	r0, [r7, #11]
 8012d32:	f107 0020 	add.w	r0, r7, #32
 8012d36:	f7ef f931 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012d3a:	f107 0014 	add.w	r0, r7, #20
 8012d3e:	f7ef f92d 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012d42:	e739      	b.n	8012bb8 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x66>
	if (!(target_register->register_info.isArray && target_register->register_info.length == 0)) {
 8012d44:	795a      	ldrb	r2, [r3, #5]
 8012d46:	2a00      	cmp	r2, #0
 8012d48:	d0ef      	beq.n	8012d2a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
 8012d4a:	88db      	ldrh	r3, [r3, #6]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d1ec      	bne.n	8012d2a <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1d8>
	osSemaphoreRelease(RegistersSemaphore);
 8012d50:	f7fa f8a0 	bl	800ce94 <osSemaphoreRelease>
	return WriteRegister(ID, value.data(), value.size(), use_semaphore);
 8012d54:	2101      	movs	r1, #1
 8012d56:	4630      	mov	r0, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012d58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012d5c:	9100      	str	r1, [sp, #0]
 8012d5e:	4659      	mov	r1, fp
 8012d60:	1a9b      	subs	r3, r3, r2
 8012d62:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8012d66:	f7ff fe52 	bl	8012a0e <_ZN9Registers13WriteRegisterIfEEbtPT_tb>
 8012d6a:	e7e1      	b.n	8012d30 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x1de>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012d6c:	23ff      	movs	r3, #255	@ 0xff
 8012d6e:	723b      	strb	r3, [r7, #8]
 8012d70:	f107 0308 	add.w	r3, r7, #8
 8012d74:	617b      	str	r3, [r7, #20]
 8012d76:	2301      	movs	r3, #1
 8012d78:	61bb      	str	r3, [r7, #24]
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	ca06      	ldmia	r2, {r1, r2}
 8012d7e:	e72e      	b.n	8012bde <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t+0x8c>

08012d80 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	468b      	mov	fp, r1
 8012d86:	b0b1      	sub	sp, #196	@ 0xc4
 8012d88:	4607      	mov	r7, r0
 8012d8a:	4698      	mov	r8, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012d8c:	2600      	movs	r6, #0
	response_content.ack = true;
 8012d8e:	f04f 0a01 	mov.w	sl, #1
uint16_t Communication::ProcessCommand(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8012d92:	4615      	mov	r5, r2
 8012d94:	f8bd 90e8 	ldrh.w	r9, [sp, #232]	@ 0xe8
 8012d98:	961d      	str	r6, [sp, #116]	@ 0x74
 8012d9a:	ac2a      	add	r4, sp, #168	@ 0xa8
	response_content.ack = true;
 8012d9c:	f8ad a066 	strh.w	sl, [sp, #102]	@ 0x66
	response_content.element_register = element.element_register;
 8012da0:	e9d3 0100 	ldrd	r0, r1, [r3]
	response_content.access = element.access;
 8012da4:	7a1b      	ldrb	r3, [r3, #8]
	response_content.element_register = element.element_register;
 8012da6:	9018      	str	r0, [sp, #96]	@ 0x60
 8012da8:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
	CommunicationLED(leds, message.interface);
 8012dac:	6938      	ldr	r0, [r7, #16]
 8012dae:	f89b 1000 	ldrb.w	r1, [fp]
	response_content.access = element.access;
 8012db2:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 8012db6:	e9cd 661b 	strd	r6, r6, [sp, #108]	@ 0x6c
	CommunicationLED(leds, message.interface);
 8012dba:	f7fc f94b 	bl	800f054 <_Z16CommunicationLEDP4LEDSh>
	if (element.access == WRITE) {
 8012dbe:	f898 3008 	ldrb.w	r3, [r8, #8]
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012dc2:	4659      	mov	r1, fp
	if (element.access == WRITE) {
 8012dc4:	bb1b      	cbnz	r3, 8012e0e <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x8e>
		return ProcessWrite<T>(message, response, response_content, element, start_index);
 8012dc6:	a81e      	add	r0, sp, #120	@ 0x78
 8012dc8:	f7fe f8c2 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012dcc:	a918      	add	r1, sp, #96	@ 0x60
 8012dce:	a824      	add	r0, sp, #144	@ 0x90
 8012dd0:	f7fe f8ab 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012dd4:	4641      	mov	r1, r8
 8012dd6:	4620      	mov	r0, r4
 8012dd8:	f7fe f8a7 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012ddc:	ab24      	add	r3, sp, #144	@ 0x90
 8012dde:	462a      	mov	r2, r5
 8012de0:	a91e      	add	r1, sp, #120	@ 0x78
 8012de2:	4638      	mov	r0, r7
 8012de4:	e9cd 4900 	strd	r4, r9, [sp]
 8012de8:	f7ff feb3 	bl	8012b52 <_ZN13Communication12ProcessWriteIfEEt13MessageHeaderPS1_14MessageElementS3_t>
 8012dec:	4681      	mov	r9, r0
      }
 8012dee:	a82d      	add	r0, sp, #180	@ 0xb4
 8012df0:	f7ed fe76 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012df4:	a827      	add	r0, sp, #156	@ 0x9c
 8012df6:	f7ed fe73 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012dfa:	a81f      	add	r0, sp, #124	@ 0x7c
 8012dfc:	f7ed fe70 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012e00:	a81b      	add	r0, sp, #108	@ 0x6c
 8012e02:	f7ed fe6d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8012e06:	4648      	mov	r0, r9
 8012e08:	b031      	add	sp, #196	@ 0xc4
 8012e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ProcessRead<T>(message, response, response_content, element, start_index);
 8012e0e:	a813      	add	r0, sp, #76	@ 0x4c
 8012e10:	f7fe f89e 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012e14:	a918      	add	r1, sp, #96	@ 0x60
 8012e16:	a81e      	add	r0, sp, #120	@ 0x78
 8012e18:	f7fe f887 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012e1c:	4641      	mov	r1, r8
 8012e1e:	a824      	add	r0, sp, #144	@ 0x90
 8012e20:	f7fe f883 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 8012e24:	f8cd a000 	str.w	sl, [sp]
 8012e28:	f10d 0316 	add.w	r3, sp, #22
 8012e2c:	aa06      	add	r2, sp, #24
 8012e2e:	f8bd 1090 	ldrh.w	r1, [sp, #144]	@ 0x90
 8012e32:	6878      	ldr	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e34:	9609      	str	r6, [sp, #36]	@ 0x24
 8012e36:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8012e3a:	f7fc feef 	bl	800fc1c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (not *success)
 8012e3e:	4680      	mov	r8, r0
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d040      	beq.n	8012ec6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x146>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 8012e44:	a924      	add	r1, sp, #144	@ 0x90
 8012e46:	4620      	mov	r0, r4
 8012e48:	f7fe f86f 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8012e4c:	f89d 30ab 	ldrb.w	r3, [sp, #171]	@ 0xab
 8012e50:	960c      	str	r6, [sp, #48]	@ 0x30
 8012e52:	e9cd 660a 	strd	r6, r6, [sp, #40]	@ 0x28
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f040 808c 	bne.w	8012f74 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1f4>
		vector = std::vector<T>{*data};
 8012e5c:	9b06      	ldr	r3, [sp, #24]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012e5e:	4650      	mov	r0, sl
 8012e60:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e62:	f7fd fac3 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8012e66:	a90e      	add	r1, sp, #56	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012e68:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	9010      	str	r0, [sp, #64]	@ 0x40
 8012e6e:	a80d      	add	r0, sp, #52	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012e70:	9312      	str	r3, [sp, #72]	@ 0x48
 8012e72:	f7ff fda5 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012e76:	a910      	add	r1, sp, #64	@ 0x40
	  this->_M_impl._M_finish =
 8012e78:	9011      	str	r0, [sp, #68]	@ 0x44
 8012e7a:	a80a      	add	r0, sp, #40	@ 0x28
 8012e7c:	f7fd ff58 	bl	8010d30 <_ZNSt6vectorIfSaIfEEaSEOS1_.isra.0>
      }
 8012e80:	a810      	add	r0, sp, #64	@ 0x40
 8012e82:	f7ef f88b 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012e86:	a82d      	add	r0, sp, #180	@ 0xb4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e88:	2600      	movs	r6, #0
      }
 8012e8a:	f7ed fe29 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	data = BuildVector<T>(register_read_vector_cast);
 8012e8e:	a90a      	add	r1, sp, #40	@ 0x28
 8012e90:	a810      	add	r0, sp, #64	@ 0x40
 8012e92:	f7ff fda3 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
      : _M_current(__i) { }
 8012e96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e98:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012e9c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8012e9e:	9302      	str	r3, [sp, #8]
 8012ea0:	e9cd 660d 	strd	r6, r6, [sp, #52]	@ 0x34
    for (T input : inputs) {
 8012ea4:	9b02      	ldr	r3, [sp, #8]
 8012ea6:	4553      	cmp	r3, sl
 8012ea8:	f040 808e 	bne.w	8012fc8 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x248>
	data = BuildVector<T>(register_read_vector_cast);
 8012eac:	a90d      	add	r1, sp, #52	@ 0x34
 8012eae:	a807      	add	r0, sp, #28
 8012eb0:	f7fd fc8f 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8012eb4:	a80d      	add	r0, sp, #52	@ 0x34
 8012eb6:	f7ed fe13 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012eba:	a810      	add	r0, sp, #64	@ 0x40
 8012ebc:	f7ef f86e 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8012ec0:	a80a      	add	r0, sp, #40	@ 0x28
 8012ec2:	f7ef f86b 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	response_content.data = ReadElement<T>(&element, &success);
 8012ec6:	a821      	add	r0, sp, #132	@ 0x84
 8012ec8:	a907      	add	r1, sp, #28
 8012eca:	f7fd fc82 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012ece:	a807      	add	r0, sp, #28
 8012ed0:	f7ed fe06 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not success) {
 8012ed4:	f1b8 0f00 	cmp.w	r8, #0
 8012ed8:	d115      	bne.n	8012f06 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x186>
		response_content.data = std::vector<uint8_t>{ERROR};
 8012eda:	22ff      	movs	r2, #255	@ 0xff
		response_content.command = true; // this is an error flag for a read ack
 8012edc:	2301      	movs	r3, #1
		response_content.data = std::vector<uint8_t>{ERROR};
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 8012ee4:	aa0a      	add	r2, sp, #40	@ 0x28
		response_content.command = true; // this is an error flag for a read ack
 8012ee6:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
		response_content.data = std::vector<uint8_t>{ERROR};
 8012eea:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012eee:	ab0d      	add	r3, sp, #52	@ 0x34
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012ef4:	f7ed ff48 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012ef8:	a821      	add	r0, sp, #132	@ 0x84
 8012efa:	4621      	mov	r1, r4
 8012efc:	f7fd fc69 	bl	80107d2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8012f00:	4620      	mov	r0, r4
 8012f02:	f7ed fded 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8012f06:	a91e      	add	r1, sp, #120	@ 0x78
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f7fe f80e 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012f0e:	4622      	mov	r2, r4
 8012f10:	4629      	mov	r1, r5
 8012f12:	4638      	mov	r0, r7
 8012f14:	f7fe ff98 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	f040 8081 	bne.w	8013020 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x2a0>
 8012f1e:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8012f22:	1af6      	subs	r6, r6, r3
 8012f24:	bf18      	it	ne
 8012f26:	2601      	movne	r6, #1
 8012f28:	a82d      	add	r0, sp, #180	@ 0xb4
 8012f2a:	f7ed fdd9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f2e:	b1ce      	cbz	r6, 8012f64 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1e4>
		Send(*response);
 8012f30:	4629      	mov	r1, r5
 8012f32:	4620      	mov	r0, r4
 8012f34:	f7fe f80c 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8012f38:	4621      	mov	r1, r4
 8012f3a:	4638      	mov	r0, r7
 8012f3c:	f7fe f8f8 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 8012f40:	a82b      	add	r0, sp, #172	@ 0xac
 8012f42:	f7ed fdcd 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		response->payload.clear();
 8012f46:	1d28      	adds	r0, r5, #4
 8012f48:	f7fd fc5a 	bl	8010800 <_ZNSt6vectorIhSaIhEE5clearEv>
		BuildPayload(response, response_content);
 8012f4c:	a91e      	add	r1, sp, #120	@ 0x78
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f7fd ffeb 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8012f54:	4622      	mov	r2, r4
 8012f56:	4629      	mov	r1, r5
 8012f58:	4638      	mov	r0, r7
 8012f5a:	f7fe ff75 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 8012f5e:	a82d      	add	r0, sp, #180	@ 0xb4
 8012f60:	f7ed fdbe 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f64:	a827      	add	r0, sp, #156	@ 0x9c
 8012f66:	f7ed fdbb 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f6a:	a821      	add	r0, sp, #132	@ 0x84
 8012f6c:	f7ed fdb8 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8012f70:	a814      	add	r0, sp, #80	@ 0x50
 8012f72:	e743      	b.n	8012dfc <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x7c>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8012f74:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	@ 0xac
 8012f78:	b150      	cbz	r0, 8012f90 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x210>
		vector = std::vector<T>(data, data + element.element_register.length);
 8012f7a:	0086      	lsls	r6, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f7c:	f7fd fa36 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8012f80:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f82:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8012f84:	9010      	str	r0, [sp, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8012f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f88:	ab06      	add	r3, sp, #24
 8012f8a:	1999      	adds	r1, r3, r6
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	e770      	b.n	8012e72 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0xf2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012f90:	e9dd b106 	ldrd	fp, r1, [sp, #24]
	  if (__xlen > capacity())
 8012f94:	ebb1 0a0b 	subs.w	sl, r1, fp
 8012f98:	d011      	beq.n	8012fbe <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x23e>
	  pointer __result = this->_M_allocate(__n);
 8012f9a:	ea4f 00aa 	mov.w	r0, sl, asr #2
 8012f9e:	9102      	str	r1, [sp, #8]
 8012fa0:	f7fd fa24 	bl	80103ec <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	9902      	ldr	r1, [sp, #8]
 8012faa:	4658      	mov	r0, fp
 8012fac:	f7ff fd08 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8012fb0:	960a      	str	r6, [sp, #40]	@ 0x28
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8012fb2:	4456      	add	r6, sl
 8012fb4:	960c      	str	r6, [sp, #48]	@ 0x30
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8012fb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fb8:	4453      	add	r3, sl
 8012fba:	930b      	str	r3, [sp, #44]	@ 0x2c
      return *this;
 8012fbc:	e763      	b.n	8012e86 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x106>
 8012fbe:	4652      	mov	r2, sl
 8012fc0:	4658      	mov	r0, fp
 8012fc2:	f7ff fcfd 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012fc6:	e7f6      	b.n	8012fb6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x236>
    for (T input : inputs) {
 8012fc8:	f85a 2b04 	ldr.w	r2, [sl], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 8012fcc:	f04f 0b18 	mov.w	fp, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012fd0:	962c      	str	r6, [sp, #176]	@ 0xb0
 8012fd2:	e9cd 662a 	strd	r6, r6, [sp, #168]	@ 0xa8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012fd6:	f1cb 0c20 	rsb	ip, fp, #32
 8012fda:	fa22 f10b 	lsr.w	r1, r2, fp
 8012fde:	f1ab 0020 	sub.w	r0, fp, #32
	for (uint8_t index = 0; index < type_length; index++) {
 8012fe2:	f1ab 0b08 	sub.w	fp, fp, #8
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8012fe6:	fa06 fc0c 	lsl.w	ip, r6, ip
 8012fea:	9203      	str	r2, [sp, #12]
 8012fec:	fa26 f000 	lsr.w	r0, r6, r0
 8012ff0:	ea41 010c 	orr.w	r1, r1, ip
 8012ff4:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f88d 1015 	strb.w	r1, [sp, #21]
 8012ffc:	f10d 0115 	add.w	r1, sp, #21
 8013000:	f7fd feae 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 8013004:	f11b 0f08 	cmn.w	fp, #8
 8013008:	9a03      	ldr	r2, [sp, #12]
 801300a:	d1e4      	bne.n	8012fd6 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x256>
        data.insert(data.end(), single.begin(), single.end());
 801300c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801300e:	a80d      	add	r0, sp, #52	@ 0x34
 8013010:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8013014:	f7fe fea4 	bl	8011d60 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_>
      }
 8013018:	4620      	mov	r0, r4
 801301a:	f7ed fd61 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 801301e:	e741      	b.n	8012ea4 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x124>
	if (not BuildPayload(response, response_content) && response->payload.size() > 0) { // if no space available, send the data and then rebuild a new response
 8013020:	2600      	movs	r6, #0
 8013022:	e781      	b.n	8012f28 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt+0x1a8>

08013024 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>:
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 8013024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013026:	461c      	mov	r4, r3
 8013028:	b08f      	sub	sp, #60	@ 0x3c
	if (not element.ack && element.command) {
 801302a:	799b      	ldrb	r3, [r3, #6]
uint16_t Communication::ProcessElement(MessageHeader message, MessageHeader* response, MessageElement element, uint16_t start_index) {
 801302c:	4605      	mov	r5, r0
 801302e:	4617      	mov	r7, r2
 8013030:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
	if (not element.ack && element.command) {
 8013034:	b9cb      	cbnz	r3, 801306a <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x46>
 8013036:	79e3      	ldrb	r3, [r4, #7]
		return ProcessCommand<T>(message, response, element, start_index);
 8013038:	a803      	add	r0, sp, #12
	if (not element.ack && element.command) {
 801303a:	b323      	cbz	r3, 8013086 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x62>
		return ProcessCommand<T>(message, response, element, start_index);
 801303c:	f7fd ff88 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8013040:	4621      	mov	r1, r4
 8013042:	a808      	add	r0, sp, #32
 8013044:	f7fd ff71 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8013048:	ab08      	add	r3, sp, #32
 801304a:	463a      	mov	r2, r7
 801304c:	a903      	add	r1, sp, #12
 801304e:	4628      	mov	r0, r5
 8013050:	9600      	str	r6, [sp, #0]
 8013052:	f7ff fe95 	bl	8012d80 <_ZN13Communication14ProcessCommandIfEEt13MessageHeaderPS1_14MessageElementt>
		return ProcessSubscriber<T>(message, element, start_index);
 8013056:	4604      	mov	r4, r0
 8013058:	a80b      	add	r0, sp, #44	@ 0x2c
 801305a:	f7ed fd41 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801305e:	a804      	add	r0, sp, #16
 8013060:	f7ed fd3e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8013064:	4620      	mov	r0, r4
 8013066:	b00f      	add	sp, #60	@ 0x3c
 8013068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ProcessService<T>(message, element, start_index);
 801306a:	a803      	add	r0, sp, #12
 801306c:	f7fd ff70 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8013070:	4621      	mov	r1, r4
 8013072:	a808      	add	r0, sp, #32
 8013074:	f7fd ff59 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8013078:	4633      	mov	r3, r6
 801307a:	aa08      	add	r2, sp, #32
 801307c:	a903      	add	r1, sp, #12
 801307e:	4628      	mov	r0, r5
 8013080:	f7fe fa5b 	bl	801153a <_ZN13Communication14ProcessServiceIfEEt13MessageHeader14MessageElementt>
 8013084:	e7e7      	b.n	8013056 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>
		return ProcessSubscriber<T>(message, element, start_index);
 8013086:	f7fd ff63 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801308a:	4621      	mov	r1, r4
 801308c:	a808      	add	r0, sp, #32
 801308e:	f7fd ff4c 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8013092:	4633      	mov	r3, r6
 8013094:	aa08      	add	r2, sp, #32
 8013096:	a903      	add	r1, sp, #12
 8013098:	4628      	mov	r0, r5
 801309a:	f7fe f96e 	bl	801137a <_ZN13Communication17ProcessSubscriberIfEEt13MessageHeader14MessageElementt>
 801309e:	e7da      	b.n	8013056 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt+0x32>

080130a0 <_ZN13Communication12ParseMessageE13MessageHeader>:
void Communication::ParseMessage(MessageHeader message) {
 80130a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130a2:	b099      	sub	sp, #100	@ 0x64
	response.interface = message.interface;
 80130a4:	780b      	ldrb	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80130a6:	2400      	movs	r4, #0
void Communication::ParseMessage(MessageHeader message) {
 80130a8:	4606      	mov	r6, r0
	response.interface = message.interface;
 80130aa:	f88d 3008 	strb.w	r3, [sp, #8]
void Communication::ParseMessage(MessageHeader message) {
 80130ae:	460d      	mov	r5, r1
	response.target_address = message.source_address;
 80130b0:	7c4b      	ldrb	r3, [r1, #17]
 80130b2:	9411      	str	r4, [sp, #68]	@ 0x44
 80130b4:	9405      	str	r4, [sp, #20]
 80130b6:	f88d 3018 	strb.w	r3, [sp, #24]
 80130ba:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80130be:	e9cd 4403 	strd	r4, r4, [sp, #12]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80130c2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80130c6:	1a9b      	subs	r3, r3, r2
	while (index < message.payload.size()) {
 80130c8:	429c      	cmp	r4, r3
 80130ca:	d203      	bcs.n	80130d4 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		if (index + 1 >= (uint16_t) message.payload.size())
 80130cc:	1c60      	adds	r0, r4, #1
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	4298      	cmp	r0, r3
 80130d2:	db0b      	blt.n	80130ec <_ZN13Communication12ParseMessageE13MessageHeader+0x4c>
	if (response.payload.size() > 0)
 80130d4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d159      	bne.n	8013190 <_ZN13Communication12ParseMessageE13MessageHeader+0xf0>
      }
 80130dc:	a803      	add	r0, sp, #12
 80130de:	f7ed fcff 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80130e2:	a80f      	add	r0, sp, #60	@ 0x3c
 80130e4:	f7ed fcfc 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 80130e8:	b019      	add	sp, #100	@ 0x64
 80130ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		element.ack = message.payload[index] & ACK_MASK;
 80130ec:	5d13      	ldrb	r3, [r2, r4]
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 80130ee:	5c12      	ldrb	r2, [r2, r0]
		bool success = FindRegister(message, &response, &element);
 80130f0:	a812      	add	r0, sp, #72	@ 0x48
		element.ack = message.payload[index] & ACK_MASK;
 80130f2:	09d9      	lsrs	r1, r3, #7
 80130f4:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
		element.command = message.payload[index] & COMMAND_MASK;
 80130f8:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80130fc:	f88d 1037 	strb.w	r1, [sp, #55]	@ 0x37
		element.access = message.payload[index] & ACCESS_MASK;
 8013100:	f3c3 1140 	ubfx	r1, r3, #5, #1
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 8013104:	021b      	lsls	r3, r3, #8
		element.access = message.payload[index] & ACCESS_MASK;
 8013106:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
		bool success = FindRegister(message, &response, &element);
 801310a:	4629      	mov	r1, r5
		element.element_register.address = (message.payload[index] & ~(ACK_MASK | COMMAND_MASK | ACCESS_MASK)) << 8 | message.payload[index + 1];
 801310c:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8013110:	4313      	orrs	r3, r2
 8013112:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
		bool success = FindRegister(message, &response, &element);
 8013116:	f7fd ff1b 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801311a:	ab0c      	add	r3, sp, #48	@ 0x30
 801311c:	aa02      	add	r2, sp, #8
 801311e:	a912      	add	r1, sp, #72	@ 0x48
 8013120:	4630      	mov	r0, r6
 8013122:	f7fe fee9 	bl	8011ef8 <_ZN13Communication12FindRegisterE13MessageHeaderPS0_P14MessageElement>
 8013126:	4607      	mov	r7, r0
 8013128:	a813      	add	r0, sp, #76	@ 0x4c
 801312a:	f7ed fcd9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not success) break;
 801312e:	2f00      	cmp	r7, #0
 8013130:	d0d0      	beq.n	80130d4 <_ZN13Communication12ParseMessageE13MessageHeader+0x34>
		switch (element.element_register.type) {
 8013132:	f89d 3032 	ldrb.w	r3, [sp, #50]	@ 0x32
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 8013136:	3402      	adds	r4, #2
		switch (element.element_register.type) {
 8013138:	2b04      	cmp	r3, #4
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 801313a:	b2a4      	uxth	r4, r4
		switch (element.element_register.type) {
 801313c:	d011      	beq.n	8013162 <_ZN13Communication12ParseMessageE13MessageHeader+0xc2>
 801313e:	2b08      	cmp	r3, #8
 8013140:	d1bf      	bne.n	80130c2 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
			index = ProcessElement<float>(message, &response, element, index + 2);
 8013142:	4629      	mov	r1, r5
 8013144:	a807      	add	r0, sp, #28
 8013146:	f7fd ff03 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801314a:	a90c      	add	r1, sp, #48	@ 0x30
 801314c:	a812      	add	r0, sp, #72	@ 0x48
 801314e:	f7fd feec 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8013152:	ab12      	add	r3, sp, #72	@ 0x48
 8013154:	aa02      	add	r2, sp, #8
 8013156:	a907      	add	r1, sp, #28
 8013158:	4630      	mov	r0, r6
 801315a:	9400      	str	r4, [sp, #0]
 801315c:	f7ff ff62 	bl	8013024 <_ZN13Communication14ProcessElementIfEEt13MessageHeaderPS1_14MessageElementt>
 8013160:	e00e      	b.n	8013180 <_ZN13Communication12ParseMessageE13MessageHeader+0xe0>
			index = ProcessElement<int8_t>(message, &response, element, index + 2);
 8013162:	4629      	mov	r1, r5
 8013164:	a807      	add	r0, sp, #28
 8013166:	f7fd fef3 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 801316a:	a90c      	add	r1, sp, #48	@ 0x30
 801316c:	a812      	add	r0, sp, #72	@ 0x48
 801316e:	f7fd fedc 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8013172:	ab12      	add	r3, sp, #72	@ 0x48
 8013174:	aa02      	add	r2, sp, #8
 8013176:	a907      	add	r1, sp, #28
 8013178:	4630      	mov	r0, r6
 801317a:	9400      	str	r4, [sp, #0]
 801317c:	f7ff fb8f 	bl	801289e <_ZN13Communication14ProcessElementIaEEt13MessageHeaderPS1_14MessageElementt>
			index = ProcessElement<float>(message, &response, element, index + 2);
 8013180:	4604      	mov	r4, r0
 8013182:	a815      	add	r0, sp, #84	@ 0x54
 8013184:	f7ed fcac 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013188:	a808      	add	r0, sp, #32
 801318a:	f7ed fca9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
			break;
 801318e:	e798      	b.n	80130c2 <_ZN13Communication12ParseMessageE13MessageHeader+0x22>
		Send(response);
 8013190:	a902      	add	r1, sp, #8
 8013192:	a812      	add	r0, sp, #72	@ 0x48
 8013194:	f7fd fedc 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8013198:	a912      	add	r1, sp, #72	@ 0x48
 801319a:	4630      	mov	r0, r6
 801319c:	f7fd ffc8 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 80131a0:	a813      	add	r0, sp, #76	@ 0x4c
 80131a2:	f7ed fc9d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80131a6:	e799      	b.n	80130dc <_ZN13Communication12ParseMessageE13MessageHeader+0x3c>

080131a8 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb>:
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80131a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ac:	461c      	mov	r4, r3
 80131ae:	b08e      	sub	sp, #56	@ 0x38
	uint16_t processed_length = 0;
 80131b0:	2300      	movs	r3, #0
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80131b2:	4616      	mov	r6, r2
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80131b4:	4622      	mov	r2, r4
uint16_t Communication::Process(uint8_t ID, std::vector<uint8_t> data, bool* success) {
 80131b6:	4605      	mov	r5, r0
 80131b8:	4688      	mov	r8, r1
	uint16_t processed_length = 0;
 80131ba:	f8ad 300e 	strh.w	r3, [sp, #14]
	CommunicationProtocol* protocol = FindProtocol(ID, success);
 80131be:	f7fd fa7f 	bl	80106c0 <_ZN13Communication12FindProtocolEhPb>
 80131c2:	4607      	mov	r7, r0
	if (not *success)
 80131c4:	7820      	ldrb	r0, [r4, #0]
 80131c6:	2800      	cmp	r0, #0
 80131c8:	d039      	beq.n	801323e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x96>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80131ca:	f10d 0a0e 	add.w	sl, sp, #14
	osSemaphoreAcquire(CommunicationSemaphore, osWaitForever); // TODO ADDED
 80131ce:	f04f 31ff 	mov.w	r1, #4294967295
 80131d2:	6828      	ldr	r0, [r5, #0]
 80131d4:	f7f9 fe2a 	bl	800ce2c <osSemaphoreAcquire>
	while (processed_length < data.size()) {// && processed_length < data.size()) {
 80131d8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80131dc:	e9d6 1300 	ldrd	r1, r3, [r6]
 80131e0:	1a5b      	subs	r3, r3, r1
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d226      	bcs.n	8013234 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x8c>
		MessageHeader message = protocol->DecodeProtocol(ID, data, &processed_length, success);
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	4631      	mov	r1, r6
 80131ea:	a809      	add	r0, sp, #36	@ 0x24
 80131ec:	f8d3 9000 	ldr.w	r9, [r3]
 80131f0:	f7ed fd26 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80131f4:	ab09      	add	r3, sp, #36	@ 0x24
 80131f6:	4642      	mov	r2, r8
 80131f8:	4639      	mov	r1, r7
 80131fa:	a804      	add	r0, sp, #16
 80131fc:	e9cd a400 	strd	sl, r4, [sp]
 8013200:	47c8      	blx	r9
      }
 8013202:	a809      	add	r0, sp, #36	@ 0x24
 8013204:	f7ed fc6c 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (not *success) break;
 8013208:	7823      	ldrb	r3, [r4, #0]
 801320a:	b183      	cbz	r3, 801322e <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x86>
		if (!AcceptMessage(message)) {
 801320c:	a904      	add	r1, sp, #16
 801320e:	a809      	add	r0, sp, #36	@ 0x24
 8013210:	f7fd fe9e 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8013214:	a909      	add	r1, sp, #36	@ 0x24
 8013216:	4628      	mov	r0, r5
 8013218:	f7fd fa76 	bl	8010708 <_ZN13Communication13AcceptMessageE13MessageHeader>
 801321c:	4681      	mov	r9, r0
 801321e:	a80a      	add	r0, sp, #40	@ 0x28
 8013220:	f7ed fc5e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013224:	f1b9 0f00 	cmp.w	r9, #0
 8013228:	d10c      	bne.n	8013244 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x9c>
			*success = false;
 801322a:	f884 9000 	strb.w	r9, [r4]
 801322e:	a805      	add	r0, sp, #20
 8013230:	f7ed fc56 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(CommunicationSemaphore);  // TODO ADDED
 8013234:	6828      	ldr	r0, [r5, #0]
 8013236:	f7f9 fe2d 	bl	800ce94 <osSemaphoreRelease>
	return processed_length;
 801323a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
}
 801323e:	b00e      	add	sp, #56	@ 0x38
 8013240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ParseMessage(message);
 8013244:	a904      	add	r1, sp, #16
 8013246:	a809      	add	r0, sp, #36	@ 0x24
		message.interface = ID;
 8013248:	f88d 8010 	strb.w	r8, [sp, #16]
		ParseMessage(message);
 801324c:	f7fd fe80 	bl	8010f50 <_ZN13MessageHeaderC1ERKS_>
 8013250:	a909      	add	r1, sp, #36	@ 0x24
 8013252:	4628      	mov	r0, r5
 8013254:	f7ff ff24 	bl	80130a0 <_ZN13Communication12ParseMessageE13MessageHeader>
 8013258:	a80a      	add	r0, sp, #40	@ 0x28
 801325a:	f7ed fc41 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 801325e:	a805      	add	r0, sp, #20
 8013260:	f7ed fc3e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8013264:	e7b8      	b.n	80131d8 <_ZN13Communication7ProcessEhSt6vectorIhSaIhEEPb+0x30>
	...

08013268 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE0_4_FUNEfS8_>:
	// Position control configuration
	positionConfiguration.track = &encoder_position;
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
	positionConfiguration.input_filters.resize(2);
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
	positionConfiguration.input_filters[INPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input in °
 8013268:	6803      	ldr	r3, [r0, #0]
 801326a:	edd3 7a04 	vldr	s15, [r3, #16]
 801326e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013272:	eddf 7a02 	vldr	s15, [pc, #8]	@ 801327c <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE0_4_FUNEfS8_+0x14>
 8013276:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801327a:	4770      	bx	lr
 801327c:	42b40000 	.word	0x42b40000

08013280 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE1_4_FUNEf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8013280:	eeb0 0ac0 	vabs.f32	s0, s0
	positionConfiguration.P_active = DEFAULT_POSITION_P_ACTIVE;
	positionConfiguration.I_active = DEFAULT_POSITION_I_ACTIVE;
	positionConfiguration.D_active = DEFAULT_POSITION_D_ACTIVE;
	positionConfiguration.S_active = DEFAULT_POSITION_S_ACTIVE;
	positionConfiguration.direction_criteria = &PWM;
	positionConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8013284:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013288:	ee17 0a90 	vmov	r0, s15
 801328c:	4770      	bx	lr

0801328e <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE2_4_FUNEfS8_>:

	// Torque control configuration
	torqueConfiguration.track = &motor_current;
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
	torqueConfiguration.input_filters.resize(3);
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 801328e:	4770      	bx	lr

08013290 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE3_4_FUNEfS8_>:
	torqueConfiguration.input_filters[TORQUE_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE];}); // motor torque before reductor input in mNm
 8013290:	6803      	ldr	r3, [r0, #0]
 8013292:	edd3 7a03 	vldr	s15, [r3, #12]
 8013296:	ee20 0a27 	vmul.f32	s0, s0, s15
 801329a:	4770      	bx	lr

0801329c <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE4_4_FUNEfS8_>:
	return *(this->_M_impl._M_start + __n);
 801329c:	6803      	ldr	r3, [r0, #0]
	torqueConfiguration.input_filters[TORQUE_REDUCTOR_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE] / parameters[MOTOR_REDUCTION_RATIO];}); // motor torque after reductor input in mNm
 801329e:	edd3 7a03 	vldr	s15, [r3, #12]
 80132a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80132a6:	edd3 7a00 	vldr	s15, [r3]
 80132aa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80132ae:	4770      	bx	lr

080132b0 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE5_4_FUNEf>:
	torqueConfiguration.P_active = DEFAULT_TORQUE_P_ACTIVE;
	torqueConfiguration.I_active = DEFAULT_TORQUE_I_ACTIVE;
	torqueConfiguration.D_active = DEFAULT_TORQUE_D_ACTIVE;
	torqueConfiguration.S_active = DEFAULT_TORQUE_S_ACTIVE;
	torqueConfiguration.direction_criteria = &setpoint;
	torqueConfiguration.PWMAssignement = ([](float val) -> uint32_t {if (val > 0) return (uint32_t) (abs(val)); else return 0;});
 80132b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80132b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b8:	bfc3      	ittte	gt
 80132ba:	eeb0 0ac0 	vabsgt.f32	s0, s0
 80132be:	eefc 7ac0 	vcvtgt.u32.f32	s15, s0
 80132c2:	ee17 0a90 	vmovgt	r0, s15
 80132c6:	2000      	movle	r0, #0
 80132c8:	4770      	bx	lr

080132ca <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlSt6vectorIPfSaIS7_EES6_IfSaIfEEE8_4_FUNES9_SB_>:
	PWMConfiguration.direction_criteria = &PWM;
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
	PWMConfiguration.model_active = true;
	torqueConfiguration.model_variables.resize(1);
	PWMConfiguration.model_variables[0] = &setpoint;
	PWMConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (*(variables[0]));});
 80132ca:	6803      	ldr	r3, [r0, #0]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	ed93 0a00 	vldr	s0, [r3]
 80132d2:	4770      	bx	lr

080132d4 <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE0_4_FUNES0_tS2_S3_>:
	registers->SetRegisterAsSingle(REG_BRIDGE_STATE);
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
			Controller* self = (Controller*) context;
			**output = (uint8_t) self->bridge_active;
 80132d4:	6813      	ldr	r3, [r2, #0]
 80132d6:	f890 2070 	ldrb.w	r2, [r0, #112]	@ 0x70
			return true;
		}
 80132da:	2001      	movs	r0, #1
			**output = (uint8_t) self->bridge_active;
 80132dc:	701a      	strb	r2, [r3, #0]
		}
 80132de:	4770      	bx	lr

080132e0 <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE8_4_FUNES0_tS2_S3_>:
	registers->SetRegisterAsSingle(REG_CONTROLLER_INPUT_FILTER);
	registers->AddRegisterSemaphore(REG_CONTROLLER_INPUT_FILTER, &ControlSemaphore);
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
			Controller* self = (Controller*) context;
			**output = self->configurations[self->mode]->selected_filter;
 80132e0:	6813      	ldr	r3, [r2, #0]
 80132e2:	f890 2072 	ldrb.w	r2, [r0, #114]	@ 0x72
 80132e6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80132ea:	f8d0 2144 	ldr.w	r2, [r0, #324]	@ 0x144
			return true;
		}
 80132ee:	2001      	movs	r0, #1
			**output = self->configurations[self->mode]->selected_filter;
 80132f0:	7912      	ldrb	r2, [r2, #4]
 80132f2:	701a      	strb	r2, [r3, #0]
		}
 80132f4:	4770      	bx	lr

080132f6 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE9_4_FUNES0_tS1_t>:
	);
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
			Controller* self = (Controller*) context;
			self->configurations[self->mode]->selected_filter = *input;
 80132f6:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80132fa:	7812      	ldrb	r2, [r2, #0]
 80132fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013300:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
			return true;
		}
 8013304:	2001      	movs	r0, #1
			self->configurations[self->mode]->selected_filter = *input;
 8013306:	711a      	strb	r2, [r3, #4]
		}
 8013308:	4770      	bx	lr

0801330a <_ZZN10Controller12AddRegistersEvENUlPvtPftE17_4_FUNES0_tS1_t>:
	// Register to start a planned trajectory via the trajectory generator
	registers->AddRegister<uint8_t>(REG_MOTOR_START_TRAJECTORY);
	registers->SetRegisterAsSingle(REG_MOTOR_START_TRAJECTORY);
	registers->AddRegisterSemaphore(REG_MOTOR_START_TRAJECTORY, &ControlSemaphore);
	registers->AddWriteCallback<float>(REG_MOTOR_START_TRAJECTORY, (void*) this,
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 801330a:	b508      	push	{r3, lr}
			Controller* self = (Controller*) context;
			self->trajectory_generator.StartTrajectory();
 801330c:	f009 fa04 	bl	801c718 <_ZN19TrajectoryGenerator15StartTrajectoryEv>
			return true;
		}
 8013310:	2001      	movs	r0, #1
 8013312:	bd08      	pop	{r3, pc}

08013314 <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013314:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8013316:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8013318:	d107      	bne.n	801332a <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t+0x16>
			self->trajectory_generator.PlanTrajectory(input[0], input[1]);
 801331a:	edd2 0a01 	vldr	s1, [r2, #4]
 801331e:	ed92 0a00 	vldr	s0, [r2]
 8013322:	f009 f97f 	bl	801c624 <_ZN19TrajectoryGenerator14PlanTrajectoryEff>
 8013326:	2001      	movs	r0, #1
		}
 8013328:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801332a:	2000      	movs	r0, #0
 801332c:	e7fc      	b.n	8013328 <_ZZN10Controller12AddRegistersEvENUlPvtPftE16_4_FUNES0_tS1_t+0x14>

0801332e <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801332e:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 8013330:	b082      	sub	sp, #8
			if (length != 2) return false;
 8013332:	d114      	bne.n	801335e <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x30>
			if ((uint8_t) input[0] >= self->params.size()) return false;
 8013334:	edd2 7a00 	vldr	s15, [r2]
 8013338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801333c:	e9d0 3054 	ldrd	r3, r0, [r0, #336]	@ 0x150
 8013340:	edcd 7a01 	vstr	s15, [sp, #4]
 8013344:	1ac0      	subs	r0, r0, r3
 8013346:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801334a:	ebb1 0fa0 	cmp.w	r1, r0, asr #2
 801334e:	d206      	bcs.n	801335e <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x30>
			self->params[(uint8_t) input[0]] = input[1];
 8013350:	6852      	ldr	r2, [r2, #4]
 8013352:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			return true;
 8013356:	2001      	movs	r0, #1
			self->params[(uint8_t) input[0]] = input[1];
 8013358:	601a      	str	r2, [r3, #0]
		}
 801335a:	b002      	add	sp, #8
 801335c:	4770      	bx	lr
			if (length != 2) return false;
 801335e:	2000      	movs	r0, #0
 8013360:	e7fb      	b.n	801335a <_ZZN10Controller12AddRegistersEvENUlPvtPftE15_4_FUNES0_tS1_t+0x2c>

08013362 <_ZZN10Controller12AddRegistersEvENUlPvtPPfPtE11_4_FUNES0_tS2_S3_>:
			*output[CONTROLLER_CONFIGURATION_K] = self->configurations[self->mode]->K;
 8013362:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
			*output[CONTROLLER_CONFIGURATION_Ti] = 1 / self->configurations[self->mode]->Ti_inv;
 8013366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
			*output[CONTROLLER_CONFIGURATION_K] = self->configurations[self->mode]->K;
 801336a:	6811      	ldr	r1, [r2, #0]
 801336c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013370:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
 8013374:	6958      	ldr	r0, [r3, #20]
 8013376:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_Ti] = 1 / self->configurations[self->mode]->Ti_inv;
 8013378:	ed93 7a06 	vldr	s14, [r3, #24]
 801337c:	6851      	ldr	r1, [r2, #4]
 801337e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013382:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_Td] = self->configurations[self->mode]->Td;
 8013386:	6891      	ldr	r1, [r2, #8]
 8013388:	69d8      	ldr	r0, [r3, #28]
 801338a:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_ISAT] = self->configurations[self->mode]->Isaturation;
 801338c:	68d1      	ldr	r1, [r2, #12]
 801338e:	6a18      	ldr	r0, [r3, #32]
 8013390:	6008      	str	r0, [r1, #0]
			*output[CONTROLLER_CONFIGURATION_P_ACTIVE] = self->configurations[self->mode]->P_active;
 8013392:	f893 0024 	ldrb.w	r0, [r3, #36]	@ 0x24
 8013396:	6911      	ldr	r1, [r2, #16]
 8013398:	ee07 0a90 	vmov	s15, r0
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 801339c:	f893 0025 	ldrb.w	r0, [r3, #37]	@ 0x25
			*output[CONTROLLER_CONFIGURATION_P_ACTIVE] = self->configurations[self->mode]->P_active;
 80133a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133a4:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 80133a8:	ee07 0a90 	vmov	s15, r0
 80133ac:	6951      	ldr	r1, [r2, #20]
 80133ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 80133b2:	f893 0026 	ldrb.w	r0, [r3, #38]	@ 0x26
			*output[CONTROLLER_CONFIGURATION_I_ACTIVE] = self->configurations[self->mode]->I_active;
 80133b6:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 80133ba:	ee07 0a90 	vmov	s15, r0
 80133be:	6991      	ldr	r1, [r2, #24]
 80133c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 80133c4:	f893 0027 	ldrb.w	r0, [r3, #39]	@ 0x27
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 80133c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
			*output[CONTROLLER_CONFIGURATION_D_ACTIVE] = self->configurations[self->mode]->D_active;
 80133cc:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 80133d0:	ee07 0a90 	vmov	s15, r0
 80133d4:	69d1      	ldr	r1, [r2, #28]
		}
 80133d6:	2001      	movs	r0, #1
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 80133d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 80133dc:	6a12      	ldr	r2, [r2, #32]
			*output[CONTROLLER_CONFIGURATION_S_ACTIVE] = self->configurations[self->mode]->S_active;
 80133de:	edc1 7a00 	vstr	s15, [r1]
			*output[CONTROLLER_CONFIGURATION_MODEL_ACTIVE] = self->configurations[self->mode]->model_active;
 80133e2:	ee07 3a90 	vmov	s15, r3
 80133e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ea:	edc2 7a00 	vstr	s15, [r2]
		}
 80133ee:	4770      	bx	lr

080133f0 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80133f0:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, float* input, uint16_t length) -> bool {
 80133f2:	b082      	sub	sp, #8
			if (length != 2) return false;
 80133f4:	f040 8098 	bne.w	8013528 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x138>
			switch ((uint8_t) input[0]) {
 80133f8:	edd2 7a00 	vldr	s15, [r2]
 80133fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013400:	edcd 7a01 	vstr	s15, [sp, #4]
 8013404:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013408:	2b08      	cmp	r3, #8
 801340a:	f200 808d 	bhi.w	8013528 <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x138>
 801340e:	e8df f003 	tbb	[pc, r3]
 8013412:	1005      	.short	0x1005
 8013414:	4331281f 	.word	0x4331281f
 8013418:	6755      	.short	0x6755
 801341a:	79          	.byte	0x79
 801341b:	00          	.byte	0x00
				self->configurations[self->mode]->K = input[1];
 801341c:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8013420:	6852      	ldr	r2, [r2, #4]
 8013422:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013426:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801342a:	615a      	str	r2, [r3, #20]
			return true;
 801342c:	2001      	movs	r0, #1
		}
 801342e:	b002      	add	sp, #8
 8013430:	4770      	bx	lr
				self->configurations[self->mode]->Ti_inv = 1 / input[1];
 8013432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013436:	ed92 7a01 	vldr	s14, [r2, #4]
 801343a:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 801343e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013442:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013446:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801344a:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 801344e:	e7ed      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->Td = input[1];
 8013450:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8013454:	6852      	ldr	r2, [r2, #4]
 8013456:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801345a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801345e:	61da      	str	r2, [r3, #28]
				break;
 8013460:	e7e4      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->Isaturation = input[1];
 8013462:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 8013466:	6852      	ldr	r2, [r2, #4]
 8013468:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801346c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8013470:	621a      	str	r2, [r3, #32]
				break;
 8013472:	e7db      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->P_active = (bool) input[1];
 8013474:	edd2 7a01 	vldr	s15, [r2, #4]
 8013478:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 801347c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013480:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013488:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801348c:	bf14      	ite	ne
 801348e:	2201      	movne	r2, #1
 8013490:	2200      	moveq	r2, #0
 8013492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				break;
 8013496:	e7c9      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->I_active = (bool) input[1];
 8013498:	edd2 7a01 	vldr	s15, [r2, #4]
 801349c:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80134a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80134a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80134a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134ac:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80134b0:	bf14      	ite	ne
 80134b2:	2201      	movne	r2, #1
 80134b4:	2200      	moveq	r2, #0
 80134b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				break;
 80134ba:	e7b7      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->D_active = (bool) input[1];
 80134bc:	edd2 7a01 	vldr	s15, [r2, #4]
 80134c0:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80134c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80134c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80134d4:	bf14      	ite	ne
 80134d6:	2201      	movne	r2, #1
 80134d8:	2200      	moveq	r2, #0
 80134da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				break;
 80134de:	e7a5      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->S_active = (bool) input[1];
 80134e0:	edd2 7a01 	vldr	s15, [r2, #4]
 80134e4:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 80134e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80134ec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80134f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80134f8:	bf14      	ite	ne
 80134fa:	2201      	movne	r2, #1
 80134fc:	2200      	moveq	r2, #0
 80134fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				break;
 8013502:	e793      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
				self->configurations[self->mode]->model_active = (bool) input[1];
 8013504:	edd2 7a01 	vldr	s15, [r2, #4]
 8013508:	f890 3072 	ldrb.w	r3, [r0, #114]	@ 0x72
 801350c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013510:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013518:	f8d0 3144 	ldr.w	r3, [r0, #324]	@ 0x144
 801351c:	bf14      	ite	ne
 801351e:	2201      	movne	r2, #1
 8013520:	2200      	moveq	r2, #0
 8013522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				break;
 8013526:	e781      	b.n	801342c <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3c>
			if (length != 2) return false;
 8013528:	2000      	movs	r0, #0
 801352a:	e780      	b.n	801342e <_ZZN10Controller12AddRegistersEvENUlPvtPftE10_4_FUNES0_tS1_t+0x3e>

0801352c <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE6_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801352c:	b538      	push	{r3, r4, r5, lr}
 801352e:	4604      	mov	r4, r0
 8013530:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 8013532:	f04f 31ff 	mov.w	r1, #4294967295
 8013536:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013538:	f7f9 fc78 	bl	800ce2c <osSemaphoreAcquire>
			**output = self->mode;
 801353c:	682b      	ldr	r3, [r5, #0]
 801353e:	f894 2072 	ldrb.w	r2, [r4, #114]	@ 0x72
 8013542:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8013544:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013546:	f7f9 fca5 	bl	800ce94 <osSemaphoreRelease>
		}
 801354a:	2001      	movs	r0, #1
 801354c:	bd38      	pop	{r3, r4, r5, pc}

0801354e <_ZZN10Controller12AddRegistersEvENUlPvtPPmPtE4_4_FUNES0_tS2_S3_>:
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 801354e:	b538      	push	{r3, r4, r5, lr}
 8013550:	4604      	mov	r4, r0
 8013552:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 8013554:	f04f 31ff 	mov.w	r1, #4294967295
 8013558:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801355a:	f7f9 fc67 	bl	800ce2c <osSemaphoreAcquire>
			**output = self->period_ms;
 801355e:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8013560:	682b      	ldr	r3, [r5, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8013562:	6b60      	ldr	r0, [r4, #52]	@ 0x34
			**output = self->period_ms;
 8013564:	601a      	str	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8013566:	f7f9 fc95 	bl	800ce94 <osSemaphoreRelease>
		}
 801356a:	2001      	movs	r0, #1
 801356c:	bd38      	pop	{r3, r4, r5, pc}

0801356e <_ZZN10Controller12AddRegistersEvENUlPvtPPhPtE2_4_FUNES0_tS2_S3_>:
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 801356e:	b538      	push	{r3, r4, r5, lr}
 8013570:	4604      	mov	r4, r0
 8013572:	4615      	mov	r5, r2
			osSemaphoreAcquire(self->ControlSemaphore, osWaitForever);
 8013574:	f04f 31ff 	mov.w	r1, #4294967295
 8013578:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801357a:	f7f9 fc57 	bl	800ce2c <osSemaphoreAcquire>
			**output = (uint8_t) self->controller_active;
 801357e:	682b      	ldr	r3, [r5, #0]
 8013580:	f894 2071 	ldrb.w	r2, [r4, #113]	@ 0x71
 8013584:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->ControlSemaphore);
 8013586:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013588:	f7f9 fc84 	bl	800ce94 <osSemaphoreRelease>
		}
 801358c:	2001      	movs	r0, #1
 801358e:	bd38      	pop	{r3, r4, r5, pc}

08013590 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE_4_FUNEfS8_>:
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8013590:	6803      	ldr	r3, [r0, #0]
 8013592:	edd3 7a00 	vldr	s15, [r3]
 8013596:	ee20 0a27 	vmul.f32	s0, s0, s15
 801359a:	edd3 7a04 	vldr	s15, [r3, #16]
 801359e:	ee20 0a27 	vmul.f32	s0, s0, s15
 80135a2:	eddf 7a02 	vldr	s15, [pc, #8]	@ 80135ac <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfSt6vectorIfSaIfEEE_4_FUNEfS8_+0x1c>
 80135a6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80135aa:	4770      	bx	lr
 80135ac:	42b40000 	.word	0x42b40000

080135b0 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlSt6vectorIPfSaIS7_EES6_IfSaIfEEE6_4_FUNES9_SB_>:
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 80135b0:	6802      	ldr	r2, [r0, #0]
 80135b2:	680b      	ldr	r3, [r1, #0]
 80135b4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80135b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80135bc:	ed92 0a00 	vldr	s0, [r2]
 80135c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80135c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80135c8:	edd1 7a00 	vldr	s15, [r1]
 80135cc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80135d0:	4770      	bx	lr
	...

080135d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80135d4:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80135d6:	491e      	ldr	r1, [pc, #120]	@ (8013650 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80135d8:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80135da:	481e      	ldr	r0, [pc, #120]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80135dc:	f009 fb60 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80135e0:	bb40      	cbnz	r0, 8013634 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80135e2:	491d      	ldr	r1, [pc, #116]	@ (8013658 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 80135e4:	481b      	ldr	r0, [pc, #108]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80135e6:	f009 fb5b 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80135ea:	bb28      	cbnz	r0, 8013638 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80135ec:	491b      	ldr	r1, [pc, #108]	@ (801365c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 80135ee:	4819      	ldr	r0, [pc, #100]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80135f0:	f009 fb56 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80135f4:	bb10      	cbnz	r0, 801363c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80135f6:	491a      	ldr	r1, [pc, #104]	@ (8013660 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 80135f8:	4816      	ldr	r0, [pc, #88]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80135fa:	f009 fb51 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80135fe:	b9f8      	cbnz	r0, 8013640 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013600:	4918      	ldr	r1, [pc, #96]	@ (8013664 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 8013602:	4814      	ldr	r0, [pc, #80]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8013604:	f009 fb4c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013608:	b9e0      	cbnz	r0, 8013644 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801360a:	4917      	ldr	r1, [pc, #92]	@ (8013668 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 801360c:	4811      	ldr	r0, [pc, #68]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 801360e:	f009 fb47 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013612:	b9c8      	cbnz	r0, 8013648 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013614:	490f      	ldr	r1, [pc, #60]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8013616:	4608      	mov	r0, r1
 8013618:	f009 fb42 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801361c:	b9b0      	cbnz	r0, 801364c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801361e:	4913      	ldr	r1, [pc, #76]	@ (801366c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 8013620:	480c      	ldr	r0, [pc, #48]	@ (8013654 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 8013622:	f009 fb3d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8013626:	2800      	cmp	r0, #0
 8013628:	bf14      	ite	ne
 801362a:	2309      	movne	r3, #9
 801362c:	2300      	moveq	r3, #0
 801362e:	7020      	strb	r0, [r4, #0]
}
 8013630:	4618      	mov	r0, r3
 8013632:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013634:	2300      	movs	r3, #0
 8013636:	e7fa      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013638:	2301      	movs	r3, #1
 801363a:	e7f8      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801363c:	2302      	movs	r3, #2
 801363e:	e7f6      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013640:	2303      	movs	r3, #3
 8013642:	e7f4      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013644:	2304      	movs	r3, #4
 8013646:	e7f2      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013648:	2306      	movs	r3, #6
 801364a:	e7f0      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801364c:	2308      	movs	r3, #8
 801364e:	e7ee      	b.n	801362e <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8013650:	0801e1c4 	.word	0x0801e1c4
 8013654:	0801e19c 	.word	0x0801e19c
 8013658:	0801e1bc 	.word	0x0801e1bc
 801365c:	0801e1ac 	.word	0x0801e1ac
 8013660:	0801e1a4 	.word	0x0801e1a4
 8013664:	0801e1cc 	.word	0x0801e1cc
 8013668:	0801e1b4 	.word	0x0801e1b4
 801366c:	0801e194 	.word	0x0801e194

08013670 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8013670:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013672:	491e      	ldr	r1, [pc, #120]	@ (80136ec <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8013674:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013676:	481e      	ldr	r0, [pc, #120]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8013678:	f009 fb12 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801367c:	bb40      	cbnz	r0, 80136d0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801367e:	491d      	ldr	r1, [pc, #116]	@ (80136f4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8013680:	481b      	ldr	r0, [pc, #108]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8013682:	f009 fb0d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013686:	bb28      	cbnz	r0, 80136d4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013688:	4919      	ldr	r1, [pc, #100]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801368a:	4608      	mov	r0, r1
 801368c:	f009 fb08 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013690:	bb10      	cbnz	r0, 80136d8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013692:	4919      	ldr	r1, [pc, #100]	@ (80136f8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8013694:	4816      	ldr	r0, [pc, #88]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8013696:	f009 fb03 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801369a:	b9f8      	cbnz	r0, 80136dc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801369c:	4917      	ldr	r1, [pc, #92]	@ (80136fc <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 801369e:	4814      	ldr	r0, [pc, #80]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80136a0:	f009 fafe 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80136a4:	b9e0      	cbnz	r0, 80136e0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80136a6:	4916      	ldr	r1, [pc, #88]	@ (8013700 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 80136a8:	4811      	ldr	r0, [pc, #68]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80136aa:	f009 faf9 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80136ae:	b9c8      	cbnz	r0, 80136e4 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80136b0:	4914      	ldr	r1, [pc, #80]	@ (8013704 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 80136b2:	480f      	ldr	r0, [pc, #60]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80136b4:	f009 faf4 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80136b8:	b9b0      	cbnz	r0, 80136e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80136ba:	4913      	ldr	r1, [pc, #76]	@ (8013708 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 80136bc:	480c      	ldr	r0, [pc, #48]	@ (80136f0 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80136be:	f009 faef 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80136c2:	2800      	cmp	r0, #0
 80136c4:	bf14      	ite	ne
 80136c6:	2309      	movne	r3, #9
 80136c8:	2300      	moveq	r3, #0
 80136ca:	7020      	strb	r0, [r4, #0]
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80136d0:	2300      	movs	r3, #0
 80136d2:	e7fa      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80136d4:	2301      	movs	r3, #1
 80136d6:	e7f8      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80136d8:	2302      	movs	r3, #2
 80136da:	e7f6      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80136dc:	2303      	movs	r3, #3
 80136de:	e7f4      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80136e0:	2304      	movs	r3, #4
 80136e2:	e7f2      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80136e4:	2306      	movs	r3, #6
 80136e6:	e7f0      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80136e8:	2308      	movs	r3, #8
 80136ea:	e7ee      	b.n	80136ca <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 80136ec:	0801e1c4 	.word	0x0801e1c4
 80136f0:	0801e1ac 	.word	0x0801e1ac
 80136f4:	0801e1bc 	.word	0x0801e1bc
 80136f8:	0801e1a4 	.word	0x0801e1a4
 80136fc:	0801e1cc 	.word	0x0801e1cc
 8013700:	0801e1b4 	.word	0x0801e1b4
 8013704:	0801e19c 	.word	0x0801e19c
 8013708:	0801e194 	.word	0x0801e194

0801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801370c:	491e      	ldr	r1, [pc, #120]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801370e:	b510      	push	{r4, lr}
 8013710:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8013712:	4608      	mov	r0, r1
 8013714:	f009 fac4 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013718:	bb40      	cbnz	r0, 801376c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801371a:	491c      	ldr	r1, [pc, #112]	@ (801378c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 801371c:	481a      	ldr	r0, [pc, #104]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801371e:	f009 fabf 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013722:	bb28      	cbnz	r0, 8013770 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013724:	491a      	ldr	r1, [pc, #104]	@ (8013790 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8013726:	4818      	ldr	r0, [pc, #96]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8013728:	f009 faba 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801372c:	bb10      	cbnz	r0, 8013774 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801372e:	4919      	ldr	r1, [pc, #100]	@ (8013794 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8013730:	4815      	ldr	r0, [pc, #84]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8013732:	f009 fab5 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013736:	b9f8      	cbnz	r0, 8013778 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8013738:	4917      	ldr	r1, [pc, #92]	@ (8013798 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801373a:	4813      	ldr	r0, [pc, #76]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801373c:	f009 fab0 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013740:	b9e0      	cbnz	r0, 801377c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013742:	4916      	ldr	r1, [pc, #88]	@ (801379c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8013744:	4810      	ldr	r0, [pc, #64]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8013746:	f009 faab 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801374a:	b9c8      	cbnz	r0, 8013780 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801374c:	4914      	ldr	r1, [pc, #80]	@ (80137a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801374e:	480e      	ldr	r0, [pc, #56]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8013750:	f009 faa6 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8013754:	b9b0      	cbnz	r0, 8013784 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8013756:	4913      	ldr	r1, [pc, #76]	@ (80137a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8013758:	480b      	ldr	r0, [pc, #44]	@ (8013788 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801375a:	f009 faa1 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801375e:	2800      	cmp	r0, #0
 8013760:	bf14      	ite	ne
 8013762:	2309      	movne	r3, #9
 8013764:	2300      	moveq	r3, #0
 8013766:	7020      	strb	r0, [r4, #0]
}
 8013768:	4618      	mov	r0, r3
 801376a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801376c:	2300      	movs	r3, #0
 801376e:	e7fa      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8013770:	2301      	movs	r3, #1
 8013772:	e7f8      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8013774:	2302      	movs	r3, #2
 8013776:	e7f6      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8013778:	2303      	movs	r3, #3
 801377a:	e7f4      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801377c:	2304      	movs	r3, #4
 801377e:	e7f2      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8013780:	2306      	movs	r3, #6
 8013782:	e7f0      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8013784:	2308      	movs	r3, #8
 8013786:	e7ee      	b.n	8013766 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8013788:	0801e1c4 	.word	0x0801e1c4
 801378c:	0801e1bc 	.word	0x0801e1bc
 8013790:	0801e1ac 	.word	0x0801e1ac
 8013794:	0801e1a4 	.word	0x0801e1a4
 8013798:	0801e1cc 	.word	0x0801e1cc
 801379c:	0801e1b4 	.word	0x0801e1b4
 80137a0:	0801e19c 	.word	0x0801e19c
 80137a4:	0801e194 	.word	0x0801e194

080137a8 <_ZZN10Controller4InitEP9RegistersP10PublishersP4LEDSENUlfE7_4_FUNEf>:
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 80137a8:	eeb0 0ac0 	vabs.f32	s0, s0
 80137ac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80137b0:	ee17 0a90 	vmov	r0, s15
 80137b4:	4770      	bx	lr

080137b6 <_ZN10ControllerC1EP11TIM_TypeDefPm4GPIOS3_S3_S3_P17ADC_HandleTypeDef>:
Controller::Controller(TIM_TypeDef* timer, uint32_t* pulse_, GPIO EN_, GPIO SHIFTER_, GPIO IN1_, GPIO IN2_, ADC_HandleTypeDef* ADC_){
 80137b6:	b082      	sub	sp, #8
 80137b8:	b570      	push	{r4, r5, r6, lr}
 80137ba:	4604      	mov	r4, r0
 80137bc:	460e      	mov	r6, r1
 80137be:	4615      	mov	r5, r2
 80137c0:	9305      	str	r3, [sp, #20]
 80137c2:	f008 ff23 	bl	801c60c <_ZN19TrajectoryGeneratorC1Ev>
 80137c6:	f104 0278 	add.w	r2, r4, #120	@ 0x78
	: _M_start(), _M_finish(), _M_end_of_storage()
 80137ca:	2300      	movs	r3, #0
 80137cc:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
 80137d0:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 80137d4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 80137d8:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
 80137dc:	f504 7280 	add.w	r2, r4, #256	@ 0x100
 80137e0:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 80137e4:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
 80137e8:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 80137ec:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
 80137f0:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
	EN = EN_;
 80137f4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80137f8:	e9c4 3320 	strd	r3, r3, [r4, #128]	@ 0x80
 80137fc:	e9c4 332c 	strd	r3, r3, [r4, #176]	@ 0xb0
 8013800:	e9c4 3331 	strd	r3, r3, [r4, #196]	@ 0xc4
 8013804:	e9c4 333d 	strd	r3, r3, [r4, #244]	@ 0xf4
 8013808:	e9c4 3342 	strd	r3, r3, [r4, #264]	@ 0x108
 801380c:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
 8013810:	e9c4 2353 	strd	r2, r3, [r4, #332]	@ 0x14c
 8013814:	e9c4 3355 	strd	r3, r3, [r4, #340]	@ 0x154
 8013818:	f104 0350 	add.w	r3, r4, #80	@ 0x50
	pulse = pulse_;
 801381c:	e9c4 6511 	strd	r6, r5, [r4, #68]	@ 0x44
	EN = EN_;
 8013820:	e883 0003 	stmia.w	r3, {r0, r1}
	SHIFTER = SHIFTER_;
 8013824:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 8013828:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 801382c:	e883 0003 	stmia.w	r3, {r0, r1}
	IN1 = IN1_;
 8013830:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8013834:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	@ 0x24
 8013838:	e883 0003 	stmia.w	r3, {r0, r1}
	IN2 = IN2_;
 801383c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8013840:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	@ 0x2c
 8013844:	e883 0003 	stmia.w	r3, {r0, r1}
	ADC = ADC_;
 8013848:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
}
 801384a:	4620      	mov	r0, r4
	ADC = ADC_;
 801384c:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 801384e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013852:	b002      	add	sp, #8
 8013854:	4770      	bx	lr

08013856 <_ZN10Controller14SetupPublisherEh>:
/**
 * @brief Setup the controller publisher
 *
 * @param input interface_ID: the interface ID to publish on
 */
void Controller::SetupPublisher(uint8_t interface_ID) {
 8013856:	b538      	push	{r3, r4, r5, lr}
 8013858:	4604      	mov	r4, r0
 801385a:	460d      	mov	r5, r1
	// Add publisher
	publishers->AddPublisher(PUBLISHER_CONTROLLER);
 801385c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801385e:	2104      	movs	r1, #4
 8013860:	f004 fab0 	bl	8017dc4 <_ZN10Publishers12AddPublisherEh>

	// Add an interface to the publisher
	publishers->LinkToInterface(PUBLISHER_CONTROLLER, interface_ID);
 8013864:	462a      	mov	r2, r5
 8013866:	2104      	movs	r1, #4
 8013868:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801386a:	f003 ffb1 	bl	80177d0 <_ZN10Publishers15LinkToInterfaceEhh>

	// Setup publisher params
	publishers->SetPublisherPrescaler(PUBLISHER_CONTROLLER, PUBLISHER_CONTROLLER_PRESCALER);
 801386e:	2201      	movs	r2, #1
 8013870:	2104      	movs	r1, #4
 8013872:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013874:	f003 fcf6 	bl	8017264 <_ZN10Publishers21SetPublisherPrescalerEht>
	publishers->SetPublishAddress(PUBLISHER_CONTROLLER, interface_ID, PUBLISHER_CONTROLLER_ADDRESS);
 8013878:	23ff      	movs	r3, #255	@ 0xff
 801387a:	462a      	mov	r2, r5
 801387c:	2104      	movs	r1, #4
 801387e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013880:	f003 fdcd 	bl	801741e <_ZN10Publishers17SetPublishAddressEhhh>

	// Add topics
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 8013884:	2200      	movs	r2, #0
 8013886:	2104      	movs	r1, #4
 8013888:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801388a:	f003 ff19 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_ENCODER);
 801388e:	f240 120d 	movw	r2, #269	@ 0x10d
 8013892:	2104      	movs	r1, #4
 8013894:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013896:	f003 ff13 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_VOLTAGE);
 801389a:	f240 121f 	movw	r2, #287	@ 0x11f
 801389e:	2104      	movs	r1, #4
 80138a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80138a2:	f003 ff0d 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_CURRENT);
 80138a6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80138aa:	2104      	movs	r1, #4
 80138ac:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80138ae:	f003 ff07 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_HBRIDGE_POWER);
 80138b2:	f240 1211 	movw	r2, #273	@ 0x111
 80138b6:	2104      	movs	r1, #4
 80138b8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80138ba:	f003 ff01 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
	publishers->AddTopic(PUBLISHER_CONTROLLER, REG_MOTOR_SETPOINT);
 80138be:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80138c2:	2104      	movs	r1, #4
 80138c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80138c6:	f003 fefb 	bl	80176c0 <_ZN10Publishers8AddTopicEht>

	// Activate topics
#ifdef PUBLISH_CONTROLLER_TIMEBASE
	publishers->ActivateTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 80138ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80138cc:	2200      	movs	r2, #0
 80138ce:	2104      	movs	r1, #4

#ifdef PUBLISHER_CONTROLLER_ACTIVE
	// Activate publisher
	publishers->ActivatePublisher(PUBLISHER_CONTROLLER);
#endif
}
 80138d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	publishers->ActivateTopic(PUBLISHER_CONTROLLER, REG_TIMEBASE);
 80138d4:	f003 bd69 	b.w	80173aa <_ZN10Publishers13ActivateTopicEht>

080138d8 <_ZN10Controller14ActivateBridgeEv>:

/**
 * @brief Activate the H-bridge and voltage shifter
 */
void Controller::ActivateBridge(void) {
 80138d8:	b538      	push	{r3, r4, r5, lr}
	bridge_active = true;
 80138da:	2501      	movs	r5, #1
void Controller::ActivateBridge(void) {
 80138dc:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_SET);
 80138de:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
 80138e2:	462a      	mov	r2, r5
	bridge_active = true;
 80138e4:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_SET);
 80138e8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80138ea:	f7f3 f8b8 	bl	8006a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_SET);
 80138ee:	462a      	mov	r2, r5
 80138f0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80138f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
}
 80138f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_SET);
 80138fa:	f7f3 b8b0 	b.w	8006a5e <HAL_GPIO_WritePin>

080138fe <_ZN10Controller16DeactivateBridgeEv>:

/**
 * @brief Deactivate the H-bridge and voltage shifter
 */
void Controller::DeactivateBridge(void) {
 80138fe:	b538      	push	{r3, r4, r5, lr}
	bridge_active = false;
 8013900:	2500      	movs	r5, #0
void Controller::DeactivateBridge(void) {
 8013902:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_RESET);
 8013904:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
 8013908:	462a      	mov	r2, r5
	bridge_active = false;
 801390a:	f880 5070 	strb.w	r5, [r0, #112]	@ 0x70
	HAL_GPIO_WritePin(EN.port, EN.pin, GPIO_PIN_RESET);
 801390e:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8013910:	f7f3 f8a5 	bl	8006a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_RESET);
 8013914:	462a      	mov	r2, r5
 8013916:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801391a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
}
 801391c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(SHIFTER.port, SHIFTER.pin, GPIO_PIN_RESET);
 8013920:	f7f3 b89d 	b.w	8006a5e <HAL_GPIO_WritePin>

08013924 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013924:	b508      	push	{r3, lr}
			if (*input > 0)
 8013926:	7813      	ldrb	r3, [r2, #0]
 8013928:	b11b      	cbz	r3, 8013932 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0xe>
				self->ActivateBridge();
 801392a:	f7ff ffd5 	bl	80138d8 <_ZN10Controller14ActivateBridgeEv>
		}
 801392e:	2001      	movs	r0, #1
 8013930:	bd08      	pop	{r3, pc}
				self->DeactivateBridge();
 8013932:	f7ff ffe4 	bl	80138fe <_ZN10Controller16DeactivateBridgeEv>
 8013936:	e7fa      	b.n	801392e <_ZZN10Controller12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0xa>

08013938 <_ZN10Controller18ActivateControllerEv>:

/**
 * @brief Activate the controller. Blinks the controller LED
 */
void Controller::ActivateController(void) {
 8013938:	b510      	push	{r4, lr}
 801393a:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 801393c:	f04f 31ff 	mov.w	r1, #4294967295
 8013940:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013942:	f7f9 fa73 	bl	800ce2c <osSemaphoreAcquire>
#if defined(USE_LEDS) && defined(USE_SMD_LEDs)
	leds->Blink(LED_CONTROLLER);
 8013946:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013948:	2108      	movs	r1, #8
 801394a:	f001 fe86 	bl	801565a <_ZN4LEDS5BlinkEh>
#endif

	controller_active = true;
 801394e:	2301      	movs	r3, #1
	osSemaphoreRelease(ControlSemaphore);
 8013950:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	controller_active = true;
 8013952:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
}
 8013956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 801395a:	f7f9 ba9b 	b.w	800ce94 <osSemaphoreRelease>

0801395e <_ZN10Controller20DeactivateControllerEv>:

/**
 * @brief Deactivate the controller. Stop the controller LED
 */
void Controller::DeactivateController(void) {
 801395e:	b510      	push	{r4, lr}
 8013960:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013962:	f04f 31ff 	mov.w	r1, #4294967295
 8013966:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013968:	f7f9 fa60 	bl	800ce2c <osSemaphoreAcquire>
#if defined(USE_LEDS) && defined(USE_SMD_LEDs)
	leds->ClearLED(LED_CONTROLLER);
 801396c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801396e:	2108      	movs	r1, #8
 8013970:	f002 f853 	bl	8015a1a <_ZN4LEDS8ClearLEDEh>
#endif

	controller_active = false;
 8013974:	2300      	movs	r3, #0
	osSemaphoreRelease(ControlSemaphore);
 8013976:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	controller_active = false;
 8013978:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
}
 801397c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013980:	f7f9 ba88 	b.w	800ce94 <osSemaphoreRelease>

08013984 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013984:	b508      	push	{r3, lr}
			if (*input > 0)
 8013986:	7813      	ldrb	r3, [r2, #0]
 8013988:	b11b      	cbz	r3, 8013992 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
				self->ActivateController();
 801398a:	f7ff ffd5 	bl	8013938 <_ZN10Controller18ActivateControllerEv>
		}
 801398e:	2001      	movs	r0, #1
 8013990:	bd08      	pop	{r3, pc}
				self->DeactivateController();
 8013992:	f7ff ffe4 	bl	801395e <_ZN10Controller20DeactivateControllerEv>
 8013996:	e7fa      	b.n	801398e <_ZZN10Controller12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xa>

08013998 <_ZN10Controller15ResetControllerEv>:

/**
 * @brief Reset controller and reset controller variables
 */
void Controller::ResetController(void) {
 8013998:	b510      	push	{r4, lr}
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 801399a:	f04f 31ff 	mov.w	r1, #4294967295
void Controller::ResetController(void) {
 801399e:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 80139a0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80139a2:	f7f9 fa43 	bl	800ce2c <osSemaphoreAcquire>
	PWM = 0;
 80139a6:	2300      	movs	r3, #0
	error_history[0] = 0;
	error_history[1] = 0;
	error_history[2] = 0;
	error_integral = 0;
	osSemaphoreRelease(ControlSemaphore);
 80139a8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	PWM = 0;
 80139aa:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
	error_history[0] = 0;
 80139ae:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
	error_history[1] = 0;
 80139b2:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
	error_history[2] = 0;
 80139b6:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
	error_integral = 0;
 80139ba:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
}
 80139be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 80139c2:	f7f9 ba67 	b.w	800ce94 <osSemaphoreRelease>

080139c6 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80139c6:	b508      	push	{r3, lr}
			self->ResetController();
 80139c8:	f7ff ffe6 	bl	8013998 <_ZN10Controller15ResetControllerEv>
		}
 80139cc:	2001      	movs	r0, #1
 80139ce:	bd08      	pop	{r3, pc}

080139d0 <_ZN10Controller21SetControllerPeriodMsEm>:
/**
 * @brief Set the controller period
 *
 * @param input period: new controller period
 */
void Controller::SetControllerPeriodMs(uint32_t period) {
 80139d0:	b538      	push	{r3, r4, r5, lr}
 80139d2:	460d      	mov	r5, r1
 80139d4:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 80139d6:	f04f 31ff 	mov.w	r1, #4294967295
 80139da:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80139dc:	f7f9 fa26 	bl	800ce2c <osSemaphoreAcquire>
	period_ms = period; // ms
	period_s = period_ms / 1000.0f;
 80139e0:	ee07 5a90 	vmov	s15, r5
 80139e4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013a20 <_ZN10Controller21SetControllerPeriodMsEm+0x50>
	period_s_half = period_s / 2.0f;
	period_s_inv = 1.0f / period_s;
 80139e8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	period_s = period_ms / 1000.0f;
 80139ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
	period_s_double_inv = period_s_inv / 2.0f;
	osSemaphoreRelease(ControlSemaphore);
 80139f0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	period_ms = period; // ms
 80139f2:	6765      	str	r5, [r4, #116]	@ 0x74
	period_s = period_ms / 1000.0f;
 80139f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	period_s_half = period_s / 2.0f;
 80139f8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80139fc:	ee67 7a26 	vmul.f32	s15, s14, s13
	period_s = period_ms / 1000.0f;
 8013a00:	ed84 7a69 	vstr	s14, [r4, #420]	@ 0x1a4
	period_s_half = period_s / 2.0f;
 8013a04:	edc4 7a6a 	vstr	s15, [r4, #424]	@ 0x1a8
	period_s_inv = 1.0f / period_s;
 8013a08:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8013a0c:	edc4 7a6b 	vstr	s15, [r4, #428]	@ 0x1ac
	period_s_double_inv = period_s_inv / 2.0f;
 8013a10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a14:	edc4 7a6c 	vstr	s15, [r4, #432]	@ 0x1b0
}
 8013a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013a1c:	f7f9 ba3a 	b.w	800ce94 <osSemaphoreRelease>
 8013a20:	447a0000 	.word	0x447a0000

08013a24 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->SetControllerPeriodMs(*input);
 8013a24:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013a26:	b508      	push	{r3, lr}
			self->SetControllerPeriodMs(*input);
 8013a28:	f7ff ffd2 	bl	80139d0 <_ZN10Controller21SetControllerPeriodMsEm>
		}
 8013a2c:	2001      	movs	r0, #1
 8013a2e:	bd08      	pop	{r3, pc}

08013a30 <_ZN10Controller14SetEncoderZeroEv>:
}

/**
 * @brief Reset the encoder value
 */
void Controller::SetEncoderZero(void) {
 8013a30:	b510      	push	{r4, lr}
 8013a32:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013a34:	f04f 31ff 	mov.w	r1, #4294967295
 8013a38:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013a3a:	f7f9 f9f7 	bl	800ce2c <osSemaphoreAcquire>
	encoder_offset = (int32_t) (encoder->CNT);
 8013a3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
	osSemaphoreRelease(ControlSemaphore);
 8013a40:	6b60      	ldr	r0, [r4, #52]	@ 0x34
	encoder_offset = (int32_t) (encoder->CNT);
 8013a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a44:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
}
 8013a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013a4c:	f7f9 ba22 	b.w	800ce94 <osSemaphoreRelease>

08013a50 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE14_4_FUNES0_tS1_t>:
		[](void* context, uint16_t register_ID, uint8_t* input, uint16_t length) -> bool {
 8013a50:	b508      	push	{r3, lr}
			self->SetEncoderZero();
 8013a52:	f7ff ffed 	bl	8013a30 <_ZN10Controller14SetEncoderZeroEv>
		}
 8013a56:	2001      	movs	r0, #1
 8013a58:	bd08      	pop	{r3, pc}
	...

08013a5c <_ZN10Controller10DerivationEPfh>:
 * @param input values: the value to derive with previous numbers in an array
 * @param input derivation_mode: mode that defines the derivation computation
 * @return the derivated value
 */
float Controller::Derivation(float values[], uint8_t derivation_mode){
	if (derivation_mode == DER_EULER_1T) {
 8013a5c:	b952      	cbnz	r2, 8013a74 <_ZN10Controller10DerivationEPfh+0x18>
		return (values[0] - values[1]) * period_s_inv;
 8013a5e:	edd1 7a01 	vldr	s15, [r1, #4]
 8013a62:	ed91 0a00 	vldr	s0, [r1]
 8013a66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013a6a:	edd0 7a6b 	vldr	s15, [r0, #428]	@ 0x1ac
	} else if (derivation_mode == DER_EULER_2T) {
		return (values[0] - values[2]) * period_s_double_inv;
 8013a6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a72:	4770      	bx	lr
	} else if (derivation_mode == DER_EULER_2T) {
 8013a74:	2a01      	cmp	r2, #1
 8013a76:	d108      	bne.n	8013a8a <_ZN10Controller10DerivationEPfh+0x2e>
		return (values[0] - values[2]) * period_s_double_inv;
 8013a78:	edd1 7a02 	vldr	s15, [r1, #8]
 8013a7c:	ed91 0a00 	vldr	s0, [r1]
 8013a80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013a84:	edd0 7a6c 	vldr	s15, [r0, #432]	@ 0x1b0
 8013a88:	e7f1      	b.n	8013a6e <_ZN10Controller10DerivationEPfh+0x12>
	}
	return 0;
 8013a8a:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013a90 <_ZN10Controller10DerivationEPfh+0x34>
}
 8013a8e:	4770      	bx	lr
 8013a90:	00000000 	.word	0x00000000

08013a94 <_ZN10Controller11IntegrationEPfS0_bfh>:
 * @param input saturation_active: whether the integration is saturated as of a threshold
 * @param input saturation: saturation threshold to consider if saturation_active true
 * @param input integration_mode: mode that defines the integration computation
 * @return the new integral value (also accessible via the integral param)
 */
float Controller::Integration(float* integral, float values[], bool saturation_active, float saturation, uint8_t integration_mode){
 8013a94:	eef0 7a40 	vmov.f32	s15, s0
	if (saturation_active)
		if (((values[0] > 0) && (*integral > saturation)) || ((values[0] < 0) && (*integral < -saturation)))
 8013a98:	ed91 0a00 	vldr	s0, [r1]
float Controller::Integration(float* integral, float values[], bool saturation_active, float saturation, uint8_t integration_mode){
 8013a9c:	b510      	push	{r4, lr}
 8013a9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
	if (saturation_active)
 8013aa2:	b1bb      	cbz	r3, 8013ad4 <_ZN10Controller11IntegrationEPfS0_bfh+0x40>
		if (((values[0] > 0) && (*integral > saturation)) || ((values[0] < 0) && (*integral < -saturation)))
 8013aa4:	ed92 7a00 	vldr	s14, [r2]
 8013aa8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab0:	dd04      	ble.n	8013abc <_ZN10Controller11IntegrationEPfS0_bfh+0x28>
 8013ab2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aba:	d416      	bmi.n	8013aea <_ZN10Controller11IntegrationEPfS0_bfh+0x56>
 8013abc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac4:	d506      	bpl.n	8013ad4 <_ZN10Controller11IntegrationEPfS0_bfh+0x40>
 8013ac6:	eef1 7a67 	vneg.f32	s15, s15
 8013aca:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad2:	dc0a      	bgt.n	8013aea <_ZN10Controller11IntegrationEPfS0_bfh+0x56>
			return *integral;

	if (integration_mode == INT_RECT) {
 8013ad4:	b954      	cbnz	r4, 8013aec <_ZN10Controller11IntegrationEPfS0_bfh+0x58>
		*integral += values[0] * period_s;
 8013ad6:	ed92 7a00 	vldr	s14, [r2]
 8013ada:	edd0 7a69 	vldr	s15, [r0, #420]	@ 0x1a4
 8013ade:	eea7 0a27 	vfma.f32	s0, s14, s15
	} else if (integration_mode == INT_TRAP) {
		*integral += (values[0] + values[1]) * period_s_half;
 8013ae2:	ed81 0a00 	vstr	s0, [r1]
	}
	return *integral;
 8013ae6:	ed91 0a00 	vldr	s0, [r1]
}
 8013aea:	bd10      	pop	{r4, pc}
	} else if (integration_mode == INT_TRAP) {
 8013aec:	2c01      	cmp	r4, #1
 8013aee:	d1fa      	bne.n	8013ae6 <_ZN10Controller11IntegrationEPfS0_bfh+0x52>
		*integral += (values[0] + values[1]) * period_s_half;
 8013af0:	ed92 7a01 	vldr	s14, [r2, #4]
 8013af4:	edd2 7a00 	vldr	s15, [r2]
 8013af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013afc:	ed90 7a6a 	vldr	s14, [r0, #424]	@ 0x1a8
 8013b00:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013b04:	e7ed      	b.n	8013ae2 <_ZN10Controller11IntegrationEPfS0_bfh+0x4e>

08013b06 <_ZN10Controller14MeasureCurrentEv>:

/**
 * @brief Measure H-bridge current
*/
void Controller::MeasureCurrent(void) {
 8013b06:	b510      	push	{r4, lr}
 8013b08:	4604      	mov	r4, r0
	HAL_ADC_Start(ADC);
 8013b0a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8013b0c:	f7f0 f8f6 	bl	8003cfc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(ADC, 1) == HAL_OK) {
 8013b10:	2101      	movs	r1, #1
 8013b12:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8013b14:	f7ef fd28 	bl	8003568 <HAL_ADC_PollForConversion>
 8013b18:	b9e8      	cbnz	r0, 8013b56 <_ZN10Controller14MeasureCurrentEv+0x50>
		motor_current = HAL_ADC_GetValue(ADC) * current_conversion * motor_current_compensation;
 8013b1a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8013b1c:	f7ef fdbc 	bl	8003698 <HAL_ADC_GetValue>
 8013b20:	ee07 0a90 	vmov	s15, r0
 8013b24:	ed94 7a6d 	vldr	s14, [r4, #436]	@ 0x1b4
 8013b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
		if (HAL_GPIO_ReadPin(IN2.port, IN2.pin) == GPIO_PIN_SET)
 8013b2c:	f8b4 106c 	ldrh.w	r1, [r4, #108]	@ 0x6c
 8013b30:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
		motor_current = HAL_ADC_GetValue(ADC) * current_conversion * motor_current_compensation;
 8013b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b36:	ed94 7a66 	vldr	s14, [r4, #408]	@ 0x198
 8013b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b3e:	edc4 7a65 	vstr	s15, [r4, #404]	@ 0x194
		if (HAL_GPIO_ReadPin(IN2.port, IN2.pin) == GPIO_PIN_SET)
 8013b42:	f7f2 ff85 	bl	8006a50 <HAL_GPIO_ReadPin>
 8013b46:	2801      	cmp	r0, #1
			motor_current = -motor_current;
 8013b48:	bf02      	ittt	eq
 8013b4a:	edd4 7a65 	vldreq	s15, [r4, #404]	@ 0x194
 8013b4e:	eef1 7a67 	vnegeq.f32	s15, s15
 8013b52:	edc4 7a65 	vstreq	s15, [r4, #404]	@ 0x194
	}
	HAL_ADC_Stop(ADC);
 8013b56:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
}
 8013b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Stop(ADC);
 8013b5c:	f7f0 b9a0 	b.w	8003ea0 <HAL_ADC_Stop>

08013b60 <_ZN10Controller20SelectControllerModeEh>:
void Controller::SelectControllerMode(uint8_t mode_) {
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	460d      	mov	r5, r1
 8013b64:	b08c      	sub	sp, #48	@ 0x30
 8013b66:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013b68:	f04f 31ff 	mov.w	r1, #4294967295
 8013b6c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013b6e:	f7f9 f95d 	bl	800ce2c <osSemaphoreAcquire>
	switch (mode_) {
 8013b72:	2d01      	cmp	r5, #1
 8013b74:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8013b76:	a905      	add	r1, sp, #20
 8013b78:	aa07      	add	r2, sp, #28
	mode = mode_;
 8013b7a:	f884 5072 	strb.w	r5, [r4, #114]	@ 0x72
	switch (mode_) {
 8013b7e:	d01b      	beq.n	8013bb8 <_ZN10Controller20SelectControllerModeEh+0x58>
 8013b80:	2d02      	cmp	r5, #2
 8013b82:	d026      	beq.n	8013bd2 <_ZN10Controller20SelectControllerModeEh+0x72>
 8013b84:	bb7d      	cbnz	r5, 8013be6 <_ZN10Controller20SelectControllerModeEh+0x86>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1}, 10);
 8013b86:	2301      	movs	r3, #1
 8013b88:	f88d 3014 	strb.w	r3, [sp, #20]
 8013b8c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013b90:	4613      	mov	r3, r2
 8013b92:	2201      	movs	r2, #1
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{5}, 10);
 8013b94:	a809      	add	r0, sp, #36	@ 0x24
 8013b96:	f7ed f8f7 	bl	8000d88 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8013b9a:	230a      	movs	r3, #10
 8013b9c:	aa09      	add	r2, sp, #36	@ 0x24
 8013b9e:	2108      	movs	r1, #8
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f002 fa22 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
      }
 8013ba6:	a809      	add	r0, sp, #36	@ 0x24
 8013ba8:	f7ec ff9a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	osSemaphoreRelease(ControlSemaphore);
 8013bac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8013bae:	b00c      	add	sp, #48	@ 0x30
 8013bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013bb4:	f7f9 b96e 	b.w	800ce94 <osSemaphoreRelease>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1,2,3}, 10);
 8013bb8:	f240 2301 	movw	r3, #513	@ 0x201
 8013bbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013bc0:	2303      	movs	r3, #3
 8013bc2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013bc6:	f88d 301e 	strb.w	r3, [sp, #30]
 8013bca:	2203      	movs	r2, #3
 8013bcc:	460b      	mov	r3, r1
 8013bce:	9903      	ldr	r1, [sp, #12]
 8013bd0:	e7e0      	b.n	8013b94 <_ZN10Controller20SelectControllerModeEh+0x34>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{1,2,3,4,5}, 10);
 8013bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8013bfc <_ZN10Controller20SelectControllerModeEh+0x9c>)
 8013bd4:	9307      	str	r3, [sp, #28]
 8013bd6:	2305      	movs	r3, #5
 8013bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bdc:	f88d 3020 	strb.w	r3, [sp, #32]
 8013be0:	ab03      	add	r3, sp, #12
 8013be2:	c906      	ldmia	r1, {r1, r2}
 8013be4:	e7d6      	b.n	8013b94 <_ZN10Controller20SelectControllerModeEh+0x34>
		leds->ConfigureTimings(LED_CONTROLLER, std::vector<uint8_t>{5}, 10);
 8013be6:	2305      	movs	r3, #5
 8013be8:	f88d 300c 	strb.w	r3, [sp, #12]
 8013bec:	ab03      	add	r3, sp, #12
 8013bee:	9307      	str	r3, [sp, #28]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	9308      	str	r3, [sp, #32]
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	ca06      	ldmia	r2, {r1, r2}
 8013bf8:	e7cc      	b.n	8013b94 <_ZN10Controller20SelectControllerModeEh+0x34>
 8013bfa:	bf00      	nop
 8013bfc:	04030201 	.word	0x04030201

08013c00 <_ZZN10Controller12AddRegistersEvENUlPvtPhtE7_4_FUNES0_tS1_t>:
			self->SelectControllerMode(*input);
 8013c00:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8013c02:	b508      	push	{r3, lr}
			self->SelectControllerMode(*input);
 8013c04:	f7ff ffac 	bl	8013b60 <_ZN10Controller20SelectControllerModeEh>
		}
 8013c08:	2001      	movs	r0, #1
 8013c0a:	bd08      	pop	{r3, pc}

08013c0c <_ZN10Controller10MoveFromToEff>:
void Controller::MoveFromTo(float start, float target) {
 8013c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c10:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013c12:	f04f 31ff 	mov.w	r1, #4294967295
 8013c16:	6b40      	ldr	r0, [r0, #52]	@ 0x34
void Controller::MoveFromTo(float start, float target) {
 8013c18:	ed2d 8b02 	vpush	{d8}
 8013c1c:	b084      	sub	sp, #16
 8013c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8013c22:	eef0 8a60 	vmov.f32	s17, s1
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013c26:	f7f9 f901 	bl	800ce2c <osSemaphoreAcquire>
	ControllerConfiguration* configuration = configurations[mode];
 8013c2a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013c2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013c32:	f8d3 7144 	ldr.w	r7, [r3, #324]	@ 0x144
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d026      	beq.n	8013c8c <_ZN10Controller10MoveFromToEff+0x80>
	uint8_t selected_filter = configuration->selected_filter;
 8013c3e:	793d      	ldrb	r5, [r7, #4]
 8013c40:	1a9b      	subs	r3, r3, r2
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8013c42:	ebb5 0fa3 	cmp.w	r5, r3, asr #2
 8013c46:	d221      	bcs.n	8013c8c <_ZN10Controller10MoveFromToEff+0x80>
		filtered_start = configuration->input_filters[selected_filter](start, params);
 8013c48:	f504 76a8 	add.w	r6, r4, #336	@ 0x150
	return *(this->_M_impl._M_start + __n);
 8013c4c:	b22d      	sxth	r5, r5
 8013c4e:	a801      	add	r0, sp, #4
 8013c50:	4631      	mov	r1, r6
 8013c52:	f852 8025 	ldr.w	r8, [r2, r5, lsl #2]
 8013c56:	f7fe fec1 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8013c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8013c5e:	a801      	add	r0, sp, #4
 8013c60:	47c0      	blx	r8
      }
 8013c62:	a801      	add	r0, sp, #4
 8013c64:	eeb0 8a40 	vmov.f32	s16, s0
 8013c68:	f7ee f998 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
		filtered_target = configuration->input_filters[selected_filter](target, params);
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	4631      	mov	r1, r6
 8013c70:	a801      	add	r0, sp, #4
 8013c72:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8013c76:	f7fe feb1 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8013c7a:	eeb0 0a68 	vmov.f32	s0, s17
 8013c7e:	a801      	add	r0, sp, #4
 8013c80:	47a8      	blx	r5
 8013c82:	a801      	add	r0, sp, #4
 8013c84:	eef0 8a40 	vmov.f32	s17, s0
 8013c88:	f7ee f988 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	trajectory_generator.StartTrajectory(filtered_start, filtered_target);
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	eef0 0a68 	vmov.f32	s1, s17
 8013c92:	eeb0 0a48 	vmov.f32	s0, s16
 8013c96:	f008 fd49 	bl	801c72c <_ZN19TrajectoryGenerator15StartTrajectoryEff>
	osSemaphoreRelease(ControlSemaphore);
 8013c9a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8013c9c:	b004      	add	sp, #16
 8013c9e:	ecbd 8b02 	vpop	{d8}
 8013ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013ca6:	f7f9 b8f5 	b.w	800ce94 <osSemaphoreRelease>

08013caa <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8013caa:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_ID, float* input, uint16_t length) -> bool {
 8013cac:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8013cae:	d107      	bne.n	8013cc0 <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t+0x16>
			self->MoveFromTo(input[0], input[1]);
 8013cb0:	edd2 0a01 	vldr	s1, [r2, #4]
 8013cb4:	ed92 0a00 	vldr	s0, [r2]
 8013cb8:	f7ff ffa8 	bl	8013c0c <_ZN10Controller10MoveFromToEff>
 8013cbc:	2001      	movs	r0, #1
		}
 8013cbe:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	e7fc      	b.n	8013cbe <_ZZN10Controller12AddRegistersEvENUlPvtPftE12_4_FUNES0_tS1_t+0x14>

08013cc4 <_ZN10Controller6MoveToEf>:
void Controller::MoveTo(float target) {
 8013cc4:	b570      	push	{r4, r5, r6, lr}
 8013cc6:	4604      	mov	r4, r0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8013ccc:	6b40      	ldr	r0, [r0, #52]	@ 0x34
void Controller::MoveTo(float target) {
 8013cce:	ed2d 8b02 	vpush	{d8}
 8013cd2:	b084      	sub	sp, #16
 8013cd4:	eeb0 8a40 	vmov.f32	s16, s0
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013cd8:	f7f9 f8a8 	bl	800ce2c <osSemaphoreAcquire>
	ControllerConfiguration* configuration = configurations[mode];
 8013cdc:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013ce0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013ce4:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013ce8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d014      	beq.n	8013d1a <_ZN10Controller6MoveToEf+0x56>
	uint8_t selected_filter = configuration->selected_filter;
 8013cf0:	7929      	ldrb	r1, [r5, #4]
 8013cf2:	1a9b      	subs	r3, r3, r2
	if (configuration->input_filters.size() > 0 && selected_filter < configuration->input_filters.size()) {
 8013cf4:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 8013cf8:	d20f      	bcs.n	8013d1a <_ZN10Controller6MoveToEf+0x56>
		filtered_target = configuration->input_filters[selected_filter](target, params);
 8013cfa:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 8013cfe:	a801      	add	r0, sp, #4
 8013d00:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
 8013d04:	f7fe fe6a 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8013d08:	eeb0 0a48 	vmov.f32	s0, s16
 8013d0c:	a801      	add	r0, sp, #4
 8013d0e:	47b0      	blx	r6
      }
 8013d10:	a801      	add	r0, sp, #4
 8013d12:	eeb0 8a40 	vmov.f32	s16, s0
 8013d16:	f7ee f941 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	trajectory_generator.StartTrajectory(*(configuration->track), filtered_target);
 8013d1a:	682b      	ldr	r3, [r5, #0]
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	eef0 0a48 	vmov.f32	s1, s16
 8013d22:	ed93 0a00 	vldr	s0, [r3]
 8013d26:	f008 fd01 	bl	801c72c <_ZN19TrajectoryGenerator15StartTrajectoryEff>
	osSemaphoreRelease(ControlSemaphore);
 8013d2a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
}
 8013d2c:	b004      	add	sp, #16
 8013d2e:	ecbd 8b02 	vpop	{d8}
 8013d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	osSemaphoreRelease(ControlSemaphore);
 8013d36:	f7f9 b8ad 	b.w	800ce94 <osSemaphoreRelease>

08013d3a <_ZZN10Controller12AddRegistersEvENUlPvtPftE13_4_FUNES0_tS1_t>:
			self->MoveTo(*input);
 8013d3a:	ed92 0a00 	vldr	s0, [r2]
		[](void* context, uint16_t register_ID, float* input, uint16_t length) -> bool {
 8013d3e:	b508      	push	{r3, lr}
			self->MoveTo(*input);
 8013d40:	f7ff ffc0 	bl	8013cc4 <_ZN10Controller6MoveToEf>
		}
 8013d44:	2001      	movs	r0, #1
 8013d46:	bd08      	pop	{r3, pc}

08013d48 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>:
      at(size_type __n)
 8013d48:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013d4a:	e9d0 5400 	ldrd	r5, r4, [r0]
 8013d4e:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 8013d50:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013d54:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 8013d58:	d302      	bcc.n	8013d60 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8013d5a:	4803      	ldr	r0, [pc, #12]	@ (8013d68 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj+0x20>)
 8013d5c:	f008 ffc1 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8013d60:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 8013d64:	bd38      	pop	{r3, r4, r5, pc}
 8013d66:	bf00      	nop
 8013d68:	0801dfb4 	.word	0x0801dfb4

08013d6c <_ZN10Controller7ControlEv>:
void Controller::Control(void){
 8013d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d6e:	4604      	mov	r4, r0
 8013d70:	b08b      	sub	sp, #44	@ 0x2c
	osSemaphoreAcquire(ControlSemaphore, osWaitForever);
 8013d72:	f04f 31ff 	mov.w	r1, #4294967295
 8013d76:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8013d78:	f7f9 f858 	bl	800ce2c <osSemaphoreAcquire>
	encoder_position = ((int32_t) (encoder->CNT)) - encoder_offset;
 8013d7c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013d7e:	f8d4 2168 	ldr.w	r2, [r4, #360]	@ 0x168
 8013d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d84:	1a9b      	subs	r3, r3, r2
	if (encoder_security_threshold > 0 && (uint32_t) abs((int32_t) encoder_position) > encoder_security_threshold) {
 8013d86:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
	encoder_position = ((int32_t) (encoder->CNT)) - encoder_offset;
 8013d8a:	ee07 3a90 	vmov	s15, r3
 8013d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d92:	edc4 7a5c 	vstr	s15, [r4, #368]	@ 0x170
	if (encoder_security_threshold > 0 && (uint32_t) abs((int32_t) encoder_position) > encoder_security_threshold) {
 8013d96:	b18a      	cbz	r2, 8013dbc <_ZN10Controller7ControlEv+0x50>
 8013d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013d9c:	ee17 3a90 	vmov	r3, s15
  abs(long __i) { return __builtin_labs(__i); }
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	bfb8      	it	lt
 8013da4:	425b      	neglt	r3, r3
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d208      	bcs.n	8013dbc <_ZN10Controller7ControlEv+0x50>
		controller_active = false;
 8013daa:	2300      	movs	r3, #0
		DeactivateBridge();
 8013dac:	4620      	mov	r0, r4
		controller_active = false;
 8013dae:	f884 3071 	strb.w	r3, [r4, #113]	@ 0x71
		DeactivateBridge();
 8013db2:	f7ff fda4 	bl	80138fe <_ZN10Controller16DeactivateBridgeEv>
		ControllerFaultLEDS(leds);
 8013db6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013db8:	f7fb f972 	bl	800f0a0 <_Z19ControllerFaultLEDSP4LEDS>
	MeasureCurrent();
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f7ff fea2 	bl	8013b06 <_ZN10Controller14MeasureCurrentEv>
	bool success = registers->ReadRegister<float>(REG_MOTOR_VOLTAGE, &motor_voltage, &length);
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	f504 72c8 	add.w	r2, r4, #400	@ 0x190
 8013dc8:	f44f 710a 	mov.w	r1, #552	@ 0x228
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	f10d 030e 	add.w	r3, sp, #14
 8013dd2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013dd4:	f7fb ff22 	bl	800fc1c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
	if (success)
 8013dd8:	b138      	cbz	r0, 8013dea <_ZN10Controller7ControlEv+0x7e>
		motor_power = motor_current * motor_voltage;
 8013dda:	edd4 7a65 	vldr	s15, [r4, #404]	@ 0x194
 8013dde:	ed94 7a64 	vldr	s14, [r4, #400]	@ 0x190
 8013de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013de6:	edc4 7a67 	vstr	s15, [r4, #412]	@ 0x19c
	if (controller_active) {
 8013dea:	f894 3071 	ldrb.w	r3, [r4, #113]	@ 0x71
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	f000 80e0 	beq.w	8013fb4 <_ZN10Controller7ControlEv+0x248>
		encoder_history[1] = encoder_history[0];
 8013df4:	ed94 7a5d 	vldr	s14, [r4, #372]	@ 0x174
		setpoint = trajectory_generator.GenerateSetPoint();
 8013df8:	4620      	mov	r0, r4
		encoder_history[0] = encoder_position;
 8013dfa:	edd4 7a5c 	vldr	s15, [r4, #368]	@ 0x170
		encoder_history[2] = encoder_history[1];
 8013dfe:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
		encoder_history[0] = encoder_position;
 8013e02:	edc4 7a5d 	vstr	s15, [r4, #372]	@ 0x174
		return (values[0] - values[1]) * period_s_inv;
 8013e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
		encoder_history[1] = encoder_history[0];
 8013e0a:	ed84 7a5e 	vstr	s14, [r4, #376]	@ 0x178
		return (values[0] - values[1]) * period_s_inv;
 8013e0e:	ed94 7a6b 	vldr	s14, [r4, #428]	@ 0x1ac
		encoder_history[2] = encoder_history[1];
 8013e12:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
		return (values[0] - values[1]) * period_s_inv;
 8013e16:	ee67 7a87 	vmul.f32	s15, s15, s14
		encoder_speed = Derivation(encoder_history, DEFAULT_SPEED_DERIVATION_MODE);
 8013e1a:	edc4 7a60 	vstr	s15, [r4, #384]	@ 0x180
		setpoint = trajectory_generator.GenerateSetPoint();
 8013e1e:	f008 fd53 	bl	801c8c8 <_ZN19TrajectoryGenerator16GenerateSetPointEv>
		float error = setpoint - *((*configurations[mode]).track);
 8013e22:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
		setpoint = trajectory_generator.GenerateSetPoint();
 8013e26:	ed84 0a58 	vstr	s0, [r4, #352]	@ 0x160
		float error = setpoint - *((*configurations[mode]).track);
 8013e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e2e:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 8013e32:	682b      	ldr	r3, [r5, #0]
 8013e34:	edd3 7a00 	vldr	s15, [r3]
		error_history[2] = error_history[1];
 8013e38:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
		float error = setpoint - *((*configurations[mode]).track);
 8013e3c:	ee30 0a67 	vsub.f32	s0, s0, s15
		PWM = 0;
 8013e40:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8013fd0 <_ZN10Controller7ControlEv+0x264>
		error_history[2] = error_history[1];
 8013e44:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
		error_history[1] = error_history[0];
 8013e48:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
		PWM = 0;
 8013e4c:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		error_history[1] = error_history[0];
 8013e50:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
		if ((*configurations[mode]).P_active) 		PWM += error;
 8013e54:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
		error_history[0] = error;
 8013e58:	ed84 0a61 	vstr	s0, [r4, #388]	@ 0x184
		if ((*configurations[mode]).P_active) 		PWM += error;
 8013e5c:	b11b      	cbz	r3, 8013e66 <_ZN10Controller7ControlEv+0xfa>
 8013e5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e62:	ed84 0a59 	vstr	s0, [r4, #356]	@ 0x164
		if ((*configurations[mode]).I_active) 		PWM += (*configurations[mode]).Ti_inv * Integration(&error_integral, error_history, (*configurations[mode]).S_active, (*configurations[mode]).Isaturation, integration_type);
 8013e66:	f895 3025 	ldrb.w	r3, [r5, #37]	@ 0x25
 8013e6a:	b1ab      	cbz	r3, 8013e98 <_ZN10Controller7ControlEv+0x12c>
 8013e6c:	f894 215c 	ldrb.w	r2, [r4, #348]	@ 0x15c
 8013e70:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8013e74:	edd5 6a06 	vldr	s13, [r5, #24]
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f895 3027 	ldrb.w	r3, [r5, #39]	@ 0x27
 8013e7e:	9200      	str	r2, [sp, #0]
 8013e80:	f504 72c2 	add.w	r2, r4, #388	@ 0x184
 8013e84:	ed95 0a08 	vldr	s0, [r5, #32]
 8013e88:	f7ff fe04 	bl	8013a94 <_ZN10Controller11IntegrationEPfS0_bfh>
 8013e8c:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
 8013e90:	eee6 7a80 	vfma.f32	s15, s13, s0
 8013e94:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		if ((*configurations[mode]).D_active) 		PWM += (*configurations[mode]).Td * Derivation(error_history, derivation_type);
 8013e98:	f895 3026 	ldrb.w	r3, [r5, #38]	@ 0x26
 8013e9c:	b173      	cbz	r3, 8013ebc <_ZN10Controller7ControlEv+0x150>
 8013e9e:	ed94 7a59 	vldr	s14, [r4, #356]	@ 0x164
 8013ea2:	f504 71c2 	add.w	r1, r4, #388	@ 0x184
 8013ea6:	edd5 6a07 	vldr	s13, [r5, #28]
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f894 215d 	ldrb.w	r2, [r4, #349]	@ 0x15d
 8013eb0:	f7ff fdd4 	bl	8013a5c <_ZN10Controller10DerivationEPfh>
 8013eb4:	eea6 7a80 	vfma.f32	s14, s13, s0
 8013eb8:	ed84 7a59 	vstr	s14, [r4, #356]	@ 0x164
		PWM = (*configurations[mode]).K * PWM;
 8013ebc:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
 8013ec0:	ed95 7a05 	vldr	s14, [r5, #20]
		if ((*configurations[mode]).model_active) 	PWM += (*configurations[mode]).model((*configurations[mode]).model_variables, params);
 8013ec4:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
		PWM = (*configurations[mode]).K * PWM;
 8013ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ecc:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
		if ((*configurations[mode]).model_active) 	PWM += (*configurations[mode]).model((*configurations[mode]).model_variables, params);
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d039      	beq.n	8013f48 <_ZN10Controller7ControlEv+0x1dc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013ed8:	e9d5 260e 	ldrd	r2, r6, [r5, #56]	@ 0x38
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013edc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013ee0:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8013ee2:	9306      	str	r3, [sp, #24]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013ee4:	d072      	beq.n	8013fcc <_ZN10Controller7ControlEv+0x260>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8013fd4 <_ZN10Controller7ControlEv+0x268>)
 8013ee8:	429e      	cmp	r6, r3
 8013eea:	d901      	bls.n	8013ef0 <_ZN10Controller7ControlEv+0x184>
	      std::__throw_bad_array_new_length();
 8013eec:	f008 fef3 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f008 fe3e 	bl	801cb72 <_Znwj>
 8013ef6:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013ef8:	441e      	add	r6, r3
      : _M_current(__i) { }
 8013efa:	e9d5 120e 	ldrd	r1, r2, [r5, #56]	@ 0x38
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013efe:	e9cd 3304 	strd	r3, r3, [sp, #16]
	  if (_Num)
 8013f02:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8013f04:	eba2 0501 	sub.w	r5, r2, r1
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013f08:	9606      	str	r6, [sp, #24]
	  if (_Num)
 8013f0a:	d004      	beq.n	8013f16 <_ZN10Controller7ControlEv+0x1aa>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	462a      	mov	r2, r5
 8013f10:	f009 fdac 	bl	801da6c <memmove>
 8013f14:	4603      	mov	r3, r0
	  return __result + _Num;
 8013f16:	442b      	add	r3, r5
 8013f18:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
 8013f1c:	a807      	add	r0, sp, #28
	this->_M_impl._M_finish =
 8013f1e:	9305      	str	r3, [sp, #20]
 8013f20:	f7fe fd5c 	bl	80129dc <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8013f24:	a907      	add	r1, sp, #28
 8013f26:	a804      	add	r0, sp, #16
 8013f28:	47b8      	blx	r7
 8013f2a:	edd4 7a59 	vldr	s15, [r4, #356]	@ 0x164
      }
 8013f2e:	a807      	add	r0, sp, #28
 8013f30:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013f34:	edc4 7a59 	vstr	s15, [r4, #356]	@ 0x164
 8013f38:	f7ee f830 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
	_M_deallocate(_M_impl._M_start,
 8013f3c:	9804      	ldr	r0, [sp, #16]
	if (__p)
 8013f3e:	b118      	cbz	r0, 8013f48 <_ZN10Controller7ControlEv+0x1dc>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013f40:	9906      	ldr	r1, [sp, #24]
 8013f42:	1a09      	subs	r1, r1, r0
 8013f44:	f008 fdf0 	bl	801cb28 <_ZdlPvj>
		HAL_GPIO_WritePin(IN1.port, IN1.pin, (GPIO_PinState) (*((*configurations[mode]).direction_criteria) > 0));
 8013f48:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013f4c:	f8b4 1064 	ldrh.w	r1, [r4, #100]	@ 0x64
 8013f50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f54:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8013f56:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8013f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f5c:	edd3 7a00 	vldr	s15, [r3]
 8013f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f68:	bfcc      	ite	gt
 8013f6a:	2201      	movgt	r2, #1
 8013f6c:	2200      	movle	r2, #0
 8013f6e:	f7f2 fd76 	bl	8006a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2.port, IN2.pin, (GPIO_PinState) (*((*configurations[mode]).direction_criteria) < 0));
 8013f72:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013f76:	f8b4 106c 	ldrh.w	r1, [r4, #108]	@ 0x6c
 8013f7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f7e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8013f80:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8013f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f86:	edd3 7a00 	vldr	s15, [r3]
 8013f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f92:	bf4c      	ite	mi
 8013f94:	2201      	movmi	r2, #1
 8013f96:	2200      	movpl	r2, #0
 8013f98:	f7f2 fd61 	bl	8006a5e <HAL_GPIO_WritePin>
		*pulse = (*configurations[mode]).PWMAssignement(PWM);
 8013f9c:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013fa0:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8013fa2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fa6:	ed94 0a59 	vldr	s0, [r4, #356]	@ 0x164
 8013faa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8013fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fb0:	4798      	blx	r3
 8013fb2:	6028      	str	r0, [r5, #0]
	osSemaphoreRelease(ControlSemaphore);
 8013fb4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013fb6:	f7f8 ff6d 	bl	800ce94 <osSemaphoreRelease>
	publishers->SpinPublisher(PUBLISHER_CONTROLLER);
 8013fba:	2104      	movs	r1, #4
 8013fbc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013fbe:	f004 f8c1 	bl	8018144 <_ZN10Publishers13SpinPublisherEh>
	osDelay(period_ms);
 8013fc2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013fc4:	f7f8 fec8 	bl	800cd58 <osDelay>
}
 8013fc8:	b00b      	add	sp, #44	@ 0x2c
 8013fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8013fcc:	4633      	mov	r3, r6
 8013fce:	e793      	b.n	8013ef8 <_ZN10Controller7ControlEv+0x18c>
 8013fd0:	00000000 	.word	0x00000000
 8013fd4:	7ffffffc 	.word	0x7ffffffc

08013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8013fd8:	b570      	push	{r4, r5, r6, lr}
 8013fda:	4604      	mov	r4, r0
 8013fdc:	b086      	sub	sp, #24
 8013fde:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8013fe0:	6800      	ldr	r0, [r0, #0]
 8013fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8013fe6:	f7f8 ff21 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8013fea:	f10d 0207 	add.w	r2, sp, #7
 8013fee:	4631      	mov	r1, r6
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f004 fb8a 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8013ff6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8013ffa:	b125      	cbz	r5, 8014006 <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8013ffc:	6820      	ldr	r0, [r4, #0]
 8013ffe:	f7f8 ff49 	bl	800ce94 <osSemaphoreRelease>
}
 8014002:	b006      	add	sp, #24
 8014004:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014006:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801400a:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801400e:	f7ff fae1 	bl	80135d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 8014012:	2301      	movs	r3, #1
 8014014:	f8ad 600a 	strh.w	r6, [sp, #10]
 8014018:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801401c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014020:	f88d 000c 	strb.w	r0, [sp, #12]
 8014024:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8014028:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801402c:	2b00      	cmp	r3, #0
 801402e:	d0e5      	beq.n	8013ffc <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014030:	a902      	add	r1, sp, #8
 8014032:	1d20      	adds	r0, r4, #4
 8014034:	f7fb fefc 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8014038:	e7e0      	b.n	8013ffc <_ZN9Registers11AddRegisterIfEEbt.isra.0+0x24>

0801403a <_ZN9Registers11AddRegisterImEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801403a:	b570      	push	{r4, r5, r6, lr}
 801403c:	4604      	mov	r4, r0
 801403e:	b086      	sub	sp, #24
 8014040:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014042:	6800      	ldr	r0, [r0, #0]
 8014044:	f04f 31ff 	mov.w	r1, #4294967295
 8014048:	f7f8 fef0 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801404c:	f10d 0207 	add.w	r2, sp, #7
 8014050:	4631      	mov	r1, r6
 8014052:	4620      	mov	r0, r4
 8014054:	f004 fb59 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8014058:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801405c:	b125      	cbz	r5, 8014068 <_ZN9Registers11AddRegisterImEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801405e:	6820      	ldr	r0, [r4, #0]
 8014060:	f7f8 ff18 	bl	800ce94 <osSemaphoreRelease>
}
 8014064:	b006      	add	sp, #24
 8014066:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014068:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801406c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8014070:	f7ff fafe 	bl	8013670 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 8014074:	2301      	movs	r3, #1
 8014076:	f8ad 600a 	strh.w	r6, [sp, #10]
 801407a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801407e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8014082:	f88d 000c 	strb.w	r0, [sp, #12]
 8014086:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801408a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801408e:	2b00      	cmp	r3, #0
 8014090:	d0e5      	beq.n	801405e <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8014092:	a902      	add	r1, sp, #8
 8014094:	1d20      	adds	r0, r4, #4
 8014096:	f7fb fecb 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801409a:	e7e0      	b.n	801405e <_ZN9Registers11AddRegisterImEEbt.isra.0+0x24>

0801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801409c:	b570      	push	{r4, r5, r6, lr}
 801409e:	4604      	mov	r4, r0
 80140a0:	b086      	sub	sp, #24
 80140a2:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80140a4:	6800      	ldr	r0, [r0, #0]
 80140a6:	f04f 31ff 	mov.w	r1, #4294967295
 80140aa:	f7f8 febf 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80140ae:	f10d 0207 	add.w	r2, sp, #7
 80140b2:	4631      	mov	r1, r6
 80140b4:	4620      	mov	r0, r4
 80140b6:	f004 fb28 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80140ba:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80140be:	b125      	cbz	r5, 80140ca <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80140c0:	6820      	ldr	r0, [r4, #0]
 80140c2:	f7f8 fee7 	bl	800ce94 <osSemaphoreRelease>
}
 80140c6:	b006      	add	sp, #24
 80140c8:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80140ca:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80140ce:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80140d2:	f7ff fb1b 	bl	801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 80140d6:	2301      	movs	r3, #1
 80140d8:	f8ad 600a 	strh.w	r6, [sp, #10]
 80140dc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80140e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80140e4:	f88d 000c 	strb.w	r0, [sp, #12]
 80140e8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80140ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d0e5      	beq.n	80140c0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 80140f4:	a902      	add	r1, sp, #8
 80140f6:	1d20      	adds	r0, r4, #4
 80140f8:	f7fb fe9a 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 80140fc:	e7e0      	b.n	80140c0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

080140fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 80140fe:	b570      	push	{r4, r5, r6, lr}
 8014100:	460c      	mov	r4, r1
 8014102:	b086      	sub	sp, #24
 8014104:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014106:	f04f 31ff 	mov.w	r1, #4294967295
 801410a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801410c:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801410e:	f7f8 fe8d 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014112:	4621      	mov	r1, r4
 8014114:	f10d 0207 	add.w	r2, sp, #7
 8014118:	4628      	mov	r0, r5
 801411a:	f004 faf6 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801411e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014122:	4604      	mov	r4, r0
	if (!success) {
 8014124:	b923      	cbnz	r3, 8014130 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 8014126:	6828      	ldr	r0, [r5, #0]
 8014128:	f7f8 feb4 	bl	800ce94 <osSemaphoreRelease>
}
 801412c:	b006      	add	sp, #24
 801412e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8014130:	f10d 0007 	add.w	r0, sp, #7
 8014134:	f7ff faea 	bl	801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d0f2      	beq.n	8014126 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 8014140:	7923      	ldrb	r3, [r4, #4]
 8014142:	4298      	cmp	r0, r3
 8014144:	d1ef      	bne.n	8014126 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014146:	3004      	adds	r0, #4
 8014148:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801414c:	2800      	cmp	r0, #0
 801414e:	d0ea      	beq.n	8014126 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014150:	7823      	ldrb	r3, [r4, #0]
 8014152:	b983      	cbnz	r3, 8014176 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
 8014154:	7863      	ldrb	r3, [r4, #1]
 8014156:	b973      	cbnz	r3, 8014176 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 8014158:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801415a:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801415c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014160:	1a9b      	subs	r3, r3, r2
 8014162:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014164:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014166:	f7fc fc9f 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801416a:	2301      	movs	r3, #1
 801416c:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801416e:	f240 1301 	movw	r3, #257	@ 0x101
 8014172:	8123      	strh	r3, [r4, #8]
 8014174:	e7d7      	b.n	8014126 <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014176:	8961      	ldrh	r1, [r4, #10]
 8014178:	f7fc fb5c 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->pointer = pointer;
 801417c:	6006      	str	r6, [r0, #0]
 801417e:	e7f4      	b.n	801416a <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0+0x6c>

08014180 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>:
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 8014180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014182:	460c      	mov	r4, r1
 8014184:	b087      	sub	sp, #28
 8014186:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014188:	f04f 31ff 	mov.w	r1, #4294967295
 801418c:	6800      	ldr	r0, [r0, #0]
bool Registers::AddReadCallback(uint16_t ID, void* context, bool (*read)(void*, uint16_t, T**, uint16_t*)) {
 801418e:	461e      	mov	r6, r3
 8014190:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014192:	f7f8 fe4b 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014196:	4621      	mov	r1, r4
 8014198:	f10d 0207 	add.w	r2, sp, #7
 801419c:	4628      	mov	r0, r5
 801419e:	f004 fab4 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80141a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80141a6:	4604      	mov	r4, r0
	if (!success) {
 80141a8:	b923      	cbnz	r3, 80141b4 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 80141aa:	6828      	ldr	r0, [r5, #0]
 80141ac:	f7f8 fe72 	bl	800ce94 <osSemaphoreRelease>
}
 80141b0:	b007      	add	sp, #28
 80141b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80141b4:	f10d 0007 	add.w	r0, sp, #7
 80141b8:	f7ff faa8 	bl	801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80141bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d0f2      	beq.n	80141aa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 80141c4:	7923      	ldrb	r3, [r4, #4]
 80141c6:	4298      	cmp	r0, r3
 80141c8:	d1ef      	bne.n	80141aa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 80141ca:	3004      	adds	r0, #4
 80141cc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d0ea      	beq.n	80141aa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80141d4:	7823      	ldrb	r3, [r4, #0]
 80141d6:	b983      	cbnz	r3, 80141fa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
 80141d8:	7863      	ldrb	r3, [r4, #1]
 80141da:	b973      	cbnz	r3, 80141fa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x7a>
		target_callback_list->push_back(callback);
 80141dc:	a902      	add	r1, sp, #8
		callback.read = read;
 80141de:	9605      	str	r6, [sp, #20]
		callback.write = NULL;
 80141e0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80141e4:	e9d0 2300 	ldrd	r2, r3, [r0]
 80141e8:	1a9b      	subs	r3, r3, r2
 80141ea:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80141ec:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80141ee:	f7fc fc5b 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 80141f2:	2301      	movs	r3, #1
 80141f4:	7063      	strb	r3, [r4, #1]
	target_register->access.read = true;
 80141f6:	7263      	strb	r3, [r4, #9]
 80141f8:	e7d7      	b.n	80141aa <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80141fa:	8961      	ldrh	r1, [r4, #10]
 80141fc:	f7fc fb1a 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 8014200:	6047      	str	r7, [r0, #4]
		callback->read = read;
 8014202:	60c6      	str	r6, [r0, #12]
 8014204:	e7f5      	b.n	80141f2 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0+0x72>

08014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014208:	460c      	mov	r4, r1
 801420a:	b087      	sub	sp, #28
 801420c:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801420e:	f04f 31ff 	mov.w	r1, #4294967295
 8014212:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014214:	461e      	mov	r6, r3
 8014216:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014218:	f7f8 fe08 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801421c:	4621      	mov	r1, r4
 801421e:	f10d 0207 	add.w	r2, sp, #7
 8014222:	4628      	mov	r0, r5
 8014224:	f004 fa71 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014228:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801422c:	4604      	mov	r4, r0
	if (!success) {
 801422e:	b923      	cbnz	r3, 801423a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014230:	6828      	ldr	r0, [r5, #0]
 8014232:	f7f8 fe2f 	bl	800ce94 <osSemaphoreRelease>
}
 8014236:	b007      	add	sp, #28
 8014238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801423a:	f10d 0007 	add.w	r0, sp, #7
 801423e:	f7ff fa65 	bl	801370c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8014242:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d0f2      	beq.n	8014230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801424a:	7923      	ldrb	r3, [r4, #4]
 801424c:	4298      	cmp	r0, r3
 801424e:	d1ef      	bne.n	8014230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014250:	3004      	adds	r0, #4
 8014252:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8014256:	2800      	cmp	r0, #0
 8014258:	d0ea      	beq.n	8014230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801425a:	7823      	ldrb	r3, [r4, #0]
 801425c:	b983      	cbnz	r3, 8014280 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801425e:	7863      	ldrb	r3, [r4, #1]
 8014260:	b973      	cbnz	r3, 8014280 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8014262:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8014264:	a902      	add	r1, sp, #8
 8014266:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801426a:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801426e:	1a9b      	subs	r3, r3, r2
 8014270:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014272:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014274:	f7fc fc18 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014278:	2301      	movs	r3, #1
 801427a:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801427c:	7223      	strb	r3, [r4, #8]
 801427e:	e7d7      	b.n	8014230 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014280:	8961      	ldrh	r1, [r4, #10]
 8014282:	f7fc fad7 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 8014286:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801428a:	e7f5      	b.n	8014278 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801428c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801428c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014290:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014294:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8014296:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801429a:	eba9 0208 	sub.w	r2, r9, r8
 801429e:	4607      	mov	r7, r0
 80142a0:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 80142a2:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80142a6:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 80142aa:	d102      	bne.n	80142b2 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 80142ac:	4820      	ldr	r0, [pc, #128]	@ (8014330 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 80142ae:	f008 fd15 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80142b2:	45c1      	cmp	r9, r8
 80142b4:	bf14      	ite	ne
 80142b6:	4622      	movne	r2, r4
 80142b8:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80142ba:	eba1 0508 	sub.w	r5, r1, r8
 80142be:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80142c0:	d231      	bcs.n	8014326 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80142c2:	b394      	cbz	r4, 801432a <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80142c4:	429c      	cmp	r4, r3
 80142c6:	bf28      	it	cs
 80142c8:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80142ca:	0120      	lsls	r0, r4, #4
 80142cc:	f008 fc51 	bl	801cb72 <_Znwj>
 80142d0:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80142d2:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 80142d6:	2d00      	cmp	r5, #0
 80142d8:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80142dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80142e0:	dd04      	ble.n	80142ec <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80142e2:	462a      	mov	r2, r5
 80142e4:	4641      	mov	r1, r8
 80142e6:	4630      	mov	r0, r6
 80142e8:	f009 fbc0 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 80142ec:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 80142f0:	3510      	adds	r5, #16
      if (__count > 0)
 80142f2:	f1b9 0f00 	cmp.w	r9, #0
 80142f6:	4435      	add	r5, r6
 80142f8:	dd04      	ble.n	8014304 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80142fa:	464a      	mov	r2, r9
 80142fc:	4651      	mov	r1, sl
 80142fe:	4628      	mov	r0, r5
 8014300:	f009 fcac 	bl	801dc5c <memcpy>
      return __result + __count;
 8014304:	444d      	add	r5, r9
	if (__p)
 8014306:	f1b8 0f00 	cmp.w	r8, #0
 801430a:	d005      	beq.n	8014318 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801430c:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801430e:	4640      	mov	r0, r8
 8014310:	eba1 0108 	sub.w	r1, r1, r8
 8014314:	f008 fc08 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8014318:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801431c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8014320:	60be      	str	r6, [r7, #8]
    }
 8014322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014326:	461c      	mov	r4, r3
 8014328:	e7cf      	b.n	80142ca <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801432a:	4626      	mov	r6, r4
 801432c:	e7d1      	b.n	80142d2 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801432e:	bf00      	nop
 8014330:	0801dd74 	.word	0x0801dd74

08014334 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8014334:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014336:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801433a:	4605      	mov	r5, r0
 801433c:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801433e:	429c      	cmp	r4, r3
 8014340:	d005      	beq.n	801434e <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014342:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8014348:	3410      	adds	r4, #16
 801434a:	606c      	str	r4, [r5, #4]
      }
 801434c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801434e:	4621      	mov	r1, r4
 8014350:	f7ff ff9c 	bl	801428c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8014354:	e7fa      	b.n	801434c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_+0x18>

08014356 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8014356:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014358:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801435c:	4605      	mov	r5, r0
 801435e:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8014360:	429c      	cmp	r4, r3
 8014362:	d005      	beq.n	8014370 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x1a>
 8014364:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8014366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801436a:	3410      	adds	r4, #16
 801436c:	606c      	str	r4, [r5, #4]
      }
 801436e:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8014370:	4621      	mov	r1, r4
 8014372:	f7fb fd9f 	bl	800feb4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8014376:	e7fa      	b.n	801436e <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_+0x18>

08014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014378:	b570      	push	{r4, r5, r6, lr}
 801437a:	460c      	mov	r4, r1
 801437c:	b086      	sub	sp, #24
 801437e:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014380:	f04f 31ff 	mov.w	r1, #4294967295
 8014384:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 8014386:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014388:	f7f8 fd50 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801438c:	4621      	mov	r1, r4
 801438e:	f10d 0207 	add.w	r2, sp, #7
 8014392:	4628      	mov	r0, r5
 8014394:	f004 f9b9 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014398:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801439c:	4604      	mov	r4, r0
	if (!success) {
 801439e:	b923      	cbnz	r3, 80143aa <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x32>
	osSemaphoreRelease(RegistersSemaphore);
 80143a0:	6828      	ldr	r0, [r5, #0]
 80143a2:	f7f8 fd77 	bl	800ce94 <osSemaphoreRelease>
}
 80143a6:	b006      	add	sp, #24
 80143a8:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80143aa:	f10d 0007 	add.w	r0, sp, #7
 80143ae:	f7ff f911 	bl	80135d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 80143b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d0f2      	beq.n	80143a0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (target_register->register_info.type != registered_type) {
 80143ba:	7923      	ldrb	r3, [r4, #4]
 80143bc:	4298      	cmp	r0, r3
 80143be:	d1ef      	bne.n	80143a0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 80143c0:	3004      	adds	r0, #4
 80143c2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d0ea      	beq.n	80143a0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 80143ca:	7823      	ldrb	r3, [r4, #0]
 80143cc:	b983      	cbnz	r3, 80143f0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
 80143ce:	7863      	ldrb	r3, [r4, #1]
 80143d0:	b973      	cbnz	r3, 80143f0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x78>
		target_callback_list->push_back(callback);
 80143d2:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 80143d4:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80143d6:	e9d0 2300 	ldrd	r2, r3, [r0]
 80143da:	1a9b      	subs	r3, r3, r2
 80143dc:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80143de:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 80143e0:	f7ff ffb9 	bl	8014356 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 80143e4:	2301      	movs	r3, #1
 80143e6:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 80143e8:	f240 1301 	movw	r3, #257	@ 0x101
 80143ec:	8123      	strh	r3, [r4, #8]
 80143ee:	e7d7      	b.n	80143a0 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x28>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 80143f0:	8961      	ldrh	r1, [r4, #10]
 80143f2:	f7fb fc01 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->pointer = pointer;
 80143f6:	6006      	str	r6, [r0, #0]
 80143f8:	e7f4      	b.n	80143e4 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0+0x6c>

080143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 80143fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143fc:	460c      	mov	r4, r1
 80143fe:	b087      	sub	sp, #28
 8014400:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014402:	f04f 31ff 	mov.w	r1, #4294967295
 8014406:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8014408:	461e      	mov	r6, r3
 801440a:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801440c:	f7f8 fd0e 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014410:	4621      	mov	r1, r4
 8014412:	f10d 0207 	add.w	r2, sp, #7
 8014416:	4628      	mov	r0, r5
 8014418:	f004 f977 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801441c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014420:	4604      	mov	r4, r0
	if (!success) {
 8014422:	b923      	cbnz	r3, 801442e <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 8014424:	6828      	ldr	r0, [r5, #0]
 8014426:	f7f8 fd35 	bl	800ce94 <osSemaphoreRelease>
}
 801442a:	b007      	add	sp, #28
 801442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801442e:	f10d 0007 	add.w	r0, sp, #7
 8014432:	f7ff f8cf 	bl	80135d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8014436:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d0f2      	beq.n	8014424 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801443e:	7923      	ldrb	r3, [r4, #4]
 8014440:	4298      	cmp	r0, r3
 8014442:	d1ef      	bne.n	8014424 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014444:	3004      	adds	r0, #4
 8014446:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801444a:	2800      	cmp	r0, #0
 801444c:	d0ea      	beq.n	8014424 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801444e:	7823      	ldrb	r3, [r4, #0]
 8014450:	b983      	cbnz	r3, 8014474 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 8014452:	7863      	ldrb	r3, [r4, #1]
 8014454:	b973      	cbnz	r3, 8014474 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 8014456:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 8014458:	a902      	add	r1, sp, #8
 801445a:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801445e:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014462:	1a9b      	subs	r3, r3, r2
 8014464:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014466:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 8014468:	f7ff ff75 	bl	8014356 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801446c:	2301      	movs	r3, #1
 801446e:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8014470:	7223      	strb	r3, [r4, #8]
 8014472:	e7d7      	b.n	8014424 <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014474:	8961      	ldrh	r1, [r4, #10]
 8014476:	f7fb fbbf 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->write = write;
 801447a:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801447e:	e7f5      	b.n	801446c <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0+0x72>

08014480 <_ZN10Controller12AddRegistersEv>:
void Controller::AddRegisters(void) {
 8014480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014484:	4604      	mov	r4, r0
 8014486:	b086      	sub	sp, #24
	registers->AddRegister<uint8_t>(REG_CONTROLLER_RESET);
 8014488:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801448c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801448e:	f7ff fe05 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_RESET);
 8014492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014496:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
 8014498:	f104 0534 	add.w	r5, r4, #52	@ 0x34
	registers->SetRegisterAsSingle(REG_CONTROLLER_RESET);
 801449c:	f004 f96e 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_RESET, (void*) this,
 80144a0:	4b95      	ldr	r3, [pc, #596]	@ (80146f8 <_ZN10Controller12AddRegistersEv+0x278>)
 80144a2:	4622      	mov	r2, r4
 80144a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80144a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144aa:	f7ff feac 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_BRIDGE_STATE);
 80144ae:	f240 1101 	movw	r1, #257	@ 0x101
 80144b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144b4:	f7ff fdf2 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_BRIDGE_STATE);
 80144b8:	f240 1101 	movw	r1, #257	@ 0x101
 80144bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144be:	f004 f95d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_BRIDGE_STATE, &ControlSemaphore);
 80144c2:	462a      	mov	r2, r5
 80144c4:	f240 1101 	movw	r1, #257	@ 0x101
 80144c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144ca:	f004 f93d 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 80144ce:	4b8b      	ldr	r3, [pc, #556]	@ (80146fc <_ZN10Controller12AddRegistersEv+0x27c>)
 80144d0:	4622      	mov	r2, r4
 80144d2:	f240 1101 	movw	r1, #257	@ 0x101
 80144d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144d8:	f7ff fe52 	bl	8014180 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 80144dc:	4b88      	ldr	r3, [pc, #544]	@ (8014700 <_ZN10Controller12AddRegistersEv+0x280>)
 80144de:	4622      	mov	r2, r4
 80144e0:	f240 1101 	movw	r1, #257	@ 0x101
 80144e4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144e6:	f7ff fe8e 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_STATE);
 80144ea:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80144ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144f0:	f7ff fdd4 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_STATE);
 80144f4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80144f8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80144fa:	f004 f93f 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_BRIDGE_STATE, (void*) this,
 80144fe:	4b81      	ldr	r3, [pc, #516]	@ (8014704 <_ZN10Controller12AddRegistersEv+0x284>)
 8014500:	4622      	mov	r2, r4
 8014502:	f240 1101 	movw	r1, #257	@ 0x101
 8014506:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014508:	f7ff fe3a 	bl	8014180 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_STATE, (void*) this,
 801450c:	4b7e      	ldr	r3, [pc, #504]	@ (8014708 <_ZN10Controller12AddRegistersEv+0x288>)
 801450e:	4622      	mov	r2, r4
 8014510:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8014514:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014516:	f7ff fe76 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_CONTROLLER_PERIOD);
 801451a:	f240 1103 	movw	r1, #259	@ 0x103
 801451e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014520:	f7ff fd8b 	bl	801403a <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_PERIOD);
 8014524:	f240 1103 	movw	r1, #259	@ 0x103
 8014528:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801452a:	f004 f927 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint32_t>(REG_CONTROLLER_PERIOD, (void*) this,
 801452e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014530:	f04f 31ff 	mov.w	r1, #4294967295
 8014534:	6838      	ldr	r0, [r7, #0]
 8014536:	f7f8 fc79 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801453a:	f10d 0207 	add.w	r2, sp, #7
 801453e:	f240 1103 	movw	r1, #259	@ 0x103
 8014542:	4638      	mov	r0, r7
 8014544:	f004 f8e1 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014548:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801454c:	4606      	mov	r6, r0
	if (!success) {
 801454e:	2b00      	cmp	r3, #0
 8014550:	f040 82b5 	bne.w	8014abe <_ZN10Controller12AddRegistersEv+0x63e>
	osSemaphoreRelease(RegistersSemaphore);
 8014554:	6838      	ldr	r0, [r7, #0]
 8014556:	f7f8 fc9d 	bl	800ce94 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_PERIOD, (void*) this,
 801455a:	4b6c      	ldr	r3, [pc, #432]	@ (801470c <_ZN10Controller12AddRegistersEv+0x28c>)
 801455c:	4622      	mov	r2, r4
 801455e:	f240 1103 	movw	r1, #259	@ 0x103
 8014562:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014564:	f7ff fe4f 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_MODE);
 8014568:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801456c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801456e:	f7ff fd95 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_MODE);
 8014572:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8014576:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014578:	f004 f900 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_MODE, (void*) this,
 801457c:	4b64      	ldr	r3, [pc, #400]	@ (8014710 <_ZN10Controller12AddRegistersEv+0x290>)
 801457e:	4622      	mov	r2, r4
 8014580:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8014584:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014586:	f7ff fdfb 	bl	8014180 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_MODE, (void*) this,
 801458a:	4b62      	ldr	r3, [pc, #392]	@ (8014714 <_ZN10Controller12AddRegistersEv+0x294>)
 801458c:	4622      	mov	r2, r4
 801458e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8014592:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014594:	f7ff fe37 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_INPUT_FILTER);
 8014598:	f240 1105 	movw	r1, #261	@ 0x105
 801459c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801459e:	f7ff fd7d 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_INPUT_FILTER);
 80145a2:	f240 1105 	movw	r1, #261	@ 0x105
 80145a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145a8:	f004 f8e8 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_INPUT_FILTER, &ControlSemaphore);
 80145ac:	462a      	mov	r2, r5
 80145ae:	f240 1105 	movw	r1, #261	@ 0x105
 80145b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145b4:	f004 f8c8 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
 80145b8:	4b57      	ldr	r3, [pc, #348]	@ (8014718 <_ZN10Controller12AddRegistersEv+0x298>)
 80145ba:	4622      	mov	r2, r4
 80145bc:	f240 1105 	movw	r1, #261	@ 0x105
 80145c0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145c2:	f7ff fddd 	bl	8014180 <_ZN9Registers15AddReadCallbackIhEEbtPvPFbS1_tPPT_PtE.isra.0>
	registers->AddWriteCallback<uint8_t>(REG_CONTROLLER_INPUT_FILTER, (void*) this,
 80145c6:	4b55      	ldr	r3, [pc, #340]	@ (801471c <_ZN10Controller12AddRegistersEv+0x29c>)
 80145c8:	4622      	mov	r2, r4
 80145ca:	f240 1105 	movw	r1, #261	@ 0x105
 80145ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145d0:	f7ff fe19 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CONTROLLER_SET_CONFIGURATION);
 80145d4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80145d8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145da:	f7ff fcfd 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CONTROLLER_SET_CONFIGURATION, 2);
 80145de:	2202      	movs	r2, #2
 80145e0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80145e4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145e6:	f004 f8e5 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_SET_CONFIGURATION, &ControlSemaphore);
 80145ea:	462a      	mov	r2, r5
 80145ec:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80145f0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80145f2:	f004 f8a9 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_CONTROLLER_SET_CONFIGURATION, (void*) this,
 80145f6:	4b4a      	ldr	r3, [pc, #296]	@ (8014720 <_ZN10Controller12AddRegistersEv+0x2a0>)
 80145f8:	4622      	mov	r2, r4
 80145fa:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80145fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014600:	f7ff fefb 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_CONTROLLER_GET_CONFIGURATION);
 8014604:	f240 1107 	movw	r1, #263	@ 0x107
 8014608:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801460a:	f7ff fce5 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_CONTROLLER_GET_CONFIGURATION, 9);
 801460e:	2209      	movs	r2, #9
 8014610:	f240 1107 	movw	r1, #263	@ 0x107
 8014614:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014616:	f004 f8cd 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_GET_CONFIGURATION, &ControlSemaphore);
 801461a:	462a      	mov	r2, r5
 801461c:	f240 1107 	movw	r1, #263	@ 0x107
 8014620:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014622:	f004 f891 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddReadCallback<float>(REG_CONTROLLER_GET_CONFIGURATION, (void*) this,
 8014626:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8014628:	f04f 31ff 	mov.w	r1, #4294967295
 801462c:	6838      	ldr	r0, [r7, #0]
 801462e:	f7f8 fbfd 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014632:	f10d 0207 	add.w	r2, sp, #7
 8014636:	f240 1107 	movw	r1, #263	@ 0x107
 801463a:	4638      	mov	r0, r7
 801463c:	f004 f865 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8014640:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8014644:	4606      	mov	r6, r0
	if (!success) {
 8014646:	2b00      	cmp	r3, #0
 8014648:	f040 8269 	bne.w	8014b1e <_ZN10Controller12AddRegistersEv+0x69e>
	osSemaphoreRelease(RegistersSemaphore);
 801464c:	6838      	ldr	r0, [r7, #0]
 801464e:	f7f8 fc21 	bl	800ce94 <osSemaphoreRelease>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_INTEGRATION_MODE);
 8014652:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8014656:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014658:	f7ff fd20 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_INTEGRATION_MODE);
 801465c:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8014660:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014662:	f004 f88b 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_INTEGRATION_MODE, &ControlSemaphore);
 8014666:	462a      	mov	r2, r5
 8014668:	f44f 7184 	mov.w	r1, #264	@ 0x108
 801466c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801466e:	f004 f86b 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_CONTROLLER_INTEGRATION_MODE, &integration_type);
 8014672:	f504 72ae 	add.w	r2, r4, #348	@ 0x15c
 8014676:	f44f 7184 	mov.w	r1, #264	@ 0x108
 801467a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801467c:	f7ff fd3f 	bl	80140fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_CONTROLLER_DERIVATION_MODE);
 8014680:	f240 1109 	movw	r1, #265	@ 0x109
 8014684:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014686:	f7ff fd09 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_CONTROLLER_DERIVATION_MODE);
 801468a:	f240 1109 	movw	r1, #265	@ 0x109
 801468e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014690:	f004 f874 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_CONTROLLER_DERIVATION_MODE, &ControlSemaphore);
 8014694:	462a      	mov	r2, r5
 8014696:	f240 1109 	movw	r1, #265	@ 0x109
 801469a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801469c:	f004 f854 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_CONTROLLER_DERIVATION_MODE, &derivation_type);
 80146a0:	f204 125d 	addw	r2, r4, #349	@ 0x15d
 80146a4:	f240 1109 	movw	r1, #265	@ 0x109
 80146a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146aa:	f7ff fd28 	bl	80140fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY);
 80146ae:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80146b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146b4:	f7ff fcc1 	bl	801403a <_ZN9Registers11AddRegisterImEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENCODER_THRESHOLD_SECURITY);
 80146b8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80146bc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146be:	f004 f85d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &ControlSemaphore);
 80146c2:	462a      	mov	r2, r5
 80146c4:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80146c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146ca:	f004 f83d 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &encoder_security_threshold);
 80146ce:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80146d0:	f04f 31ff 	mov.w	r1, #4294967295
 80146d4:	6838      	ldr	r0, [r7, #0]
 80146d6:	f7f8 fba9 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80146da:	f10d 0207 	add.w	r2, sp, #7
 80146de:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80146e2:	4638      	mov	r0, r7
 80146e4:	f004 f811 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80146e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80146ec:	4606      	mov	r6, r0
	if (!success) {
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f040 8256 	bne.w	8014ba0 <_ZN10Controller12AddRegistersEv+0x720>
 80146f4:	e016      	b.n	8014724 <_ZN10Controller12AddRegistersEv+0x2a4>
 80146f6:	bf00      	nop
 80146f8:	080139c7 	.word	0x080139c7
 80146fc:	080132d5 	.word	0x080132d5
 8014700:	08013925 	.word	0x08013925
 8014704:	0801356f 	.word	0x0801356f
 8014708:	08013985 	.word	0x08013985
 801470c:	08013a25 	.word	0x08013a25
 8014710:	0801352d 	.word	0x0801352d
 8014714:	08013c01 	.word	0x08013c01
 8014718:	080132e1 	.word	0x080132e1
 801471c:	080132f7 	.word	0x080132f7
 8014720:	080133f1 	.word	0x080133f1
	osSemaphoreRelease(RegistersSemaphore);
 8014724:	6838      	ldr	r0, [r7, #0]
 8014726:	f7f8 fbb5 	bl	800ce94 <osSemaphoreRelease>
	registers->AddRegister<float>(REG_MOTOR_ENCODER);
 801472a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801472c:	f240 110d 	movw	r1, #269	@ 0x10d
 8014730:	f7ff fc52 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_ENCODER);
 8014734:	f240 110d 	movw	r1, #269	@ 0x10d
 8014738:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801473a:	f004 f81f 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_ENCODER, &ControlSemaphore);
 801473e:	462a      	mov	r2, r5
 8014740:	f240 110d 	movw	r1, #269	@ 0x10d
 8014744:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014746:	f003 ffff 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_ENCODER, &encoder_position);
 801474a:	f504 72b8 	add.w	r2, r4, #368	@ 0x170
 801474e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014750:	f240 110d 	movw	r1, #269	@ 0x10d
 8014754:	f7ff fe10 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_ENCODER, READ_PERMISSION);
 8014758:	2202      	movs	r2, #2
 801475a:	f240 110d 	movw	r1, #269	@ 0x10d
 801475e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014760:	f004 f847 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_CURRENT_COMPENSATION);
 8014764:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014766:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801476a:	f7ff fc35 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_CURRENT_COMPENSATION);
 801476e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8014772:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014774:	f004 f802 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_CURRENT_COMPENSATION, &ControlSemaphore);
 8014778:	462a      	mov	r2, r5
 801477a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801477e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014780:	f003 ffe2 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_CURRENT_COMPENSATION, &motor_current_compensation);
 8014784:	f504 72cc 	add.w	r2, r4, #408	@ 0x198
 8014788:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801478a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 801478e:	f7ff fdf3 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_CURRENT);
 8014792:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014794:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8014798:	f7ff fc1e 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_CURRENT);
 801479c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80147a0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147a2:	f003 ffeb 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_CURRENT, &ControlSemaphore);
 80147a6:	462a      	mov	r2, r5
 80147a8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80147ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147ae:	f003 ffcb 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_CURRENT, &motor_current);
 80147b2:	f504 72ca 	add.w	r2, r4, #404	@ 0x194
 80147b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147b8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80147bc:	f7ff fddc 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_CURRENT, READ_PERMISSION);
 80147c0:	2202      	movs	r2, #2
 80147c2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80147c6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147c8:	f004 f813 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_VOLTAGE);
 80147cc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147ce:	f240 111f 	movw	r1, #287	@ 0x11f
 80147d2:	f7ff fc01 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_VOLTAGE);
 80147d6:	f240 111f 	movw	r1, #287	@ 0x11f
 80147da:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147dc:	f003 ffce 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_VOLTAGE, &ControlSemaphore);
 80147e0:	462a      	mov	r2, r5
 80147e2:	f240 111f 	movw	r1, #287	@ 0x11f
 80147e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147e8:	f003 ffae 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_VOLTAGE, &motor_voltage);
 80147ec:	f504 72c8 	add.w	r2, r4, #400	@ 0x190
 80147f0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80147f2:	f240 111f 	movw	r1, #287	@ 0x11f
 80147f6:	f7ff fdbf 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_VOLTAGE, READ_PERMISSION);
 80147fa:	2202      	movs	r2, #2
 80147fc:	f240 111f 	movw	r1, #287	@ 0x11f
 8014800:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014802:	f003 fff6 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_HBRIDGE_POWER);
 8014806:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014808:	f240 1111 	movw	r1, #273	@ 0x111
 801480c:	f7ff fbe4 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_HBRIDGE_POWER);
 8014810:	f240 1111 	movw	r1, #273	@ 0x111
 8014814:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014816:	f003 ffb1 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_HBRIDGE_POWER, &ControlSemaphore);
 801481a:	462a      	mov	r2, r5
 801481c:	f240 1111 	movw	r1, #273	@ 0x111
 8014820:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014822:	f003 ff91 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_HBRIDGE_POWER, &motor_power);
 8014826:	f504 72ce 	add.w	r2, r4, #412	@ 0x19c
 801482a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801482c:	f240 1111 	movw	r1, #273	@ 0x111
 8014830:	f7ff fda2 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_HBRIDGE_POWER, READ_PERMISSION);
 8014834:	2202      	movs	r2, #2
 8014836:	f240 1111 	movw	r1, #273	@ 0x111
 801483a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801483c:	f003 ffd9 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_SETPOINT);
 8014840:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014842:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8014846:	f7ff fbc7 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SETPOINT);
 801484a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 801484e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014850:	f003 ff94 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SETPOINT, &ControlSemaphore);
 8014854:	462a      	mov	r2, r5
 8014856:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 801485a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801485c:	f003 ff74 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SETPOINT, &setpoint);
 8014860:	f504 72b0 	add.w	r2, r4, #352	@ 0x160
 8014864:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014866:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 801486a:	f7ff fd85 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_SETPOINT, READ_PERMISSION);
 801486e:	2202      	movs	r2, #2
 8014870:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8014874:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014876:	f003 ffbc 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<float>(REG_MOTOR_MOVEFROMTO);
 801487a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801487c:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8014880:	f7ff fbaa 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_MOVEFROMTO, 2);
 8014884:	2202      	movs	r2, #2
 8014886:	f44f 7189 	mov.w	r1, #274	@ 0x112
 801488a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801488c:	f003 ff92 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<float>(REG_MOTOR_MOVEFROMTO, (void*) this,
 8014890:	4622      	mov	r2, r4
 8014892:	4bbb      	ldr	r3, [pc, #748]	@ (8014b80 <_ZN10Controller12AddRegistersEv+0x700>)
 8014894:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8014898:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801489a:	f7ff fdae 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MOVETO);
 801489e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148a0:	f240 1113 	movw	r1, #275	@ 0x113
 80148a4:	f7ff fb98 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MOVETO);
 80148a8:	f240 1113 	movw	r1, #275	@ 0x113
 80148ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148ae:	f003 ff65 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<float>(REG_MOTOR_MOVETO, (void*) this,
 80148b2:	4622      	mov	r2, r4
 80148b4:	4bb3      	ldr	r3, [pc, #716]	@ (8014b84 <_ZN10Controller12AddRegistersEv+0x704>)
 80148b6:	f240 1113 	movw	r1, #275	@ 0x113
 80148ba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148bc:	f7ff fd9d 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_SETZERO);
 80148c0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148c2:	f240 110b 	movw	r1, #267	@ 0x10b
 80148c6:	f7ff fbe9 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SETZERO);
 80148ca:	f240 110b 	movw	r1, #267	@ 0x10b
 80148ce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148d0:	f003 ff54 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_MOTOR_SETZERO, (void*) this,
 80148d4:	4bac      	ldr	r3, [pc, #688]	@ (8014b88 <_ZN10Controller12AddRegistersEv+0x708>)
 80148d6:	4622      	mov	r2, r4
 80148d8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148da:	f240 110b 	movw	r1, #267	@ 0x10b
 80148de:	f7ff fc92 	bl	8014206 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SET_PARAMETER);
 80148e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148e4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80148e8:	f7ff fb76 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_SET_PARAMETER, 2);
 80148ec:	2202      	movs	r2, #2
 80148ee:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80148f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80148f4:	f003 ff5e 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_MOTOR_SET_PARAMETER, &ControlSemaphore);
 80148f8:	462a      	mov	r2, r5
 80148fa:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80148fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014900:	f003 ff22 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_SET_PARAMETER, (void*) this,
 8014904:	4ba1      	ldr	r3, [pc, #644]	@ (8014b8c <_ZN10Controller12AddRegistersEv+0x70c>)
 8014906:	4622      	mov	r2, r4
 8014908:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801490a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801490e:	f7ff fd74 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_GET_PARAMETERS);
 8014912:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014914:	f240 1115 	movw	r1, #277	@ 0x115
 8014918:	f7ff fb5e 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsVector(REG_MOTOR_GET_PARAMETERS);
 801491c:	f240 1115 	movw	r1, #277	@ 0x115
 8014920:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014922:	f003 ff63 	bl	80187ec <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddRegisterSemaphore(REG_MOTOR_GET_PARAMETERS, &ControlSemaphore);
 8014926:	462a      	mov	r2, r5
 8014928:	f240 1115 	movw	r1, #277	@ 0x115
 801492c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801492e:	f003 ff0b 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	return AddRegisterPointer(ID, reinterpreted_pointer);
 8014932:	f504 72a8 	add.w	r2, r4, #336	@ 0x150
 8014936:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014938:	f240 1115 	movw	r1, #277	@ 0x115
 801493c:	f7ff fd1c 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->SetRegisterPermissions(REG_MOTOR_GET_PARAMETERS, READ_PERMISSION);
 8014940:	2202      	movs	r2, #2
 8014942:	f240 1115 	movw	r1, #277	@ 0x115
 8014946:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014948:	f003 ff53 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
	registers->AddRegister<uint8_t>(REG_MOTOR_TRAJECTORY_MODE);
 801494c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801494e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8014952:	f7ff fba3 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TRAJECTORY_MODE);
 8014956:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801495a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801495c:	f003 ff0e 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TRAJECTORY_MODE, &ControlSemaphore);
 8014960:	462a      	mov	r2, r5
 8014962:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8014966:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014968:	f003 feee 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_MOTOR_TRAJECTORY_MODE, &(trajectory_generator.mode));
 801496c:	1c62      	adds	r2, r4, #1
 801496e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014970:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8014974:	f7ff fbc3 	bl	80140fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_TRAJECTORY_CYCLIC);
 8014978:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801497a:	f240 1117 	movw	r1, #279	@ 0x117
 801497e:	f7ff fb8d 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_TRAJECTORY_CYCLIC);
 8014982:	f240 1117 	movw	r1, #279	@ 0x117
 8014986:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014988:	f003 fef8 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_TRAJECTORY_CYCLIC, &ControlSemaphore);
 801498c:	462a      	mov	r2, r5
 801498e:	f240 1117 	movw	r1, #279	@ 0x117
 8014992:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014994:	f003 fed8 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<uint8_t>(REG_MOTOR_TRAJECTORY_CYCLIC, &(trajectory_generator.cyclic));
 8014998:	4622      	mov	r2, r4
 801499a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801499c:	f240 1117 	movw	r1, #279	@ 0x117
 80149a0:	f7ff fbad 	bl	80140fe <_ZN9Registers18AddRegisterPointerIhEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_PLAN_TRAJECTORY);
 80149a4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149a6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80149aa:	f7ff fb15 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsArray(REG_MOTOR_PLAN_TRAJECTORY, 2);
 80149ae:	2202      	movs	r2, #2
 80149b0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80149b4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149b6:	f003 fefd 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddRegisterSemaphore(REG_MOTOR_PLAN_TRAJECTORY, &ControlSemaphore);
 80149ba:	462a      	mov	r2, r5
 80149bc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80149c0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149c2:	f003 fec1 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_PLAN_TRAJECTORY, (void*) this,
 80149c6:	4b72      	ldr	r3, [pc, #456]	@ (8014b90 <_ZN10Controller12AddRegistersEv+0x710>)
 80149c8:	4622      	mov	r2, r4
 80149ca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149cc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80149d0:	f7ff fd13 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_MOTOR_START_TRAJECTORY);
 80149d4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149d6:	f240 1119 	movw	r1, #281	@ 0x119
 80149da:	f7ff fb5f 	bl	801409c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_START_TRAJECTORY);
 80149de:	f240 1119 	movw	r1, #281	@ 0x119
 80149e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149e4:	f003 feca 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_START_TRAJECTORY, &ControlSemaphore);
 80149e8:	462a      	mov	r2, r5
 80149ea:	f240 1119 	movw	r1, #281	@ 0x119
 80149ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149f0:	f003 feaa 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddWriteCallback<float>(REG_MOTOR_START_TRAJECTORY, (void*) this,
 80149f4:	4b67      	ldr	r3, [pc, #412]	@ (8014b94 <_ZN10Controller12AddRegistersEv+0x714>)
 80149f6:	4622      	mov	r2, r4
 80149f8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80149fa:	f240 1119 	movw	r1, #281	@ 0x119
 80149fe:	f7ff fcfc 	bl	80143fa <_ZN9Registers16AddWriteCallbackIfEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MAX_SPEED);
 8014a02:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a04:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8014a08:	f7ff fae6 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MAX_SPEED);
 8014a0c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8014a10:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a12:	f003 feb3 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_MAX_SPEED, &ControlSemaphore);
 8014a16:	462a      	mov	r2, r5
 8014a18:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8014a1c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a1e:	f003 fe93 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_MAX_SPEED, &(trajectory_generator.speed_max));
 8014a22:	1d22      	adds	r2, r4, #4
 8014a24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a26:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8014a2a:	f7ff fca5 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_MAX_ACCELERATION);
 8014a2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a30:	f240 1121 	movw	r1, #289	@ 0x121
 8014a34:	f7ff fad0 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_MAX_ACCELERATION);
 8014a38:	f240 1121 	movw	r1, #289	@ 0x121
 8014a3c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a3e:	f003 fe9d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_MAX_ACCELERATION, &ControlSemaphore);
 8014a42:	462a      	mov	r2, r5
 8014a44:	f240 1121 	movw	r1, #289	@ 0x121
 8014a48:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a4a:	f003 fe7d 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_MAX_ACCELERATION, &(trajectory_generator.accel_max));
 8014a4e:	f104 0208 	add.w	r2, r4, #8
 8014a52:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a54:	f240 1121 	movw	r1, #289	@ 0x121
 8014a58:	f7ff fc8e 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SIN_FREQUENCY);
 8014a5c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a5e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8014a62:	f7ff fab9 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SIN_FREQUENCY);
 8014a66:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8014a6a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a6c:	f003 fe86 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SIN_FREQUENCY, &ControlSemaphore);
 8014a70:	462a      	mov	r2, r5
 8014a72:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8014a76:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a78:	f003 fe66 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_FREQUENCY, &(trajectory_generator.frequency));
 8014a7c:	f104 020c 	add.w	r2, r4, #12
 8014a80:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a82:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8014a86:	f7ff fc77 	bl	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	registers->AddRegister<float>(REG_MOTOR_SIN_PHASE);
 8014a8a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a8c:	f240 1123 	movw	r1, #291	@ 0x123
 8014a90:	f7ff faa2 	bl	8013fd8 <_ZN9Registers11AddRegisterIfEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_MOTOR_SIN_PHASE);
 8014a94:	f240 1123 	movw	r1, #291	@ 0x123
 8014a98:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a9a:	f003 fe6f 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddRegisterSemaphore(REG_MOTOR_SIN_PHASE, &ControlSemaphore);
 8014a9e:	462a      	mov	r2, r5
 8014aa0:	f240 1123 	movw	r1, #291	@ 0x123
 8014aa4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014aa6:	f003 fe4f 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_PHASE, &(trajectory_generator.phase));
 8014aaa:	f104 0210 	add.w	r2, r4, #16
 8014aae:	f240 1123 	movw	r1, #291	@ 0x123
 8014ab2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
}
 8014ab4:	b006      	add	sp, #24
 8014ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	registers->AddRegisterPointer<float>(REG_MOTOR_SIN_PHASE, &(trajectory_generator.phase));
 8014aba:	f7ff bc5d 	b.w	8014378 <_ZN9Registers18AddRegisterPointerIfEEbtPT_.isra.0>
	uint8_t registered_type = GetTypeID<T>(&success);
 8014abe:	f10d 0007 	add.w	r0, sp, #7
 8014ac2:	f7fe fdd5 	bl	8013670 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8014ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f43f ad42 	beq.w	8014554 <_ZN10Controller12AddRegistersEv+0xd4>
	if (target_register->register_info.type != registered_type) {
 8014ad0:	7933      	ldrb	r3, [r6, #4]
 8014ad2:	4298      	cmp	r0, r3
 8014ad4:	f47f ad3e 	bne.w	8014554 <_ZN10Controller12AddRegistersEv+0xd4>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014ad8:	3004      	adds	r0, #4
 8014ada:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	f43f ad38 	beq.w	8014554 <_ZN10Controller12AddRegistersEv+0xd4>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014ae4:	7833      	ldrb	r3, [r6, #0]
 8014ae6:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8014b98 <_ZN10Controller12AddRegistersEv+0x718>
 8014aea:	b98b      	cbnz	r3, 8014b10 <_ZN10Controller12AddRegistersEv+0x690>
 8014aec:	7873      	ldrb	r3, [r6, #1]
 8014aee:	b97b      	cbnz	r3, 8014b10 <_ZN10Controller12AddRegistersEv+0x690>
		target_callback_list->push_back(callback);
 8014af0:	a902      	add	r1, sp, #8
		callback.read = read;
 8014af2:	f8cd 8014 	str.w	r8, [sp, #20]
		callback.write = NULL;
 8014af6:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8014afa:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014afe:	1a9b      	subs	r3, r3, r2
 8014b00:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014b02:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8014b04:	f7ff fc16 	bl	8014334 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014b08:	2301      	movs	r3, #1
 8014b0a:	7073      	strb	r3, [r6, #1]
	target_register->access.read = true;
 8014b0c:	7273      	strb	r3, [r6, #9]
 8014b0e:	e521      	b.n	8014554 <_ZN10Controller12AddRegistersEv+0xd4>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014b10:	8971      	ldrh	r1, [r6, #10]
 8014b12:	f7ff f919 	bl	8013d48 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->context = context;
 8014b16:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8014b18:	f8c0 800c 	str.w	r8, [r0, #12]
 8014b1c:	e7f4      	b.n	8014b08 <_ZN10Controller12AddRegistersEv+0x688>
	uint8_t registered_type = GetTypeID<T>(&success);
 8014b1e:	f10d 0007 	add.w	r0, sp, #7
 8014b22:	f7fe fd57 	bl	80135d4 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 8014b26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f43f ad8e 	beq.w	801464c <_ZN10Controller12AddRegistersEv+0x1cc>
	if (target_register->register_info.type != registered_type) {
 8014b30:	7933      	ldrb	r3, [r6, #4]
 8014b32:	4298      	cmp	r0, r3
 8014b34:	f47f ad8a 	bne.w	801464c <_ZN10Controller12AddRegistersEv+0x1cc>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014b38:	3004      	adds	r0, #4
 8014b3a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f43f ad84 	beq.w	801464c <_ZN10Controller12AddRegistersEv+0x1cc>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014b44:	7833      	ldrb	r3, [r6, #0]
 8014b46:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8014b9c <_ZN10Controller12AddRegistersEv+0x71c>
 8014b4a:	b98b      	cbnz	r3, 8014b70 <_ZN10Controller12AddRegistersEv+0x6f0>
 8014b4c:	7873      	ldrb	r3, [r6, #1]
 8014b4e:	b97b      	cbnz	r3, 8014b70 <_ZN10Controller12AddRegistersEv+0x6f0>
		target_callback_list->push_back(callback);
 8014b50:	a902      	add	r1, sp, #8
		callback.read = read;
 8014b52:	f8cd 8014 	str.w	r8, [sp, #20]
		callback.write = NULL;
 8014b56:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8014b5a:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014b5e:	1a9b      	subs	r3, r3, r2
 8014b60:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014b62:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8014b64:	f7ff fbf7 	bl	8014356 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 8014b68:	2301      	movs	r3, #1
 8014b6a:	7073      	strb	r3, [r6, #1]
	target_register->access.read = true;
 8014b6c:	7273      	strb	r3, [r6, #9]
 8014b6e:	e56d      	b.n	801464c <_ZN10Controller12AddRegistersEv+0x1cc>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014b70:	8971      	ldrh	r1, [r6, #10]
 8014b72:	f7fb f841 	bl	800fbf8 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE2atEj>
		callback->context = context;
 8014b76:	6044      	str	r4, [r0, #4]
		callback->read = read;
 8014b78:	f8c0 800c 	str.w	r8, [r0, #12]
 8014b7c:	e7f4      	b.n	8014b68 <_ZN10Controller12AddRegistersEv+0x6e8>
 8014b7e:	bf00      	nop
 8014b80:	08013cab 	.word	0x08013cab
 8014b84:	08013d3b 	.word	0x08013d3b
 8014b88:	08013a51 	.word	0x08013a51
 8014b8c:	0801332f 	.word	0x0801332f
 8014b90:	08013315 	.word	0x08013315
 8014b94:	0801330b 	.word	0x0801330b
 8014b98:	0801354f 	.word	0x0801354f
 8014b9c:	08013363 	.word	0x08013363
	uint8_t registered_type = GetTypeID<T>(&success);
 8014ba0:	f10d 0007 	add.w	r0, sp, #7
 8014ba4:	f7fe fd64 	bl	8013670 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8014ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f43f adb9 	beq.w	8014724 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (target_register->register_info.type != registered_type) {
 8014bb2:	7933      	ldrb	r3, [r6, #4]
 8014bb4:	4298      	cmp	r0, r3
 8014bb6:	f47f adb5 	bne.w	8014724 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (callbacks[target_register->register_info.type] == NULL) {
 8014bba:	3004      	adds	r0, #4
 8014bbc:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	f43f adaf 	beq.w	8014724 <_ZN10Controller12AddRegistersEv+0x2a4>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 8014bc6:	7833      	ldrb	r3, [r6, #0]
	registers->AddRegisterPointer<uint32_t>(REG_MOTOR_ENCODER_THRESHOLD_SECURITY, &encoder_security_threshold);
 8014bc8:	f504 78b6 	add.w	r8, r4, #364	@ 0x16c
 8014bcc:	b98b      	cbnz	r3, 8014bf2 <_ZN10Controller12AddRegistersEv+0x772>
 8014bce:	7873      	ldrb	r3, [r6, #1]
 8014bd0:	b97b      	cbnz	r3, 8014bf2 <_ZN10Controller12AddRegistersEv+0x772>
		target_callback_list->push_back(callback);
 8014bd2:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 8014bd4:	f8cd 8008 	str.w	r8, [sp, #8]
 8014bd8:	e9d0 2300 	ldrd	r2, r3, [r0]
 8014bdc:	1a9b      	subs	r3, r3, r2
 8014bde:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8014be0:	8173      	strh	r3, [r6, #10]
		target_callback_list->push_back(callback);
 8014be2:	f7ff fba7 	bl	8014334 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 8014be6:	2301      	movs	r3, #1
 8014be8:	7033      	strb	r3, [r6, #0]
	target_register->access.write = true;
 8014bea:	f240 1301 	movw	r3, #257	@ 0x101
 8014bee:	8133      	strh	r3, [r6, #8]
 8014bf0:	e598      	b.n	8014724 <_ZN10Controller12AddRegistersEv+0x2a4>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8014bf2:	8971      	ldrh	r1, [r6, #10]
 8014bf4:	f7ff f8a8 	bl	8013d48 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->pointer = pointer;
 8014bf8:	f8c0 8000 	str.w	r8, [r0]
 8014bfc:	e7f3      	b.n	8014be6 <_ZN10Controller12AddRegistersEv+0x766>
 8014bfe:	bf00      	nop

08014c00 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8014c00:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8014c02:	460c      	mov	r4, r1
 8014c04:	b181      	cbz	r1, 8014c28 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x28>
 8014c06:	2100      	movs	r1, #0
 8014c08:	4605      	mov	r5, r0
      if (__n <= 0)
 8014c0a:	3c01      	subs	r4, #1
 8014c0c:	f845 1b04 	str.w	r1, [r5], #4
 8014c10:	d008      	beq.n	8014c24 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8014c12:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8014c16:	1a24      	subs	r4, r4, r0
 8014c18:	4628      	mov	r0, r5
 8014c1a:	3c04      	subs	r4, #4
 8014c1c:	4425      	add	r5, r4
 8014c1e:	4622      	mov	r2, r4
 8014c20:	f008 ff3e 	bl	801daa0 <memset>
	}
 8014c24:	4628      	mov	r0, r5
 8014c26:	bd38      	pop	{r3, r4, r5, pc}
 8014c28:	4605      	mov	r5, r0
	  return __first;
 8014c2a:	e7fb      	b.n	8014c24 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_+0x24>

08014c2c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8014c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c30:	4607      	mov	r7, r0
      if (__n != 0)
 8014c32:	4689      	mov	r9, r1
 8014c34:	b189      	cbz	r1, 8014c5a <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x2e>
					 - this->_M_impl._M_finish);
 8014c36:	68ba      	ldr	r2, [r7, #8]
	  if (__size > max_size() || __navail > max_size() - __size)
 8014c38:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8014c3c:	e9d0 a000 	ldrd	sl, r0, [r0]
					 - this->_M_impl._M_finish);
 8014c40:	1a12      	subs	r2, r2, r0
 8014c42:	eba0 060a 	sub.w	r6, r0, sl
	  if (__navail >= __n)
 8014c46:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8014c4a:	ea4f 08a6 	mov.w	r8, r6, asr #2
	  if (__size > max_size() || __navail > max_size() - __size)
 8014c4e:	eba3 04a6 	sub.w	r4, r3, r6, asr #2
	  if (__navail >= __n)
 8014c52:	d804      	bhi.n	8014c5e <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x32>
	__uninit_default_n(__first, __n);
 8014c54:	f7ff ffd4 	bl	8014c00 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>
	      this->_M_impl._M_finish =
 8014c58:	6078      	str	r0, [r7, #4]
    }
 8014c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (max_size() - size() < __n)
 8014c5e:	428c      	cmp	r4, r1
 8014c60:	d202      	bcs.n	8014c68 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x3c>
	  __throw_length_error(__N(__s));
 8014c62:	481a      	ldr	r0, [pc, #104]	@ (8014ccc <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0xa0>)
 8014c64:	f008 f83a 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8014c68:	4588      	cmp	r8, r1
 8014c6a:	4644      	mov	r4, r8
 8014c6c:	bf38      	it	cc
 8014c6e:	460c      	movcc	r4, r1
 8014c70:	eb18 0404 	adds.w	r4, r8, r4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014c74:	d218      	bcs.n	8014ca8 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014c76:	b1cc      	cbz	r4, 8014cac <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	bf28      	it	cs
 8014c7c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014c7e:	00a0      	lsls	r0, r4, #2
 8014c80:	f007 ff77 	bl	801cb72 <_Znwj>
 8014c84:	4605      	mov	r5, r0
 8014c86:	4649      	mov	r1, r9
 8014c88:	19a8      	adds	r0, r5, r6
 8014c8a:	f7ff ffb9 	bl	8014c00 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPFffSt6vectorIfSaIfEEEjEET_S8_T0_>
      if (__count > 0)
 8014c8e:	b17e      	cbz	r6, 8014cb0 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x84>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014c90:	4632      	mov	r2, r6
 8014c92:	4651      	mov	r1, sl
 8014c94:	4628      	mov	r0, r5
 8014c96:	f008 fee9 	bl	801da6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8014c9a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014c9c:	4650      	mov	r0, sl
 8014c9e:	eba1 010a 	sub.w	r1, r1, sl
 8014ca2:	f007 ff41 	bl	801cb28 <_ZdlPvj>
      }
 8014ca6:	e006      	b.n	8014cb6 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x8a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014ca8:	461c      	mov	r4, r3
 8014caa:	e7e8      	b.n	8014c7e <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x52>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014cac:	4625      	mov	r5, r4
 8014cae:	e7ea      	b.n	8014c86 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x5a>
	if (__p)
 8014cb0:	f1ba 0f00 	cmp.w	sl, #0
 8014cb4:	d1f1      	bne.n	8014c9a <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x6e>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014cb6:	eb08 0109 	add.w	r1, r8, r9
	      this->_M_impl._M_start = __new_start;
 8014cba:	603d      	str	r5, [r7, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014cbc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014cc0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014cc4:	6079      	str	r1, [r7, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014cc6:	60bd      	str	r5, [r7, #8]
    }
 8014cc8:	e7c7      	b.n	8014c5a <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj+0x2e>
 8014cca:	bf00      	nop
 8014ccc:	0801dffe 	.word	0x0801dffe

08014cd0 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>:
      resize(size_type __new_size)
 8014cd0:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014cd2:	e9d0 2500 	ldrd	r2, r5, [r0]
 8014cd6:	1aac      	subs	r4, r5, r2
 8014cd8:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8014cda:	42a1      	cmp	r1, r4
 8014cdc:	d903      	bls.n	8014ce6 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 8014cde:	1b09      	subs	r1, r1, r4
 8014ce0:	f7ff ffa4 	bl	8014c2c <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE17_M_default_appendEj>
      }
 8014ce4:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8014ce6:	d2fd      	bcs.n	8014ce4 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8014ce8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8014cec:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 8014cee:	bf18      	it	ne
 8014cf0:	6042      	strne	r2, [r0, #4]
      }
 8014cf2:	e7f7      	b.n	8014ce4 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj+0x14>

08014cf4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8014cf4:	b538      	push	{r3, r4, r5, lr}
	  if (__n > 0)
 8014cf6:	460c      	mov	r4, r1
 8014cf8:	b181      	cbz	r1, 8014d1c <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x28>
 8014cfa:	2100      	movs	r1, #0
 8014cfc:	4605      	mov	r5, r0
      if (__n <= 0)
 8014cfe:	3c01      	subs	r4, #1
 8014d00:	f845 1b04 	str.w	r1, [r5], #4
 8014d04:	d008      	beq.n	8014d18 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x24>
      std::__fill_a(__first, __first + __n, __value);
 8014d06:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	*__first = __tmp;
 8014d0a:	1a24      	subs	r4, r4, r0
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	3c04      	subs	r4, #4
 8014d10:	4425      	add	r5, r4
 8014d12:	4622      	mov	r2, r4
 8014d14:	f008 fec4 	bl	801daa0 <memset>
	}
 8014d18:	4628      	mov	r0, r5
 8014d1a:	bd38      	pop	{r3, r4, r5, pc}
 8014d1c:	4605      	mov	r5, r0
	  return __first;
 8014d1e:	e7fb      	b.n	8014d18 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_+0x24>

08014d20 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj>:
    vector<_Tp, _Alloc>::
 8014d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d24:	4607      	mov	r7, r0
      if (__n != 0)
 8014d26:	4689      	mov	r9, r1
 8014d28:	b189      	cbz	r1, 8014d4e <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x2e>
					 - this->_M_impl._M_finish);
 8014d2a:	68ba      	ldr	r2, [r7, #8]
	  if (__size > max_size() || __navail > max_size() - __size)
 8014d2c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014d30:	e9d0 a000 	ldrd	sl, r0, [r0]
					 - this->_M_impl._M_finish);
 8014d34:	1a12      	subs	r2, r2, r0
 8014d36:	eba0 060a 	sub.w	r6, r0, sl
	  if (__navail >= __n)
 8014d3a:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8014d3e:	ea4f 08a6 	mov.w	r8, r6, asr #2
	  if (__size > max_size() || __navail > max_size() - __size)
 8014d42:	eba3 04a6 	sub.w	r4, r3, r6, asr #2
	  if (__navail >= __n)
 8014d46:	d804      	bhi.n	8014d52 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x32>
	__uninit_default_n(__first, __n);
 8014d48:	f7ff ffd4 	bl	8014cf4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>
	      this->_M_impl._M_finish =
 8014d4c:	6078      	str	r0, [r7, #4]
    }
 8014d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (max_size() - size() < __n)
 8014d52:	428c      	cmp	r4, r1
 8014d54:	d202      	bcs.n	8014d5c <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x3c>
	  __throw_length_error(__N(__s));
 8014d56:	481a      	ldr	r0, [pc, #104]	@ (8014dc0 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0xa0>)
 8014d58:	f007 ffc0 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8014d5c:	4588      	cmp	r8, r1
 8014d5e:	4644      	mov	r4, r8
 8014d60:	bf38      	it	cc
 8014d62:	460c      	movcc	r4, r1
 8014d64:	eb18 0404 	adds.w	r4, r8, r4
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014d68:	d218      	bcs.n	8014d9c <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014d6a:	b1cc      	cbz	r4, 8014da0 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014d6c:	429c      	cmp	r4, r3
 8014d6e:	bf28      	it	cs
 8014d70:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014d72:	00a0      	lsls	r0, r4, #2
 8014d74:	f007 fefd 	bl	801cb72 <_Znwj>
 8014d78:	4605      	mov	r5, r0
 8014d7a:	4649      	mov	r1, r9
 8014d7c:	19a8      	adds	r0, r5, r6
 8014d7e:	f7ff ffb9 	bl	8014cf4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPPfjEET_S4_T0_>
      if (__count > 0)
 8014d82:	b17e      	cbz	r6, 8014da4 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x84>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8014d84:	4632      	mov	r2, r6
 8014d86:	4651      	mov	r1, sl
 8014d88:	4628      	mov	r0, r5
 8014d8a:	f008 fe6f 	bl	801da6c <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
 8014d8e:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014d90:	4650      	mov	r0, sl
 8014d92:	eba1 010a 	sub.w	r1, r1, sl
 8014d96:	f007 fec7 	bl	801cb28 <_ZdlPvj>
      }
 8014d9a:	e006      	b.n	8014daa <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x8a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8014d9c:	461c      	mov	r4, r3
 8014d9e:	e7e8      	b.n	8014d72 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x52>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8014da0:	4625      	mov	r5, r4
 8014da2:	e7ea      	b.n	8014d7a <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x5a>
	if (__p)
 8014da4:	f1ba 0f00 	cmp.w	sl, #0
 8014da8:	d1f1      	bne.n	8014d8e <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x6e>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014daa:	eb08 0109 	add.w	r1, r8, r9
	      this->_M_impl._M_start = __new_start;
 8014dae:	603d      	str	r5, [r7, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014db0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014db4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8014db8:	6079      	str	r1, [r7, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8014dba:	60bd      	str	r5, [r7, #8]
    }
 8014dbc:	e7c7      	b.n	8014d4e <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj+0x2e>
 8014dbe:	bf00      	nop
 8014dc0:	0801dffe 	.word	0x0801dffe

08014dc4 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>:
      resize(size_type __new_size)
 8014dc4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014dc6:	e9d0 2500 	ldrd	r2, r5, [r0]
 8014dca:	1aac      	subs	r4, r5, r2
 8014dcc:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 8014dce:	42a1      	cmp	r1, r4
 8014dd0:	d903      	bls.n	8014dda <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 8014dd2:	1b09      	subs	r1, r1, r4
 8014dd4:	f7ff ffa4 	bl	8014d20 <_ZNSt6vectorIPfSaIS0_EE17_M_default_appendEj>
      }
 8014dd8:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 8014dda:	d2fd      	bcs.n	8014dd8 <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8014ddc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8014de0:	42aa      	cmp	r2, r5
	    this->_M_impl._M_finish = __pos;
 8014de2:	bf18      	it	ne
 8014de4:	6042      	strne	r2, [r0, #4]
      }
 8014de6:	e7f7      	b.n	8014dd8 <_ZNSt6vectorIPfSaIS0_EE6resizeEj+0x14>

08014de8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS>:
void Controller::Init(Registers* registers_, Publishers* publishers_, LEDS* leds_){
 8014de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	publishers = publishers_;
 8014dec:	e9c0 120e 	strd	r1, r2, [r0, #56]	@ 0x38
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8014df0:	2101      	movs	r1, #1
void Controller::Init(Registers* registers_, Publishers* publishers_, LEDS* leds_){
 8014df2:	4604      	mov	r4, r0
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8014df4:	2200      	movs	r2, #0
	leds = leds_;
 8014df6:	6403      	str	r3, [r0, #64]	@ 0x40
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8014df8:	4608      	mov	r0, r1
	encoder_security_threshold = DEFAULT_ENCODER_SECURITY_THRESHOLD;
 8014dfa:	2500      	movs	r5, #0
	ControlSemaphore = osSemaphoreNew(1,1,NULL);
 8014dfc:	f7f7 ffba 	bl	800cd74 <osSemaphoreNew>
 8014e00:	6360      	str	r0, [r4, #52]	@ 0x34
	osSemaphoreRelease(ControlSemaphore);
 8014e02:	f7f8 f847 	bl	800ce94 <osSemaphoreRelease>
	ResetController();
 8014e06:	4620      	mov	r0, r4
 8014e08:	f7fe fdc6 	bl	8013998 <_ZN10Controller15ResetControllerEv>
	SetControllerPeriodMs(DEFAULT_CONTROLLER_PERIOD);
 8014e0c:	210a      	movs	r1, #10
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f7fe fdde 	bl	80139d0 <_ZN10Controller21SetControllerPeriodMsEm>
	SelectControllerMode(DEFAULT_CONTROLLER_MODE);
 8014e14:	2100      	movs	r1, #0
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7fe fea2 	bl	8013b60 <_ZN10Controller20SelectControllerModeEh>
	integration_type = DEFAULT_ERROR_INTEGRATION_MODE;
 8014e1c:	2301      	movs	r3, #1
	trajectory_generator.SetTrajectoryMode(DEFAULT_MOTOR_TRAJECTORY);
 8014e1e:	4629      	mov	r1, r5
 8014e20:	4620      	mov	r0, r4
	integration_type = DEFAULT_ERROR_INTEGRATION_MODE;
 8014e22:	f8a4 315c 	strh.w	r3, [r4, #348]	@ 0x15c
	encoder_security_threshold = DEFAULT_ENCODER_SECURITY_THRESHOLD;
 8014e26:	4b61      	ldr	r3, [pc, #388]	@ (8014fac <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1c4>)
 8014e28:	e9c4 535a 	strd	r5, r3, [r4, #360]	@ 0x168
	current_conversion = DEFAULT_CURRENT_CONVERSION_FACTOR;
 8014e2c:	4b60      	ldr	r3, [pc, #384]	@ (8014fb0 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1c8>)
 8014e2e:	f8c4 31b4 	str.w	r3, [r4, #436]	@ 0x1b4
	motor_current_compensation = DEFAULT_CURRENT_COMPENSATION_FACTOR;
 8014e32:	4b60      	ldr	r3, [pc, #384]	@ (8014fb4 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1cc>)
 8014e34:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
	trajectory_generator.SetTrajectoryMode(DEFAULT_MOTOR_TRAJECTORY);
 8014e38:	f007 fd88 	bl	801c94c <_ZN19TrajectoryGenerator17SetTrajectoryModeEh>
	trajectory_generator.SetTrajectoryCyclicValue(DEFAULT_MOTOR_CYCLIC);
 8014e3c:	4629      	mov	r1, r5
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f007 fd86 	bl	801c950 <_ZN19TrajectoryGenerator24SetTrajectoryCyclicValueEb>
	trajectory_generator.SetTrajectoryMaxSpeed(DEFAULT_MOTOR_MAX_SPEED);
 8014e44:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8014fb8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d0>
 8014e48:	4620      	mov	r0, r4
 8014e4a:	f007 fd83 	bl	801c954 <_ZN19TrajectoryGenerator21SetTrajectoryMaxSpeedEf>
	trajectory_generator.SetTrajectoryMaxAcceleration(DEFAULT_MOTOR_ACCEL_SPEED);
 8014e4e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014e52:	4620      	mov	r0, r4
 8014e54:	f007 fd81 	bl	801c95a <_ZN19TrajectoryGenerator28SetTrajectoryMaxAccelerationEf>
	trajectory_generator.SetTrajectoryFrequency(DEFAULT_MOTOR_FREQUENCY);
 8014e58:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f007 fd7f 	bl	801c960 <_ZN19TrajectoryGenerator22SetTrajectoryFrequencyEf>
	trajectory_generator.SetTrajectoryPhase(DEFAULT_MOTOR_PHASE);
 8014e62:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8014fbc <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d4>
 8014e66:	4620      	mov	r0, r4
 8014e68:	f007 fd7d 	bl	801c966 <_ZN19TrajectoryGenerator18SetTrajectoryPhaseEf>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014e6c:	e9d4 3254 	ldrd	r3, r2, [r4, #336]	@ 0x150
 8014e70:	1ad1      	subs	r1, r2, r3
	if (__new_size > size())
 8014e72:	2910      	cmp	r1, #16
 8014e74:	f200 8091 	bhi.w	8014f9a <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1b2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8014e78:	1089      	asrs	r1, r1, #2
	  _M_default_append(__new_size - size());
 8014e7a:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8014e7e:	f1c1 0105 	rsb	r1, r1, #5
 8014e82:	f7fd fd5f 	bl	8012944 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
 8014e86:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
 8014e8a:	f04f 0800 	mov.w	r8, #0
	params[MOTOR_REDUCTION_RATIO] = DEFAULT_REDUCTION_RATIO; 					// Motor Reduction ratio
 8014e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8014fc0 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1d8>)
	positionConfiguration.input_filters.resize(2);
 8014e90:	2102      	movs	r1, #2
 8014e92:	f104 0080 	add.w	r0, r4, #128	@ 0x80
	positionConfiguration.direction_criteria = &PWM;
 8014e96:	f504 77b2 	add.w	r7, r4, #356	@ 0x164
	params[MOTOR_REDUCTION_RATIO] = DEFAULT_REDUCTION_RATIO; 					// Motor Reduction ratio
 8014e9a:	601a      	str	r2, [r3, #0]
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
 8014e9c:	f04f 0a02 	mov.w	sl, #2
	params[MOTOR_ELECTRIC_RESISTOR] = DEFAULT_EQUIVALENT_ELECTRIC_RESISTANCE; 	// Equivalent Motor Resistor
 8014ea0:	4a48      	ldr	r2, [pc, #288]	@ (8014fc4 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1dc>)
	torqueConfiguration.direction_criteria = &setpoint;
 8014ea2:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
	torqueConfiguration.model_active = DEFAULT_TORQUE_MODEL_ACTIVE;
 8014ea6:	2601      	movs	r6, #1
	torqueConfiguration.model_variables.resize(2);
 8014ea8:	f104 09f4 	add.w	r9, r4, #244	@ 0xf4
	params[MOTOR_ELECTRIC_RESISTOR] = DEFAULT_EQUIVALENT_ELECTRIC_RESISTANCE; 	// Equivalent Motor Resistor
 8014eac:	605a      	str	r2, [r3, #4]
	params[MOTOR_SPEED_CONSTANT] = DEFAULT_EQUIVALENT_SPEED_CONSTANT; 			// Equivalent Motor Speed Constant
 8014eae:	4a46      	ldr	r2, [pc, #280]	@ (8014fc8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e0>)
 8014eb0:	609a      	str	r2, [r3, #8]
	params[MOTOR_TORQUE_CONSTANT_INVERSE] = DEFAULT_TORQUE_CONSTANT_INVERSE; 	// Inverse of Motor Torque Constant
 8014eb2:	4a46      	ldr	r2, [pc, #280]	@ (8014fcc <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e4>)
 8014eb4:	60da      	str	r2, [r3, #12]
	params[MOTOR_ENCODER_TICK_NUMBER] = DEFAULT_ENCODER_TICK_NUMBER; 			// Motor Encoder Tick Number
 8014eb6:	f04f 4289 	mov.w	r2, #1149239296	@ 0x44800000
 8014eba:	611a      	str	r2, [r3, #16]
	positionConfiguration.track = &encoder_position;
 8014ebc:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
	positionConfiguration.selected_filter = DEFAULT_POSITION_FILTER;
 8014ec0:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
	positionConfiguration.track = &encoder_position;
 8014ec4:	67a3      	str	r3, [r4, #120]	@ 0x78
	positionConfiguration.input_filters.resize(2);
 8014ec6:	f7ff ff03 	bl	8014cd0 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>
 8014eca:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8014ece:	4a40      	ldr	r2, [pc, #256]	@ (8014fd0 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1e8>)
	torqueConfiguration.input_filters.resize(3);
 8014ed0:	2103      	movs	r1, #3
 8014ed2:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
	positionConfiguration.input_filters[OUTPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_REDUCTION_RATIO] * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input after reductor in °
 8014ed6:	601a      	str	r2, [r3, #0]
	positionConfiguration.input_filters[INPUT_MOTOR_POSITION_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_ENCODER_TICK_NUMBER] / 90;}); // motor position input in °
 8014ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8014fd4 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1ec>)
 8014eda:	605a      	str	r2, [r3, #4]
	positionConfiguration.K = DEFAULT_POSITION_K;
 8014edc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	positionConfiguration.direction_criteria = &PWM;
 8014ee0:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
	positionConfiguration.K = DEFAULT_POSITION_K;
 8014ee4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
	positionConfiguration.Ti_inv = DEFAULT_POSITION_Ti_inv;
 8014ee8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
	positionConfiguration.Td = DEFAULT_POSITION_Td;
 8014eec:	4b3a      	ldr	r3, [pc, #232]	@ (8014fd8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f0>)
	positionConfiguration.model_active = false;
 8014eee:	f884 80a8 	strb.w	r8, [r4, #168]	@ 0xa8
	positionConfiguration.Td = DEFAULT_POSITION_Td;
 8014ef2:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
	positionConfiguration.Isaturation = DEFAULT_POSITION_Isat / (positionConfiguration.Ti_inv * positionConfiguration.K);
 8014ef6:	4b39      	ldr	r3, [pc, #228]	@ (8014fdc <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f4>)
	torqueConfiguration.selected_filter = DEFAULT_TORQUE_FILTER;
 8014ef8:	f884 a0c0 	strb.w	sl, [r4, #192]	@ 0xc0
	positionConfiguration.Isaturation = DEFAULT_POSITION_Isat / (positionConfiguration.Ti_inv * positionConfiguration.K);
 8014efc:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
	positionConfiguration.P_active = DEFAULT_POSITION_P_ACTIVE;
 8014f00:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8014f04:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
	positionConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8014f08:	4b35      	ldr	r3, [pc, #212]	@ (8014fe0 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1f8>)
 8014f0a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
	torqueConfiguration.track = &motor_current;
 8014f0e:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 8014f12:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
	torqueConfiguration.input_filters.resize(3);
 8014f16:	f7ff fedb 	bl	8014cd0 <_ZNSt6vectorIPFffS_IfSaIfEEESaIS3_EE6resizeEj>
 8014f1a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 8014f1e:	4a31      	ldr	r2, [pc, #196]	@ (8014fe4 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x1fc>)
	torqueConfiguration.model_variables.resize(2);
 8014f20:	4651      	mov	r1, sl
 8014f22:	4648      	mov	r0, r9
	torqueConfiguration.input_filters[CURRENT_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input;}); // motor current input in A
 8014f24:	601a      	str	r2, [r3, #0]
	torqueConfiguration.input_filters[TORQUE_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE];}); // motor torque before reductor input in mNm
 8014f26:	4a30      	ldr	r2, [pc, #192]	@ (8014fe8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x200>)
 8014f28:	605a      	str	r2, [r3, #4]
	torqueConfiguration.input_filters[TORQUE_REDUCTOR_FILTER] = ([](float input, std::vector<float> parameters) -> float {return input * parameters[MOTOR_TORQUE_CONSTANT_INVERSE] / parameters[MOTOR_REDUCTION_RATIO];}); // motor torque after reductor input in mNm
 8014f2a:	4a30      	ldr	r2, [pc, #192]	@ (8014fec <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x204>)
 8014f2c:	609a      	str	r2, [r3, #8]
	torqueConfiguration.K = DEFAULT_TORQUE_K;
 8014f2e:	4b30      	ldr	r3, [pc, #192]	@ (8014ff0 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x208>)
	torqueConfiguration.direction_criteria = &setpoint;
 8014f30:	f8c4 50e4 	str.w	r5, [r4, #228]	@ 0xe4
	torqueConfiguration.K = DEFAULT_TORQUE_K;
 8014f34:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
	torqueConfiguration.Ti_inv = DEFAULT_TORQUE_Ti_inv;
 8014f38:	4b2e      	ldr	r3, [pc, #184]	@ (8014ff4 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x20c>)
	torqueConfiguration.model_active = DEFAULT_TORQUE_MODEL_ACTIVE;
 8014f3a:	f884 60ec 	strb.w	r6, [r4, #236]	@ 0xec
	torqueConfiguration.Ti_inv = DEFAULT_TORQUE_Ti_inv;
 8014f3e:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
	torqueConfiguration.Td = DEFAULT_TORQUE_Td;
 8014f42:	4b2d      	ldr	r3, [pc, #180]	@ (8014ff8 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x210>)
 8014f44:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
	torqueConfiguration.Isaturation = DEFAULT_TORQUE_Isat / (torqueConfiguration.Ti_inv * torqueConfiguration.K); //24000
 8014f48:	4b2c      	ldr	r3, [pc, #176]	@ (8014ffc <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x214>)
 8014f4a:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
	torqueConfiguration.P_active = DEFAULT_TORQUE_P_ACTIVE;
 8014f4e:	4b2c      	ldr	r3, [pc, #176]	@ (8015000 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x218>)
 8014f50:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
	torqueConfiguration.PWMAssignement = ([](float val) -> uint32_t {if (val > 0) return (uint32_t) (abs(val)); else return 0;});
 8014f54:	4b2b      	ldr	r3, [pc, #172]	@ (8015004 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x21c>)
 8014f56:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
	torqueConfiguration.model_variables.resize(2);
 8014f5a:	f7ff ff33 	bl	8014dc4 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>
 8014f5e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
	torqueConfiguration.model_variables[1] = &encoder_speed;
 8014f62:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
	torqueConfiguration.model_variables.resize(1);
 8014f66:	4631      	mov	r1, r6
	torqueConfiguration.model_variables[0] = &setpoint;
 8014f68:	601d      	str	r5, [r3, #0]
	torqueConfiguration.model_variables.resize(1);
 8014f6a:	4648      	mov	r0, r9
	torqueConfiguration.model_variables[1] = &encoder_speed;
 8014f6c:	605a      	str	r2, [r3, #4]
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 8014f6e:	4b26      	ldr	r3, [pc, #152]	@ (8015008 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x220>)
	PWMConfiguration.track = &PWM;
 8014f70:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
	torqueConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (parameters[MOTOR_ELECTRIC_RESISTOR] * *(variables[0]) + parameters[MOTOR_SPEED_CONSTANT] * *(variables[1]));});
 8014f74:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8014f78:	4b24      	ldr	r3, [pc, #144]	@ (801500c <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x224>)
	PWMConfiguration.model_active = true;
 8014f7a:	f884 6130 	strb.w	r6, [r4, #304]	@ 0x130
	PWMConfiguration.PWMAssignement = ([](float val) -> uint32_t {return (uint32_t) (abs(val));});
 8014f7e:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
	PWMConfiguration.direction_criteria = &PWM;
 8014f82:	e9c4 8749 	strd	r8, r7, [r4, #292]	@ 0x124
	torqueConfiguration.model_variables.resize(1);
 8014f86:	f7ff ff1d 	bl	8014dc4 <_ZNSt6vectorIPfSaIS0_EE6resizeEj>
	PWMConfiguration.model_variables[0] = &setpoint;
 8014f8a:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
 8014f8e:	601d      	str	r5, [r3, #0]
	PWMConfiguration.model = ([](std::vector<float*> variables, std::vector<float> parameters) -> float {return (*(variables[0]));});
 8014f90:	4b1f      	ldr	r3, [pc, #124]	@ (8015010 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x228>)
 8014f92:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
}
 8014f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (__new_size < size())
 8014f9a:	2914      	cmp	r1, #20
 8014f9c:	f67f af73 	bls.w	8014e86 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x9e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8014fa0:	3314      	adds	r3, #20
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8014fa2:	429a      	cmp	r2, r3
	    this->_M_impl._M_finish = __pos;
 8014fa4:	bf18      	it	ne
 8014fa6:	f8c4 3154 	strne.w	r3, [r4, #340]	@ 0x154
 8014faa:	e76c      	b.n	8014e86 <_ZN10Controller4InitEP9RegistersP10PublishersP4LEDS+0x9e>
 8014fac:	00015f90 	.word	0x00015f90
 8014fb0:	39460000 	.word	0x39460000
 8014fb4:	3f82c083 	.word	0x3f82c083
 8014fb8:	447a0000 	.word	0x447a0000
 8014fbc:	00000000 	.word	0x00000000
 8014fc0:	430a0000 	.word	0x430a0000
 8014fc4:	46593000 	.word	0x46593000
 8014fc8:	3b83126f 	.word	0x3b83126f
 8014fcc:	3e4c6426 	.word	0x3e4c6426
 8014fd0:	08013591 	.word	0x08013591
 8014fd4:	08013269 	.word	0x08013269
 8014fd8:	3d4ccccd 	.word	0x3d4ccccd
 8014fdc:	453b8000 	.word	0x453b8000
 8014fe0:	08013281 	.word	0x08013281
 8014fe4:	0801328f 	.word	0x0801328f
 8014fe8:	08013291 	.word	0x08013291
 8014fec:	0801329d 	.word	0x0801329d
 8014ff0:	459c4000 	.word	0x459c4000
 8014ff4:	40555555 	.word	0x40555555
 8014ff8:	3ba3d70a 	.word	0x3ba3d70a
 8014ffc:	3f19999a 	.word	0x3f19999a
 8015000:	01000101 	.word	0x01000101
 8015004:	080132b1 	.word	0x080132b1
 8015008:	080135b1 	.word	0x080135b1
 801500c:	080137a9 	.word	0x080137a9
 8015010:	080132cb 	.word	0x080132cb

08015014 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015014:	2300      	movs	r3, #0
/**
 * @brief Class constructor
 *
 * @param input timer_: the timer pointer used to generate interrupts
 */
HardwareDelay::HardwareDelay(TIM_HandleTypeDef* timer_) {
 8015016:	b570      	push	{r4, r5, r6, lr}
 8015018:	4604      	mov	r4, r0
 801501a:	6183      	str	r3, [r0, #24]
	timer = timer_;
 801501c:	6041      	str	r1, [r0, #4]
 801501e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015022:	2024      	movs	r0, #36	@ 0x24
 8015024:	f007 fda5 	bl	801cb72 <_Znwj>
 8015028:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 801502a:	e9d4 6204 	ldrd	r6, r2, [r4, #16]
 801502e:	1b92      	subs	r2, r2, r6
      if (__count > 0)
 8015030:	2a00      	cmp	r2, #0
 8015032:	dd08      	ble.n	8015046 <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x32>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015034:	4631      	mov	r1, r6
 8015036:	f008 fd19 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 801503a:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801503c:	4630      	mov	r0, r6
 801503e:	1b89      	subs	r1, r1, r6
 8015040:	f007 fd72 	bl	801cb28 <_ZdlPvj>
      }
 8015044:	e001      	b.n	801504a <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x36>
	if (__p)
 8015046:	2e00      	cmp	r6, #0
 8015048:	d1f7      	bne.n	801503a <_ZN13HardwareDelayC1EP17TIM_HandleTypeDef+0x26>

	pending_delays.reserve(DELAY_NUMBER_OF_CHANNELS);
}
 801504a:	4620      	mov	r0, r4
	  this->_M_impl._M_finish = __tmp + __old_size;
 801504c:	e9c4 5504 	strd	r5, r5, [r4, #16]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8015050:	3524      	adds	r5, #36	@ 0x24
 8015052:	61a5      	str	r5, [r4, #24]
 8015054:	bd70      	pop	{r4, r5, r6, pc}

08015056 <_ZN13HardwareDelay13AssignedTimerEP17TIM_HandleTypeDef>:
 * @brief Check that the input timer is registered in the class.
 *
 * @param input timer_: the timer pointer to check
 * @return true if input timer is used by the class
 */
bool HardwareDelay::AssignedTimer(TIM_HandleTypeDef* timer_) {
 8015056:	b570      	push	{r4, r5, r6, lr}
 8015058:	4604      	mov	r4, r0
 801505a:	460e      	mov	r6, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801505c:	6800      	ldr	r0, [r0, #0]
 801505e:	f04f 31ff 	mov.w	r1, #4294967295
 8015062:	f7f7 fee3 	bl	800ce2c <osSemaphoreAcquire>
	bool result = timer == timer_;
 8015066:	6865      	ldr	r5, [r4, #4]
	osSemaphoreRelease(DelaySemaphore);
 8015068:	6820      	ldr	r0, [r4, #0]
	bool result = timer == timer_;
 801506a:	1bab      	subs	r3, r5, r6
 801506c:	425d      	negs	r5, r3
 801506e:	415d      	adcs	r5, r3
	osSemaphoreRelease(DelaySemaphore);
 8015070:	f7f7 ff10 	bl	800ce94 <osSemaphoreRelease>
	return result;
}
 8015074:	4628      	mov	r0, r5
 8015076:	bd70      	pop	{r4, r5, r6, pc}

08015078 <_ZN13HardwareDelay10StartDelayEv>:
}

/**
 * @brief Setup and start the timer based on the active delay
 */
void HardwareDelay::StartDelay(void) {
 8015078:	4603      	mov	r3, r0
	timer->Instance->CNT = 0;
 801507a:	6840      	ldr	r0, [r0, #4]
 801507c:	2200      	movs	r2, #0
 801507e:	6801      	ldr	r1, [r0, #0]
 8015080:	624a      	str	r2, [r1, #36]	@ 0x24
	return *(this->_M_impl._M_start + __n);
 8015082:	7b1a      	ldrb	r2, [r3, #12]
	timer->Instance->ARR = pending_delays[active_delay].delay;
 8015084:	691b      	ldr	r3, [r3, #16]
 8015086:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801508a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801508e:	885b      	ldrh	r3, [r3, #2]
 8015090:	62cb      	str	r3, [r1, #44]	@ 0x2c
	timer->Instance->SR = ~TIM_IT_UPDATE;
 8015092:	f06f 0301 	mvn.w	r3, #1
 8015096:	610b      	str	r3, [r1, #16]
	HAL_TIM_Base_Start_IT(timer);
 8015098:	f7f5 bf30 	b.w	800aefc <HAL_TIM_Base_Start_IT>

0801509c <_ZN13HardwareDelay14StartNextDelayEv>:
}

/**
 * @brief Active and start the next delay
 */
void HardwareDelay::StartNextDelay(void) {
 801509c:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801509e:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
 80150a2:	4a1a      	ldr	r2, [pc, #104]	@ (801510c <_ZN13HardwareDelay14StartNextDelayEv+0x70>)
 80150a4:	1b59      	subs	r1, r3, r5
	if (pending_delays.size() == 0) return;
 80150a6:	42ab      	cmp	r3, r5
 80150a8:	ea4f 01a1 	mov.w	r1, r1, asr #2
 80150ac:	fb02 f101 	mul.w	r1, r2, r1
 80150b0:	d02b      	beq.n	801510a <_ZN13HardwareDelay14StartNextDelayEv+0x6e>

	// Find the smallest delay in memory
	uint8_t min_delay = 0;
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 80150b2:	2301      	movs	r3, #1
	uint8_t min_delay = 0;
 80150b4:	2400      	movs	r4, #0
	return *(this->_M_impl._M_start + __n);
 80150b6:	b222      	sxth	r2, r4
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 80150b8:	428b      	cmp	r3, r1
 80150ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80150be:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80150c2:	d30a      	bcc.n	80150da <_ZN13HardwareDelay14StartNextDelayEv+0x3e>
			min_delay = index;
	}

	// Update other delays based on the active one
	active_delay = min_delay;
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80150c4:	2600      	movs	r6, #0
 80150c6:	f04f 0c0c 	mov.w	ip, #12
	active_delay = min_delay;
 80150ca:	7304      	strb	r4, [r0, #12]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80150cc:	b2f3      	uxtb	r3, r6
 80150ce:	428b      	cmp	r3, r1
 80150d0:	d30f      	bcc.n	80150f2 <_ZN13HardwareDelay14StartNextDelayEv+0x56>
		}
	}

	// Start the delay
	StartDelay();
}
 80150d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	StartDelay();
 80150d6:	f7ff bfcf 	b.w	8015078 <_ZN13HardwareDelay10StartDelayEv>
 80150da:	eb03 0643 	add.w	r6, r3, r3, lsl #1
		if (pending_delays[index].delay < pending_delays[min_delay].delay)
 80150de:	8852      	ldrh	r2, [r2, #2]
 80150e0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80150e4:	8876      	ldrh	r6, [r6, #2]
			min_delay = index;
 80150e6:	4296      	cmp	r6, r2
 80150e8:	bf38      	it	cc
 80150ea:	461c      	movcc	r4, r3
	for (uint8_t index = 1; index < pending_delays.size(); index++) {
 80150ec:	3301      	adds	r3, #1
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	e7e1      	b.n	80150b6 <_ZN13HardwareDelay14StartNextDelayEv+0x1a>
		if (index != active_delay) {
 80150f2:	429c      	cmp	r4, r3
 80150f4:	d007      	beq.n	8015106 <_ZN13HardwareDelay14StartNextDelayEv+0x6a>
 80150f6:	fb0c 5303 	mla	r3, ip, r3, r5
			pending_delays[index].delay -= pending_delays[active_delay].delay;
 80150fa:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 80150fe:	885f      	ldrh	r7, [r3, #2]
 8015100:	eba7 070e 	sub.w	r7, r7, lr
 8015104:	805f      	strh	r7, [r3, #2]
	for (uint8_t index = 0; index < pending_delays.size(); index++) {
 8015106:	3601      	adds	r6, #1
 8015108:	e7e0      	b.n	80150cc <_ZN13HardwareDelay14StartNextDelayEv+0x30>
}
 801510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801510c:	aaaaaaab 	.word	0xaaaaaaab

08015110 <_ZN13HardwareDelay14FindDelayIndexEhPb>:
 *
 * @param input ID: the delay ID to be found
 * @param output success: true if the delay is found
 * @return the delay index in the delay vector
 */
uint8_t HardwareDelay::FindDelayIndex(uint8_t ID, bool* success) {
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (Delay delay : pending_delays) {
 8015116:	2000      	movs	r0, #0
 8015118:	429c      	cmp	r4, r3
 801511a:	461d      	mov	r5, r3
 801511c:	d102      	bne.n	8015124 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x14>
 801511e:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 8015120:	4618      	mov	r0, r3
 8015122:	e006      	b.n	8015132 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x22>
		if (delay.ID == ID) {
 8015124:	782d      	ldrb	r5, [r5, #0]
 8015126:	1c46      	adds	r6, r0, #1
 8015128:	330c      	adds	r3, #12
 801512a:	428d      	cmp	r5, r1
 801512c:	d103      	bne.n	8015136 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x26>
 801512e:	b2c0      	uxtb	r0, r0
 8015130:	2301      	movs	r3, #1
			*success = true;
 8015132:	7013      	strb	r3, [r2, #0]
}
 8015134:	bd70      	pop	{r4, r5, r6, pc}
 8015136:	4630      	mov	r0, r6
 8015138:	e7ee      	b.n	8015118 <_ZN13HardwareDelay14FindDelayIndexEhPb+0x8>

0801513a <_ZN13HardwareDelay17IsDelayRegisteredEh>:
bool HardwareDelay::IsDelayRegistered(uint8_t ID) {
 801513a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801513c:	4604      	mov	r4, r0
 801513e:	460d      	mov	r5, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8015140:	6800      	ldr	r0, [r0, #0]
 8015142:	f04f 31ff 	mov.w	r1, #4294967295
 8015146:	f7f7 fe71 	bl	800ce2c <osSemaphoreAcquire>
	FindDelayIndex(ID, &success);
 801514a:	f10d 0207 	add.w	r2, sp, #7
 801514e:	4629      	mov	r1, r5
 8015150:	4620      	mov	r0, r4
 8015152:	f7ff ffdd 	bl	8015110 <_ZN13HardwareDelay14FindDelayIndexEhPb>
	osSemaphoreRelease(DelaySemaphore);
 8015156:	6820      	ldr	r0, [r4, #0]
 8015158:	f7f7 fe9c 	bl	800ce94 <osSemaphoreRelease>
}
 801515c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015160:	b003      	add	sp, #12
 8015162:	bd30      	pop	{r4, r5, pc}

08015164 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015168:	e9d0 8a00 	ldrd	r8, sl, [r0]
 801516c:	4b26      	ldr	r3, [pc, #152]	@ (8015208 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
 801516e:	4607      	mov	r7, r0
 8015170:	ebaa 0408 	sub.w	r4, sl, r8
 8015174:	4689      	mov	r9, r1
 8015176:	4693      	mov	fp, r2
 8015178:	10a4      	asrs	r4, r4, #2
 801517a:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801517c:	4b23      	ldr	r3, [pc, #140]	@ (801520c <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa8>)
 801517e:	429c      	cmp	r4, r3
 8015180:	d102      	bne.n	8015188 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8015182:	4823      	ldr	r0, [pc, #140]	@ (8015210 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xac>)
 8015184:	f007 fdaa 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015188:	45c2      	cmp	sl, r8
 801518a:	bf14      	ite	ne
 801518c:	4622      	movne	r2, r4
 801518e:	2201      	moveq	r2, #1
 8015190:	eba1 0508 	sub.w	r5, r1, r8
 8015194:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015196:	d232      	bcs.n	80151fe <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015198:	b39c      	cbz	r4, 8015202 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801519a:	429c      	cmp	r4, r3
 801519c:	bf28      	it	cs
 801519e:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80151a0:	200c      	movs	r0, #12
 80151a2:	4360      	muls	r0, r4
 80151a4:	f007 fce5 	bl	801cb72 <_Znwj>
 80151a8:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80151aa:	1973      	adds	r3, r6, r5
      if (__count > 0)
 80151ac:	2d00      	cmp	r5, #0
 80151ae:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80151b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151b6:	dd04      	ble.n	80151c2 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80151b8:	462a      	mov	r2, r5
 80151ba:	4641      	mov	r1, r8
 80151bc:	4630      	mov	r0, r6
 80151be:	f008 fc55 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 80151c2:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 80151c6:	350c      	adds	r5, #12
      if (__count > 0)
 80151c8:	f1ba 0f00 	cmp.w	sl, #0
 80151cc:	4435      	add	r5, r6
 80151ce:	dd04      	ble.n	80151da <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x76>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80151d0:	4652      	mov	r2, sl
 80151d2:	4649      	mov	r1, r9
 80151d4:	4628      	mov	r0, r5
 80151d6:	f008 fd41 	bl	801dc5c <memcpy>
      return __result + __count;
 80151da:	4455      	add	r5, sl
	if (__p)
 80151dc:	f1b8 0f00 	cmp.w	r8, #0
 80151e0:	d005      	beq.n	80151ee <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
		    this->_M_impl._M_end_of_storage - __old_start);
 80151e2:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80151e4:	4640      	mov	r0, r8
 80151e6:	eba1 0108 	sub.w	r1, r1, r8
 80151ea:	f007 fc9d 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80151ee:	230c      	movs	r3, #12
      this->_M_impl._M_finish = __new_finish;
 80151f0:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80151f4:	fb03 6604 	mla	r6, r3, r4, r6
 80151f8:	60be      	str	r6, [r7, #8]
    }
 80151fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fe:	461c      	mov	r4, r3
 8015200:	e7ce      	b.n	80151a0 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015202:	4626      	mov	r6, r4
 8015204:	e7d1      	b.n	80151aa <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8015206:	bf00      	nop
 8015208:	aaaaaaab 	.word	0xaaaaaaab
 801520c:	0aaaaaaa 	.word	0x0aaaaaaa
 8015210:	0801dd74 	.word	0x0801dd74

08015214 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8015214:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015216:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
      push_back(const value_type& __x)
 801521a:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801521c:	428b      	cmp	r3, r1
      push_back(const value_type& __x)
 801521e:	4604      	mov	r4, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015220:	d005      	beq.n	801522e <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015222:	ca07      	ldmia	r2, {r0, r1, r2}
 8015224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    ++this->_M_impl._M_finish;
 8015228:	330c      	adds	r3, #12
 801522a:	6063      	str	r3, [r4, #4]
      }
 801522c:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 801522e:	4619      	mov	r1, r3
 8015230:	f7ff ff98 	bl	8015164 <_ZNSt6vectorI5DelaySaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8015234:	e7fa      	b.n	801522c <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_+0x18>
	...

08015238 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE>:
bool HardwareDelay::AddDelayMS(uint8_t ID, uint16_t delay_ms, void* context, void (*callback)(void*, uint8_t)) {
 8015238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801523c:	4604      	mov	r4, r0
 801523e:	460f      	mov	r7, r1
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8015240:	6800      	ldr	r0, [r0, #0]
 8015242:	f04f 31ff 	mov.w	r1, #4294967295
bool HardwareDelay::AddDelayMS(uint8_t ID, uint16_t delay_ms, void* context, void (*callback)(void*, uint8_t)) {
 8015246:	4616      	mov	r6, r2
 8015248:	4698      	mov	r8, r3
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801524a:	f7f7 fdef 	bl	800ce2c <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801524e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015252:	1a9b      	subs	r3, r3, r2
	if (pending_delays.size() >= DELAY_NUMBER_OF_CHANNELS) {
 8015254:	2b18      	cmp	r3, #24
 8015256:	d906      	bls.n	8015266 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x2e>
		osSemaphoreRelease(DelaySemaphore);
 8015258:	6820      	ldr	r0, [r4, #0]
 801525a:	f7f7 fe1b 	bl	800ce94 <osSemaphoreRelease>
		return false;
 801525e:	2000      	movs	r0, #0
}
 8015260:	b004      	add	sp, #16
 8015262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FindDelayIndex(ID, &success);
 8015266:	f10d 0203 	add.w	r2, sp, #3
 801526a:	4639      	mov	r1, r7
 801526c:	4620      	mov	r0, r4
 801526e:	f7ff ff4f 	bl	8015110 <_ZN13HardwareDelay14FindDelayIndexEhPb>
	if (success) {
 8015272:	f89d 5003 	ldrb.w	r5, [sp, #3]
 8015276:	2d00      	cmp	r5, #0
 8015278:	d1ee      	bne.n	8015258 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x20>
	HAL_TIM_Base_Stop_IT(timer);
 801527a:	6860      	ldr	r0, [r4, #4]
 801527c:	f7f5 fe86 	bl	800af8c <HAL_TIM_Base_Stop_IT>
 8015280:	6961      	ldr	r1, [r4, #20]
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 8015282:	00b2      	lsls	r2, r6, #2
 8015284:	4626      	mov	r6, r4
	hardware_delay.callback = callback;
 8015286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015288:	f856 cf10 	ldr.w	ip, [r6, #16]!
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 801528c:	b292      	uxth	r2, r2
	hardware_delay.ID = ID;
 801528e:	f88d 7004 	strb.w	r7, [sp, #4]
	if (pending_delays.size() > 0) {
 8015292:	4561      	cmp	r1, ip
	hardware_delay.delay = delay_ms << 2; // * 4 to get delay in 1/4 ms
 8015294:	f8ad 2006 	strh.w	r2, [sp, #6]
	hardware_delay.context = context;
 8015298:	f8cd 8008 	str.w	r8, [sp, #8]
	hardware_delay.callback = callback;
 801529c:	9303      	str	r3, [sp, #12]
	if (pending_delays.size() > 0) {
 801529e:	d01b      	beq.n	80152d8 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xa0>
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 80152a0:	6860      	ldr	r0, [r4, #4]
 80152a2:	6807      	ldr	r7, [r0, #0]
 80152a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a6:	f8d7 8024 	ldr.w	r8, [r7, #36]	@ 0x24
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	fa1f f888 	uxth.w	r8, r8
 80152b0:	eba3 0e08 	sub.w	lr, r3, r8
 80152b4:	fa1f fe8e 	uxth.w	lr, lr
		if (hardware_delay.delay < remaining_time) {
 80152b8:	4572      	cmp	r2, lr
 80152ba:	d22a      	bcs.n	8015312 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xda>
 80152bc:	eba1 010c 	sub.w	r1, r1, ip
 80152c0:	4b1b      	ldr	r3, [pc, #108]	@ (8015330 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xf8>)
	return *(this->_M_impl._M_start + __n);
 80152c2:	f04f 080c 	mov.w	r8, #12
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 80152c6:	ebae 0002 	sub.w	r0, lr, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80152ca:	1089      	asrs	r1, r1, #2
 80152cc:	4359      	muls	r1, r3
 80152ce:	fa5f f985 	uxtb.w	r9, r5
			for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80152d2:	4549      	cmp	r1, r9
 80152d4:	d809      	bhi.n	80152ea <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xb2>
			active_delay = pending_delays.size();
 80152d6:	b2cd      	uxtb	r5, r1
	pending_delays.push_back(hardware_delay);
 80152d8:	4630      	mov	r0, r6
 80152da:	a901      	add	r1, sp, #4
			active_delay = pending_delays.size();
 80152dc:	7325      	strb	r5, [r4, #12]
	pending_delays.push_back(hardware_delay);
 80152de:	f7ff ff99 	bl	8015214 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>
	StartDelay();
 80152e2:	4620      	mov	r0, r4
 80152e4:	f7ff fec8 	bl	8015078 <_ZN13HardwareDelay10StartDelayEv>
 80152e8:	e01d      	b.n	8015326 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xee>
				if (index == active_delay)
 80152ea:	f894 a00c 	ldrb.w	sl, [r4, #12]
	return *(this->_M_impl._M_start + __n);
 80152ee:	fb08 ce09 	mla	lr, r8, r9, ip
 80152f2:	45ca      	cmp	sl, r9
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 80152f4:	f8be 3002 	ldrh.w	r3, [lr, #2]
				if (index == active_delay)
 80152f8:	d109      	bne.n	801530e <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xd6>
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 80152fa:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 80152fe:	4491      	add	r9, r2
 8015300:	eba3 0309 	sub.w	r3, r3, r9
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 8015304:	b29b      	uxth	r3, r3
 8015306:	3501      	adds	r5, #1
					pending_delays[index].delay -= timer->Instance->CNT + hardware_delay.delay;
 8015308:	f8ae 3002 	strh.w	r3, [lr, #2]
			for (uint8_t index = 0; index < pending_delays.size(); index++) {
 801530c:	e7df      	b.n	80152ce <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x96>
					pending_delays[index].delay += remaining_time - hardware_delay.delay;
 801530e:	4403      	add	r3, r0
 8015310:	e7f8      	b.n	8015304 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0xcc>
			hardware_delay.delay -= remaining_time;
 8015312:	4442      	add	r2, r8
 8015314:	1ad2      	subs	r2, r2, r3
 8015316:	f8ad 2006 	strh.w	r2, [sp, #6]
			HAL_TIM_Base_Start_IT(timer);
 801531a:	f7f5 fdef 	bl	800aefc <HAL_TIM_Base_Start_IT>
			pending_delays.push_back(hardware_delay);
 801531e:	a901      	add	r1, sp, #4
 8015320:	4630      	mov	r0, r6
 8015322:	f7ff ff77 	bl	8015214 <_ZNSt6vectorI5DelaySaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(DelaySemaphore);
 8015326:	6820      	ldr	r0, [r4, #0]
 8015328:	f7f7 fdb4 	bl	800ce94 <osSemaphoreRelease>
			return true;
 801532c:	2001      	movs	r0, #1
 801532e:	e797      	b.n	8015260 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE+0x28>
 8015330:	aaaaaaab 	.word	0xaaaaaaab

08015334 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8015334:	460b      	mov	r3, r1
      : _M_current(__i) { }
 8015336:	6842      	ldr	r2, [r0, #4]
      { return __normal_iterator(_M_current + __n); }
 8015338:	310c      	adds	r1, #12
      if (__position + 1 != end())
 801533a:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 801533c:	b510      	push	{r4, lr}
 801533e:	4604      	mov	r4, r0
      if (__position + 1 != end())
 8015340:	d004      	beq.n	801534c <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8015342:	4618      	mov	r0, r3
 8015344:	1a52      	subs	r2, r2, r1
 8015346:	f008 fb91 	bl	801da6c <memmove>
 801534a:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 801534c:	6862      	ldr	r2, [r4, #4]
    }
 801534e:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 8015350:	3a0c      	subs	r2, #12
 8015352:	6062      	str	r2, [r4, #4]
    }
 8015354:	bd10      	pop	{r4, pc}
	...

08015358 <_ZN13HardwareDelay13RemoveDelayMSEh>:
bool HardwareDelay::RemoveDelayMS(uint8_t ID) {
 8015358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801535a:	460d      	mov	r5, r1
 801535c:	4604      	mov	r4, r0
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 801535e:	f04f 31ff 	mov.w	r1, #4294967295
 8015362:	6800      	ldr	r0, [r0, #0]
 8015364:	f7f7 fd62 	bl	800ce2c <osSemaphoreAcquire>
	uint8_t index = FindDelayIndex(ID, &success);
 8015368:	4629      	mov	r1, r5
 801536a:	f10d 0207 	add.w	r2, sp, #7
 801536e:	4620      	mov	r0, r4
 8015370:	f7ff fece 	bl	8015110 <_ZN13HardwareDelay14FindDelayIndexEhPb>
	if (!success) {
 8015374:	f89d 5007 	ldrb.w	r5, [sp, #7]
	uint8_t index = FindDelayIndex(ID, &success);
 8015378:	4606      	mov	r6, r0
	if (!success) {
 801537a:	b92d      	cbnz	r5, 8015388 <_ZN13HardwareDelay13RemoveDelayMSEh+0x30>
	osSemaphoreRelease(DelaySemaphore);
 801537c:	6820      	ldr	r0, [r4, #0]
 801537e:	f7f7 fd89 	bl	800ce94 <osSemaphoreRelease>
}
 8015382:	4628      	mov	r0, r5
 8015384:	b003      	add	sp, #12
 8015386:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_TIM_Base_Stop_IT(timer);
 8015388:	6860      	ldr	r0, [r4, #4]
 801538a:	f7f5 fdff 	bl	800af8c <HAL_TIM_Base_Stop_IT>
 801538e:	4620      	mov	r0, r4
 8015390:	b231      	sxth	r1, r6
 8015392:	f850 3f10 	ldr.w	r3, [r0, #16]!
 8015396:	eb01 0141 	add.w	r1, r1, r1, lsl #1
      { return _M_erase(begin() + (__position - cbegin())); }
 801539a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801539e:	f7ff ffc9 	bl	8015334 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
	if (active_delay == index) {
 80153a2:	7b23      	ldrb	r3, [r4, #12]
 80153a4:	42b3      	cmp	r3, r6
 80153a6:	d11c      	bne.n	80153e2 <_ZN13HardwareDelay13RemoveDelayMSEh+0x8a>
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 80153a8:	6863      	ldr	r3, [r4, #4]
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80153aa:	2000      	movs	r0, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80153ac:	4a11      	ldr	r2, [pc, #68]	@ (80153f4 <_ZN13HardwareDelay13RemoveDelayMSEh+0x9c>)
	return *(this->_M_impl._M_start + __n);
 80153ae:	f04f 0c0c 	mov.w	ip, #12
		uint16_t remaining_time = timer->Instance->ARR - timer->Instance->CNT;
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80153b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153b8:	1ac9      	subs	r1, r1, r3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80153ba:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
 80153be:	b289      	uxth	r1, r1
 80153c0:	1bdb      	subs	r3, r3, r7
 80153c2:	109b      	asrs	r3, r3, #2
 80153c4:	4353      	muls	r3, r2
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80153c6:	b2c2      	uxtb	r2, r0
 80153c8:	3001      	adds	r0, #1
 80153ca:	4293      	cmp	r3, r2
 80153cc:	d803      	bhi.n	80153d6 <_ZN13HardwareDelay13RemoveDelayMSEh+0x7e>
		StartNextDelay();
 80153ce:	4620      	mov	r0, r4
 80153d0:	f7ff fe64 	bl	801509c <_ZN13HardwareDelay14StartNextDelayEv>
 80153d4:	e7d2      	b.n	801537c <_ZN13HardwareDelay13RemoveDelayMSEh+0x24>
	return *(this->_M_impl._M_start + __n);
 80153d6:	fb0c 7202 	mla	r2, ip, r2, r7
			pending_delays[index].delay += remaining_time;
 80153da:	8856      	ldrh	r6, [r2, #2]
 80153dc:	440e      	add	r6, r1
 80153de:	8056      	strh	r6, [r2, #2]
		for (uint8_t index = 0; index < pending_delays.size(); index++) {
 80153e0:	e7f1      	b.n	80153c6 <_ZN13HardwareDelay13RemoveDelayMSEh+0x6e>
		if (index < active_delay) active_delay--;
 80153e2:	bf88      	it	hi
 80153e4:	f103 33ff 	addhi.w	r3, r3, #4294967295
		HAL_TIM_Base_Start_IT(timer);
 80153e8:	6860      	ldr	r0, [r4, #4]
		if (index < active_delay) active_delay--;
 80153ea:	bf88      	it	hi
 80153ec:	7323      	strbhi	r3, [r4, #12]
		HAL_TIM_Base_Start_IT(timer);
 80153ee:	f7f5 fd85 	bl	800aefc <HAL_TIM_Base_Start_IT>
 80153f2:	e7c3      	b.n	801537c <_ZN13HardwareDelay13RemoveDelayMSEh+0x24>
 80153f4:	aaaaaaab 	.word	0xaaaaaaab

080153f8 <_ZN13HardwareDelay14TriggeredDelayEv>:
void HardwareDelay::TriggeredDelay(void) {
 80153f8:	b510      	push	{r4, lr}
 80153fa:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(timer);
 80153fc:	6840      	ldr	r0, [r0, #4]
 80153fe:	f7f5 fdc5 	bl	800af8c <HAL_TIM_Base_Stop_IT>
	osSemaphoreAcquire(DelaySemaphore, osWaitForever);
 8015402:	f04f 31ff 	mov.w	r1, #4294967295
 8015406:	6820      	ldr	r0, [r4, #0]
 8015408:	f7f7 fd10 	bl	800ce2c <osSemaphoreAcquire>
	timer->Instance->SR = ~TIM_IT_UPDATE;
 801540c:	6863      	ldr	r3, [r4, #4]
 801540e:	f06f 0201 	mvn.w	r2, #1
 8015412:	6921      	ldr	r1, [r4, #16]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	611a      	str	r2, [r3, #16]
 8015418:	7b23      	ldrb	r3, [r4, #12]
 801541a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801541e:	0098      	lsls	r0, r3, #2
 8015420:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	if (pending_delays[active_delay].callback != NULL) {
 8015424:	689a      	ldr	r2, [r3, #8]
 8015426:	b112      	cbz	r2, 801542e <_ZN13HardwareDelay14TriggeredDelayEv+0x36>
		pending_delays[active_delay].callback(pending_delays[active_delay].context, pending_delays[active_delay].ID);
 8015428:	5c09      	ldrb	r1, [r1, r0]
 801542a:	6858      	ldr	r0, [r3, #4]
 801542c:	4790      	blx	r2
 801542e:	7b21      	ldrb	r1, [r4, #12]
 8015430:	4620      	mov	r0, r4
 8015432:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015436:	f850 3f10 	ldr.w	r3, [r0, #16]!
      { return _M_erase(begin() + (__position - cbegin())); }
 801543a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801543e:	f7ff ff79 	bl	8015334 <_ZNSt6vectorI5DelaySaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
	StartNextDelay();
 8015442:	4620      	mov	r0, r4
 8015444:	f7ff fe2a 	bl	801509c <_ZN13HardwareDelay14StartNextDelayEv>
	osSemaphoreRelease(DelaySemaphore);
 8015448:	6820      	ldr	r0, [r4, #0]
}
 801544a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(DelaySemaphore);
 801544e:	f7f7 bd21 	b.w	800ce94 <osSemaphoreRelease>

08015452 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015452:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8015454:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015456:	d006      	beq.n	8015466 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8015458:	da01      	bge.n	801545e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801545a:	f007 fc39 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 801545e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015462:	f007 bb86 	b.w	801cb72 <_Znwj>
 8015466:	bd08      	pop	{r3, pc}

08015468 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8015468:	491e      	ldr	r1, [pc, #120]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801546a:	b510      	push	{r4, lr}
 801546c:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801546e:	4608      	mov	r0, r1
 8015470:	f007 fc16 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8015474:	bb40      	cbnz	r0, 80154c8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8015476:	491c      	ldr	r1, [pc, #112]	@ (80154e8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8015478:	481a      	ldr	r0, [pc, #104]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801547a:	f007 fc11 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801547e:	bb28      	cbnz	r0, 80154cc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8015480:	491a      	ldr	r1, [pc, #104]	@ (80154ec <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8015482:	4818      	ldr	r0, [pc, #96]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015484:	f007 fc0c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8015488:	bb10      	cbnz	r0, 80154d0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801548a:	4919      	ldr	r1, [pc, #100]	@ (80154f0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801548c:	4815      	ldr	r0, [pc, #84]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801548e:	f007 fc07 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8015492:	b9f8      	cbnz	r0, 80154d4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8015494:	4917      	ldr	r1, [pc, #92]	@ (80154f4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8015496:	4813      	ldr	r0, [pc, #76]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8015498:	f007 fc02 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801549c:	b9e0      	cbnz	r0, 80154d8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801549e:	4916      	ldr	r1, [pc, #88]	@ (80154f8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 80154a0:	4810      	ldr	r0, [pc, #64]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80154a2:	f007 fbfd 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80154a6:	b9c8      	cbnz	r0, 80154dc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80154a8:	4914      	ldr	r1, [pc, #80]	@ (80154fc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 80154aa:	480e      	ldr	r0, [pc, #56]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80154ac:	f007 fbf8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80154b0:	b9b0      	cbnz	r0, 80154e0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80154b2:	4913      	ldr	r1, [pc, #76]	@ (8015500 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 80154b4:	480b      	ldr	r0, [pc, #44]	@ (80154e4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 80154b6:	f007 fbf3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80154ba:	2800      	cmp	r0, #0
 80154bc:	bf14      	ite	ne
 80154be:	2309      	movne	r3, #9
 80154c0:	2300      	moveq	r3, #0
 80154c2:	7020      	strb	r0, [r4, #0]
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80154c8:	2300      	movs	r3, #0
 80154ca:	e7fa      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80154cc:	2301      	movs	r3, #1
 80154ce:	e7f8      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80154d0:	2302      	movs	r3, #2
 80154d2:	e7f6      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80154d4:	2303      	movs	r3, #3
 80154d6:	e7f4      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80154d8:	2304      	movs	r3, #4
 80154da:	e7f2      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80154dc:	2306      	movs	r3, #6
 80154de:	e7f0      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80154e0:	2308      	movs	r3, #8
 80154e2:	e7ee      	b.n	80154c2 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 80154e4:	0801e1c4 	.word	0x0801e1c4
 80154e8:	0801e1bc 	.word	0x0801e1bc
 80154ec:	0801e1ac 	.word	0x0801e1ac
 80154f0:	0801e1a4 	.word	0x0801e1a4
 80154f4:	0801e1cc 	.word	0x0801e1cc
 80154f8:	0801e1b4 	.word	0x0801e1b4
 80154fc:	0801e19c 	.word	0x0801e19c
 8015500:	0801e194 	.word	0x0801e194

08015504 <_ZN4LEDSC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015504:	2200      	movs	r2, #0
 8015506:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801550a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801550e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015512:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015516:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 801551a:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
/**
 * @brief Class constructor
 */
LEDS::LEDS()
{
}
 801551e:	4770      	bx	lr

08015520 <_ZN4LEDS4InitEP9Registers>:
/**
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 */
void LEDS::Init(Registers* registers_) {
 8015520:	b510      	push	{r4, lr}
	registers = registers_;
 8015522:	6001      	str	r1, [r0, #0]

	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8015524:	2101      	movs	r1, #1
void LEDS::Init(Registers* registers_) {
 8015526:	4604      	mov	r4, r0
	LEDsSemaphore = osSemaphoreNew(1,1,NULL);
 8015528:	2200      	movs	r2, #0
 801552a:	4608      	mov	r0, r1
 801552c:	f7f7 fc22 	bl	800cd74 <osSemaphoreNew>
 8015530:	6060      	str	r0, [r4, #4]
	osSemaphoreRelease(LEDsSemaphore);
}
 8015532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(LEDsSemaphore);
 8015536:	f7f7 bcad 	b.w	800ce94 <osSemaphoreRelease>

0801553a <_ZN4LEDS4SpinEv>:
}

/**
 * @brief Function used to process the blinking patterns of SMD LEDs. Called repeatedly in a freeRTOS task
 */
void LEDS::Spin(void) {
 801553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553c:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801553e:	f04f 31ff 	mov.w	r1, #4294967295
 8015542:	6840      	ldr	r0, [r0, #4]
            }
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);

            led.counter++;
            if (led.counter >= led.T) {
                led.counter = 0;
 8015544:	2700      	movs	r7, #0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015546:	f7f7 fc71 	bl	800ce2c <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801554a:	e9d5 4602 	ldrd	r4, r6, [r5, #8]
    for (LED & led : LEDs) {
 801554e:	42a6      	cmp	r6, r4
 8015550:	d107      	bne.n	8015562 <_ZN4LEDS4SpinEv+0x28>
                if (not led.repeat)
                    led.blink = false;
            }
        }
    }
    osSemaphoreRelease(LEDsSemaphore);
 8015552:	6868      	ldr	r0, [r5, #4]
 8015554:	f7f7 fc9e 	bl	800ce94 <osSemaphoreRelease>

    osDelay(DEFAULT_LEDS_PERIOD);
 8015558:	2064      	movs	r0, #100	@ 0x64
}
 801555a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    osDelay(DEFAULT_LEDS_PERIOD);
 801555e:	f7f7 bbfb 	b.w	800cd58 <osDelay>
        if (led.blink) {
 8015562:	7b22      	ldrb	r2, [r4, #12]
 8015564:	b1a2      	cbz	r2, 8015590 <_ZN4LEDS4SpinEv+0x56>
 8015566:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
            for(uint8_t t : led.timings) {
 801556a:	4299      	cmp	r1, r3
 801556c:	d005      	beq.n	801557a <_ZN4LEDS4SpinEv+0x40>
 801556e:	f813 0b01 	ldrb.w	r0, [r3], #1
                if (led.counter < t)
 8015572:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8015576:	4584      	cmp	ip, r0
 8015578:	d20c      	bcs.n	8015594 <_ZN4LEDS4SpinEv+0x5a>
            HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, (GPIO_PinState) state);
 801557a:	8921      	ldrh	r1, [r4, #8]
 801557c:	6860      	ldr	r0, [r4, #4]
 801557e:	f7f1 fa6e 	bl	8006a5e <HAL_GPIO_WritePin>
            led.counter++;
 8015582:	7ba3      	ldrb	r3, [r4, #14]
            if (led.counter >= led.T) {
 8015584:	7f22      	ldrb	r2, [r4, #28]
            led.counter++;
 8015586:	3301      	adds	r3, #1
 8015588:	b2db      	uxtb	r3, r3
            if (led.counter >= led.T) {
 801558a:	429a      	cmp	r2, r3
            led.counter++;
 801558c:	73a3      	strb	r3, [r4, #14]
            if (led.counter >= led.T) {
 801558e:	d904      	bls.n	801559a <_ZN4LEDS4SpinEv+0x60>
      operator++() _GLIBCXX_NOEXCEPT
 8015590:	3420      	adds	r4, #32
	return *this;
 8015592:	e7dc      	b.n	801554e <_ZN4LEDS4SpinEv+0x14>
                state =  not state;
 8015594:	f082 0201 	eor.w	r2, r2, #1
 8015598:	e7e7      	b.n	801556a <_ZN4LEDS4SpinEv+0x30>
                if (not led.repeat)
 801559a:	7b63      	ldrb	r3, [r4, #13]
                led.counter = 0;
 801559c:	73a7      	strb	r7, [r4, #14]
                if (not led.repeat)
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d1f6      	bne.n	8015590 <_ZN4LEDS4SpinEv+0x56>
                    led.blink = false;
 80155a2:	7323      	strb	r3, [r4, #12]
 80155a4:	e7f4      	b.n	8015590 <_ZN4LEDS4SpinEv+0x56>

080155a6 <_ZN4LEDS6GetLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetLED(uint8_t ID, bool* success) {
 80155a6:	b570      	push	{r4, r5, r6, lr}
 80155a8:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
    uint8_t index = 0;
    for (LED & led : LEDs) {
 80155ac:	2000      	movs	r0, #0
 80155ae:	429c      	cmp	r4, r3
 80155b0:	461d      	mov	r5, r3
 80155b2:	d102      	bne.n	80155ba <_ZN4LEDS6GetLEDEhPb+0x14>
 80155b4:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80155b6:	4618      	mov	r0, r3
 80155b8:	e006      	b.n	80155c8 <_ZN4LEDS6GetLEDEhPb+0x22>
        if (led.ID == ID) {
 80155ba:	782d      	ldrb	r5, [r5, #0]
 80155bc:	1c46      	adds	r6, r0, #1
 80155be:	3320      	adds	r3, #32
 80155c0:	428d      	cmp	r5, r1
 80155c2:	d103      	bne.n	80155cc <_ZN4LEDS6GetLEDEhPb+0x26>
 80155c4:	b2c0      	uxtb	r0, r0
 80155c6:	2301      	movs	r3, #1
            *success = true;
 80155c8:	7013      	strb	r3, [r2, #0]
}
 80155ca:	bd70      	pop	{r4, r5, r6, pc}
 80155cc:	4630      	mov	r0, r6
 80155ce:	e7ee      	b.n	80155ae <_ZN4LEDS6GetLEDEhPb+0x8>

080155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>:
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 80155d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155d2:	4616      	mov	r6, r2
    uint8_t index = GetLED(ID, &success);
 80155d4:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetLED(uint8_t ID, GPIO_PinState state) {
 80155d8:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 80155da:	f7ff ffe4 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80155de:	f89d 7007 	ldrb.w	r7, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 80155e2:	4605      	mov	r5, r0
    if (success) {
 80155e4:	b17f      	cbz	r7, 8015606 <_ZN4LEDS6SetLEDEh13GPIO_PinState+0x36>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80155e6:	f04f 31ff 	mov.w	r1, #4294967295
 80155ea:	6860      	ldr	r0, [r4, #4]
 80155ec:	f7f7 fc1e 	bl	800ce2c <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 80155f0:	68a3      	ldr	r3, [r4, #8]
 80155f2:	b22d      	sxth	r5, r5
        LEDs[index].blink = false;
 80155f4:	2200      	movs	r2, #0
 80155f6:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80155fa:	731a      	strb	r2, [r3, #12]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, state);
 80155fc:	4632      	mov	r2, r6
 80155fe:	8919      	ldrh	r1, [r3, #8]
 8015600:	6858      	ldr	r0, [r3, #4]
 8015602:	f7f1 fa2c 	bl	8006a5e <HAL_GPIO_WritePin>
    osSemaphoreRelease(LEDsSemaphore);
 8015606:	6860      	ldr	r0, [r4, #4]
 8015608:	f7f7 fc44 	bl	800ce94 <osSemaphoreRelease>
}
 801560c:	4638      	mov	r0, r7
 801560e:	b003      	add	sp, #12
 8015610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015612 <_ZN4LEDS9UnusedLEDEh>:
bool LEDS::UnusedLED(uint8_t ID) {
 8015612:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t index = GetLED(ID, &success);
 8015614:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::UnusedLED(uint8_t ID) {
 8015618:	4604      	mov	r4, r0
    uint8_t index = GetLED(ID, &success);
 801561a:	f7ff ffc4 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801561e:	f89d 6007 	ldrb.w	r6, [sp, #7]
    uint8_t index = GetLED(ID, &success);
 8015622:	4605      	mov	r5, r0
    if (success) {
 8015624:	b196      	cbz	r6, 801564c <_ZN4LEDS9UnusedLEDEh+0x3a>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015626:	f04f 31ff 	mov.w	r1, #4294967295
 801562a:	6860      	ldr	r0, [r4, #4]
 801562c:	f7f7 fbfe 	bl	800ce2c <osSemaphoreAcquire>
 8015630:	68a3      	ldr	r3, [r4, #8]
 8015632:	b228      	sxth	r0, r5
 8015634:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8015638:	0145      	lsls	r5, r0, #5
    	GPIO_PinState pin_state = HAL_GPIO_ReadPin(LEDs[index].gpio.port, LEDs[index].gpio.pin);
 801563a:	8919      	ldrh	r1, [r3, #8]
 801563c:	6858      	ldr	r0, [r3, #4]
 801563e:	f7f1 fa07 	bl	8006a50 <HAL_GPIO_ReadPin>
    	status = (pin_state == GPIO_PIN_SET) || LEDs[index].blink;
 8015642:	2801      	cmp	r0, #1
 8015644:	bf1e      	ittt	ne
 8015646:	68a3      	ldrne	r3, [r4, #8]
 8015648:	195b      	addne	r3, r3, r5
 801564a:	7b1e      	ldrbne	r6, [r3, #12]
    osSemaphoreRelease(LEDsSemaphore);
 801564c:	6860      	ldr	r0, [r4, #4]
 801564e:	f7f7 fc21 	bl	800ce94 <osSemaphoreRelease>
}
 8015652:	f086 0001 	eor.w	r0, r6, #1
 8015656:	b002      	add	sp, #8
 8015658:	bd70      	pop	{r4, r5, r6, pc}

0801565a <_ZN4LEDS5BlinkEh>:
bool LEDS::Blink(uint8_t ID) {
 801565a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801565c:	460d      	mov	r5, r1
 801565e:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015660:	f04f 31ff 	mov.w	r1, #4294967295
 8015664:	6840      	ldr	r0, [r0, #4]
 8015666:	f7f7 fbe1 	bl	800ce2c <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 801566a:	4629      	mov	r1, r5
 801566c:	f10d 0207 	add.w	r2, sp, #7
 8015670:	4620      	mov	r0, r4
 8015672:	f7ff ff98 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8015676:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801567a:	b145      	cbz	r5, 801568e <_ZN4LEDS5BlinkEh+0x34>
 801567c:	68a3      	ldr	r3, [r4, #8]
 801567e:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 8015680:	f240 1201 	movw	r2, #257	@ 0x101
 8015684:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8015688:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 801568a:	2200      	movs	r2, #0
 801568c:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 801568e:	6860      	ldr	r0, [r4, #4]
 8015690:	f7f7 fc00 	bl	800ce94 <osSemaphoreRelease>
}
 8015694:	4628      	mov	r0, r5
 8015696:	b003      	add	sp, #12
 8015698:	bd30      	pop	{r4, r5, pc}

0801569a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			return self->Blink(*input);
 801569a:	7811      	ldrb	r1, [r2, #0]
 801569c:	f7ff bfdd 	b.w	801565a <_ZN4LEDS5BlinkEh>

080156a0 <_ZN4LEDS9BlinkOnceEh>:
bool LEDS::BlinkOnce(uint8_t ID) {
 80156a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156a2:	460d      	mov	r5, r1
 80156a4:	4604      	mov	r4, r0
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80156a6:	f04f 31ff 	mov.w	r1, #4294967295
 80156aa:	6840      	ldr	r0, [r0, #4]
 80156ac:	f7f7 fbbe 	bl	800ce2c <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 80156b0:	4629      	mov	r1, r5
 80156b2:	f10d 0207 	add.w	r2, sp, #7
 80156b6:	4620      	mov	r0, r4
 80156b8:	f7ff ff75 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 80156bc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80156c0:	b13d      	cbz	r5, 80156d2 <_ZN4LEDS9BlinkOnceEh+0x32>
 80156c2:	68a3      	ldr	r3, [r4, #8]
 80156c4:	b200      	sxth	r0, r0
        LEDs[index].blink = true;
 80156c6:	2201      	movs	r2, #1
 80156c8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 80156cc:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 80156ce:	2200      	movs	r2, #0
 80156d0:	739a      	strb	r2, [r3, #14]
    osSemaphoreRelease(LEDsSemaphore);
 80156d2:	6860      	ldr	r0, [r4, #4]
 80156d4:	f7f7 fbde 	bl	800ce94 <osSemaphoreRelease>
}
 80156d8:	4628      	mov	r0, r5
 80156da:	b003      	add	sp, #12
 80156dc:	bd30      	pop	{r4, r5, pc}

080156de <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->BlinkOnce(*input);
 80156de:	7811      	ldrb	r1, [r2, #0]
 80156e0:	f7ff bfde 	b.w	80156a0 <_ZN4LEDS9BlinkOnceEh>

080156e4 <_ZN4LEDS9GetRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetRGBLED(uint8_t ID, bool* success) {
 80156e4:	b570      	push	{r4, r5, r6, lr}
 80156e6:	e9d0 3405 	ldrd	r3, r4, [r0, #20]
    uint8_t index = 0;
    for (RGBLED & led : RGB_LEDs) {
 80156ea:	2000      	movs	r0, #0
 80156ec:	429c      	cmp	r4, r3
 80156ee:	461d      	mov	r5, r3
 80156f0:	d102      	bne.n	80156f8 <_ZN4LEDS9GetRGBLEDEhPb+0x14>
 80156f2:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 80156f4:	4618      	mov	r0, r3
 80156f6:	e006      	b.n	8015706 <_ZN4LEDS9GetRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 80156f8:	782d      	ldrb	r5, [r5, #0]
 80156fa:	1c46      	adds	r6, r0, #1
 80156fc:	3310      	adds	r3, #16
 80156fe:	428d      	cmp	r5, r1
 8015700:	d103      	bne.n	801570a <_ZN4LEDS9GetRGBLEDEhPb+0x26>
 8015702:	b2c0      	uxtb	r0, r0
 8015704:	2301      	movs	r3, #1
            *success = true;
 8015706:	7013      	strb	r3, [r2, #0]
}
 8015708:	bd70      	pop	{r4, r5, r6, pc}
 801570a:	4630      	mov	r0, r6
 801570c:	e7ee      	b.n	80156ec <_ZN4LEDS9GetRGBLEDEhPb+0x8>

0801570e <_ZN4LEDS6SetRGBEhhhh>:
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 801570e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015712:	4617      	mov	r7, r2
    uint8_t index = GetRGBLED(ID, &success);
 8015714:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::SetRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B) {
 8015718:	4604      	mov	r4, r0
 801571a:	461e      	mov	r6, r3
    uint8_t index = GetRGBLED(ID, &success);
 801571c:	f7ff ffe2 	bl	80156e4 <_ZN4LEDS9GetRGBLEDEhPb>
    if (success) {
 8015720:	f89d 8007 	ldrb.w	r8, [sp, #7]
    uint8_t index = GetRGBLED(ID, &success);
 8015724:	4605      	mov	r5, r0
    if (success) {
 8015726:	f1b8 0f00 	cmp.w	r8, #0
 801572a:	d010      	beq.n	801574e <_ZN4LEDS6SetRGBEhhhh+0x40>
    	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801572c:	f04f 31ff 	mov.w	r1, #4294967295
 8015730:	6860      	ldr	r0, [r4, #4]
 8015732:	f7f7 fb7b 	bl	800ce2c <osSemaphoreAcquire>
 8015736:	6961      	ldr	r1, [r4, #20]
 8015738:	b22d      	sxth	r5, r5
 801573a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
        RGBLED led = RGB_LEDs[index];
 801573e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
        *led.pulse_red = R;
 8015742:	6849      	ldr	r1, [r1, #4]
 8015744:	600f      	str	r7, [r1, #0]
        *led.pulse_green = G;
 8015746:	6016      	str	r6, [r2, #0]
        *led.pulse_blue = B;
 8015748:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801574c:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(LEDsSemaphore);
 801574e:	6860      	ldr	r0, [r4, #4]
 8015750:	f7f7 fba0 	bl	800ce94 <osSemaphoreRelease>
}
 8015754:	4640      	mov	r0, r8
 8015756:	b002      	add	sp, #8
 8015758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801575c <_ZN4LEDS9GetI2CLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CLED(uint8_t ID, bool* success) {
 801575c:	b570      	push	{r4, r5, r6, lr}
 801575e:	e9d0 3408 	ldrd	r3, r4, [r0, #32]
    uint8_t index = 0;
    for (I2CLED & led : I2C_LEDs) {
 8015762:	2000      	movs	r0, #0
 8015764:	429c      	cmp	r4, r3
 8015766:	461d      	mov	r5, r3
 8015768:	d102      	bne.n	8015770 <_ZN4LEDS9GetI2CLEDEhPb+0x14>
 801576a:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 801576c:	4618      	mov	r0, r3
 801576e:	e006      	b.n	801577e <_ZN4LEDS9GetI2CLEDEhPb+0x22>
        if (led.ID == ID) {
 8015770:	782d      	ldrb	r5, [r5, #0]
 8015772:	1c46      	adds	r6, r0, #1
 8015774:	3310      	adds	r3, #16
 8015776:	428d      	cmp	r5, r1
 8015778:	d103      	bne.n	8015782 <_ZN4LEDS9GetI2CLEDEhPb+0x26>
 801577a:	b2c0      	uxtb	r0, r0
 801577c:	2301      	movs	r3, #1
            *success = true;
 801577e:	7013      	strb	r3, [r2, #0]
}
 8015780:	bd70      	pop	{r4, r5, r6, pc}
 8015782:	4630      	mov	r0, r6
 8015784:	e7ee      	b.n	8015764 <_ZN4LEDS9GetI2CLEDEhPb+0x8>

08015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>:
 *
 * @param input ID: LED ID
 * @param output success: true whether successful
 * @return the LED index
 */
uint8_t LEDS::GetI2CRGBLED(uint8_t ID, bool* success) {
 8015786:	b570      	push	{r4, r5, r6, lr}
 8015788:	e9d0 340b 	ldrd	r3, r4, [r0, #44]	@ 0x2c
    uint8_t index = 0;
    for (I2CRGBLED & led : I2C_RGB_LEDs) {
 801578c:	2000      	movs	r0, #0
 801578e:	429c      	cmp	r4, r3
 8015790:	461d      	mov	r5, r3
 8015792:	d102      	bne.n	801579a <_ZN4LEDS12GetI2CRGBLEDEhPb+0x14>
 8015794:	2300      	movs	r3, #0
            return index;
        }
        index++;
    }
    *success = false;
    return 0;
 8015796:	4618      	mov	r0, r3
 8015798:	e006      	b.n	80157a8 <_ZN4LEDS12GetI2CRGBLEDEhPb+0x22>
        if (led.ID == ID) {
 801579a:	782d      	ldrb	r5, [r5, #0]
 801579c:	1c46      	adds	r6, r0, #1
 801579e:	3314      	adds	r3, #20
 80157a0:	428d      	cmp	r5, r1
 80157a2:	d103      	bne.n	80157ac <_ZN4LEDS12GetI2CRGBLEDEhPb+0x26>
 80157a4:	b2c0      	uxtb	r0, r0
 80157a6:	2301      	movs	r3, #1
            *success = true;
 80157a8:	7013      	strb	r3, [r2, #0]
}
 80157aa:	bd70      	pop	{r4, r5, r6, pc}
 80157ac:	4630      	mov	r0, r6
 80157ae:	e7ee      	b.n	801578e <_ZN4LEDS12GetI2CRGBLEDEhPb+0x8>

080157b0 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 80157b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b4:	4604      	mov	r4, r0
 80157b6:	b089      	sub	sp, #36	@ 0x24
 80157b8:	4688      	mov	r8, r1
 80157ba:	461f      	mov	r7, r3
 80157bc:	9205      	str	r2, [sp, #20]
 80157be:	f8bd b048 	ldrh.w	fp, [sp, #72]	@ 0x48
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80157c2:	f7ed fe83 	bl	80034cc <HAL_GetTick>
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80157c6:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80157ca:	4605      	mov	r5, r0
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80157cc:	6860      	ldr	r0, [r4, #4]
 80157ce:	f7f7 fb2d 	bl	800ce2c <osSemaphoreAcquire>
	index = GetI2CRGBLED(ID, &success);
 80157d2:	f10d 021f 	add.w	r2, sp, #31
 80157d6:	4641      	mov	r1, r8
 80157d8:	4620      	mov	r0, r4
 80157da:	f7ff ffd4 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) {
 80157de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80157e2:	b323      	cbz	r3, 801582e <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7e>
 80157e4:	b200      	sxth	r0, r0
 80157e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80157e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80157ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		present = led->present;
 80157f0:	785e      	ldrb	r6, [r3, #1]
	osSemaphoreRelease(LEDsSemaphore);
 80157f2:	6860      	ldr	r0, [r4, #4]
		interface = led->interface;
 80157f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
		device_address = led->device_address;
 80157f8:	f8b3 9008 	ldrh.w	r9, [r3, #8]
		memory_address_size = led->memory_address_size;
 80157fc:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
	osSemaphoreRelease(LEDsSemaphore);
 8015800:	f7f7 fb48 	bl	800ce94 <osSemaphoreRelease>
	if (present) {
 8015804:	b18e      	cbz	r6, 801582a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x7a>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 8015806:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015808:	441d      	add	r5, r3
			status = HAL_I2C_Mem_Write(interface, device_address, memory_address, memory_address_size, data, size, timeout);
 801580a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801580c:	4649      	mov	r1, r9
 801580e:	9a05      	ldr	r2, [sp, #20]
 8015810:	4640      	mov	r0, r8
 8015812:	9700      	str	r7, [sp, #0]
 8015814:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015818:	4653      	mov	r3, sl
 801581a:	f7f1 fd17 	bl	800724c <HAL_I2C_Mem_Write>
		} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 801581e:	2802      	cmp	r0, #2
 8015820:	d10f      	bne.n	8015842 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
 8015822:	f7ed fe53 	bl	80034cc <HAL_GetTick>
 8015826:	42a8      	cmp	r0, r5
 8015828:	d3ef      	bcc.n	801580a <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x5a>
	HAL_StatusTypeDef status = HAL_BUSY;
 801582a:	2002      	movs	r0, #2
 801582c:	e009      	b.n	8015842 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x92>
		index = GetI2CLED(ID, &success);
 801582e:	4620      	mov	r0, r4
 8015830:	f7ff ff94 	bl	801575c <_ZN4LEDS9GetI2CLEDEhPb>
		if (!success) {
 8015834:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015838:	b933      	cbnz	r3, 8015848 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x98>
			osSemaphoreRelease(LEDsSemaphore);
 801583a:	6860      	ldr	r0, [r4, #4]
 801583c:	f7f7 fb2a 	bl	800ce94 <osSemaphoreRelease>
			return HAL_ERROR;
 8015840:	2001      	movs	r0, #1
}
 8015842:	b009      	add	sp, #36	@ 0x24
 8015844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015848:	b200      	sxth	r0, r0
 801584a:	6a23      	ldr	r3, [r4, #32]
 801584c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8015850:	e7ce      	b.n	80157f0 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm+0x40>

08015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>:
HAL_StatusTypeDef LEDS::ConfigureI2CLED(uint8_t ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 8015852:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 8015854:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureI2CLED(ID, memory_address, &buffer, 1, timeout);
 8015858:	9b06      	ldr	r3, [sp, #24]
 801585a:	9301      	str	r3, [sp, #4]
 801585c:	2301      	movs	r3, #1
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	f10d 030f 	add.w	r3, sp, #15
 8015864:	f7ff ffa4 	bl	80157b0 <_ZN4LEDS15ConfigureI2CLEDEhtPhtm>
}
 8015868:	b005      	add	sp, #20
 801586a:	f85d fb04 	ldr.w	pc, [sp], #4

0801586e <_ZN4LEDS6SetLEDEhhm>:
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 801586e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015872:	4604      	mov	r4, r0
 8015874:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015876:	6840      	ldr	r0, [r0, #4]
 8015878:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetLED(uint8_t ID, uint8_t value, uint32_t timeout) {
 801587c:	461f      	mov	r7, r3
 801587e:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015880:	f7f7 fad4 	bl	800ce2c <osSemaphoreAcquire>
	uint8_t index = GetI2CLED(ID, &success);
 8015884:	f10d 020f 	add.w	r2, sp, #15
 8015888:	4629      	mov	r1, r5
 801588a:	4620      	mov	r0, r4
 801588c:	f7ff ff66 	bl	801575c <_ZN4LEDS9GetI2CLEDEhPb>
	if (!success) {
 8015890:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015894:	b933      	cbnz	r3, 80158a4 <_ZN4LEDS6SetLEDEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8015896:	6860      	ldr	r0, [r4, #4]
 8015898:	f7f7 fafc 	bl	800ce94 <osSemaphoreRelease>
		return HAL_ERROR;
 801589c:	2001      	movs	r0, #1
}
 801589e:	b004      	add	sp, #16
 80158a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158a4:	6a23      	ldr	r3, [r4, #32]
 80158a6:	b200      	sxth	r0, r0
 80158a8:	eb03 1800 	add.w	r8, r3, r0, lsl #4
	osSemaphoreRelease(LEDsSemaphore);
 80158ac:	6860      	ldr	r0, [r4, #4]
 80158ae:	f7f7 faf1 	bl	800ce94 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->light_address, value, timeout);
 80158b2:	4633      	mov	r3, r6
 80158b4:	f8b8 200e 	ldrh.w	r2, [r8, #14]
 80158b8:	4629      	mov	r1, r5
 80158ba:	4620      	mov	r0, r4
 80158bc:	9700      	str	r7, [sp, #0]
 80158be:	f7ff ffc8 	bl	8015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>
 80158c2:	e7ec      	b.n	801589e <_ZN4LEDS6SetLEDEhhm+0x30>

080158c4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80158c4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80158c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80158c8:	4604      	mov	r4, r0
 80158ca:	4615      	mov	r5, r2
			if (length != 2) return false;
 80158cc:	d002      	beq.n	80158d4 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x10>
 80158ce:	2000      	movs	r0, #0
		}
 80158d0:	b003      	add	sp, #12
 80158d2:	bd30      	pop	{r4, r5, pc}
			self->GetLED(ID, &success);
 80158d4:	f10d 0207 	add.w	r2, sp, #7
 80158d8:	7829      	ldrb	r1, [r5, #0]
 80158da:	f7ff fe64 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
			if (success) {
 80158de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158e2:	b14b      	cbz	r3, 80158f8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x34>
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80158e4:	786a      	ldrb	r2, [r5, #1]
 80158e6:	4620      	mov	r0, r4
 80158e8:	3a00      	subs	r2, #0
 80158ea:	bf18      	it	ne
 80158ec:	2201      	movne	r2, #1
		}
 80158ee:	b003      	add	sp, #12
 80158f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				return self->SetLED(input[0], (input[1] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80158f4:	f7ff be6c 	b.w	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
			self->GetI2CLED(ID, &success);
 80158f8:	4620      	mov	r0, r4
 80158fa:	f7ff ff2f 	bl	801575c <_ZN4LEDS9GetI2CLEDEhPb>
			if (success) {
 80158fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d0e3      	beq.n	80158ce <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xa>
				return self->SetLED(input[0], input[1]) == HAL_OK;
 8015906:	f04f 33ff 	mov.w	r3, #4294967295
 801590a:	786a      	ldrb	r2, [r5, #1]
 801590c:	4620      	mov	r0, r4
 801590e:	f7ff ffae 	bl	801586e <_ZN4LEDS6SetLEDEhhm>
 8015912:	fab0 f080 	clz	r0, r0
 8015916:	0940      	lsrs	r0, r0, #5
 8015918:	e7da      	b.n	80158d0 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0xc>

0801591a <_ZN4LEDS13SetBrightnessEhhm>:
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 801591a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801591e:	4604      	mov	r4, r0
 8015920:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015922:	6840      	ldr	r0, [r0, #4]
 8015924:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetBrightness(uint8_t ID, uint8_t brightness, uint32_t timeout) {
 8015928:	461f      	mov	r7, r3
 801592a:	4616      	mov	r6, r2
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801592c:	f7f7 fa7e 	bl	800ce2c <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 8015930:	f10d 020f 	add.w	r2, sp, #15
 8015934:	4629      	mov	r1, r5
 8015936:	4620      	mov	r0, r4
 8015938:	f7ff ff25 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 801593c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015940:	b933      	cbnz	r3, 8015950 <_ZN4LEDS13SetBrightnessEhhm+0x36>
		osSemaphoreRelease(LEDsSemaphore);
 8015942:	6860      	ldr	r0, [r4, #4]
 8015944:	f7f7 faa6 	bl	800ce94 <osSemaphoreRelease>
		return HAL_ERROR;
 8015948:	2001      	movs	r0, #1
}
 801594a:	b004      	add	sp, #16
 801594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015950:	b200      	sxth	r0, r0
 8015952:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015954:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015958:	eb03 0880 	add.w	r8, r3, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 801595c:	6860      	ldr	r0, [r4, #4]
 801595e:	f7f7 fa99 	bl	800ce94 <osSemaphoreRelease>
	return ConfigureI2CLED(ID, led->brightness_address, brightness, timeout);
 8015962:	4633      	mov	r3, r6
 8015964:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 8015968:	4629      	mov	r1, r5
 801596a:	4620      	mov	r0, r4
 801596c:	9700      	str	r7, [sp, #0]
 801596e:	f7ff ff70 	bl	8015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>
 8015972:	e7ea      	b.n	801594a <_ZN4LEDS13SetBrightnessEhhm+0x30>

08015974 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8015974:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015976:	4611      	mov	r1, r2
 8015978:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801597a:	d109      	bne.n	8015990 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1c>
			return self->SetBrightness(input[0], input[1]) == HAL_OK;
 801597c:	f04f 33ff 	mov.w	r3, #4294967295
 8015980:	7852      	ldrb	r2, [r2, #1]
 8015982:	7809      	ldrb	r1, [r1, #0]
 8015984:	f7ff ffc9 	bl	801591a <_ZN4LEDS13SetBrightnessEhhm>
 8015988:	fab0 f080 	clz	r0, r0
 801598c:	0940      	lsrs	r0, r0, #5
		}
 801598e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8015990:	2000      	movs	r0, #0
 8015992:	e7fc      	b.n	801598e <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x1a>

08015994 <_ZN4LEDS9SetI2CRGBEhhhhm>:
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 8015994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015998:	4604      	mov	r4, r0
 801599a:	460d      	mov	r5, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 801599c:	6840      	ldr	r0, [r0, #4]
 801599e:	f04f 31ff 	mov.w	r1, #4294967295
HAL_StatusTypeDef LEDS::SetI2CRGB(uint8_t ID, uint8_t R, uint8_t G, uint8_t B, uint32_t timeout) {
 80159a2:	4699      	mov	r9, r3
 80159a4:	4692      	mov	sl, r2
 80159a6:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
 80159aa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 80159ac:	f7f7 fa3e 	bl	800ce2c <osSemaphoreAcquire>
	uint8_t index = GetI2CRGBLED(ID, &success);
 80159b0:	f10d 020f 	add.w	r2, sp, #15
 80159b4:	4629      	mov	r1, r5
 80159b6:	4620      	mov	r0, r4
 80159b8:	f7ff fee5 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (!success) {
 80159bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80159c0:	b933      	cbnz	r3, 80159d0 <_ZN4LEDS9SetI2CRGBEhhhhm+0x3c>
		osSemaphoreRelease(LEDsSemaphore);
 80159c2:	6860      	ldr	r0, [r4, #4]
 80159c4:	f7f7 fa66 	bl	800ce94 <osSemaphoreRelease>
		return HAL_ERROR;
 80159c8:	2001      	movs	r0, #1
}
 80159ca:	b004      	add	sp, #16
 80159cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159d0:	b200      	sxth	r0, r0
 80159d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80159d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80159d8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	osSemaphoreRelease(LEDsSemaphore);
 80159dc:	6860      	ldr	r0, [r4, #4]
 80159de:	f7f7 fa59 	bl	800ce94 <osSemaphoreRelease>
	status = ConfigureI2CLED(ID, led->R_address, R, timeout);
 80159e2:	4653      	mov	r3, sl
 80159e4:	89f2      	ldrh	r2, [r6, #14]
 80159e6:	4629      	mov	r1, r5
 80159e8:	4620      	mov	r0, r4
 80159ea:	9700      	str	r7, [sp, #0]
 80159ec:	f7ff ff31 	bl	8015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d1ea      	bne.n	80159ca <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->G_address, G, timeout);
 80159f4:	8a32      	ldrh	r2, [r6, #16]
 80159f6:	464b      	mov	r3, r9
 80159f8:	4629      	mov	r1, r5
 80159fa:	4620      	mov	r0, r4
 80159fc:	9700      	str	r7, [sp, #0]
 80159fe:	f7ff ff28 	bl	8015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>
	if (status != HAL_OK) return status;
 8015a02:	2800      	cmp	r0, #0
 8015a04:	d1e1      	bne.n	80159ca <_ZN4LEDS9SetI2CRGBEhhhhm+0x36>
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8015a06:	8a72      	ldrh	r2, [r6, #18]
 8015a08:	4643      	mov	r3, r8
 8015a0a:	4629      	mov	r1, r5
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	970c      	str	r7, [sp, #48]	@ 0x30
}
 8015a10:	b004      	add	sp, #16
 8015a12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = ConfigureI2CLED(ID, led->B_address, B, timeout);
 8015a16:	f7ff bf1c 	b.w	8015852 <_ZN4LEDS15ConfigureI2CLEDEhthm>

08015a1a <_ZN4LEDS8ClearLEDEh>:
bool LEDS::ClearLED(uint8_t ID) {
 8015a1a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015a1e:	4604      	mov	r4, r0
 8015a20:	460d      	mov	r5, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015a22:	6840      	ldr	r0, [r0, #4]
 8015a24:	f04f 31ff 	mov.w	r1, #4294967295
 8015a28:	f7f7 fa00 	bl	800ce2c <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8015a2c:	f10d 020f 	add.w	r2, sp, #15
 8015a30:	4629      	mov	r1, r5
 8015a32:	4620      	mov	r0, r4
 8015a34:	f7ff fdb7 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 8015a38:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8015a3c:	b196      	cbz	r6, 8015a64 <_ZN4LEDS8ClearLEDEh+0x4a>
 8015a3e:	68a3      	ldr	r3, [r4, #8]
 8015a40:	b200      	sxth	r0, r0
        LEDs[index].blink = false;
 8015a42:	2200      	movs	r2, #0
 8015a44:	eb03 1340 	add.w	r3, r3, r0, lsl #5
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8015a48:	6858      	ldr	r0, [r3, #4]
 8015a4a:	8919      	ldrh	r1, [r3, #8]
        LEDs[index].blink = false;
 8015a4c:	819a      	strh	r2, [r3, #12]
        LEDs[index].counter = 0;
 8015a4e:	739a      	strb	r2, [r3, #14]
        HAL_GPIO_WritePin(LEDs[index].gpio.port, LEDs[index].gpio.pin, GPIO_PIN_RESET);
 8015a50:	f7f1 f805 	bl	8006a5e <HAL_GPIO_WritePin>
        osSemaphoreRelease(LEDsSemaphore);
 8015a54:	6860      	ldr	r0, [r4, #4]
 8015a56:	f7f7 fa1d 	bl	800ce94 <osSemaphoreRelease>
        return true;
 8015a5a:	2601      	movs	r6, #1
}
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	b004      	add	sp, #16
 8015a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    index = GetRGBLED(ID, &success);
 8015a64:	4620      	mov	r0, r4
 8015a66:	f7ff fe3d 	bl	80156e4 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) {
 8015a6a:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8015a6e:	f1b8 0f00 	cmp.w	r8, #0
 8015a72:	d00a      	beq.n	8015a8a <_ZN4LEDS8ClearLEDEh+0x70>
		osSemaphoreRelease(LEDsSemaphore);
 8015a74:	6860      	ldr	r0, [r4, #4]
 8015a76:	f7f7 fa0d 	bl	800ce94 <osSemaphoreRelease>
		SetRGB(ID, 0, 0, 0);
 8015a7a:	4633      	mov	r3, r6
 8015a7c:	4632      	mov	r2, r6
 8015a7e:	4629      	mov	r1, r5
 8015a80:	4620      	mov	r0, r4
 8015a82:	9600      	str	r6, [sp, #0]
 8015a84:	f7ff fe43 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
		return true;
 8015a88:	e7e7      	b.n	8015a5a <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CLED(ID, &success);
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	f7ff fe66 	bl	801575c <_ZN4LEDS9GetI2CLEDEhPb>
    if (success) {
 8015a90:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8015a94:	b157      	cbz	r7, 8015aac <_ZN4LEDS8ClearLEDEh+0x92>
    	osSemaphoreRelease(LEDsSemaphore);
 8015a96:	6860      	ldr	r0, [r4, #4]
 8015a98:	f7f7 f9fc 	bl	800ce94 <osSemaphoreRelease>
    	SetLED(ID, 0);
 8015a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa0:	4642      	mov	r2, r8
 8015aa2:	4629      	mov	r1, r5
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f7ff fee2 	bl	801586e <_ZN4LEDS6SetLEDEhhm>
    	return true;
 8015aaa:	e7d6      	b.n	8015a5a <_ZN4LEDS8ClearLEDEh+0x40>
    index = GetI2CRGBLED(ID, &success);
 8015aac:	4620      	mov	r0, r4
 8015aae:	f7ff fe6a 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
    if (success) {
 8015ab2:	f89d 600f 	ldrb.w	r6, [sp, #15]
    	osSemaphoreRelease(LEDsSemaphore);
 8015ab6:	6860      	ldr	r0, [r4, #4]
    if (success) {
 8015ab8:	b166      	cbz	r6, 8015ad4 <_ZN4LEDS8ClearLEDEh+0xba>
    	osSemaphoreRelease(LEDsSemaphore);
 8015aba:	f7f7 f9eb 	bl	800ce94 <osSemaphoreRelease>
		SetI2CRGB(ID, 0, 0, 0);
 8015abe:	f04f 33ff 	mov.w	r3, #4294967295
 8015ac2:	463a      	mov	r2, r7
 8015ac4:	4629      	mov	r1, r5
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	e9cd 7300 	strd	r7, r3, [sp]
 8015acc:	463b      	mov	r3, r7
 8015ace:	f7ff ff61 	bl	8015994 <_ZN4LEDS9SetI2CRGBEhhhhm>
		return true;
 8015ad2:	e7c2      	b.n	8015a5a <_ZN4LEDS8ClearLEDEh+0x40>
    osSemaphoreRelease(LEDsSemaphore);
 8015ad4:	f7f7 f9de 	bl	800ce94 <osSemaphoreRelease>
    return false;
 8015ad8:	e7c0      	b.n	8015a5c <_ZN4LEDS8ClearLEDEh+0x42>

08015ada <_ZN4LEDS11ExistingLEDEh>:
bool LEDS::ExistingLED(uint8_t ID) {
 8015ada:	b513      	push	{r0, r1, r4, lr}
	GetLED(ID, &success);
 8015adc:	f10d 0207 	add.w	r2, sp, #7
bool LEDS::ExistingLED(uint8_t ID) {
 8015ae0:	4604      	mov	r4, r0
	GetLED(ID, &success);
 8015ae2:	f7ff fd60 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
	if (success) return true;
 8015ae6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015aea:	b113      	cbz	r3, 8015af2 <_ZN4LEDS11ExistingLEDEh+0x18>
 8015aec:	2001      	movs	r0, #1
}
 8015aee:	b002      	add	sp, #8
 8015af0:	bd10      	pop	{r4, pc}
	GetRGBLED(ID, &success);
 8015af2:	4620      	mov	r0, r4
 8015af4:	f7ff fdf6 	bl	80156e4 <_ZN4LEDS9GetRGBLEDEhPb>
	if (success) return true;
 8015af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d1f5      	bne.n	8015aec <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CLED(ID, &success);
 8015b00:	4620      	mov	r0, r4
 8015b02:	f7ff fe2b 	bl	801575c <_ZN4LEDS9GetI2CLEDEhPb>
	if (success) return true;
 8015b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1ee      	bne.n	8015aec <_ZN4LEDS11ExistingLEDEh+0x12>
	GetI2CRGBLED(ID, &success);
 8015b0e:	4620      	mov	r0, r4
 8015b10:	f7ff fe39 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
	if (success) return true;
 8015b14:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015b18:	e7e9      	b.n	8015aee <_ZN4LEDS11ExistingLEDEh+0x14>

08015b1a <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 4) return false;
 8015b1a:	2b04      	cmp	r3, #4
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8015b1c:	b530      	push	{r4, r5, lr}
 8015b1e:	4605      	mov	r5, r0
 8015b20:	b085      	sub	sp, #20
 8015b22:	4614      	mov	r4, r2
			if (length != 4) return false;
 8015b24:	d002      	beq.n	8015b2c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>
 8015b26:	2000      	movs	r0, #0
		}
 8015b28:	b005      	add	sp, #20
 8015b2a:	bd30      	pop	{r4, r5, pc}
			self->GetRGBLED(ID, &success);
 8015b2c:	f10d 020f 	add.w	r2, sp, #15
 8015b30:	7821      	ldrb	r1, [r4, #0]
 8015b32:	f7ff fdd7 	bl	80156e4 <_ZN4LEDS9GetRGBLEDEhPb>
			if (success) {
 8015b36:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015b3a:	b13b      	cbz	r3, 8015b4c <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x32>
				return self->SetRGB(ID, input[1], input[2], input[3]);
 8015b3c:	78e3      	ldrb	r3, [r4, #3]
 8015b3e:	4628      	mov	r0, r5
 8015b40:	9300      	str	r3, [sp, #0]
 8015b42:	78a3      	ldrb	r3, [r4, #2]
 8015b44:	7862      	ldrb	r2, [r4, #1]
 8015b46:	f7ff fde2 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
 8015b4a:	e7ed      	b.n	8015b28 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>
			self->GetI2CRGBLED(ID, &success);
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	f7ff fe1a 	bl	8015786 <_ZN4LEDS12GetI2CRGBLEDEhPb>
			if (success) {
 8015b52:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d0e5      	beq.n	8015b26 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xc>
				return self->SetI2CRGB(ID, input[1], input[2], input[3]) == HAL_OK;
 8015b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b5e:	4628      	mov	r0, r5
 8015b60:	9301      	str	r3, [sp, #4]
 8015b62:	78e3      	ldrb	r3, [r4, #3]
 8015b64:	9300      	str	r3, [sp, #0]
 8015b66:	78a3      	ldrb	r3, [r4, #2]
 8015b68:	7862      	ldrb	r2, [r4, #1]
 8015b6a:	f7ff ff13 	bl	8015994 <_ZN4LEDS9SetI2CRGBEhhhhm>
 8015b6e:	fab0 f080 	clz	r0, r0
 8015b72:	0940      	lsrs	r0, r0, #5
 8015b74:	e7d8      	b.n	8015b28 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0xe>

08015b76 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8015b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b78:	4604      	mov	r4, r0
 8015b7a:	460e      	mov	r6, r1
 8015b7c:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015b7e:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8015b80:	42b4      	cmp	r4, r6
 8015b82:	4628      	mov	r0, r5
 8015b84:	f105 0520 	add.w	r5, r5, #32
 8015b88:	d100      	bne.n	8015b8c <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8015b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct LED {
 8015b8c:	4622      	mov	r2, r4
 8015b8e:	f812 3b04 	ldrb.w	r3, [r2], #4
 8015b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b96:	f805 3c20 	strb.w	r3, [r5, #-32]
 8015b9a:	f1a5 031c 	sub.w	r3, r5, #28
 8015b9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ba2:	7b23      	ldrb	r3, [r4, #12]
      }
 8015ba4:	f104 0010 	add.w	r0, r4, #16
 8015ba8:	f805 3c14 	strb.w	r3, [r5, #-20]
 8015bac:	7b63      	ldrb	r3, [r4, #13]
 8015bae:	f805 3c13 	strb.w	r3, [r5, #-19]
 8015bb2:	7ba3      	ldrb	r3, [r4, #14]
 8015bb4:	f805 3c12 	strb.w	r3, [r5, #-18]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015bb8:	6923      	ldr	r3, [r4, #16]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015bba:	6127      	str	r7, [r4, #16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8015bbc:	f845 3c10 	str.w	r3, [r5, #-16]
 8015bc0:	6963      	ldr	r3, [r4, #20]
 8015bc2:	f845 3c0c 	str.w	r3, [r5, #-12]
	  _M_end_of_storage(__x._M_end_of_storage)
 8015bc6:	69a3      	ldr	r3, [r4, #24]
 8015bc8:	f845 3c08 	str.w	r3, [r5, #-8]
 8015bcc:	7f23      	ldrb	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8015bce:	e9c4 7705 	strd	r7, r7, [r4, #20]
 8015bd2:	f805 3c04 	strb.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8015bd6:	3420      	adds	r4, #32
      }
 8015bd8:	f7ea ff82 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015bdc:	e7d0      	b.n	8015b80 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

08015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 8015bde:	b570      	push	{r4, r5, r6, lr}
 8015be0:	4604      	mov	r4, r0
 8015be2:	b086      	sub	sp, #24
 8015be4:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015be6:	6800      	ldr	r0, [r0, #0]
 8015be8:	f04f 31ff 	mov.w	r1, #4294967295
 8015bec:	f7f7 f91e 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8015bf0:	f10d 0207 	add.w	r2, sp, #7
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f002 fd87 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8015bfc:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8015c00:	b125      	cbz	r5, 8015c0c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 8015c02:	6820      	ldr	r0, [r4, #0]
 8015c04:	f7f7 f946 	bl	800ce94 <osSemaphoreRelease>
}
 8015c08:	b006      	add	sp, #24
 8015c0a:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8015c0c:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 8015c10:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8015c14:	f7ff fc28 	bl	8015468 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8015c18:	2301      	movs	r3, #1
 8015c1a:	f8ad 600a 	strh.w	r6, [sp, #10]
 8015c1e:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 8015c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8015c26:	f88d 000c 	strb.w	r0, [sp, #12]
 8015c2a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8015c2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d0e5      	beq.n	8015c02 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 8015c36:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015c38:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 8015c3c:	429d      	cmp	r5, r3
 8015c3e:	d005      	beq.n	8015c4c <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015c40:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015c42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015c46:	3510      	adds	r5, #16
 8015c48:	60a5      	str	r5, [r4, #8]
 8015c4a:	e7da      	b.n	8015c02 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 8015c4c:	4629      	mov	r1, r5
 8015c4e:	1d20      	adds	r0, r4, #4
 8015c50:	f7fa f88e 	bl	800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8015c54:	e7d5      	b.n	8015c02 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	...

08015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c5c:	460c      	mov	r4, r1
 8015c5e:	b087      	sub	sp, #28
 8015c60:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015c62:	f04f 31ff 	mov.w	r1, #4294967295
 8015c66:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8015c68:	4698      	mov	r8, r3
 8015c6a:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8015c6c:	f7f7 f8de 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015c70:	4621      	mov	r1, r4
 8015c72:	f10d 0207 	add.w	r2, sp, #7
 8015c76:	4630      	mov	r0, r6
 8015c78:	f002 fd47 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8015c7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8015c80:	4604      	mov	r4, r0
	if (!success) {
 8015c82:	b92b      	cbnz	r3, 8015c90 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8015c84:	6830      	ldr	r0, [r6, #0]
 8015c86:	f7f7 f905 	bl	800ce94 <osSemaphoreRelease>
}
 8015c8a:	b007      	add	sp, #28
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8015c90:	f10d 0007 	add.w	r0, sp, #7
 8015c94:	f7ff fbe8 	bl	8015468 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 8015c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d0f1      	beq.n	8015c84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8015ca0:	7923      	ldrb	r3, [r4, #4]
 8015ca2:	4298      	cmp	r0, r3
 8015ca4:	d1ee      	bne.n	8015c84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8015ca6:	3004      	adds	r0, #4
 8015ca8:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8015cac:	2f00      	cmp	r7, #0
 8015cae:	d0e9      	beq.n	8015c84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8015cb0:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015cb2:	e9d7 3500 	ldrd	r3, r5, [r7]
 8015cb6:	1aea      	subs	r2, r5, r3
 8015cb8:	1112      	asrs	r2, r2, #4
 8015cba:	b9b1      	cbnz	r1, 8015cea <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8015cbc:	7861      	ldrb	r1, [r4, #1]
 8015cbe:	b9a1      	cbnz	r1, 8015cea <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8015cc0:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015cc2:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8015cc4:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8015cc6:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015cc8:	42a9      	cmp	r1, r5
		callback.write = write;
 8015cca:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8015cce:	d008      	beq.n	8015ce2 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 8015cd0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8015cd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8015cd6:	3510      	adds	r5, #16
 8015cd8:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8015cda:	2301      	movs	r3, #1
 8015cdc:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8015cde:	7223      	strb	r3, [r4, #8]
 8015ce0:	e7d0      	b.n	8015c84 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8015ce2:	4638      	mov	r0, r7
 8015ce4:	f7fa fe8c 	bl	8010a00 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8015ce8:	e7f7      	b.n	8015cda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8015cea:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8015cec:	4291      	cmp	r1, r2
 8015cee:	d302      	bcc.n	8015cf6 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8015cf0:	4803      	ldr	r0, [pc, #12]	@ (8015d00 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8015cf2:	f006 fff6 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8015cf6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8015cfa:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8015cfe:	e7ec      	b.n	8015cda <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8015d00:	0801dfb4 	.word	0x0801dfb4

08015d04 <_ZN4LEDS12AddRegistersEv>:
void LEDS::AddRegisters(void) {
 8015d04:	b510      	push	{r4, lr}
 8015d06:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_LEDS_SET);
 8015d08:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8015d0c:	6800      	ldr	r0, [r0, #0]
 8015d0e:	f7ff ff66 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET, 2);
 8015d12:	2202      	movs	r2, #2
 8015d14:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8015d18:	6820      	ldr	r0, [r4, #0]
 8015d1a:	f002 fd4b 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET, (void*) this,
 8015d1e:	4622      	mov	r2, r4
 8015d20:	4b2f      	ldr	r3, [pc, #188]	@ (8015de0 <_ZN4LEDS12AddRegistersEv+0xdc>)
 8015d22:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8015d26:	6820      	ldr	r0, [r4, #0]
 8015d28:	f7ff ff96 	bl	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_TIMINGS);
 8015d2c:	6820      	ldr	r0, [r4, #0]
 8015d2e:	f240 3101 	movw	r1, #769	@ 0x301
 8015d32:	f7ff ff54 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsVector(REG_LEDS_TIMINGS);
 8015d36:	f240 3101 	movw	r1, #769	@ 0x301
 8015d3a:	6820      	ldr	r0, [r4, #0]
 8015d3c:	f002 fd56 	bl	80187ec <_ZN9Registers19SetRegisterAsVectorEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_TIMINGS, (void*) this,
 8015d40:	4622      	mov	r2, r4
 8015d42:	4b28      	ldr	r3, [pc, #160]	@ (8015de4 <_ZN4LEDS12AddRegistersEv+0xe0>)
 8015d44:	f240 3101 	movw	r1, #769	@ 0x301
 8015d48:	6820      	ldr	r0, [r4, #0]
 8015d4a:	f7ff ff85 	bl	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK);
 8015d4e:	6820      	ldr	r0, [r4, #0]
 8015d50:	f240 3102 	movw	r1, #770	@ 0x302
 8015d54:	f7ff ff43 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK);
 8015d58:	f240 3102 	movw	r1, #770	@ 0x302
 8015d5c:	6820      	ldr	r0, [r4, #0]
 8015d5e:	f002 fd0d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK, (void*) this,
 8015d62:	4622      	mov	r2, r4
 8015d64:	4b20      	ldr	r3, [pc, #128]	@ (8015de8 <_ZN4LEDS12AddRegistersEv+0xe4>)
 8015d66:	f240 3102 	movw	r1, #770	@ 0x302
 8015d6a:	6820      	ldr	r0, [r4, #0]
 8015d6c:	f7ff ff74 	bl	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_BLINK_ONCE);
 8015d70:	6820      	ldr	r0, [r4, #0]
 8015d72:	f240 3103 	movw	r1, #771	@ 0x303
 8015d76:	f7ff ff32 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_LEDS_BLINK_ONCE);
 8015d7a:	f240 3103 	movw	r1, #771	@ 0x303
 8015d7e:	6820      	ldr	r0, [r4, #0]
 8015d80:	f002 fcfc 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_BLINK_ONCE, (void*) this,
 8015d84:	4b19      	ldr	r3, [pc, #100]	@ (8015dec <_ZN4LEDS12AddRegistersEv+0xe8>)
 8015d86:	4622      	mov	r2, r4
 8015d88:	6820      	ldr	r0, [r4, #0]
 8015d8a:	f240 3103 	movw	r1, #771	@ 0x303
 8015d8e:	f7ff ff63 	bl	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_RGB);
 8015d92:	6820      	ldr	r0, [r4, #0]
 8015d94:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8015d98:	f7ff ff21 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_RGB, 4);
 8015d9c:	2204      	movs	r2, #4
 8015d9e:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8015da2:	6820      	ldr	r0, [r4, #0]
 8015da4:	f002 fd06 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_RGB, (void*) this,
 8015da8:	4b11      	ldr	r3, [pc, #68]	@ (8015df0 <_ZN4LEDS12AddRegistersEv+0xec>)
 8015daa:	4622      	mov	r2, r4
 8015dac:	6820      	ldr	r0, [r4, #0]
 8015dae:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8015db2:	f7ff ff51 	bl	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_LEDS_SET_BRIGHNESS);
 8015db6:	6820      	ldr	r0, [r4, #0]
 8015db8:	f240 3105 	movw	r1, #773	@ 0x305
 8015dbc:	f7ff ff0f 	bl	8015bde <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_LEDS_SET_BRIGHNESS, 2);
 8015dc0:	2202      	movs	r2, #2
 8015dc2:	f240 3105 	movw	r1, #773	@ 0x305
 8015dc6:	6820      	ldr	r0, [r4, #0]
 8015dc8:	f002 fcf4 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8015dcc:	4622      	mov	r2, r4
 8015dce:	6820      	ldr	r0, [r4, #0]
 8015dd0:	f240 3105 	movw	r1, #773	@ 0x305
 8015dd4:	4b07      	ldr	r3, [pc, #28]	@ (8015df4 <_ZN4LEDS12AddRegistersEv+0xf0>)
}
 8015dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_LEDS_SET_BRIGHNESS, (void*) this,
 8015dda:	f7ff bf3d 	b.w	8015c58 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8015dde:	bf00      	nop
 8015de0:	080158c5 	.word	0x080158c5
 8015de4:	080160a7 	.word	0x080160a7
 8015de8:	0801569b 	.word	0x0801569b
 8015dec:	080156df 	.word	0x080156df
 8015df0:	08015b1b 	.word	0x08015b1b
 8015df4:	08015975 	.word	0x08015975

08015df8 <_ZN3LEDC1ERKS_>:
 8015df8:	460a      	mov	r2, r1
 8015dfa:	b538      	push	{r3, r4, r5, lr}
 8015dfc:	460d      	mov	r5, r1
 8015dfe:	4603      	mov	r3, r0
 8015e00:	f812 1b04 	ldrb.w	r1, [r2], #4
 8015e04:	4604      	mov	r4, r0
 8015e06:	f803 1b04 	strb.w	r1, [r3], #4
 8015e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e0e:	89aa      	ldrh	r2, [r5, #12]
 8015e10:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e14:	7bab      	ldrb	r3, [r5, #14]
 8015e16:	f105 0110 	add.w	r1, r5, #16
 8015e1a:	f104 0010 	add.w	r0, r4, #16
 8015e1e:	81a2      	strh	r2, [r4, #12]
 8015e20:	73a3      	strb	r3, [r4, #14]
 8015e22:	f7ea ff0d 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8015e26:	7f2b      	ldrb	r3, [r5, #28]
 8015e28:	4620      	mov	r0, r4
 8015e2a:	7723      	strb	r3, [r4, #28]
 8015e2c:	bd38      	pop	{r3, r4, r5, pc}

08015e2e <_ZN4LEDS8TestLEDsEv>:

/**
 * @brief Testing procedure of LEDs. Light them one after the other
 */
void LEDS::TestLEDs(void) {
 8015e2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e32:	4604      	mov	r4, r0
 8015e34:	b08b      	sub	sp, #44	@ 0x2c
 8015e36:	e9d0 5702 	ldrd	r5, r7, [r0, #8]
#ifdef USE_SMD_LEDs
	for (LED led : LEDs) {
 8015e3a:	42af      	cmp	r7, r5
 8015e3c:	d109      	bne.n	8015e52 <_ZN4LEDS8TestLEDsEv+0x24>
		SetLED(led.ID, GPIO_PIN_SET);
		HAL_Delay(100);
		SetLED(led.ID, GPIO_PIN_RESET);
	}
	for (RGBLED led : RGB_LEDs) {
		SetRGB(led.ID, 255, 0, 0);
 8015e3e:	2700      	movs	r7, #0
 8015e40:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8015e44:	e9d4 6805 	ldrd	r6, r8, [r4, #20]
	for (RGBLED led : RGB_LEDs) {
 8015e48:	45b0      	cmp	r8, r6
 8015e4a:	d11a      	bne.n	8015e82 <_ZN4LEDS8TestLEDsEv+0x54>
		SetI2CRGB(led.ID, 0, 0, 255);
		HAL_Delay(100);
		SetI2CRGB(led.ID, 0, 0, 0);
	}
#endif
}
 8015e4c:	b00b      	add	sp, #44	@ 0x2c
 8015e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (LED led : LEDs) {
 8015e52:	4629      	mov	r1, r5
 8015e54:	a802      	add	r0, sp, #8
 8015e56:	f7ff ffcf 	bl	8015df8 <_ZN3LEDC1ERKS_>
		SetLED(led.ID, GPIO_PIN_SET);
 8015e5a:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8015e5e:	2201      	movs	r2, #1
 8015e60:	4620      	mov	r0, r4
 8015e62:	4631      	mov	r1, r6
 8015e64:	3520      	adds	r5, #32
 8015e66:	f7ff fbb3 	bl	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		HAL_Delay(100);
 8015e6a:	2064      	movs	r0, #100	@ 0x64
 8015e6c:	f7ed fb34 	bl	80034d8 <HAL_Delay>
		SetLED(led.ID, GPIO_PIN_RESET);
 8015e70:	2200      	movs	r2, #0
 8015e72:	4631      	mov	r1, r6
 8015e74:	4620      	mov	r0, r4
 8015e76:	f7ff fbab 	bl	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
      }
 8015e7a:	a806      	add	r0, sp, #24
 8015e7c:	f7ea fe30 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8015e80:	e7db      	b.n	8015e3a <_ZN4LEDS8TestLEDsEv+0xc>
	for (RGBLED led : RGB_LEDs) {
 8015e82:	f816 5b10 	ldrb.w	r5, [r6], #16
		SetRGB(led.ID, 255, 0, 0);
 8015e86:	2300      	movs	r3, #0
 8015e88:	22ff      	movs	r2, #255	@ 0xff
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	9700      	str	r7, [sp, #0]
 8015e90:	f7ff fc3d 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8015e94:	2064      	movs	r0, #100	@ 0x64
 8015e96:	f7ed fb1f 	bl	80034d8 <HAL_Delay>
		SetRGB(led.ID, 0, 255, 0);
 8015e9a:	4629      	mov	r1, r5
 8015e9c:	23ff      	movs	r3, #255	@ 0xff
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	4620      	mov	r0, r4
 8015ea2:	9700      	str	r7, [sp, #0]
 8015ea4:	f7ff fc33 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8015ea8:	2064      	movs	r0, #100	@ 0x64
 8015eaa:	f7ed fb15 	bl	80034d8 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 255);
 8015eae:	2300      	movs	r3, #0
 8015eb0:	4629      	mov	r1, r5
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	f8cd 9000 	str.w	r9, [sp]
 8015eba:	f7ff fc28 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
		HAL_Delay(100);
 8015ebe:	2064      	movs	r0, #100	@ 0x64
 8015ec0:	f7ed fb0a 	bl	80034d8 <HAL_Delay>
		SetRGB(led.ID, 0, 0, 0);
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4620      	mov	r0, r4
 8015eca:	461a      	mov	r2, r3
 8015ecc:	9700      	str	r7, [sp, #0]
 8015ece:	f7ff fc1e 	bl	801570e <_ZN4LEDS6SetRGBEhhhh>
 8015ed2:	e7b9      	b.n	8015e48 <_ZN4LEDS8TestLEDsEv+0x1a>

08015ed4 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8015ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015ed8:	e9d0 7900 	ldrd	r7, r9, [r0]
 8015edc:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8015ede:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015ee2:	eba9 0207 	sub.w	r2, r9, r7
 8015ee6:	4606      	mov	r6, r0
 8015ee8:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8015eea:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8015eee:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8015ef2:	d102      	bne.n	8015efa <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8015ef4:	481a      	ldr	r0, [pc, #104]	@ (8015f60 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8015ef6:	f006 fef1 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8015efa:	45b9      	cmp	r9, r7
 8015efc:	bf14      	ite	ne
 8015efe:	4622      	movne	r2, r4
 8015f00:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8015f02:	eba1 0b07 	sub.w	fp, r1, r7
 8015f06:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015f08:	d225      	bcs.n	8015f56 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015f0a:	b334      	cbz	r4, 8015f5a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015f0c:	429c      	cmp	r4, r3
 8015f0e:	bf28      	it	cs
 8015f10:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8015f12:	0160      	lsls	r0, r4, #5
 8015f14:	f006 fe2d 	bl	801cb72 <_Znwj>
 8015f18:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015f1a:	4651      	mov	r1, sl
 8015f1c:	eb05 000b 	add.w	r0, r5, fp
 8015f20:	f7ff ff6a 	bl	8015df8 <_ZN3LEDC1ERKS_>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8015f24:	4641      	mov	r1, r8
 8015f26:	462a      	mov	r2, r5
 8015f28:	4638      	mov	r0, r7
 8015f2a:	f7ff fe24 	bl	8015b76 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8015f2e:	4649      	mov	r1, r9
 8015f30:	f100 0220 	add.w	r2, r0, #32
 8015f34:	4640      	mov	r0, r8
 8015f36:	f7ff fe1e 	bl	8015b76 <_ZSt14__relocate_a_1IP3LEDS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8015f3a:	4680      	mov	r8, r0
	if (__p)
 8015f3c:	b127      	cbz	r7, 8015f48 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8015f3e:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8015f40:	4638      	mov	r0, r7
 8015f42:	1bc9      	subs	r1, r1, r7
 8015f44:	f006 fdf0 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015f48:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8015f4c:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8015f50:	60b4      	str	r4, [r6, #8]
    }
 8015f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8015f56:	461c      	mov	r4, r3
 8015f58:	e7db      	b.n	8015f12 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8015f5a:	4625      	mov	r5, r4
 8015f5c:	e7dd      	b.n	8015f1a <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8015f5e:	bf00      	nop
 8015f60:	0801dd74 	.word	0x0801dd74

08015f64 <_ZN4LEDS6AddLEDEh4GPIO>:
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8015f64:	b570      	push	{r4, r5, r6, lr}
 8015f66:	b08a      	sub	sp, #40	@ 0x28
 8015f68:	4604      	mov	r4, r0
 8015f6a:	460e      	mov	r6, r1
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015f6c:	6840      	ldr	r0, [r0, #4]
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8015f6e:	466d      	mov	r5, sp
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015f70:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::AddLED(uint8_t ID, GPIO gpio) {
 8015f74:	e885 000c 	stmia.w	r5, {r2, r3}
	osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015f78:	f7f6 ff58 	bl	800ce2c <osSemaphoreAcquire>
	if (ExistingLED(ID)) {
 8015f7c:	4631      	mov	r1, r6
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f7ff fdab 	bl	8015ada <_ZN4LEDS11ExistingLEDEh>
 8015f84:	4603      	mov	r3, r0
 8015f86:	b128      	cbz	r0, 8015f94 <_ZN4LEDS6AddLEDEh4GPIO+0x30>
		osSemaphoreRelease(LEDsSemaphore);
 8015f88:	6860      	ldr	r0, [r4, #4]
 8015f8a:	f7f6 ff83 	bl	800ce94 <osSemaphoreRelease>
		return false;
 8015f8e:	2000      	movs	r0, #0
}
 8015f90:	b00a      	add	sp, #40	@ 0x28
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
    led.gpio = gpio;
 8015f94:	aa03      	add	r2, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 8015f96:	9008      	str	r0, [sp, #32]
    led.ID = ID;
 8015f98:	f88d 6008 	strb.w	r6, [sp, #8]
 8015f9c:	e9cd 0006 	strd	r0, r0, [sp, #24]
    led.gpio = gpio;
 8015fa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015fa4:	e882 0003 	stmia.w	r2, {r0, r1}
    led.blink = false;
 8015fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8015fac:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8015fb0:	4298      	cmp	r0, r3
 8015fb2:	d013      	beq.n	8015fdc <_ZN4LEDS6AddLEDEh4GPIO+0x78>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8015fb4:	a902      	add	r1, sp, #8
 8015fb6:	f7ff ff1f 	bl	8015df8 <_ZN3LEDC1ERKS_>
	    ++this->_M_impl._M_finish;
 8015fba:	68e3      	ldr	r3, [r4, #12]
 8015fbc:	3320      	adds	r3, #32
 8015fbe:	60e3      	str	r3, [r4, #12]
    osSemaphoreRelease(LEDsSemaphore);
 8015fc0:	6860      	ldr	r0, [r4, #4]
 8015fc2:	f7f6 ff67 	bl	800ce94 <osSemaphoreRelease>
    HAL_GPIO_WritePin(led.gpio.port, led.gpio.pin, GPIO_PIN_RESET);
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015fcc:	9803      	ldr	r0, [sp, #12]
 8015fce:	f7f0 fd46 	bl	8006a5e <HAL_GPIO_WritePin>
      }
 8015fd2:	a806      	add	r0, sp, #24
 8015fd4:	f7ea fd84 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
    return true;
 8015fd8:	2001      	movs	r0, #1
 8015fda:	e7d9      	b.n	8015f90 <_ZN4LEDS6AddLEDEh4GPIO+0x2c>
	  _M_realloc_insert(end(), __x);
 8015fdc:	4601      	mov	r1, r0
 8015fde:	aa02      	add	r2, sp, #8
 8015fe0:	f104 0008 	add.w	r0, r4, #8
 8015fe4:	f7ff ff76 	bl	8015ed4 <_ZNSt6vectorI3LEDSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8015fe8:	e7ea      	b.n	8015fc0 <_ZN4LEDS6AddLEDEh4GPIO+0x5c>

08015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>:
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8015fea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fee:	4605      	mov	r5, r0
 8015ff0:	b085      	sub	sp, #20
 8015ff2:	460c      	mov	r4, r1
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015ff4:	6840      	ldr	r0, [r0, #4]
 8015ff6:	f04f 31ff 	mov.w	r1, #4294967295
bool LEDS::ConfigureTimings(uint8_t ID, std::vector<uint8_t> timings, uint8_t T) {
 8015ffa:	4616      	mov	r6, r2
 8015ffc:	461f      	mov	r7, r3
    osSemaphoreAcquire(LEDsSemaphore, osWaitForever);
 8015ffe:	f7f6 ff15 	bl	800ce2c <osSemaphoreAcquire>
    uint8_t index = GetLED(ID, &success);
 8016002:	f10d 020f 	add.w	r2, sp, #15
 8016006:	4621      	mov	r1, r4
 8016008:	4628      	mov	r0, r5
 801600a:	f7ff facc 	bl	80155a6 <_ZN4LEDS6GetLEDEhPb>
    if (success) {
 801600e:	f89d 800f 	ldrb.w	r8, [sp, #15]
 8016012:	f1b8 0f00 	cmp.w	r8, #0
 8016016:	d02b      	beq.n	8016070 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x86>
	return *(this->_M_impl._M_start + __n);
 8016018:	b200      	sxth	r0, r0
 801601a:	68ac      	ldr	r4, [r5, #8]
 801601c:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8016020:	ea4f 1940 	mov.w	r9, r0, lsl #5
        LEDs[index].timings = timings;
 8016024:	f104 0310 	add.w	r3, r4, #16
      if (std::__addressof(__x) != this)
 8016028:	429e      	cmp	r6, r3
 801602a:	d01e      	beq.n	801606a <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x80>
			 - this->_M_impl._M_start); }
 801602c:	6922      	ldr	r2, [r4, #16]
 801602e:	69a3      	ldr	r3, [r4, #24]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016030:	e9d6 b100 	ldrd	fp, r1, [r6]
			 - this->_M_impl._M_start); }
 8016034:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016036:	eba1 0a0b 	sub.w	sl, r1, fp
	  if (__xlen > capacity())
 801603a:	459a      	cmp	sl, r3
 801603c:	d91f      	bls.n	801607e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x94>
	  pointer __result = this->_M_allocate(__n);
 801603e:	4650      	mov	r0, sl
 8016040:	9101      	str	r1, [sp, #4]
 8016042:	f7ff fa06 	bl	8015452 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8016046:	9901      	ldr	r1, [sp, #4]
 8016048:	4602      	mov	r2, r0
 801604a:	4606      	mov	r6, r0
 801604c:	4658      	mov	r0, fp
 801604e:	f7ea fdeb 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8016052:	6920      	ldr	r0, [r4, #16]
	if (__p)
 8016054:	b118      	cbz	r0, 801605e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x74>
			    - this->_M_impl._M_start);
 8016056:	69a1      	ldr	r1, [r4, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016058:	1a09      	subs	r1, r1, r0
 801605a:	f006 fd65 	bl	801cb28 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 801605e:	6126      	str	r6, [r4, #16]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8016060:	4456      	add	r6, sl
 8016062:	61a6      	str	r6, [r4, #24]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8016064:	6923      	ldr	r3, [r4, #16]
 8016066:	4453      	add	r3, sl
 8016068:	6163      	str	r3, [r4, #20]
        LEDs[index].T = T;
 801606a:	68ab      	ldr	r3, [r5, #8]
 801606c:	444b      	add	r3, r9
 801606e:	771f      	strb	r7, [r3, #28]
    osSemaphoreRelease(LEDsSemaphore);
 8016070:	6868      	ldr	r0, [r5, #4]
 8016072:	f7f6 ff0f 	bl	800ce94 <osSemaphoreRelease>
}
 8016076:	4640      	mov	r0, r8
 8016078:	b005      	add	sp, #20
 801607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801607e:	6963      	ldr	r3, [r4, #20]
 8016080:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 8016082:	459a      	cmp	sl, r3
 8016084:	d803      	bhi.n	801608e <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0xa4>
 8016086:	4658      	mov	r0, fp
 8016088:	f7ea fdce 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      return std::uninitialized_copy(__first, __last, __result);
 801608c:	e7ea      	b.n	8016064 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x7a>
 801608e:	eb0b 0103 	add.w	r1, fp, r3
 8016092:	4658      	mov	r0, fp
 8016094:	f7ea fdc8 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016098:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801609c:	e9d6 3100 	ldrd	r3, r1, [r6]
 80160a0:	1a10      	subs	r0, r2, r0
 80160a2:	4418      	add	r0, r3
 80160a4:	e7f0      	b.n	8016088 <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh+0x9e>

080160a6 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length < 3) return false;
 80160a6:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ac:	4606      	mov	r6, r0
 80160ae:	b086      	sub	sp, #24
 80160b0:	4615      	mov	r5, r2
			if (length < 3) return false;
 80160b2:	d925      	bls.n	8016100 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x5a>
			std::vector<uint8_t> timings (&input[1], &input[length-1]);
 80160b4:	1e9c      	subs	r4, r3, #2
 80160b6:	1e5f      	subs	r7, r3, #1
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80160b8:	4620      	mov	r0, r4
 80160ba:	eb02 0807 	add.w	r8, r2, r7
 80160be:	f7ff f9c8 	bl	8015452 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80160c2:	4404      	add	r4, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80160c4:	4602      	mov	r2, r0
 80160c6:	4641      	mov	r1, r8
 80160c8:	9000      	str	r0, [sp, #0]
 80160ca:	1c68      	adds	r0, r5, #1
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80160cc:	9402      	str	r4, [sp, #8]
 80160ce:	f7ea fdab 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
			return self->ConfigureTimings(input[0], timings, input[length-1]);
 80160d2:	782c      	ldrb	r4, [r5, #0]
 80160d4:	4669      	mov	r1, sp
	  this->_M_impl._M_finish =
 80160d6:	9001      	str	r0, [sp, #4]
 80160d8:	a803      	add	r0, sp, #12
 80160da:	f7ea fdb1 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80160de:	4621      	mov	r1, r4
 80160e0:	5deb      	ldrb	r3, [r5, r7]
 80160e2:	aa03      	add	r2, sp, #12
 80160e4:	4630      	mov	r0, r6
 80160e6:	f7ff ff80 	bl	8015fea <_ZN4LEDS16ConfigureTimingsEhSt6vectorIhSaIhEEh>
 80160ea:	4604      	mov	r4, r0
      }
 80160ec:	a803      	add	r0, sp, #12
 80160ee:	f7ea fcf7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80160f2:	4668      	mov	r0, sp
 80160f4:	f7ea fcf4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		}
 80160f8:	4620      	mov	r0, r4
 80160fa:	b006      	add	sp, #24
 80160fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (length < 3) return false;
 8016100:	2400      	movs	r4, #0
 8016102:	e7f9      	b.n	80160f8 <_ZZN4LEDS12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x52>

08016104 <_ZN21CommunicationProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CommunicationProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> data, uint16_t* index, bool* success) {*success = false; MessageHeader empty_message; return empty_message;}
 8016104:	2200      	movs	r2, #0
 8016106:	9901      	ldr	r1, [sp, #4]
 8016108:	700a      	strb	r2, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801610a:	60c2      	str	r2, [r0, #12]
 801610c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8016110:	4770      	bx	lr

08016112 <_ZN21CommunicationProtocol17ActivateReceptionEh>:
 * @brief WEAK Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::ActivateReception(uint8_t ID) {return HAL_ERROR;}
 8016112:	2001      	movs	r0, #1
 8016114:	4770      	bx	lr

08016116 <_ZN21CommunicationProtocol4SendE13MessageHeader>:
 * @brief WEAK Send a message over an interface with this protocol
 *
 * @param input ID: message to send
 * @return the interface access status
 */
HAL_StatusTypeDef CommunicationProtocol::Send(MessageHeader message) {return HAL_ERROR;}
 8016116:	2001      	movs	r0, #1
 8016118:	4770      	bx	lr

0801611a <_ZN21CommunicationProtocol5GetIDEPvPb>:
 *
 * @param input pointer: the hardware interface handle pointer
 * @param output success: whether successful
 * @return the interface ID associated to the input handle
 */
uint8_t CommunicationProtocol::GetID(void* pointer, bool* success) {*success = false; return 0;}
 801611a:	2000      	movs	r0, #0
 801611c:	7010      	strb	r0, [r2, #0]
 801611e:	4770      	bx	lr

08016120 <_ZN21CommunicationProtocol14AddInterfaceIDEh>:
void CommunicationProtocol::AddInterfaceID(uint8_t ID_) {
 8016120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016124:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
 8016128:	4606      	mov	r6, r0
 801612a:	4689      	mov	r9, r1
 801612c:	429c      	cmp	r4, r3
 801612e:	d005      	beq.n	801613c <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016130:	7021      	strb	r1, [r4, #0]
	    ++this->_M_impl._M_finish;
 8016132:	6943      	ldr	r3, [r0, #20]
 8016134:	3301      	adds	r3, #1
 8016136:	6143      	str	r3, [r0, #20]
}
 8016138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801613c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	if (max_size() - size() < __n)
 8016140:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016144:	eba4 0408 	sub.w	r4, r4, r8
	if (max_size() - size() < __n)
 8016148:	429c      	cmp	r4, r3
 801614a:	d102      	bne.n	8016152 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x32>
	  __throw_length_error(__N(__s));
 801614c:	4816      	ldr	r0, [pc, #88]	@ (80161a8 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x88>)
 801614e:	f006 fdc5 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8016152:	2c01      	cmp	r4, #1
 8016154:	4625      	mov	r5, r4
 8016156:	bf38      	it	cc
 8016158:	2501      	movcc	r5, #1
 801615a:	1965      	adds	r5, r4, r5
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801615c:	d220      	bcs.n	80161a0 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x80>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801615e:	b30d      	cbz	r5, 80161a4 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x84>
 8016160:	429d      	cmp	r5, r3
 8016162:	bf28      	it	cs
 8016164:	461d      	movcs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016166:	4628      	mov	r0, r5
 8016168:	f006 fd03 	bl	801cb72 <_Znwj>
 801616c:	4607      	mov	r7, r0
      if (__count > 0)
 801616e:	2c00      	cmp	r4, #0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016170:	f807 9004 	strb.w	r9, [r7, r4]
 8016174:	dd04      	ble.n	8016180 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016176:	4622      	mov	r2, r4
 8016178:	4641      	mov	r1, r8
 801617a:	4638      	mov	r0, r7
 801617c:	f007 fc76 	bl	801da6c <memmove>
	      ++__new_finish;
 8016180:	3401      	adds	r4, #1
 8016182:	443c      	add	r4, r7
	if (__p)
 8016184:	f1b8 0f00 	cmp.w	r8, #0
 8016188:	d005      	beq.n	8016196 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
 801618a:	69b1      	ldr	r1, [r6, #24]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801618c:	4640      	mov	r0, r8
 801618e:	eba1 0108 	sub.w	r1, r1, r8
 8016192:	f006 fcc9 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016196:	e9c6 7404 	strd	r7, r4, [r6, #16]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801619a:	442f      	add	r7, r5
 801619c:	61b7      	str	r7, [r6, #24]
 801619e:	e7cb      	b.n	8016138 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80161a0:	461d      	mov	r5, r3
 80161a2:	e7e0      	b.n	8016166 <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x46>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80161a4:	462f      	mov	r7, r5
 80161a6:	e7e2      	b.n	801616e <_ZN21CommunicationProtocol14AddInterfaceIDEh+0x4e>
 80161a8:	0801dd74 	.word	0x0801dd74

080161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>:
uint8_t CommunicationProtocol::GetInterfaceIndex(uint8_t ID_, bool* success) {
 80161ac:	b570      	push	{r4, r5, r6, lr}
 80161ae:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
	for (uint8_t ID : interfaces_id) {
 80161b2:	4620      	mov	r0, r4
 80161b4:	42a8      	cmp	r0, r5
 80161b6:	d102      	bne.n	80161be <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x12>
 80161b8:	2300      	movs	r3, #0
	return 0;
 80161ba:	4618      	mov	r0, r3
 80161bc:	e007      	b.n	80161ce <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x22>
 80161be:	4603      	mov	r3, r0
		if (ID == ID_) {
 80161c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80161c4:	428e      	cmp	r6, r1
 80161c6:	d104      	bne.n	80161d2 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x26>
 80161c8:	1b00      	subs	r0, r0, r4
 80161ca:	2301      	movs	r3, #1
 80161cc:	b2c0      	uxtb	r0, r0
			*success = true;
 80161ce:	7013      	strb	r3, [r2, #0]
}
 80161d0:	bd70      	pop	{r4, r5, r6, pc}
 80161d2:	4618      	mov	r0, r3
 80161d4:	e7ee      	b.n	80161b4 <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb+0x8>

080161d6 <_ZN21CommunicationProtocol15InterfaceExistsEh>:
bool CommunicationProtocol::InterfaceExists(uint8_t ID) {
 80161d6:	b507      	push	{r0, r1, r2, lr}
	GetInterfaceIndex(ID, &success);
 80161d8:	f10d 0207 	add.w	r2, sp, #7
 80161dc:	f7ff ffe6 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
}
 80161e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80161e4:	b003      	add	sp, #12
 80161e6:	f85d fb04 	ldr.w	pc, [sp], #4

080161ea <_ZN21CommunicationProtocol14GetIDFromIndexEhPb>:
 *
 * @param input index: interface index in the vector
 * @param output success: whether successful
 * @return the associated interface ID
 */
uint8_t CommunicationProtocol::GetIDFromIndex(uint8_t index, bool* success) {
 80161ea:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80161ec:	e9d0 4304 	ldrd	r4, r3, [r0, #16]
 80161f0:	1b1b      	subs	r3, r3, r4
	if (index < interfaces_id.size()) {
 80161f2:	4299      	cmp	r1, r3
		*success = true;
 80161f4:	bf35      	itete	cc
 80161f6:	2301      	movcc	r3, #1
		return interfaces_id[index];
	} else {
		*success = false;
 80161f8:	2000      	movcs	r0, #0
		*success = true;
 80161fa:	7013      	strbcc	r3, [r2, #0]
		*success = false;
 80161fc:	7010      	strbcs	r0, [r2, #0]
		return interfaces_id[index];
 80161fe:	bf38      	it	cc
 8016200:	5c60      	ldrbcc	r0, [r4, r1]
		return 0;
	}
}
 8016202:	bd10      	pop	{r4, pc}

08016204 <_ZN21CommunicationProtocol9GetBufferEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer memory base pointer
 */
std::vector<uint8_t>* CommunicationProtocol::GetBuffer(uint8_t ID, bool* success) {
 8016204:	b538      	push	{r3, r4, r5, lr}
 8016206:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8016208:	f7ff ffd0 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 801620c:	4603      	mov	r3, r0
	if (*success)
 801620e:	7810      	ldrb	r0, [r2, #0]
 8016210:	b128      	cbz	r0, 801621e <_ZN21CommunicationProtocol9GetBufferEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 8016212:	b21b      	sxth	r3, r3
 8016214:	6a20      	ldr	r0, [r4, #32]
 8016216:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801621a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
		return &buffers[index];
	return NULL;
}
 801621e:	bd38      	pop	{r3, r4, r5, pc}

08016220 <_ZN21CommunicationProtocol14GetBufferIndexEhPb>:
 *
 * @param input ID: interface ID
 * @param output success: whether successful
 * @return the associated buffer index pointer
 */
uint16_t* CommunicationProtocol::GetBufferIndex(uint8_t ID, bool* success) {
 8016220:	b538      	push	{r3, r4, r5, lr}
 8016222:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 8016224:	f7ff ffc2 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8016228:	4603      	mov	r3, r0
	if (*success)
 801622a:	7810      	ldrb	r0, [r2, #0]
 801622c:	b118      	cbz	r0, 8016236 <_ZN21CommunicationProtocol14GetBufferIndexEhPb+0x16>
 801622e:	b21b      	sxth	r3, r3
 8016230:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016232:	eb00 0043 	add.w	r0, r0, r3, lsl #1
		return &buffers_index[index];
	return NULL;
}
 8016236:	bd38      	pop	{r3, r4, r5, pc}

08016238 <_ZN21CommunicationProtocol27SetProtocolPayloadMaxLengthEt>:
 * @brief Set the maximum payload length for the protocol
 *
 * @param input length: the maximum payload length
 */
void CommunicationProtocol::SetProtocolPayloadMaxLength(uint16_t length) {
	max_payload_length = length;
 8016238:	8381      	strh	r1, [r0, #28]
}
 801623a:	4770      	bx	lr

0801623c <_ZN21CommunicationProtocol27GetProtocolPayloadMaxLengthEv>:
 *
 * @return the maximum payload length of the protocol
 */
uint16_t CommunicationProtocol::GetProtocolPayloadMaxLength(void) {
	return max_payload_length;
}
 801623c:	8b80      	ldrh	r0, [r0, #28]
 801623e:	4770      	bx	lr

08016240 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016244:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8016248:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801624a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801624e:	ebaa 0208 	sub.w	r2, sl, r8
 8016252:	4607      	mov	r7, r0
 8016254:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8016256:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801625a:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 801625e:	d102      	bne.n	8016266 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8016260:	481e      	ldr	r0, [pc, #120]	@ (80162dc <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x9c>)
 8016262:	f006 fd3b 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016266:	45c2      	cmp	sl, r8
 8016268:	bf14      	ite	ne
 801626a:	4622      	movne	r2, r4
 801626c:	2201      	moveq	r2, #1
 801626e:	eba1 0508 	sub.w	r5, r1, r8
 8016272:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016274:	d22e      	bcs.n	80162d4 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016276:	b37c      	cbz	r4, 80162d8 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016278:	429c      	cmp	r4, r3
 801627a:	bf28      	it	cs
 801627c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801627e:	0060      	lsls	r0, r4, #1
 8016280:	f006 fc77 	bl	801cb72 <_Znwj>
 8016284:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016286:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 801628a:	2d00      	cmp	r5, #0
 801628c:	5373      	strh	r3, [r6, r5]
 801628e:	dd04      	ble.n	801629a <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016290:	462a      	mov	r2, r5
 8016292:	4641      	mov	r1, r8
 8016294:	4630      	mov	r0, r6
 8016296:	f007 fbe9 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801629a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801629e:	3502      	adds	r5, #2
      if (__count > 0)
 80162a0:	f1ba 0f00 	cmp.w	sl, #0
 80162a4:	4435      	add	r5, r6
 80162a6:	dd04      	ble.n	80162b2 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80162a8:	4652      	mov	r2, sl
 80162aa:	4649      	mov	r1, r9
 80162ac:	4628      	mov	r0, r5
 80162ae:	f007 fcd5 	bl	801dc5c <memcpy>
      return __result + __count;
 80162b2:	4455      	add	r5, sl
	if (__p)
 80162b4:	f1b8 0f00 	cmp.w	r8, #0
 80162b8:	d005      	beq.n	80162c6 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 80162ba:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80162bc:	4640      	mov	r0, r8
 80162be:	eba1 0108 	sub.w	r1, r1, r8
 80162c2:	f006 fc31 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80162c6:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80162ca:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 80162ce:	60be      	str	r6, [r7, #8]
    }
 80162d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80162d4:	461c      	mov	r4, r3
 80162d6:	e7d2      	b.n	801627e <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80162d8:	4626      	mov	r6, r4
 80162da:	e7d4      	b.n	8016286 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x46>
 80162dc:	0801dd74 	.word	0x0801dd74

080162e0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80162e0:	b538      	push	{r3, r4, r5, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80162e2:	1e0c      	subs	r4, r1, #0
      _M_create_storage(size_t __n)
 80162e4:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80162e6:	d00a      	beq.n	80162fe <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x1e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80162e8:	da01      	bge.n	80162ee <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0xe>
	    std::__throw_bad_alloc();
 80162ea:	f006 fcf1 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80162ee:	4620      	mov	r0, r4
 80162f0:	f006 fc3f 	bl	801cb72 <_Znwj>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80162f4:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80162f8:	4420      	add	r0, r4
 80162fa:	60a8      	str	r0, [r5, #8]
      }
 80162fc:	bd38      	pop	{r3, r4, r5, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80162fe:	4620      	mov	r0, r4
 8016300:	e7f8      	b.n	80162f4 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj+0x14>
	...

08016304 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8016304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8016306:	1e0d      	subs	r5, r1, #0
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8016308:	4604      	mov	r4, r0
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801630a:	da02      	bge.n	8016312 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0xe>
	  __throw_length_error(
 801630c:	480c      	ldr	r0, [pc, #48]	@ (8016340 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x3c>)
 801630e:	f006 fce5 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016312:	2700      	movs	r7, #0
 8016314:	e9c0 7700 	strd	r7, r7, [r0]
 8016318:	6087      	str	r7, [r0, #8]
      { _M_create_storage(__n); }
 801631a:	f7ff ffe1 	bl	80162e0 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 801631e:	6826      	ldr	r6, [r4, #0]
	  if (__n > 0)
 8016320:	b14d      	cbz	r5, 8016336 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 8016322:	4630      	mov	r0, r6
      if (__n <= 0)
 8016324:	2d01      	cmp	r5, #1
 8016326:	f800 7b01 	strb.w	r7, [r0], #1
 801632a:	d007      	beq.n	801633c <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x38>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 801632c:	1e6a      	subs	r2, r5, #1
 801632e:	4639      	mov	r1, r7
      std::__fill_a(__first, __first + __n, __value);
 8016330:	442e      	add	r6, r5
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8016332:	f007 fbb5 	bl	801daa0 <memset>
      { _M_default_initialize(__n); }
 8016336:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8016338:	6066      	str	r6, [r4, #4]
      { _M_default_initialize(__n); }
 801633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      ++__first;
 801633c:	4606      	mov	r6, r0
 801633e:	e7fa      	b.n	8016336 <_ZNSt6vectorIhSaIhEEC1EjRKS0_+0x32>
 8016340:	0801dd8e 	.word	0x0801dd8e

08016344 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016348:	e9d0 7900 	ldrd	r7, r9, [r0]
 801634c:	4b35      	ldr	r3, [pc, #212]	@ (8016424 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
 801634e:	4606      	mov	r6, r0
 8016350:	eba9 0507 	sub.w	r5, r9, r7
 8016354:	4688      	mov	r8, r1
 8016356:	4614      	mov	r4, r2
 8016358:	10ad      	asrs	r5, r5, #2
 801635a:	435d      	muls	r5, r3
	if (max_size() - size() < __n)
 801635c:	4b32      	ldr	r3, [pc, #200]	@ (8016428 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
 801635e:	429d      	cmp	r5, r3
 8016360:	d102      	bne.n	8016368 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 8016362:	4832      	ldr	r0, [pc, #200]	@ (801642c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe8>)
 8016364:	f006 fcba 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8016368:	45b9      	cmp	r9, r7
 801636a:	bf14      	ite	ne
 801636c:	462a      	movne	r2, r5
 801636e:	2201      	moveq	r2, #1
 8016370:	eba1 0b07 	sub.w	fp, r1, r7
 8016374:	18ad      	adds	r5, r5, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8016376:	d22d      	bcs.n	80163d4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016378:	b375      	cbz	r5, 80163d8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801637a:	429d      	cmp	r5, r3
 801637c:	bf28      	it	cs
 801637e:	461d      	movcs	r5, r3
 8016380:	200c      	movs	r0, #12
 8016382:	4368      	muls	r0, r5
 8016384:	f006 fbf5 	bl	801cb72 <_Znwj>
 8016388:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801638a:	4621      	mov	r1, r4
 801638c:	eb0a 000b 	add.w	r0, sl, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016390:	463c      	mov	r4, r7
      _ForwardIterator __cur = __result;
 8016392:	46d3      	mov	fp, sl
 8016394:	f7ea fc54 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8016398:	45a0      	cmp	r8, r4
 801639a:	f04f 0300 	mov.w	r3, #0
 801639e:	f10b 0b0c 	add.w	fp, fp, #12
 80163a2:	d11b      	bne.n	80163dc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80163a4:	f04f 0800 	mov.w	r8, #0
 80163a8:	454c      	cmp	r4, r9
 80163aa:	465b      	mov	r3, fp
 80163ac:	f10b 0b0c 	add.w	fp, fp, #12
 80163b0:	d125      	bne.n	80163fe <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xba>
	if (__p)
 80163b2:	b137      	cbz	r7, 80163c2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 80163b4:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80163b6:	4638      	mov	r0, r7
 80163b8:	9301      	str	r3, [sp, #4]
 80163ba:	1bc9      	subs	r1, r1, r7
 80163bc:	f006 fbb4 	bl	801cb28 <_ZdlPvj>
 80163c0:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_finish = __new_finish;
 80163c2:	e9c6 a300 	strd	sl, r3, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80163c6:	230c      	movs	r3, #12
 80163c8:	fb03 a305 	mla	r3, r3, r5, sl
 80163cc:	60b3      	str	r3, [r6, #8]
    }
 80163ce:	b003      	add	sp, #12
 80163d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163d4:	461d      	mov	r5, r3
 80163d6:	e7d3      	b.n	8016380 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80163d8:	46aa      	mov	sl, r5
 80163da:	e7d6      	b.n	801638a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80163dc:	6822      	ldr	r2, [r4, #0]
      }
 80163de:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80163e0:	6023      	str	r3, [r4, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80163e2:	f84b 2c0c 	str.w	r2, [fp, #-12]
 80163e6:	6862      	ldr	r2, [r4, #4]
 80163e8:	f84b 2c08 	str.w	r2, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 80163ec:	68a2      	ldr	r2, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80163ee:	e9c4 3301 	strd	r3, r3, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 80163f2:	f84b 2c04 	str.w	r2, [fp, #-4]
 80163f6:	340c      	adds	r4, #12
      }
 80163f8:	f7ea fb72 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80163fc:	e7cc      	b.n	8016398 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x54>
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80163fe:	6823      	ldr	r3, [r4, #0]
      }
 8016400:	4620      	mov	r0, r4
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016402:	f8c4 8000 	str.w	r8, [r4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8016406:	f84b 3c0c 	str.w	r3, [fp, #-12]
 801640a:	6863      	ldr	r3, [r4, #4]
 801640c:	f84b 3c08 	str.w	r3, [fp, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016410:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8016412:	e9c4 8801 	strd	r8, r8, [r4, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8016416:	f84b 3c04 	str.w	r3, [fp, #-4]
 801641a:	340c      	adds	r4, #12
      }
 801641c:	f7ea fb60 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016420:	e7c2      	b.n	80163a8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x64>
 8016422:	bf00      	nop
 8016424:	aaaaaaab 	.word	0xaaaaaaab
 8016428:	0aaaaaaa 	.word	0x0aaaaaaa
 801642c:	0801dd74 	.word	0x0801dd74

08016430 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8016430:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016432:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
      push_back(const value_type& __x)
 8016436:	4604      	mov	r4, r0
 8016438:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801643a:	42ab      	cmp	r3, r5
 801643c:	d006      	beq.n	801644c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801643e:	4618      	mov	r0, r3
 8016440:	f7ea fbfe 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	    ++this->_M_impl._M_finish;
 8016444:	6863      	ldr	r3, [r4, #4]
 8016446:	330c      	adds	r3, #12
 8016448:	6063      	str	r3, [r4, #4]
      }
 801644a:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801644c:	4619      	mov	r1, r3
 801644e:	f7ff ff79 	bl	8016344 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8016452:	e7fa      	b.n	801644a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_+0x1a>

08016454 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>:
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016454:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	@ 0x30
void CommunicationProtocol::AddInterfaceBuffer() {
 8016458:	b5f0      	push	{r4, r5, r6, r7, lr}
	buffers_index.push_back(0);
 801645a:	2300      	movs	r3, #0
void CommunicationProtocol::AddInterfaceBuffer() {
 801645c:	b089      	sub	sp, #36	@ 0x24
 801645e:	4291      	cmp	r1, r2
 8016460:	4604      	mov	r4, r0
	buffers_index.push_back(0);
 8016462:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016466:	d036      	beq.n	80164d6 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x82>
 8016468:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 801646c:	6301      	str	r1, [r0, #48]	@ 0x30
	std::vector<uint8_t> buffer(BUFFER_SIZE);
 801646e:	aa05      	add	r2, sp, #20
 8016470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016474:	a802      	add	r0, sp, #8
 8016476:	f7ff ff45 	bl	8016304 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers.push_back(buffer);
 801647a:	f104 0020 	add.w	r0, r4, #32
 801647e:	a902      	add	r1, sp, #8
 8016480:	f7ff ffd6 	bl	8016430 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
	std::vector<uint8_t> data_to_send(BUFFER_SIZE);
 8016484:	aa01      	add	r2, sp, #4
 8016486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801648a:	a805      	add	r0, sp, #20
 801648c:	f7ff ff3a 	bl	8016304 <_ZNSt6vectorIhSaIhEEC1EjRKS0_>
	buffers_to_transfer.push_back(data_to_send);
 8016490:	1d20      	adds	r0, r4, #4
 8016492:	a905      	add	r1, sp, #20
 8016494:	f7ff ffcc 	bl	8016430 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE9push_backERKS1_>
      : _M_current(__i) { }
 8016498:	68a4      	ldr	r4, [r4, #8]
			 - this->_M_impl._M_start); }
 801649a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 801649e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80164a2:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 80164a4:	2bff      	cmp	r3, #255	@ 0xff
 80164a6:	d826      	bhi.n	80164f6 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0xa2>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80164a8:	f854 6c08 	ldr.w	r6, [r4, #-8]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80164ac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80164b0:	1ab6      	subs	r6, r6, r2
 80164b2:	f006 fb5e 	bl	801cb72 <_Znwj>
 80164b6:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 80164b8:	e954 7203 	ldrd	r7, r2, [r4, #-12]
 80164bc:	1bd2      	subs	r2, r2, r7
      if (__count > 0)
 80164be:	2a00      	cmp	r2, #0
 80164c0:	dd0e      	ble.n	80164e0 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x8c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80164c2:	4639      	mov	r1, r7
 80164c4:	f007 fad2 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 80164c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80164cc:	4638      	mov	r0, r7
 80164ce:	1bc9      	subs	r1, r1, r7
 80164d0:	f006 fb2a 	bl	801cb28 <_ZdlPvj>
 80164d4:	e006      	b.n	80164e4 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x90>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80164d6:	aa05      	add	r2, sp, #20
 80164d8:	302c      	adds	r0, #44	@ 0x2c
 80164da:	f7ff feb1 	bl	8016240 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJtEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
 80164de:	e7c6      	b.n	801646e <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x1a>
	if (__p)
 80164e0:	2f00      	cmp	r7, #0
 80164e2:	d1f1      	bne.n	80164c8 <_ZN21CommunicationProtocol18AddInterfaceBufferEv+0x74>
	  this->_M_impl._M_finish = __tmp + __old_size;
 80164e4:	442e      	add	r6, r5
	  this->_M_impl._M_start = __tmp;
 80164e6:	f844 5c0c 	str.w	r5, [r4, #-12]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80164ea:	f505 7580 	add.w	r5, r5, #256	@ 0x100
	  this->_M_impl._M_finish = __tmp + __old_size;
 80164ee:	f844 6c08 	str.w	r6, [r4, #-8]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80164f2:	f844 5c04 	str.w	r5, [r4, #-4]
      }
 80164f6:	a805      	add	r0, sp, #20
 80164f8:	f7ea faf2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80164fc:	a802      	add	r0, sp, #8
 80164fe:	f7ea faef 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
}
 8016502:	b009      	add	sp, #36	@ 0x24
 8016504:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016506:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8016508:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801650a:	d006      	beq.n	801651a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801650c:	da01      	bge.n	8016512 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801650e:	f006 fbdf 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 8016512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016516:	f006 bb2c 	b.w	801cb72 <_Znwj>
 801651a:	bd08      	pop	{r3, pc}

0801651c <_ZN11CANProtocolC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801651c:	2200      	movs	r2, #0
#include <Protocols/Communication/FDCAN/CANProtocol.hpp>

/**
 * @brief Class constructor
 */
CANProtocol::CANProtocol() {
 801651e:	490b      	ldr	r1, [pc, #44]	@ (801654c <_ZN11CANProtocolC1Ev+0x30>)
 8016520:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8016524:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016528:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801652c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8016530:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8016534:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 8016538:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 801653c:	6402      	str	r2, [r0, #64]	@ 0x40
 801653e:	6001      	str	r1, [r0, #0]
 8016540:	6502      	str	r2, [r0, #80]	@ 0x50
	marker = 0;
 8016542:	6442      	str	r2, [r0, #68]	@ 0x44
 8016544:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
}
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	0801e074 	.word	0x0801e074

08016550 <_ZN11CANProtocol17GetProtocolLengthEt>:
 *
 * @param input length: the CAN payload length
 * @return the minimum DLC value that fits the given length inside
 */
uint32_t CANProtocol::GetProtocolLength(uint16_t length) {
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8016550:	b301      	cbz	r1, 8016594 <_ZN11CANProtocol17GetProtocolLengthEt+0x44>
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8016552:	2901      	cmp	r1, #1
 8016554:	d020      	beq.n	8016598 <_ZN11CANProtocol17GetProtocolLengthEt+0x48>
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 8016556:	2902      	cmp	r1, #2
 8016558:	d021      	beq.n	801659e <_ZN11CANProtocol17GetProtocolLengthEt+0x4e>
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 801655a:	2903      	cmp	r1, #3
 801655c:	d022      	beq.n	80165a4 <_ZN11CANProtocol17GetProtocolLengthEt+0x54>
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 801655e:	2904      	cmp	r1, #4
 8016560:	d023      	beq.n	80165aa <_ZN11CANProtocol17GetProtocolLengthEt+0x5a>
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 8016562:	2905      	cmp	r1, #5
 8016564:	d024      	beq.n	80165b0 <_ZN11CANProtocol17GetProtocolLengthEt+0x60>
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 8016566:	2906      	cmp	r1, #6
 8016568:	d025      	beq.n	80165b6 <_ZN11CANProtocol17GetProtocolLengthEt+0x66>
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 801656a:	2907      	cmp	r1, #7
 801656c:	d026      	beq.n	80165bc <_ZN11CANProtocol17GetProtocolLengthEt+0x6c>
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 801656e:	2908      	cmp	r1, #8
 8016570:	d027      	beq.n	80165c2 <_ZN11CANProtocol17GetProtocolLengthEt+0x72>
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 8016572:	290c      	cmp	r1, #12
 8016574:	d928      	bls.n	80165c8 <_ZN11CANProtocol17GetProtocolLengthEt+0x78>
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 8016576:	2910      	cmp	r1, #16
 8016578:	d929      	bls.n	80165ce <_ZN11CANProtocol17GetProtocolLengthEt+0x7e>
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 801657a:	2914      	cmp	r1, #20
 801657c:	d92a      	bls.n	80165d4 <_ZN11CANProtocol17GetProtocolLengthEt+0x84>
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 801657e:	2918      	cmp	r1, #24
 8016580:	d92b      	bls.n	80165da <_ZN11CANProtocol17GetProtocolLengthEt+0x8a>
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 8016582:	2920      	cmp	r1, #32
 8016584:	d92c      	bls.n	80165e0 <_ZN11CANProtocol17GetProtocolLengthEt+0x90>
	if (length <= 48) return FDCAN_DLC_BYTES_48;
	if (length <= 64) return FDCAN_DLC_BYTES_64;
 8016586:	2931      	cmp	r1, #49	@ 0x31
 8016588:	bf34      	ite	cc
 801658a:	f44f 2060 	movcc.w	r0, #917504	@ 0xe0000
 801658e:	f44f 2070 	movcs.w	r0, #983040	@ 0xf0000
 8016592:	4770      	bx	lr
	if (length <= 0) return FDCAN_DLC_BYTES_0;
 8016594:	4608      	mov	r0, r1
 8016596:	4770      	bx	lr
	if (length <= 1) return FDCAN_DLC_BYTES_1;
 8016598:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801659c:	4770      	bx	lr
	if (length <= 2) return FDCAN_DLC_BYTES_2;
 801659e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80165a2:	4770      	bx	lr
	if (length <= 3) return FDCAN_DLC_BYTES_3;
 80165a4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80165a8:	4770      	bx	lr
	if (length <= 4) return FDCAN_DLC_BYTES_4;
 80165aa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80165ae:	4770      	bx	lr
	if (length <= 5) return FDCAN_DLC_BYTES_5;
 80165b0:	f44f 20a0 	mov.w	r0, #327680	@ 0x50000
 80165b4:	4770      	bx	lr
	if (length <= 6) return FDCAN_DLC_BYTES_6;
 80165b6:	f44f 20c0 	mov.w	r0, #393216	@ 0x60000
 80165ba:	4770      	bx	lr
	if (length <= 7) return FDCAN_DLC_BYTES_7;
 80165bc:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
 80165c0:	4770      	bx	lr
	if (length <= 8) return FDCAN_DLC_BYTES_8;
 80165c2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80165c6:	4770      	bx	lr
	if (length <= 12) return FDCAN_DLC_BYTES_12;
 80165c8:	f44f 2010 	mov.w	r0, #589824	@ 0x90000
 80165cc:	4770      	bx	lr
	if (length <= 16) return FDCAN_DLC_BYTES_16;
 80165ce:	f44f 2020 	mov.w	r0, #655360	@ 0xa0000
 80165d2:	4770      	bx	lr
	if (length <= 20) return FDCAN_DLC_BYTES_20;
 80165d4:	f44f 2030 	mov.w	r0, #720896	@ 0xb0000
 80165d8:	4770      	bx	lr
	if (length <= 24) return FDCAN_DLC_BYTES_24;
 80165da:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80165de:	4770      	bx	lr
	if (length <= 32) return FDCAN_DLC_BYTES_32;
 80165e0:	f44f 2050 	mov.w	r0, #851968	@ 0xd0000
	return FDCAN_DLC_BYTES_64;
}
 80165e4:	4770      	bx	lr

080165e6 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      _GLIBCXX20_CONSTEXPR
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80165e6:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80165e8:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 80165ea:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80165ec:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80165ee:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80165f2:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 80165f4:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80165f6:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 80165f8:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 80165fa:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80165fc:	688d      	ldr	r5, [r1, #8]
 80165fe:	6085      	str	r5, [r0, #8]
      }
 8016600:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016602:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016604:	e9c1 3300 	strd	r3, r3, [r1]
 8016608:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 801660c:	f7ea fa68 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__x._M_impl);
	__tmp._M_impl._M_swap_data(__x._M_impl);
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
 8016610:	b005      	add	sp, #20
 8016612:	bd30      	pop	{r4, r5, pc}

08016614 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>:
H* TemplateCommunicationProtocol<H>::GetInterface(uint8_t ID, bool* success) {
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4615      	mov	r5, r2
 8016618:	4604      	mov	r4, r0
	uint8_t index = GetInterfaceIndex(ID, success);
 801661a:	f7ff fdc7 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 801661e:	4603      	mov	r3, r0
	if (*success) {
 8016620:	7828      	ldrb	r0, [r5, #0]
 8016622:	b118      	cbz	r0, 801662c <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb+0x18>
	return *(this->_M_impl._M_start + __n);
 8016624:	b21b      	sxth	r3, r3
		return interfaces[index];
 8016626:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8016628:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
}
 801662c:	bd38      	pop	{r3, r4, r5, pc}

0801662e <_ZN11CANProtocol16ConfigureFiltersEh>:
HAL_StatusTypeDef CANProtocol::ConfigureFilters(uint8_t ID) {
 801662e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8016630:	f10d 020f 	add.w	r2, sp, #15
 8016634:	f7ff ffee 	bl	8016614 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8016638:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801663c:	2301      	movs	r3, #1
 801663e:	b13a      	cbz	r2, 8016650 <_ZN11CANProtocol16ConfigureFiltersEh+0x22>
	return HAL_FDCAN_ConfigGlobalFilter(handle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8016640:	2200      	movs	r2, #0
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	4611      	mov	r1, r2
 8016646:	f7ef fdaf 	bl	80061a8 <HAL_FDCAN_ConfigGlobalFilter>
}
 801664a:	b005      	add	sp, #20
 801664c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8016650:	4618      	mov	r0, r3
 8016652:	e7fa      	b.n	801664a <_ZN11CANProtocol16ConfigureFiltersEh+0x1c>

08016654 <_ZN11CANProtocol17ActivateReceptionEh>:
HAL_StatusTypeDef CANProtocol::ActivateReception(uint8_t ID) {
 8016654:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8016656:	f10d 0207 	add.w	r2, sp, #7
 801665a:	f7ff ffdb 	bl	8016614 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 801665e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016662:	b133      	cbz	r3, 8016672 <_ZN11CANProtocol17ActivateReceptionEh+0x1e>
	return HAL_FDCAN_ActivateNotification(handle, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8016664:	2200      	movs	r2, #0
 8016666:	2101      	movs	r1, #1
 8016668:	f7ef fefc 	bl	8006464 <HAL_FDCAN_ActivateNotification>
}
 801666c:	b003      	add	sp, #12
 801666e:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8016672:	2001      	movs	r0, #1
 8016674:	e7fa      	b.n	801666c <_ZN11CANProtocol17ActivateReceptionEh+0x18>

08016676 <_ZN11CANProtocol5StartEh>:
HAL_StatusTypeDef CANProtocol::Start(uint8_t ID) {
 8016676:	b507      	push	{r0, r1, r2, lr}
	FDCAN_HandleTypeDef* handle = GetInterface(ID, &success);
 8016678:	f10d 0207 	add.w	r2, sp, #7
 801667c:	f7ff ffca 	bl	8016614 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (not success) return HAL_ERROR;
 8016680:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016684:	b123      	cbz	r3, 8016690 <_ZN11CANProtocol5StartEh+0x1a>
	return HAL_FDCAN_Start(handle);
 8016686:	f7ef fdaa 	bl	80061de <HAL_FDCAN_Start>
}
 801668a:	b003      	add	sp, #12
 801668c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (not success) return HAL_ERROR;
 8016690:	2001      	movs	r0, #1
 8016692:	e7fa      	b.n	801668a <_ZN11CANProtocol5StartEh+0x14>

08016694 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8016694:	460a      	mov	r2, r1
 8016696:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016698:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 801669c:	42a1      	cmp	r1, r4
 801669e:	d004      	beq.n	80166aa <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80166a0:	6812      	ldr	r2, [r2, #0]
 80166a2:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 80166a6:	6041      	str	r1, [r0, #4]
      }
 80166a8:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 80166aa:	f7eb fd2d 	bl	8002108 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80166ae:	e7fb      	b.n	80166a8 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_+0x14>

080166b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80166b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80166b4:	e9d0 9a00 	ldrd	r9, sl, [r0]
 80166b8:	4b2a      	ldr	r3, [pc, #168]	@ (8016764 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 80166ba:	4680      	mov	r8, r0
 80166bc:	ebaa 0409 	sub.w	r4, sl, r9
 80166c0:	468b      	mov	fp, r1
 80166c2:	4615      	mov	r5, r2
 80166c4:	10a4      	asrs	r4, r4, #2
 80166c6:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 80166c8:	4b27      	ldr	r3, [pc, #156]	@ (8016768 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 80166ca:	429c      	cmp	r4, r3
 80166cc:	d102      	bne.n	80166d4 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 80166ce:	4827      	ldr	r0, [pc, #156]	@ (801676c <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 80166d0:	f006 fb04 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 80166d4:	45ca      	cmp	sl, r9
 80166d6:	bf14      	ite	ne
 80166d8:	4622      	movne	r2, r4
 80166da:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 80166dc:	eba1 0609 	sub.w	r6, r1, r9
 80166e0:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80166e2:	d23a      	bcs.n	801675a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80166e4:	b3dc      	cbz	r4, 801675e <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xae>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80166e6:	429c      	cmp	r4, r3
 80166e8:	bf28      	it	cs
 80166ea:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80166ec:	2024      	movs	r0, #36	@ 0x24
 80166ee:	4360      	muls	r0, r4
 80166f0:	f006 fa3f 	bl	801cb72 <_Znwj>
 80166f4:	4607      	mov	r7, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80166f6:	eb07 0c06 	add.w	ip, r7, r6
      if (__count > 0)
 80166fa:	2e00      	cmp	r6, #0
 80166fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016704:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016708:	682b      	ldr	r3, [r5, #0]
 801670a:	f8cc 3000 	str.w	r3, [ip]
 801670e:	dd04      	ble.n	801671a <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016710:	4632      	mov	r2, r6
 8016712:	4649      	mov	r1, r9
 8016714:	4638      	mov	r0, r7
 8016716:	f007 f9a9 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801671a:	ebaa 0a0b 	sub.w	sl, sl, fp
	      ++__new_finish;
 801671e:	3624      	adds	r6, #36	@ 0x24
      if (__count > 0)
 8016720:	f1ba 0f00 	cmp.w	sl, #0
 8016724:	443e      	add	r6, r7
 8016726:	dd04      	ble.n	8016732 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016728:	4652      	mov	r2, sl
 801672a:	4659      	mov	r1, fp
 801672c:	4630      	mov	r0, r6
 801672e:	f007 fa95 	bl	801dc5c <memcpy>
      return __result + __count;
 8016732:	4456      	add	r6, sl
	if (__p)
 8016734:	f1b9 0f00 	cmp.w	r9, #0
 8016738:	d006      	beq.n	8016748 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
		    this->_M_impl._M_end_of_storage - __old_start);
 801673a:	f8d8 1008 	ldr.w	r1, [r8, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801673e:	4648      	mov	r0, r9
 8016740:	eba1 0109 	sub.w	r1, r1, r9
 8016744:	f006 f9f0 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016748:	2324      	movs	r3, #36	@ 0x24
      this->_M_impl._M_finish = __new_finish;
 801674a:	e9c8 7600 	strd	r7, r6, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801674e:	fb03 7704 	mla	r7, r3, r4, r7
 8016752:	f8c8 7008 	str.w	r7, [r8, #8]
    }
 8016756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675a:	461c      	mov	r4, r3
 801675c:	e7c6      	b.n	80166ec <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801675e:	4627      	mov	r7, r4
 8016760:	e7c9      	b.n	80166f6 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8016762:	bf00      	nop
 8016764:	38e38e39 	.word	0x38e38e39
 8016768:	038e38e3 	.word	0x038e38e3
 801676c:	0801dd74 	.word	0x0801dd74

08016770 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef>:
void CANProtocol::AddInterface(uint8_t ID, FDCAN_HandleTypeDef* interface) {
 8016770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016772:	4606      	mov	r6, r0
 8016774:	b08d      	sub	sp, #52	@ 0x34
 8016776:	9201      	str	r2, [sp, #4]
	AddInterfaceID(ID);
 8016778:	f7ff fcd2 	bl	8016120 <_ZN21CommunicationProtocol14AddInterfaceIDEh>
	AddInterfaceBuffer();
 801677c:	4630      	mov	r0, r6
 801677e:	f7ff fe69 	bl	8016454 <_ZN21CommunicationProtocol18AddInterfaceBufferEv>
	interfaces.push_back(interface);
 8016782:	a901      	add	r1, sp, #4
 8016784:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 8016788:	f7ff ff84 	bl	8016694 <_ZNSt6vectorIP19FDCAN_HandleTypeDefSaIS1_EE9push_backERKS1_>
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 801678c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8016790:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
	FDCANTxHeader.IdType = FDCAN_STANDARD_ID; 				// FDCAN_STANDARD_ID or FDCAN_CLASSIC_CAN
 8016794:	2300      	movs	r3, #0
	FDCANTxHeader.BitRateSwitch = FDCAN_BRS_ON; 				// FDCAN_BRS_ON FDCAN_BRS_OFF
 8016796:	e9cd 1207 	strd	r1, r2, [sp, #28]
	FDCANTxHeader.FDFormat = FDCAN_FD_CAN; 					// FDCAN_FD_CAN or FDCAN_CLASSIC_CAN
 801679a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
	FDCANTxHeader.TxFrameType = FDCAN_DATA_FRAME; 			// FDCAN_DATA_FRAME or FDCAN_REMOTE_FRAME
 801679e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	FDCANTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; 	// FDCAN_NO_TX_EVENTS or FDCAN_STORE_TX_EVENTS
 80167a2:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80167a6:	e9d6 7313 	ldrd	r7, r3, [r6, #76]	@ 0x4c
 80167aa:	429f      	cmp	r7, r3
 80167ac:	d00b      	beq.n	80167c6 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x56>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80167ae:	ad03      	add	r5, sp, #12
 80167b0:	463c      	mov	r4, r7
	    ++this->_M_impl._M_finish;
 80167b2:	3724      	adds	r7, #36	@ 0x24
 80167b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80167ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80167bc:	682b      	ldr	r3, [r5, #0]
 80167be:	6023      	str	r3, [r4, #0]
 80167c0:	64f7      	str	r7, [r6, #76]	@ 0x4c
}
 80167c2:	b00d      	add	sp, #52	@ 0x34
 80167c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 80167c6:	aa03      	add	r2, sp, #12
 80167c8:	4639      	mov	r1, r7
 80167ca:	f106 0048 	add.w	r0, r6, #72	@ 0x48
 80167ce:	f7ff ff6f 	bl	80166b0 <_ZNSt6vectorI21FDCAN_TxHeaderTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 80167d2:	e7f6      	b.n	80167c2 <_ZN11CANProtocol12AddInterfaceEhP19FDCAN_HandleTypeDef+0x52>

080167d4 <_ZN11CANProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
 * @param input data: message to decode
 * @param output index: processed length in the data
 * @param output success: true if message decoded
 * @return the decoded and parsed message based on the custom protocol
 */
MessageHeader CANProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 80167d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80167d8:	461d      	mov	r5, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 80167da:	2300      	movs	r3, #0
 80167dc:	4604      	mov	r4, r0
 80167de:	60c3      	str	r3, [r0, #12]
 80167e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	return *(this->_M_impl._M_start + __n);
 80167e4:	682b      	ldr	r3, [r5, #0]
	MessageHeader decoded_message;

	decoded_message.target_address = message[0];
 80167e6:	781a      	ldrb	r2, [r3, #0]
      { return __normal_iterator(_M_current + __n); }
 80167e8:	1cdf      	adds	r7, r3, #3
 80167ea:	7402      	strb	r2, [r0, #16]
	decoded_message.source_address = message[1];
 80167ec:	785a      	ldrb	r2, [r3, #1]
 80167ee:	7442      	strb	r2, [r0, #17]
 80167f0:	789e      	ldrb	r6, [r3, #2]
 80167f2:	eb07 0806 	add.w	r8, r7, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80167f6:	4630      	mov	r0, r6
 80167f8:	f7ff fe85 	bl	8016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80167fc:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80167fe:	4602      	mov	r2, r0
			      _Category>::__copy_m(__first, __last, __result);
 8016800:	4641      	mov	r1, r8
 8016802:	9001      	str	r0, [sp, #4]
 8016804:	4638      	mov	r0, r7
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016806:	9603      	str	r6, [sp, #12]
 8016808:	f7ea fa0e 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801680c:	a901      	add	r1, sp, #4
	  this->_M_impl._M_finish =
 801680e:	9002      	str	r0, [sp, #8]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8016810:	1d20      	adds	r0, r4, #4
 8016812:	f7ff fee8 	bl	80165e6 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8016816:	a801      	add	r0, sp, #4
 8016818:	f7ea f962 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	uint16_t length = message[2];

	// Retrieve payload based on length byte
	decoded_message.payload = std::vector<uint8_t>(message.begin() + 3, message.begin() + 3 + length);

	*success = true;
 801681c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801681e:	2201      	movs	r2, #1
	*index = message.size();

	return decoded_message;
}
 8016820:	4620      	mov	r0, r4
	*success = true;
 8016822:	701a      	strb	r2, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016824:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016828:	1a9b      	subs	r3, r3, r2
	*index = message.size();
 801682a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801682c:	8013      	strh	r3, [r2, #0]
}
 801682e:	b004      	add	sp, #16
 8016830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016834 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>:
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8016834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016838:	4698      	mov	r8, r3
	TxHeader->Identifier = message.target_address;
 801683a:	7c13      	ldrb	r3, [r2, #16]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 801683c:	4617      	mov	r7, r2
 801683e:	4689      	mov	r9, r1
	TxHeader->Identifier = message.target_address;
 8016840:	f8c8 3000 	str.w	r3, [r8]
std::vector<uint8_t> CANProtocol::CodeProtocol(MessageHeader message, FDCAN_TxHeaderTypeDef* TxHeader) {
 8016844:	4604      	mov	r4, r0
	TxHeader->MessageMarker = marker;
 8016846:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
	if (marker >= 4294967295)
 8016848:	1c5a      	adds	r2, r3, #1
 801684a:	f04f 0200 	mov.w	r2, #0
	TxHeader->MessageMarker = marker;
 801684e:	f8c8 3020 	str.w	r3, [r8, #32]
		marker = 0;
 8016852:	bf0c      	ite	eq
 8016854:	4613      	moveq	r3, r2
		marker++;
 8016856:	3301      	addne	r3, #1
 8016858:	644b      	str	r3, [r1, #68]	@ 0x44
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801685a:	2101      	movs	r1, #1
	: _M_start(), _M_finish(), _M_end_of_storage()
 801685c:	6082      	str	r2, [r0, #8]
 801685e:	e9c0 2200 	strd	r2, r2, [r0]
 8016862:	4a41      	ldr	r2, [pc, #260]	@ (8016968 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 8016864:	f7ea f95d 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8016868:	4606      	mov	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 801686a:	f7ff fe4c 	bl	8016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801686e:	7c7b      	ldrb	r3, [r7, #17]
 8016870:	4601      	mov	r1, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016872:	4406      	add	r6, r0
      pointer __new_start(this->_M_allocate(__len));
 8016874:	4605      	mov	r5, r0
 8016876:	f801 3b01 	strb.w	r3, [r1], #1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801687a:	42b1      	cmp	r1, r6
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801687c:	60a6      	str	r6, [r4, #8]
      this->_M_impl._M_finish = __new_finish;
 801687e:	e9c4 0100 	strd	r0, r1, [r4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016882:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 8016886:	eba3 0302 	sub.w	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 801688a:	fa5f fa83 	uxtb.w	sl, r3
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801688e:	d02d      	beq.n	80168ec <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xb8>
	    ++this->_M_impl._M_finish;
 8016890:	3502      	adds	r5, #2
 8016892:	f880 a001 	strb.w	sl, [r0, #1]
 8016896:	6065      	str	r5, [r4, #4]
      : _M_current(__i) { }
 8016898:	e9d7 a301 	ldrd	sl, r3, [r7, #4]
	if (__first != __last)
 801689c:	4553      	cmp	r3, sl
 801689e:	d018      	beq.n	80168d2 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
			  - this->_M_impl._M_finish) >= __n)
 80168a0:	68a2      	ldr	r2, [r4, #8]
    { return __lhs.base() - __rhs.base(); }
 80168a2:	eba3 050a 	sub.w	r5, r3, sl
      : _M_current(__i) { }
 80168a6:	e9d4 7600 	ldrd	r7, r6, [r4]
 80168aa:	1b92      	subs	r2, r2, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 80168ac:	4295      	cmp	r5, r2
 80168ae:	d835      	bhi.n	801691c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0xe8>
 80168b0:	4619      	mov	r1, r3
 80168b2:	4632      	mov	r2, r6
 80168b4:	4650      	mov	r0, sl
 80168b6:	f7ea f9b7 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n - __elems_after;
 80168ba:	6862      	ldr	r2, [r4, #4]
 80168bc:	4631      	mov	r1, r6
 80168be:	4630      	mov	r0, r6
 80168c0:	442a      	add	r2, r5
 80168c2:	6062      	str	r2, [r4, #4]
 80168c4:	f7eb f9b6 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80168c8:	4632      	mov	r2, r6
 80168ca:	4651      	mov	r1, sl
 80168cc:	4650      	mov	r0, sl
 80168ce:	f7ea f9ab 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	TxHeader->DataLength = GetProtocolLength(coded_message.size());
 80168d2:	4648      	mov	r0, r9
 80168d4:	e9d4 3100 	ldrd	r3, r1, [r4]
 80168d8:	1ac9      	subs	r1, r1, r3
 80168da:	b289      	uxth	r1, r1
 80168dc:	f7ff fe38 	bl	8016550 <_ZN11CANProtocol17GetProtocolLengthEt>
 80168e0:	f8c8 000c 	str.w	r0, [r8, #12]
}
 80168e4:	4620      	mov	r0, r4
 80168e6:	b003      	add	sp, #12
 80168e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80168ec:	4a1e      	ldr	r2, [pc, #120]	@ (8016968 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x134>)
 80168ee:	2101      	movs	r1, #1
 80168f0:	4620      	mov	r0, r4
 80168f2:	f7ea f916 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80168f6:	4683      	mov	fp, r0
      pointer __new_start(this->_M_allocate(__len));
 80168f8:	f7ff fe05 	bl	8016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80168fc:	782b      	ldrb	r3, [r5, #0]
		    this->_M_impl._M_end_of_storage - __old_start);
 80168fe:	68a1      	ldr	r1, [r4, #8]
      pointer __new_start(this->_M_allocate(__len));
 8016900:	4606      	mov	r6, r0
 8016902:	7003      	strb	r3, [r0, #0]
 8016904:	f880 a001 	strb.w	sl, [r0, #1]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016908:	1b49      	subs	r1, r1, r5
 801690a:	4628      	mov	r0, r5
 801690c:	f006 f90c 	bl	801cb28 <_ZdlPvj>
	      ++__new_finish;
 8016910:	1cb3      	adds	r3, r6, #2
      this->_M_impl._M_start = __new_start;
 8016912:	6026      	str	r6, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016914:	445e      	add	r6, fp
      this->_M_impl._M_finish = __new_finish;
 8016916:	6063      	str	r3, [r4, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016918:	60a6      	str	r6, [r4, #8]
 801691a:	e7bd      	b.n	8016898 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x64>
		  _M_check_len(__n, "vector::_M_range_insert");
 801691c:	4629      	mov	r1, r5
 801691e:	4a13      	ldr	r2, [pc, #76]	@ (801696c <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x138>)
 8016920:	4620      	mov	r0, r4
 8016922:	9301      	str	r3, [sp, #4]
 8016924:	f7ea f8fd 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8016928:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 801692a:	f7ff fdec 	bl	8016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 801692e:	4631      	mov	r1, r6
 8016930:	4602      	mov	r2, r0
 8016932:	4605      	mov	r5, r0
 8016934:	4638      	mov	r0, r7
 8016936:	f7eb f97d 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801693a:	9b01      	ldr	r3, [sp, #4]
 801693c:	4602      	mov	r2, r0
 801693e:	4650      	mov	r0, sl
 8016940:	4619      	mov	r1, r3
 8016942:	f7ea f971 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016946:	4631      	mov	r1, r6
 8016948:	4602      	mov	r2, r0
 801694a:	4630      	mov	r0, r6
 801694c:	f7eb f972 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016950:	4606      	mov	r6, r0
	if (__p)
 8016952:	b127      	cbz	r7, 801695e <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x12a>
			      this->_M_impl._M_end_of_storage - __old_start);
 8016954:	68a1      	ldr	r1, [r4, #8]
 8016956:	4638      	mov	r0, r7
 8016958:	1bc9      	subs	r1, r1, r7
 801695a:	f006 f8e5 	bl	801cb28 <_ZdlPvj>
		this->_M_impl._M_finish = __new_finish;
 801695e:	e9c4 5600 	strd	r5, r6, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8016962:	445d      	add	r5, fp
 8016964:	60a5      	str	r5, [r4, #8]
 8016966:	e7b4      	b.n	80168d2 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef+0x9e>
 8016968:	0801dd74 	.word	0x0801dd74
 801696c:	0801ddbf 	.word	0x0801ddbf

08016970 <_ZN11CANProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 8016970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016974:	b093      	sub	sp, #76	@ 0x4c
 8016976:	460e      	mov	r6, r1
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8016978:	7809      	ldrb	r1, [r1, #0]
HAL_StatusTypeDef CANProtocol::Send(MessageHeader message) {
 801697a:	4680      	mov	r8, r0
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 801697c:	f10d 0203 	add.w	r2, sp, #3
 8016980:	f7ff fe48 	bl	8016614 <_ZN29TemplateCommunicationProtocolI19FDCAN_HandleTypeDefE12GetInterfaceEhPb>
	if (!success) return HAL_ERROR;
 8016984:	f89d 3003 	ldrb.w	r3, [sp, #3]
	FDCAN_HandleTypeDef* interface_ = GetInterface(message.interface, &success);
 8016988:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 801698a:	b91b      	cbnz	r3, 8016994 <_ZN11CANProtocol4SendE13MessageHeader+0x24>
 801698c:	2001      	movs	r0, #1
}
 801698e:	b013      	add	sp, #76	@ 0x4c
 8016990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (interface_->State != HAL_FDCAN_STATE_BUSY) return HAL_ERROR;
 8016994:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8016998:	2b02      	cmp	r3, #2
 801699a:	d1f7      	bne.n	801698c <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 801699c:	f10d 0203 	add.w	r2, sp, #3
 80169a0:	7831      	ldrb	r1, [r6, #0]
 80169a2:	4640      	mov	r0, r8
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 80169a4:	ad09      	add	r5, sp, #36	@ 0x24
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 80169a6:	f7ff fc01 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	FDCAN_TxHeaderTypeDef TxHeader = FDCANTxHeaders[index];
 80169aa:	f8d8 4048 	ldr.w	r4, [r8, #72]	@ 0x48
	return *(this->_M_impl._M_start + __n);
 80169ae:	b207      	sxth	r7, r0
 80169b0:	eb07 03c7 	add.w	r3, r7, r7, lsl #3
 80169b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80169b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80169bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80169c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80169c4:	6823      	ldr	r3, [r4, #0]
 80169c6:	602b      	str	r3, [r5, #0]
 80169c8:	00bd      	lsls	r5, r7, #2
 80169ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80169ce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80169d2:	7833      	ldrb	r3, [r6, #0]
 80169d4:	f88d 3010 	strb.w	r3, [sp, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80169d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80169dc:	1ae4      	subs	r4, r4, r3
	this->_M_impl._M_start = this->_M_allocate(__n);
 80169de:	4620      	mov	r0, r4
 80169e0:	f7ff fd91 	bl	8016506 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80169e4:	4404      	add	r4, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80169e6:	4602      	mov	r2, r0
 80169e8:	9005      	str	r0, [sp, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80169ea:	9407      	str	r4, [sp, #28]
 80169ec:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 80169f0:	f7ea f91a 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80169f4:	8a33      	ldrh	r3, [r6, #16]
	buffers_to_transfer[index] = CodeProtocol(message, &TxHeader);
 80169f6:	aa04      	add	r2, sp, #16
 80169f8:	4641      	mov	r1, r8
	this->_M_impl._M_finish =
 80169fa:	9006      	str	r0, [sp, #24]
 80169fc:	a801      	add	r0, sp, #4
 80169fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016a02:	ab09      	add	r3, sp, #36	@ 0x24
 8016a04:	f7ff ff16 	bl	8016834 <_ZN11CANProtocol12CodeProtocolE13MessageHeaderP21FDCAN_TxHeaderTypeDef>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8016a08:	a901      	add	r1, sp, #4
 8016a0a:	4638      	mov	r0, r7
 8016a0c:	f7ff fdeb 	bl	80165e6 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8016a10:	a801      	add	r0, sp, #4
 8016a12:	f7ea f865 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016a16:	a805      	add	r0, sp, #20
 8016a18:	f7ea f862 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 8016a1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016a20:	1959      	adds	r1, r3, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a22:	595a      	ldr	r2, [r3, r5]
 8016a24:	684b      	ldr	r3, [r1, #4]
 8016a26:	1a9b      	subs	r3, r3, r2
	if (buffers_to_transfer[index].size() > 64) return HAL_ERROR;
 8016a28:	2b40      	cmp	r3, #64	@ 0x40
 8016a2a:	d8af      	bhi.n	801698c <_ZN11CANProtocol4SendE13MessageHeader+0x1c>
	return HAL_FDCAN_AddMessageToTxFifoQ(interface_, &TxHeader, &(buffers_to_transfer[index])[0]);
 8016a2c:	a909      	add	r1, sp, #36	@ 0x24
 8016a2e:	4648      	mov	r0, r9
 8016a30:	f7ef fbef 	bl	8006212 <HAL_FDCAN_AddMessageToTxFifoQ>
 8016a34:	e7ab      	b.n	801698e <_ZN11CANProtocol4SendE13MessageHeader+0x1e>

08016a36 <_ZN12UARTProtocol17ActivateReceptionEh>:
 * @brief OVERRIDE Activate reception of the associated hardware interface
 *
 * @param input ID: interface ID
 * @return the interface access status
 */
HAL_StatusTypeDef UARTProtocol::ActivateReception(uint8_t ID) {
 8016a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = GetInterfaceIndex(ID, success);
 8016a38:	f10d 0207 	add.w	r2, sp, #7
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	460d      	mov	r5, r1
 8016a40:	f7ff fbb4 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8016a44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016a48:	b1d3      	cbz	r3, 8016a80 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>
	return *(this->_M_impl._M_start + __n);
 8016a4a:	b203      	sxth	r3, r0
		return interfaces[index];
 8016a4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
	bool success;
	UART_HandleTypeDef* handle = GetInterface(ID, &success);
	if (not success) return HAL_ERROR;
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8016a4e:	4620      	mov	r0, r4
 8016a50:	4629      	mov	r1, r5
 8016a52:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8016a56:	f10d 0207 	add.w	r2, sp, #7
 8016a5a:	f7ff fbd3 	bl	8016204 <_ZN21CommunicationProtocol9GetBufferEhPb>
	if (not success) return HAL_ERROR;
 8016a5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	std::vector<uint8_t>* buffer = GetBuffer(ID, &success);
 8016a62:	4604      	mov	r4, r0
	if (not success) return HAL_ERROR;
 8016a64:	b163      	cbz	r3, 8016a80 <_ZN12UARTProtocol17ActivateReceptionEh+0x4a>

	HAL_StatusTypeDef status;
	status = UART_CheckIdleState(handle); // to reset UART RxState
 8016a66:	4630      	mov	r0, r6
 8016a68:	f7f5 ff13 	bl	800c892 <UART_CheckIdleState>
	do {
		status = HAL_UARTEx_ReceiveToIdle_DMA(handle, buffer->data(), BUFFER_SIZE);
 8016a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016a70:	6821      	ldr	r1, [r4, #0]
 8016a72:	4630      	mov	r0, r6
 8016a74:	f7f6 f8aa 	bl	800cbcc <HAL_UARTEx_ReceiveToIdle_DMA>
	} while (status == HAL_BUSY);
 8016a78:	2802      	cmp	r0, #2
 8016a7a:	d0f7      	beq.n	8016a6c <_ZN12UARTProtocol17ActivateReceptionEh+0x36>
	return status;
}
 8016a7c:	b002      	add	sp, #8
 8016a7e:	bd70      	pop	{r4, r5, r6, pc}
	if (not success) return HAL_ERROR;
 8016a80:	2001      	movs	r0, #1
 8016a82:	e7fb      	b.n	8016a7c <_ZN12UARTProtocol17ActivateReceptionEh+0x46>

08016a84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016a84:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8016a86:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8016a88:	d006      	beq.n	8016a98 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8016a8a:	da01      	bge.n	8016a90 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8016a8c:	f006 f920 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 8016a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8016a94:	f006 b86d 	b.w	801cb72 <_Znwj>
 8016a98:	bd08      	pop	{r3, pc}

08016a9a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>:
 * @param input pattern: patter to detect
 * @param input start_index: the detection of the pattern starts at this index
 * @param output success: whether successful
 * @return the base index of the first iteration of the detected pattern in message
 */
uint16_t UARTProtocol::DetectPattern(std::vector<uint8_t> message, std::vector<uint8_t> pattern, uint16_t start_index, bool* success) {
 8016a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a9c:	e9d1 5000 	ldrd	r5, r0, [r1]
	uint8_t counter = 0;
 8016aa0:	2100      	movs	r1, #0
 8016aa2:	1b40      	subs	r0, r0, r5
	for (uint16_t index = start_index; index < message.size(); index++) {
 8016aa4:	4283      	cmp	r3, r0
 8016aa6:	d302      	bcc.n	8016aae <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x14>
 8016aa8:	2300      	movs	r3, #0
			*success = true;
			return index - counter + 1;
		}
	}
	*success = false;
	return 0;
 8016aaa:	4618      	mov	r0, r3
 8016aac:	e00e      	b.n	8016acc <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x32>
	return *(this->_M_impl._M_start + __n);
 8016aae:	6816      	ldr	r6, [r2, #0]
		if (message[index] != pattern[counter]) {
 8016ab0:	5cef      	ldrb	r7, [r5, r3]
 8016ab2:	3301      	adds	r3, #1
 8016ab4:	5c74      	ldrb	r4, [r6, r1]
 8016ab6:	42a7      	cmp	r7, r4
 8016ab8:	d10b      	bne.n	8016ad2 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x38>
		counter++;
 8016aba:	3101      	adds	r1, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016abc:	6854      	ldr	r4, [r2, #4]
 8016abe:	b2c9      	uxtb	r1, r1
 8016ac0:	1ba4      	subs	r4, r4, r6
		if (counter >= pattern.size()) {
 8016ac2:	42a1      	cmp	r1, r4
 8016ac4:	d306      	bcc.n	8016ad4 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0x3a>
			return index - counter + 1;
 8016ac6:	1a5b      	subs	r3, r3, r1
 8016ac8:	b298      	uxth	r0, r3
 8016aca:	2301      	movs	r3, #1
			*success = true;
 8016acc:	9a05      	ldr	r2, [sp, #20]
 8016ace:	7013      	strb	r3, [r2, #0]
}
 8016ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			counter = 0;
 8016ad2:	2100      	movs	r1, #0
	for (uint16_t index = start_index; index < message.size(); index++) {
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	e7e5      	b.n	8016aa4 <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb+0xa>

08016ad8 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>:
 * @param input start_index: the detection of the pattern starts at this index
 * @param input message: message used to find the pattern
 * @param input pattern: patter to detect
 * @param output success: true if pattern detected
 */
bool UARTProtocol::PatternPresentAt(uint16_t start_index, std::vector<uint8_t> message, std::vector<uint8_t> pattern) {
 8016ad8:	b570      	push	{r4, r5, r6, lr}
    uint16_t index = start_index;
    for (uint8_t byte : pattern) {
 8016ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8016ade:	1ac9      	subs	r1, r1, r3
 8016ae0:	18c8      	adds	r0, r1, r3
 8016ae2:	42a3      	cmp	r3, r4
 8016ae4:	b280      	uxth	r0, r0
 8016ae6:	d101      	bne.n	8016aec <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x14>
        if (byte != message[index])
            return false;
        index++;
    }
    return true;
 8016ae8:	2001      	movs	r0, #1
}
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
        if (byte != message[index])
 8016aec:	6816      	ldr	r6, [r2, #0]
    for (uint8_t byte : pattern) {
 8016aee:	f813 5b01 	ldrb.w	r5, [r3], #1
        if (byte != message[index])
 8016af2:	5c30      	ldrb	r0, [r6, r0]
 8016af4:	42a8      	cmp	r0, r5
 8016af6:	d0f3      	beq.n	8016ae0 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x8>
            return false;
 8016af8:	2000      	movs	r0, #0
 8016afa:	e7f6      	b.n	8016aea <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_+0x12>

08016afc <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>:
 8016afc:	e9d1 3200 	ldrd	r3, r2, [r1]
 *
 * @param input message: vector of bytes to derive the checksum
 * @return the 1-byte checksum
 */
uint8_t UARTProtocol::GetChecksum(std::vector<uint8_t> message) {
	uint8_t checksum = 0;
 8016b00:	2000      	movs	r0, #0
	for (uint8_t byte : message)
 8016b02:	429a      	cmp	r2, r3
 8016b04:	d102      	bne.n	8016b0c <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x10>
		checksum += byte;
	checksum = ~checksum + 1;
 8016b06:	4240      	negs	r0, r0
	return checksum;
}
 8016b08:	b2c0      	uxtb	r0, r0
 8016b0a:	4770      	bx	lr
		checksum += byte;
 8016b0c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016b10:	4408      	add	r0, r1
 8016b12:	b2c0      	uxtb	r0, r0
	return *this;
 8016b14:	e7f5      	b.n	8016b02 <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE+0x6>

08016b16 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>:
 8016b16:	e9d3 0300 	ldrd	r0, r3, [r3]
 * @param input start_index: index (included) from which the checksum check is started
 * @param input end_index: index (excluded) from which the checksum check is finished
 * @param input message: byte vector message
 * @return true if the checksum is valid
 */
bool UARTProtocol::Checksum(uint16_t start_index, uint16_t end_index, std::vector<uint8_t> message) {
 8016b1a:	b510      	push	{r4, lr}
 8016b1c:	1a1b      	subs	r3, r3, r0
	uint8_t sum = 0;
	if (start_index > message.size()) return false;
 8016b1e:	4299      	cmp	r1, r3
 8016b20:	d812      	bhi.n	8016b48 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (end_index > message.size()) return false;
 8016b22:	429a      	cmp	r2, r3
 8016b24:	d810      	bhi.n	8016b48 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
	if (start_index > end_index) return false;
 8016b26:	4291      	cmp	r1, r2
 8016b28:	d80e      	bhi.n	8016b48 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x32>
 8016b2a:	1843      	adds	r3, r0, r1
	uint8_t sum = 0;
 8016b2c:	2000      	movs	r0, #0
	for (uint16_t index = start_index; index < end_index; index++) {
 8016b2e:	4291      	cmp	r1, r2
 8016b30:	d103      	bne.n	8016b3a <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x24>
		sum += message[index];
	}
	return (sum == 0);
 8016b32:	fab0 f080 	clz	r0, r0
 8016b36:	0940      	lsrs	r0, r0, #5
}
 8016b38:	bd10      	pop	{r4, pc}
		sum += message[index];
 8016b3a:	f813 4b01 	ldrb.w	r4, [r3], #1
	for (uint16_t index = start_index; index < end_index; index++) {
 8016b3e:	3101      	adds	r1, #1
		sum += message[index];
 8016b40:	4420      	add	r0, r4
	for (uint16_t index = start_index; index < end_index; index++) {
 8016b42:	b289      	uxth	r1, r1
		sum += message[index];
 8016b44:	b2c0      	uxtb	r0, r0
	for (uint16_t index = start_index; index < end_index; index++) {
 8016b46:	e7f2      	b.n	8016b2e <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x18>
	if (start_index > message.size()) return false;
 8016b48:	2000      	movs	r0, #0
 8016b4a:	e7f5      	b.n	8016b38 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE+0x22>

08016b4c <_ZN12UARTProtocol7IsRS485Eh>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8016b4c:	e9d0 3217 	ldrd	r3, r2, [r0, #92]	@ 0x5c
 *
 * @param input ID: interface ID
 * @return true if interface is RS485
 */
bool UARTProtocol::IsRS485(uint8_t ID) {
	for (uint8_t &RS485_interface : RS485_interfaces) {
 8016b50:	4293      	cmp	r3, r2
 8016b52:	d101      	bne.n	8016b58 <_ZN12UARTProtocol7IsRS485Eh+0xc>
		if (RS485_interface == ID) return true;
	}
	return false;
 8016b54:	2000      	movs	r0, #0
 8016b56:	4770      	bx	lr
		if (RS485_interface == ID) return true;
 8016b58:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016b5c:	4288      	cmp	r0, r1
 8016b5e:	d1f7      	bne.n	8016b50 <_ZN12UARTProtocol7IsRS485Eh+0x4>
 8016b60:	2001      	movs	r0, #1
}
 8016b62:	4770      	bx	lr

08016b64 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016b64:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 8016b66:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8016b68:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8016b6a:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8016b6c:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8016b70:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8016b72:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016b74:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8016b76:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8016b78:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8016b7a:	688d      	ldr	r5, [r1, #8]
 8016b7c:	6085      	str	r5, [r0, #8]
      }
 8016b7e:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8016b80:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8016b82:	e9c1 3300 	strd	r3, r3, [r1]
 8016b86:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8016b8a:	f7e9 ffa9 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 8016b8e:	b005      	add	sp, #20
 8016b90:	bd30      	pop	{r4, r5, pc}
	...

08016b94 <_ZNSt6vectorIhSaIhEE9push_backERKh>:
      push_back(const value_type& __x)
 8016b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016b98:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 8016b9c:	4605      	mov	r5, r0
 8016b9e:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016ba0:	429c      	cmp	r4, r3
 8016ba2:	d006      	beq.n	8016bb2 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8016ba4:	780b      	ldrb	r3, [r1, #0]
 8016ba6:	7023      	strb	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
 8016ba8:	6843      	ldr	r3, [r0, #4]
 8016baa:	3301      	adds	r3, #1
 8016bac:	6043      	str	r3, [r0, #4]
      }
 8016bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8016bb2:	4a10      	ldr	r2, [pc, #64]	@ (8016bf4 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x60>)
 8016bb4:	2101      	movs	r1, #1
 8016bb6:	f7e9 ffb4 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 8016bba:	682f      	ldr	r7, [r5, #0]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8016bbc:	4680      	mov	r8, r0
      pointer __new_start(this->_M_allocate(__len));
 8016bbe:	f7ff ff61 	bl	8016a84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
    { return __lhs.base() - __rhs.base(); }
 8016bc2:	1be4      	subs	r4, r4, r7
 8016bc4:	f899 3000 	ldrb.w	r3, [r9]
 8016bc8:	4606      	mov	r6, r0
      if (__count > 0)
 8016bca:	2c00      	cmp	r4, #0
 8016bcc:	5503      	strb	r3, [r0, r4]
 8016bce:	dd03      	ble.n	8016bd8 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x44>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8016bd0:	4622      	mov	r2, r4
 8016bd2:	4639      	mov	r1, r7
 8016bd4:	f006 ff4a 	bl	801da6c <memmove>
	      ++__new_finish;
 8016bd8:	3401      	adds	r4, #1
 8016bda:	4434      	add	r4, r6
	if (__p)
 8016bdc:	b127      	cbz	r7, 8016be8 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x54>
		    this->_M_impl._M_end_of_storage - __old_start);
 8016bde:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8016be0:	4638      	mov	r0, r7
 8016be2:	1bc9      	subs	r1, r1, r7
 8016be4:	f005 ffa0 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8016be8:	e9c5 6400 	strd	r6, r4, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016bec:	4446      	add	r6, r8
 8016bee:	60ae      	str	r6, [r5, #8]
      }
 8016bf0:	e7dd      	b.n	8016bae <_ZNSt6vectorIhSaIhEE9push_backERKh+0x1a>
 8016bf2:	bf00      	nop
 8016bf4:	0801dd74 	.word	0x0801dd74

08016bf8 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb>:
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8016bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	469a      	mov	sl, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016c00:	2300      	movs	r3, #0
 8016c02:	b08d      	sub	sp, #52	@ 0x34
	if (IsRS485(ID)) RS485_offset = 1;
 8016c04:	4611      	mov	r1, r2
MessageHeader UARTProtocol::DecodeProtocol(uint8_t ID, std::vector<uint8_t> message, uint16_t* index, bool* success) {
 8016c06:	4605      	mov	r5, r0
 8016c08:	60c3      	str	r3, [r0, #12]
 8016c0a:	4616      	mov	r6, r2
 8016c0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	if (IsRS485(ID)) RS485_offset = 1;
 8016c10:	4620      	mov	r0, r4
 8016c12:	f7ff ff9b 	bl	8016b4c <_ZN12UARTProtocol7IsRS485Eh>
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8016c16:	4651      	mov	r1, sl
	if (IsRS485(ID)) RS485_offset = 1;
 8016c18:	4607      	mov	r7, r0
	uint16_t start_index = DetectPattern(message, protocol_start, *index, success);
 8016c1a:	a806      	add	r0, sp, #24
 8016c1c:	f7ea f810 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016c20:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8016c24:	a809      	add	r0, sp, #36	@ 0x24
 8016c26:	f7ea f80b 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c2c:	aa09      	add	r2, sp, #36	@ 0x24
 8016c2e:	a906      	add	r1, sp, #24
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	4620      	mov	r0, r4
 8016c34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016c36:	881b      	ldrh	r3, [r3, #0]
 8016c38:	f7ff ff2f 	bl	8016a9a <_ZN12UARTProtocol13DetectPatternESt6vectorIhSaIhEES2_tPb>
 8016c3c:	4680      	mov	r8, r0
      }
 8016c3e:	a809      	add	r0, sp, #36	@ 0x24
 8016c40:	f7e9 ff4e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016c44:	a806      	add	r0, sp, #24
 8016c46:	f7e9 ff4b 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	if (*success) {
 8016c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	b193      	cbz	r3, 8016c76 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016c50:	e9da 3200 	ldrd	r3, r2, [sl]
 8016c54:	1ad2      	subs	r2, r2, r3
 8016c56:	9203      	str	r2, [sp, #12]
 8016c58:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	@ 0x44
 8016c5c:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + 1 + RS485_offset) {*success = false; return decoded_message;} // Error - discard message
 8016c5e:	9903      	ldr	r1, [sp, #12]
 8016c60:	eb02 0b08 	add.w	fp, r2, r8
 8016c64:	eb0b 0907 	add.w	r9, fp, r7
 8016c68:	f109 0201 	add.w	r2, r9, #1
 8016c6c:	428a      	cmp	r2, r1
 8016c6e:	d306      	bcc.n	8016c7e <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x86>
 8016c70:	2300      	movs	r3, #0
 8016c72:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016c74:	7013      	strb	r3, [r2, #0]
}
 8016c76:	4628      	mov	r0, r5
 8016c78:	b00d      	add	sp, #52	@ 0x34
 8016c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IsRS485(ID))
 8016c7e:	4631      	mov	r1, r6
 8016c80:	4620      	mov	r0, r4
 8016c82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016c86:	f7ff ff61 	bl	8016b4c <_ZN12UARTProtocol7IsRS485Eh>
 8016c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d079      	beq.n	8016d86 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x18e>
			decoded_message.target_address = message[start_index + protocol_start.size()];
 8016c92:	f813 100b 	ldrb.w	r1, [r3, fp]
 8016c96:	7429      	strb	r1, [r5, #16]
		decoded_message.source_address = message[start_index + protocol_start.size() + RS485_offset];
 8016c98:	f813 1009 	ldrb.w	r1, [r3, r9]
 8016c9c:	7469      	strb	r1, [r5, #17]
		uint16_t length = message[start_index + protocol_start.size() + 1 + RS485_offset];
 8016c9e:	5c9e      	ldrb	r6, [r3, r2]
 8016ca0:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8016ca4:	1a52      	subs	r2, r2, r1
		if (message.size() <= start_index + protocol_start.size() + length + 2 + RS485_offset + protocol_end.size()) {*success = false; return decoded_message;} // Error - discard message
 8016ca6:	9903      	ldr	r1, [sp, #12]
 8016ca8:	3202      	adds	r2, #2
 8016caa:	443a      	add	r2, r7
 8016cac:	445a      	add	r2, fp
 8016cae:	4432      	add	r2, r6
 8016cb0:	428a      	cmp	r2, r1
 8016cb2:	d2dd      	bcs.n	8016c70 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
      { return __normal_iterator(_M_current + __n); }
 8016cb4:	f109 0902 	add.w	r9, r9, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016cb8:	4630      	mov	r0, r6
 8016cba:	4499      	add	r9, r3
 8016cbc:	f7ff fee2 	bl	8016a84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016cc0:	1983      	adds	r3, r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016cc2:	4602      	mov	r2, r0
 8016cc4:	eb09 0b06 	add.w	fp, r9, r6
 8016cc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8016cca:	4648      	mov	r0, r9
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cce:	4659      	mov	r1, fp
 8016cd0:	f7e9 ffaa 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		decoded_message.payload = std::vector<uint8_t>(message.begin() + start_index + protocol_start.size() + 2 + RS485_offset, message.begin() + start_index + protocol_start.size() + 2 + RS485_offset + length);
 8016cd4:	a909      	add	r1, sp, #36	@ 0x24
	  this->_M_impl._M_finish =
 8016cd6:	900a      	str	r0, [sp, #40]	@ 0x28
 8016cd8:	1d28      	adds	r0, r5, #4
 8016cda:	f7ff ff43 	bl	8016b64 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8016cde:	a809      	add	r0, sp, #36	@ 0x24
 8016ce0:	f7e9 fefe 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
		if (!Checksum(start_index, start_index + protocol_start.size() + length + 3 + RS485_offset, message)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8016ce4:	4651      	mov	r1, sl
 8016ce6:	a809      	add	r0, sp, #36	@ 0x24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016ce8:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016cec:	eba3 0902 	sub.w	r9, r3, r2
 8016cf0:	f7e9 ffa6 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016cf4:	ab09      	add	r3, sp, #36	@ 0x24
 8016cf6:	4641      	mov	r1, r8
 8016cf8:	f109 0903 	add.w	r9, r9, #3
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	44c1      	add	r9, r8
 8016d00:	44b9      	add	r9, r7
 8016d02:	44b1      	add	r9, r6
 8016d04:	fa1f f989 	uxth.w	r9, r9
 8016d08:	464a      	mov	r2, r9
 8016d0a:	f7ff ff04 	bl	8016b16 <_ZN12UARTProtocol8ChecksumEttSt6vectorIhSaIhEE>
 8016d0e:	4681      	mov	r9, r0
      }
 8016d10:	a809      	add	r0, sp, #36	@ 0x24
 8016d12:	f7e9 fee5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016d16:	f1b9 0f00 	cmp.w	r9, #0
 8016d1a:	d0a9      	beq.n	8016c70 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		if (!PatternPresentAt(start_index + protocol_start.size() + length + 3 + RS485_offset, message, protocol_end)) {*success = false; return decoded_message;} // Checksum Error - discard message
 8016d1c:	4651      	mov	r1, sl
 8016d1e:	a806      	add	r0, sp, #24
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016d20:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016d24:	eba3 0902 	sub.w	r9, r3, r2
 8016d28:	f7e9 ff8a 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016d2c:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8016d30:	a809      	add	r0, sp, #36	@ 0x24
 8016d32:	f109 0903 	add.w	r9, r9, #3
 8016d36:	f7e9 ff83 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016d3a:	ab09      	add	r3, sp, #36	@ 0x24
 8016d3c:	aa06      	add	r2, sp, #24
 8016d3e:	44c1      	add	r9, r8
 8016d40:	4620      	mov	r0, r4
 8016d42:	44b9      	add	r9, r7
 8016d44:	44b1      	add	r9, r6
 8016d46:	fa1f f989 	uxth.w	r9, r9
 8016d4a:	4649      	mov	r1, r9
 8016d4c:	f7ff fec4 	bl	8016ad8 <_ZN12UARTProtocol16PatternPresentAtEtSt6vectorIhSaIhEES2_>
 8016d50:	4681      	mov	r9, r0
      }
 8016d52:	a809      	add	r0, sp, #36	@ 0x24
 8016d54:	f7e9 fec4 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016d58:	a806      	add	r0, sp, #24
 8016d5a:	f7e9 fec1 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8016d5e:	f1b9 0f00 	cmp.w	r9, #0
 8016d62:	d085      	beq.n	8016c70 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x78>
		*success = true;
 8016d64:	2301      	movs	r3, #1
 8016d66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016d68:	7013      	strb	r3, [r2, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016d6a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	@ 0x44
 8016d6e:	1a9b      	subs	r3, r3, r2
 8016d70:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8016d74:	1a52      	subs	r2, r2, r1
		*index = start_index + protocol_start.size() + length + 3 + RS485_offset + protocol_end.size();
 8016d76:	4413      	add	r3, r2
 8016d78:	3303      	adds	r3, #3
 8016d7a:	4498      	add	r8, r3
 8016d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016d7e:	4447      	add	r7, r8
 8016d80:	443e      	add	r6, r7
 8016d82:	801e      	strh	r6, [r3, #0]
 8016d84:	e777      	b.n	8016c76 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x7e>
			decoded_message.target_address = ALL;
 8016d86:	21ff      	movs	r1, #255	@ 0xff
 8016d88:	e785      	b.n	8016c96 <_ZN12UARTProtocol14DecodeProtocolEhSt6vectorIhSaIhEEPtPb+0x9e>
	...

08016d8c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8016d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8016d8e:	1a57      	subs	r7, r2, r1
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8016d90:	4604      	mov	r4, r0
 8016d92:	460d      	mov	r5, r1
 8016d94:	4616      	mov	r6, r2
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8016d96:	d502      	bpl.n	8016d9e <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x12>
	  __throw_length_error(
 8016d98:	4807      	ldr	r0, [pc, #28]	@ (8016db8 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0+0x2c>)
 8016d9a:	f005 ff9f 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016d9e:	4638      	mov	r0, r7
 8016da0:	f7ff fe70 	bl	8016a84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016da4:	4407      	add	r7, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8016da6:	4602      	mov	r2, r0
 8016da8:	6020      	str	r0, [r4, #0]
 8016daa:	4631      	mov	r1, r6
 8016dac:	4628      	mov	r0, r5
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8016dae:	60a7      	str	r7, [r4, #8]
 8016db0:	f7e9 ff3a 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	  this->_M_impl._M_finish =
 8016db4:	6060      	str	r0, [r4, #4]
	}
 8016db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016db8:	0801dd8e 	.word	0x0801dd8e

08016dbc <_ZN12UARTProtocolC1Ev>:
UARTProtocol::UARTProtocol() {
 8016dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016dbe:	4b17      	ldr	r3, [pc, #92]	@ (8016e1c <_ZN12UARTProtocolC1Ev+0x60>)
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dc0:	2500      	movs	r5, #0
	_M_range_initialize(__l.begin(), __l.end(),
 8016dc2:	4a17      	ldr	r2, [pc, #92]	@ (8016e20 <_ZN12UARTProtocolC1Ev+0x64>)
 8016dc4:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dc6:	6405      	str	r5, [r0, #64]	@ 0x40
 8016dc8:	6003      	str	r3, [r0, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 8016dca:	1e91      	subs	r1, r2, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016dcc:	64c5      	str	r5, [r0, #76]	@ 0x4c
 8016dce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016dd2:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8016dd6:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8016dda:	e9c0 5508 	strd	r5, r5, [r0, #32]
 8016dde:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
 8016de2:	e9c0 550c 	strd	r5, r5, [r0, #48]	@ 0x30
 8016de6:	e9c0 550e 	strd	r5, r5, [r0, #56]	@ 0x38
 8016dea:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
	_M_range_initialize(__l.begin(), __l.end(),
 8016dee:	3044      	adds	r0, #68	@ 0x44
 8016df0:	f7ff ffcc 	bl	8016d8c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
 8016df4:	23ff      	movs	r3, #255	@ 0xff
 8016df6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016dfa:	f10d 0205 	add.w	r2, sp, #5
 8016dfe:	a901      	add	r1, sp, #4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e00:	65a5      	str	r5, [r4, #88]	@ 0x58
 8016e02:	f88d 3004 	strb.w	r3, [sp, #4]
 8016e06:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
	_M_range_initialize(__l.begin(), __l.end(),
 8016e0a:	f7ff ffbf 	bl	8016d8c <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag.isra.0>
}
 8016e0e:	4620      	mov	r0, r4
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016e10:	6665      	str	r5, [r4, #100]	@ 0x64
 8016e12:	e9c4 5517 	strd	r5, r5, [r4, #92]	@ 0x5c
 8016e16:	b003      	add	sp, #12
 8016e18:	bd30      	pop	{r4, r5, pc}
 8016e1a:	bf00      	nop
 8016e1c:	0801e0b0 	.word	0x0801e0b0
 8016e20:	0801e08a 	.word	0x0801e08a

08016e24 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>:
	if (__first != __last)
 8016e24:	429a      	cmp	r2, r3
	insert(const_iterator __position, _InputIterator __first,
 8016e26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	460d      	mov	r5, r1
 8016e2e:	4617      	mov	r7, r2
 8016e30:	4699      	mov	r9, r3
 8016e32:	d022      	beq.n	8016e7a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
    { return __lhs.base() - __rhs.base(); }
 8016e34:	eba3 0802 	sub.w	r8, r3, r2
      : _M_current(__i) { }
 8016e38:	f8d0 a000 	ldr.w	sl, [r0]
			  - this->_M_impl._M_finish) >= __n)
 8016e3c:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8016e40:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8016e42:	4598      	cmp	r8, r3
 8016e44:	d831      	bhi.n	8016eaa <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x86>
    { return __lhs.base() - __rhs.base(); }
 8016e46:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 8016e4a:	45d0      	cmp	r8, sl
 8016e4c:	d217      	bcs.n	8016e7e <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x5a>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8016e4e:	eba6 0a08 	sub.w	sl, r6, r8
 8016e52:	4632      	mov	r2, r6
 8016e54:	4631      	mov	r1, r6
 8016e56:	4650      	mov	r0, sl
 8016e58:	f7ea feec 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 8016e5c:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 8016e5e:	ebba 0205 	subs.w	r2, sl, r5
 8016e62:	4443      	add	r3, r8
 8016e64:	6063      	str	r3, [r4, #4]
 8016e66:	d003      	beq.n	8016e70 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x4c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8016e68:	4629      	mov	r1, r5
 8016e6a:	1ab0      	subs	r0, r6, r2
 8016e6c:	f006 fdfe 	bl	801da6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 8016e70:	462a      	mov	r2, r5
 8016e72:	4649      	mov	r1, r9
 8016e74:	4638      	mov	r0, r7
 8016e76:	f7e9 fed7 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	}
 8016e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 8016e7e:	eb02 0b0a 	add.w	fp, r2, sl
 8016e82:	4649      	mov	r1, r9
 8016e84:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 8016e86:	eba8 080a 	sub.w	r8, r8, sl
 8016e8a:	4658      	mov	r0, fp
 8016e8c:	f7e9 fecc 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016e90:	6862      	ldr	r2, [r4, #4]
 8016e92:	4631      	mov	r1, r6
 8016e94:	4628      	mov	r0, r5
 8016e96:	4442      	add	r2, r8
 8016e98:	6062      	str	r2, [r4, #4]
 8016e9a:	f7ea fecb 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 8016e9e:	6863      	ldr	r3, [r4, #4]
 8016ea0:	462a      	mov	r2, r5
 8016ea2:	4659      	mov	r1, fp
 8016ea4:	4453      	add	r3, sl
 8016ea6:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8016ea8:	e7e4      	b.n	8016e74 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x50>
		  _M_check_len(__n, "vector::_M_range_insert");
 8016eaa:	4641      	mov	r1, r8
 8016eac:	4a12      	ldr	r2, [pc, #72]	@ (8016ef8 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xd4>)
 8016eae:	f7e9 fe38 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8016eb2:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 8016eb4:	f7ff fde6 	bl	8016a84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8016eb8:	4629      	mov	r1, r5
 8016eba:	4602      	mov	r2, r0
 8016ebc:	4680      	mov	r8, r0
 8016ebe:	4650      	mov	r0, sl
 8016ec0:	f7ea feb8 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016ec4:	4649      	mov	r1, r9
 8016ec6:	4602      	mov	r2, r0
 8016ec8:	4638      	mov	r0, r7
 8016eca:	f7e9 fead 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016ece:	4631      	mov	r1, r6
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	4628      	mov	r0, r5
 8016ed4:	f7ea feae 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8016ed8:	4605      	mov	r5, r0
	if (__p)
 8016eda:	f1ba 0f00 	cmp.w	sl, #0
 8016ede:	d005      	beq.n	8016eec <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8016ee0:	68a1      	ldr	r1, [r4, #8]
 8016ee2:	4650      	mov	r0, sl
 8016ee4:	eba1 010a 	sub.w	r1, r1, sl
 8016ee8:	f005 fe1e 	bl	801cb28 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8016eec:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8016ef0:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8016ef4:	60a0      	str	r0, [r4, #8]
	  return begin() + __offset;
 8016ef6:	e7c0      	b.n	8016e7a <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0+0x56>
 8016ef8:	0801ddbf 	.word	0x0801ddbf

08016efc <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>:
std::vector<uint8_t> UARTProtocol::CodeProtocol(MessageHeader message) {
 8016efc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016efe:	460e      	mov	r6, r1
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016f00:	2100      	movs	r1, #0
 8016f02:	4615      	mov	r5, r2
 8016f04:	4604      	mov	r4, r0
 8016f06:	6081      	str	r1, [r0, #8]
 8016f08:	e9c0 1100 	strd	r1, r1, [r0]
	coded_message.insert(coded_message.end(), std::begin(protocol_start), std::end(protocol_start));
 8016f0c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	@ 0x44
 8016f10:	f7ff ff88 	bl	8016e24 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	if (IsRS485(message.interface)) coded_message.push_back(message.target_address);
 8016f14:	7829      	ldrb	r1, [r5, #0]
 8016f16:	4630      	mov	r0, r6
 8016f18:	f7ff fe18 	bl	8016b4c <_ZN12UARTProtocol7IsRS485Eh>
 8016f1c:	b120      	cbz	r0, 8016f28 <_ZN12UARTProtocol12CodeProtocolE13MessageHeader+0x2c>
 8016f1e:	f105 0110 	add.w	r1, r5, #16
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7ff fe36 	bl	8016b94 <_ZNSt6vectorIhSaIhEE9push_backERKh>
	coded_message.push_back(message.source_address);
 8016f28:	f105 0111 	add.w	r1, r5, #17
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	f7ff fe31 	bl	8016b94 <_ZNSt6vectorIhSaIhEE9push_backERKh>
      { emplace_back(std::move(__x)); }
 8016f32:	a901      	add	r1, sp, #4
 8016f34:	4620      	mov	r0, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016f36:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8016f3a:	1a9b      	subs	r3, r3, r2
	coded_message.push_back((uint8_t) message.payload.size());
 8016f3c:	f88d 3004 	strb.w	r3, [sp, #4]
      { emplace_back(std::move(__x)); }
 8016f40:	f7f9 ff0e 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	coded_message.insert(coded_message.end(), message.payload.begin(), message.payload.end());
 8016f44:	6861      	ldr	r1, [r4, #4]
 8016f46:	4620      	mov	r0, r4
 8016f48:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8016f4c:	f7ff ff6a 	bl	8016e24 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
	coded_message.push_back(GetChecksum(coded_message));
 8016f50:	4621      	mov	r1, r4
 8016f52:	a801      	add	r0, sp, #4
 8016f54:	f7e9 fe74 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016f58:	a901      	add	r1, sp, #4
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	f7ff fdce 	bl	8016afc <_ZN12UARTProtocol11GetChecksumESt6vectorIhSaIhEE>
 8016f60:	f10d 0103 	add.w	r1, sp, #3
 8016f64:	f88d 0003 	strb.w	r0, [sp, #3]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7f9 fef9 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
      }
 8016f6e:	a801      	add	r0, sp, #4
 8016f70:	f7e9 fdb6 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	coded_message.insert(coded_message.end(), std::begin(protocol_end), std::end(protocol_end));
 8016f74:	4620      	mov	r0, r4
 8016f76:	6861      	ldr	r1, [r4, #4]
 8016f78:	e9d6 2314 	ldrd	r2, r3, [r6, #80]	@ 0x50
 8016f7c:	f7ff ff52 	bl	8016e24 <_ZNSt6vectorIhSaIhEE6insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEvEES6_NS4_IPKhS1_EET_SA_.isra.0>
}
 8016f80:	4620      	mov	r0, r4
 8016f82:	b004      	add	sp, #16
 8016f84:	bd70      	pop	{r4, r5, r6, pc}

08016f86 <_ZN12UARTProtocol4SendE13MessageHeader>:
HAL_StatusTypeDef UARTProtocol::Send(MessageHeader message) {
 8016f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f8a:	b08a      	sub	sp, #40	@ 0x28
 8016f8c:	460d      	mov	r5, r1
	uint8_t index = GetInterfaceIndex(ID, success);
 8016f8e:	7809      	ldrb	r1, [r1, #0]
 8016f90:	4604      	mov	r4, r0
 8016f92:	f10d 0207 	add.w	r2, sp, #7
 8016f96:	f7ff f909 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
	if (*success) {
 8016f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d042      	beq.n	8017028 <_ZN12UARTProtocol4SendE13MessageHeader+0xa2>
		return interfaces[index];
 8016fa2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return *(this->_M_impl._M_start + __n);
 8016fa4:	b200      	sxth	r0, r0
 8016fa6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 8016faa:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 8016fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8016fb0:	2b01      	cmp	r3, #1
 8016fb2:	d13b      	bne.n	801702c <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
 8016fb4:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
 8016fb8:	2b20      	cmp	r3, #32
 8016fba:	d137      	bne.n	801702c <_ZN12UARTProtocol4SendE13MessageHeader+0xa6>
	uint8_t index = GetInterfaceIndex(message.interface, &success);
 8016fbc:	f10d 0207 	add.w	r2, sp, #7
 8016fc0:	7829      	ldrb	r1, [r5, #0]
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	f7ff f8f2 	bl	80161ac <_ZN21CommunicationProtocol17GetInterfaceIndexEhPb>
 8016fc8:	4629      	mov	r1, r5
 8016fca:	b200      	sxth	r0, r0
 8016fcc:	6867      	ldr	r7, [r4, #4]
 8016fce:	f811 3b04 	ldrb.w	r3, [r1], #4
 8016fd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016fd6:	f88d 3014 	strb.w	r3, [sp, #20]
 8016fda:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8016fde:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8016fe2:	a806      	add	r0, sp, #24
 8016fe4:	f7e9 fe2c 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 8016fe8:	8a2b      	ldrh	r3, [r5, #16]
	buffers_to_transfer[index] = CodeProtocol(message); //std::vector<uint8_t>
 8016fea:	aa05      	add	r2, sp, #20
 8016fec:	4621      	mov	r1, r4
 8016fee:	a802      	add	r0, sp, #8
 8016ff0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8016ff4:	f7ff ff82 	bl	8016efc <_ZN12UARTProtocol12CodeProtocolE13MessageHeader>
 8016ff8:	a902      	add	r1, sp, #8
 8016ffa:	4638      	mov	r0, r7
 8016ffc:	f7ff fdb2 	bl	8016b64 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 8017000:	a802      	add	r0, sp, #8
 8017002:	f7e9 fd6d 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8017006:	a806      	add	r0, sp, #24
 8017008:	f7e9 fd6a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *(this->_M_impl._M_start + __n);
 801700c:	6863      	ldr	r3, [r4, #4]
	return HAL_UART_Transmit_DMA(interface_, &(buffers_to_transfer[index])[0], buffers_to_transfer[index].size());
 801700e:	4630      	mov	r0, r6
 8017010:	eb03 0208 	add.w	r2, r3, r8
 8017014:	f853 1008 	ldr.w	r1, [r3, r8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017018:	6852      	ldr	r2, [r2, #4]
 801701a:	1a52      	subs	r2, r2, r1
 801701c:	b292      	uxth	r2, r2
 801701e:	f7f4 fd77 	bl	800bb10 <HAL_UART_Transmit_DMA>
}
 8017022:	b00a      	add	sp, #40	@ 0x28
 8017024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!success) return HAL_ERROR;
 8017028:	2001      	movs	r0, #1
 801702a:	e7fa      	b.n	8017022 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>
	if (interface_->hdmatx->State != HAL_DMA_STATE_READY || interface_->gState != HAL_UART_STATE_READY) return HAL_BUSY;
 801702c:	2002      	movs	r0, #2
 801702e:	e7f8      	b.n	8017022 <_ZN12UARTProtocol4SendE13MessageHeader+0x9c>

08017030 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8017030:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017032:	b170      	cbz	r0, 8017052 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017034:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8017038:	d306      	bcc.n	8017048 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801703a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801703e:	d301      	bcc.n	8017044 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8017040:	f005 fe49 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8017044:	f005 fe44 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017048:	0080      	lsls	r0, r0, #2
      }
 801704a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801704e:	f005 bd90 	b.w	801cb72 <_Znwj>
 8017052:	bd08      	pop	{r3, pc}

08017054 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017054:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 8017056:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017058:	d006      	beq.n	8017068 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801705a:	da01      	bge.n	8017060 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 801705c:	f005 fe38 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 8017060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017064:	f005 bd85 	b.w	801cb72 <_Znwj>
 8017068:	bd08      	pop	{r3, pc}

0801706a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>:
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801706a:	2800      	cmp	r0, #0
      _M_allocate(size_t __n)
 801706c:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801706e:	d006      	beq.n	801707e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0x14>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017070:	da01      	bge.n	8017076 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0+0xc>
	    std::__throw_bad_alloc();
 8017072:	f005 fe2d 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
      }
 8017076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801707a:	f005 bd7a 	b.w	801cb72 <_Znwj>
 801707e:	bd08      	pop	{r3, pc}

08017080 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8017080:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017082:	491e      	ldr	r1, [pc, #120]	@ (80170fc <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8017084:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017086:	481e      	ldr	r0, [pc, #120]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8017088:	f005 fe0a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801708c:	bb40      	cbnz	r0, 80170e0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801708e:	491c      	ldr	r1, [pc, #112]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8017090:	4608      	mov	r0, r1
 8017092:	f005 fe05 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017096:	bb28      	cbnz	r0, 80170e4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017098:	491a      	ldr	r1, [pc, #104]	@ (8017104 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 801709a:	4819      	ldr	r0, [pc, #100]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 801709c:	f005 fe00 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80170a0:	bb10      	cbnz	r0, 80170e8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80170a2:	4919      	ldr	r1, [pc, #100]	@ (8017108 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 80170a4:	4816      	ldr	r0, [pc, #88]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80170a6:	f005 fdfb 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80170aa:	b9f8      	cbnz	r0, 80170ec <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80170ac:	4917      	ldr	r1, [pc, #92]	@ (801710c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 80170ae:	4814      	ldr	r0, [pc, #80]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80170b0:	f005 fdf6 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80170b4:	b9e0      	cbnz	r0, 80170f0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80170b6:	4916      	ldr	r1, [pc, #88]	@ (8017110 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 80170b8:	4811      	ldr	r0, [pc, #68]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80170ba:	f005 fdf1 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80170be:	b9c8      	cbnz	r0, 80170f4 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80170c0:	4914      	ldr	r1, [pc, #80]	@ (8017114 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 80170c2:	480f      	ldr	r0, [pc, #60]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80170c4:	f005 fdec 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80170c8:	b9b0      	cbnz	r0, 80170f8 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80170ca:	4913      	ldr	r1, [pc, #76]	@ (8017118 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 80170cc:	480c      	ldr	r0, [pc, #48]	@ (8017100 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 80170ce:	f005 fde7 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80170d2:	2800      	cmp	r0, #0
 80170d4:	bf14      	ite	ne
 80170d6:	2309      	movne	r3, #9
 80170d8:	2300      	moveq	r3, #0
 80170da:	7020      	strb	r0, [r4, #0]
}
 80170dc:	4618      	mov	r0, r3
 80170de:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80170e0:	2300      	movs	r3, #0
 80170e2:	e7fa      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80170e4:	2301      	movs	r3, #1
 80170e6:	e7f8      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80170e8:	2302      	movs	r3, #2
 80170ea:	e7f6      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80170ec:	2303      	movs	r3, #3
 80170ee:	e7f4      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80170f0:	2304      	movs	r3, #4
 80170f2:	e7f2      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80170f4:	2306      	movs	r3, #6
 80170f6:	e7f0      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80170f8:	2308      	movs	r3, #8
 80170fa:	e7ee      	b.n	80170da <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 80170fc:	0801e1c4 	.word	0x0801e1c4
 8017100:	0801e1bc 	.word	0x0801e1bc
 8017104:	0801e1ac 	.word	0x0801e1ac
 8017108:	0801e1a4 	.word	0x0801e1a4
 801710c:	0801e1cc 	.word	0x0801e1cc
 8017110:	0801e1b4 	.word	0x0801e1b4
 8017114:	0801e19c 	.word	0x0801e19c
 8017118:	0801e194 	.word	0x0801e194

0801711c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801711c:	491e      	ldr	r1, [pc, #120]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801711e:	b510      	push	{r4, lr}
 8017120:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017122:	4608      	mov	r0, r1
 8017124:	f005 fdbc 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017128:	bb40      	cbnz	r0, 801717c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801712a:	491c      	ldr	r1, [pc, #112]	@ (801719c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 801712c:	481a      	ldr	r0, [pc, #104]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801712e:	f005 fdb7 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017132:	bb28      	cbnz	r0, 8017180 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017134:	491a      	ldr	r1, [pc, #104]	@ (80171a0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8017136:	4818      	ldr	r0, [pc, #96]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8017138:	f005 fdb2 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801713c:	bb10      	cbnz	r0, 8017184 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801713e:	4919      	ldr	r1, [pc, #100]	@ (80171a4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8017140:	4815      	ldr	r0, [pc, #84]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8017142:	f005 fdad 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017146:	b9f8      	cbnz	r0, 8017188 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017148:	4917      	ldr	r1, [pc, #92]	@ (80171a8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801714a:	4813      	ldr	r0, [pc, #76]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801714c:	f005 fda8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017150:	b9e0      	cbnz	r0, 801718c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017152:	4916      	ldr	r1, [pc, #88]	@ (80171ac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8017154:	4810      	ldr	r0, [pc, #64]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8017156:	f005 fda3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801715a:	b9c8      	cbnz	r0, 8017190 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801715c:	4914      	ldr	r1, [pc, #80]	@ (80171b0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801715e:	480e      	ldr	r0, [pc, #56]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8017160:	f005 fd9e 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017164:	b9b0      	cbnz	r0, 8017194 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8017166:	4913      	ldr	r1, [pc, #76]	@ (80171b4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8017168:	480b      	ldr	r0, [pc, #44]	@ (8017198 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801716a:	f005 fd99 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801716e:	2800      	cmp	r0, #0
 8017170:	bf14      	ite	ne
 8017172:	2309      	movne	r3, #9
 8017174:	2300      	moveq	r3, #0
 8017176:	7020      	strb	r0, [r4, #0]
}
 8017178:	4618      	mov	r0, r3
 801717a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801717c:	2300      	movs	r3, #0
 801717e:	e7fa      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017180:	2301      	movs	r3, #1
 8017182:	e7f8      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017184:	2302      	movs	r3, #2
 8017186:	e7f6      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8017188:	2303      	movs	r3, #3
 801718a:	e7f4      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801718c:	2304      	movs	r3, #4
 801718e:	e7f2      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017190:	2306      	movs	r3, #6
 8017192:	e7f0      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017194:	2308      	movs	r3, #8
 8017196:	e7ee      	b.n	8017176 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8017198:	0801e1c4 	.word	0x0801e1c4
 801719c:	0801e1bc 	.word	0x0801e1bc
 80171a0:	0801e1ac 	.word	0x0801e1ac
 80171a4:	0801e1a4 	.word	0x0801e1a4
 80171a8:	0801e1cc 	.word	0x0801e1cc
 80171ac:	0801e1b4 	.word	0x0801e1b4
 80171b0:	0801e19c 	.word	0x0801e19c
 80171b4:	0801e194 	.word	0x0801e194

080171b8 <_ZN10Publishers4InitEP9RegistersP13Communication>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 */
void Publishers::Init(Registers* registers_, Communication* communication_) {
 80171b8:	b510      	push	{r4, lr}
	registers = registers_;
	communication = communication_;
 80171ba:	e9c0 1201 	strd	r1, r2, [r0, #4]

	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 80171be:	2101      	movs	r1, #1
void Publishers::Init(Registers* registers_, Communication* communication_) {
 80171c0:	4604      	mov	r4, r0
	PublishersSemaphore = osSemaphoreNew(1,1,NULL);
 80171c2:	2200      	movs	r2, #0
 80171c4:	4608      	mov	r0, r1
 80171c6:	f7f5 fdd5 	bl	800cd74 <osSemaphoreNew>
 80171ca:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(PublishersSemaphore);
}
 80171cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(PublishersSemaphore);
 80171d0:	f7f5 be60 	b.w	800ce94 <osSemaphoreRelease>

080171d4 <_ZN10Publishers13FindPublisherEhPb>:
 *
 * @param input ID: the publisher ID
 * @param output success: whether successful
 * @return the publisher pointer
 */
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 80171d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171d6:	4604      	mov	r4, r0
 80171d8:	460f      	mov	r7, r1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	f04f 31ff 	mov.w	r1, #4294967295
Publisher* Publishers::FindPublisher(uint8_t ID, bool* success) {
 80171e0:	4616      	mov	r6, r2
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80171e2:	f7f5 fe23 	bl	800ce2c <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80171e6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
	for (Publisher &publisher : publishers) {
 80171ea:	429a      	cmp	r2, r3
 80171ec:	461d      	mov	r5, r3
 80171ee:	d105      	bne.n	80171fc <_ZN10Publishers13FindPublisherEhPb+0x28>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publisher_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80171f0:	6820      	ldr	r0, [r4, #0]
 80171f2:	f7f5 fe4f 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
	return NULL;
 80171f6:	2300      	movs	r3, #0
 80171f8:	461d      	mov	r5, r3
 80171fa:	e008      	b.n	801720e <_ZN10Publishers13FindPublisherEhPb+0x3a>
		if (publisher.ID == ID) {
 80171fc:	462b      	mov	r3, r5
 80171fe:	f813 1b20 	ldrb.w	r1, [r3], #32
 8017202:	42b9      	cmp	r1, r7
 8017204:	d1f1      	bne.n	80171ea <_ZN10Publishers13FindPublisherEhPb+0x16>
			osSemaphoreRelease(PublishersSemaphore);
 8017206:	6820      	ldr	r0, [r4, #0]
 8017208:	f7f5 fe44 	bl	800ce94 <osSemaphoreRelease>
 801720c:	2301      	movs	r3, #1
}
 801720e:	4628      	mov	r0, r5
			*success = true;
 8017210:	7033      	strb	r3, [r6, #0]
}
 8017212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017214 <_ZN10Publishers18SetPublisherStatusEhb>:
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 8017214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017216:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8017218:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherStatus(uint8_t ID, bool status) {
 801721c:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801721e:	f7ff ffd9 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8017222:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8017226:	4605      	mov	r5, r0
	if (!success) return false;
 8017228:	b157      	cbz	r7, 8017240 <_ZN10Publishers18SetPublisherStatusEhb+0x2c>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801722a:	f04f 31ff 	mov.w	r1, #4294967295
 801722e:	6820      	ldr	r0, [r4, #0]
 8017230:	f7f5 fdfc 	bl	800ce2c <osSemaphoreAcquire>
	publisher->counter = 0;
 8017234:	2300      	movs	r3, #0
	osSemaphoreRelease(PublishersSemaphore);
 8017236:	6820      	ldr	r0, [r4, #0]
	publisher->counter = 0;
 8017238:	80ab      	strh	r3, [r5, #4]
	publisher->activated = status;
 801723a:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 801723c:	f7f5 fe2a 	bl	800ce94 <osSemaphoreRelease>
}
 8017240:	4638      	mov	r0, r7
 8017242:	b003      	add	sp, #12
 8017244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017246 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8017246:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017248:	4611      	mov	r1, r2
 801724a:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801724c:	d108      	bne.n	8017260 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetPublisherStatus(input[0], (bool) input[1]);
 801724e:	7852      	ldrb	r2, [r2, #1]
 8017250:	7809      	ldrb	r1, [r1, #0]
 8017252:	3a00      	subs	r2, #0
 8017254:	bf18      	it	ne
 8017256:	2201      	movne	r2, #1
 8017258:	f7ff ffdc 	bl	8017214 <_ZN10Publishers18SetPublisherStatusEhb>
			return true;
 801725c:	2001      	movs	r0, #1
		}
 801725e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8017260:	2000      	movs	r0, #0
 8017262:	e7fc      	b.n	801725e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

08017264 <_ZN10Publishers21SetPublisherPrescalerEht>:
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 8017264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017266:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 8017268:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::SetPublisherPrescaler(uint8_t ID, uint16_t prescaler) {
 801726c:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801726e:	f7ff ffb1 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 8017272:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8017276:	4605      	mov	r5, r0
	if (!success) return false;
 8017278:	b147      	cbz	r7, 801728c <_ZN10Publishers21SetPublisherPrescalerEht+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801727a:	f04f 31ff 	mov.w	r1, #4294967295
 801727e:	6820      	ldr	r0, [r4, #0]
 8017280:	f7f5 fdd4 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 8017284:	6820      	ldr	r0, [r4, #0]
	publisher->prescaler = prescaler;
 8017286:	806e      	strh	r6, [r5, #2]
	osSemaphoreRelease(PublishersSemaphore);
 8017288:	f7f5 fe04 	bl	800ce94 <osSemaphoreRelease>
}
 801728c:	4638      	mov	r0, r7
 801728e:	b003      	add	sp, #12
 8017290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017292 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8017292:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 8017294:	4611      	mov	r1, r2
 8017296:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8017298:	d105      	bne.n	80172a6 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x14>
			self->SetPublisherPrescaler((uint8_t) input[0], input[1]);
 801729a:	8852      	ldrh	r2, [r2, #2]
 801729c:	7809      	ldrb	r1, [r1, #0]
 801729e:	f7ff ffe1 	bl	8017264 <_ZN10Publishers21SetPublisherPrescalerEht>
 80172a2:	2001      	movs	r0, #1
		}
 80172a4:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 80172a6:	2000      	movs	r0, #0
 80172a8:	e7fc      	b.n	80172a4 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE1_4_FUNES0_tS1_t+0x12>

080172aa <_ZN10Publishers10StopTopicsEh>:
bool Publishers::StopTopics(uint8_t ID) {
 80172aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80172ac:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::StopTopics(uint8_t ID) {
 80172b0:	4604      	mov	r4, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80172b2:	f7ff ff8f 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80172b6:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80172ba:	4605      	mov	r5, r0
	if (!success) return false;
 80172bc:	b166      	cbz	r6, 80172d8 <_ZN10Publishers10StopTopicsEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80172be:	f04f 31ff 	mov.w	r1, #4294967295
 80172c2:	6820      	ldr	r0, [r4, #0]
 80172c4:	f7f5 fdb2 	bl	800ce2c <osSemaphoreAcquire>
		topic.activated = false;
 80172c8:	2100      	movs	r1, #0
 80172ca:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d105      	bne.n	80172de <_ZN10Publishers10StopTopicsEh+0x34>
	osSemaphoreRelease(PublishersSemaphore);
 80172d2:	6820      	ldr	r0, [r4, #0]
 80172d4:	f7f5 fdde 	bl	800ce94 <osSemaphoreRelease>
}
 80172d8:	4630      	mov	r0, r6
 80172da:	b002      	add	sp, #8
 80172dc:	bd70      	pop	{r4, r5, r6, pc}
		topic.activated = false;
 80172de:	f803 1b04 	strb.w	r1, [r3], #4
	return *this;
 80172e2:	e7f4      	b.n	80172ce <_ZN10Publishers10StopTopicsEh+0x24>

080172e4 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			self->StopTopics(*input);
 80172e4:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 80172e6:	b508      	push	{r3, lr}
			self->StopTopics(*input);
 80172e8:	f7ff ffdf 	bl	80172aa <_ZN10Publishers10StopTopicsEh>
		}
 80172ec:	2001      	movs	r0, #1
 80172ee:	bd08      	pop	{r3, pc}

080172f0 <_ZN10Publishers23UnlinkFromAllInterfacesEh>:
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80172f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Publisher* publisher = FindPublisher(ID, &success);
 80172f2:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromAllInterfaces(uint8_t ID) {
 80172f6:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 80172f8:	f7ff ff6c 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80172fc:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 8017300:	4604      	mov	r4, r0
	if (!success) return false;
 8017302:	b166      	cbz	r6, 801731e <_ZN10Publishers23UnlinkFromAllInterfacesEh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017304:	f04f 31ff 	mov.w	r1, #4294967295
 8017308:	6828      	ldr	r0, [r5, #0]
 801730a:	f7f5 fd8f 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801730e:	6828      	ldr	r0, [r5, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017310:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8017314:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 8017316:	bf18      	it	ne
 8017318:	60e3      	strne	r3, [r4, #12]
 801731a:	f7f5 fdbb 	bl	800ce94 <osSemaphoreRelease>
}
 801731e:	4630      	mov	r0, r6
 8017320:	b002      	add	sp, #8
 8017322:	bd70      	pop	{r4, r5, r6, pc}

08017324 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE5_4_FUNES0_tS1_t>:
			self->UnlinkFromAllInterfaces(*input);
 8017324:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017326:	b508      	push	{r3, lr}
			self->UnlinkFromAllInterfaces(*input);
 8017328:	f7ff ffe2 	bl	80172f0 <_ZN10Publishers23UnlinkFromAllInterfacesEh>
		}
 801732c:	2001      	movs	r0, #1
 801732e:	bd08      	pop	{r3, pc}

08017330 <_ZN10Publishers9FindTopicEhtPb>:
 * @param input ID: the publisher ID
 * @param input topic_ID: the topic ID / register address to find
 * @param output success: whether successful
 * @return the topic pointer
 */
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8017330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017332:	461c      	mov	r4, r3
 8017334:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8017336:	461a      	mov	r2, r3
Topic* Publishers::FindTopic(uint8_t ID, uint16_t topic_ID, bool* success) {
 8017338:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 801733a:	f7ff ff4b 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 801733e:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 8017340:	4605      	mov	r5, r0
	if (not *success)
 8017342:	b173      	cbz	r3, 8017362 <_ZN10Publishers9FindTopicEhtPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017344:	f04f 31ff 	mov.w	r1, #4294967295
 8017348:	6830      	ldr	r0, [r6, #0]
 801734a:	f7f5 fd6f 	bl	800ce2c <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801734e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (Topic &topic : publisher->topics) {
 8017352:	429a      	cmp	r2, r3
 8017354:	461d      	mov	r5, r3
 8017356:	d106      	bne.n	8017366 <_ZN10Publishers9FindTopicEhtPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return topic_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 8017358:	6830      	ldr	r0, [r6, #0]
 801735a:	f7f5 fd9b 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
 801735e:	2300      	movs	r3, #0
 8017360:	7023      	strb	r3, [r4, #0]
		return NULL;
 8017362:	2500      	movs	r5, #0
 8017364:	e008      	b.n	8017378 <_ZN10Publishers9FindTopicEhtPb+0x48>
		if (topic.ID == topic_ID) {
 8017366:	8869      	ldrh	r1, [r5, #2]
 8017368:	1d2b      	adds	r3, r5, #4
 801736a:	42b9      	cmp	r1, r7
 801736c:	d1f1      	bne.n	8017352 <_ZN10Publishers9FindTopicEhtPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 801736e:	6830      	ldr	r0, [r6, #0]
 8017370:	f7f5 fd90 	bl	800ce94 <osSemaphoreRelease>
			*success = true;
 8017374:	2301      	movs	r3, #1
 8017376:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 8017378:	4628      	mov	r0, r5
 801737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801737c <_ZN10Publishers14SetTopicStatusEhtb>:
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 801737c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801737e:	461e      	mov	r6, r3
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8017380:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetTopicStatus(uint8_t ID, uint16_t topic_ID, bool status) {
 8017384:	4604      	mov	r4, r0
	Topic* topic = FindTopic(ID, topic_ID, &success);
 8017386:	f7ff ffd3 	bl	8017330 <_ZN10Publishers9FindTopicEhtPb>
	if (!success) return false;
 801738a:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Topic* topic = FindTopic(ID, topic_ID, &success);
 801738e:	4605      	mov	r5, r0
	if (!success) return false;
 8017390:	b147      	cbz	r7, 80173a4 <_ZN10Publishers14SetTopicStatusEhtb+0x28>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017392:	f04f 31ff 	mov.w	r1, #4294967295
 8017396:	6820      	ldr	r0, [r4, #0]
 8017398:	f7f5 fd48 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(PublishersSemaphore);
 801739c:	6820      	ldr	r0, [r4, #0]
	topic->activated = status;
 801739e:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(PublishersSemaphore);
 80173a0:	f7f5 fd78 	bl	800ce94 <osSemaphoreRelease>
}
 80173a4:	4638      	mov	r0, r7
 80173a6:	b003      	add	sp, #12
 80173a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080173aa <_ZN10Publishers13ActivateTopicEht>:
	return SetTopicStatus(ID, topic_ID, true);
 80173aa:	2301      	movs	r3, #1
 80173ac:	f7ff bfe6 	b.w	801737c <_ZN10Publishers14SetTopicStatusEhtb>

080173b0 <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 80173b0:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80173b2:	4611      	mov	r1, r2
 80173b4:	b508      	push	{r3, lr}
			if (length != 3) return false;
 80173b6:	d109      	bne.n	80173cc <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1c>
			self->SetTopicStatus((uint8_t) input[0], input[1], (bool) input[2]);
 80173b8:	8893      	ldrh	r3, [r2, #4]
 80173ba:	7809      	ldrb	r1, [r1, #0]
 80173bc:	3b00      	subs	r3, #0
 80173be:	8852      	ldrh	r2, [r2, #2]
 80173c0:	bf18      	it	ne
 80173c2:	2301      	movne	r3, #1
 80173c4:	f7ff ffda 	bl	801737c <_ZN10Publishers14SetTopicStatusEhtb>
			return true;
 80173c8:	2001      	movs	r0, #1
		}
 80173ca:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 80173cc:	2000      	movs	r0, #0
 80173ce:	e7fc      	b.n	80173ca <_ZZN10Publishers12AddRegistersEvENUlPvtPttE0_4_FUNES0_tS1_t+0x1a>

080173d0 <_ZN10Publishers20FindPublishInterfaceEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information pointer
 */
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 80173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d2:	461c      	mov	r4, r3
 80173d4:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 80173d6:	461a      	mov	r2, r3
PublishInterface* Publishers::FindPublishInterface(uint8_t ID, uint8_t interface_ID, bool* success) {
 80173d8:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, success);
 80173da:	f7ff fefb 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 80173de:	7823      	ldrb	r3, [r4, #0]
	Publisher* publisher = FindPublisher(ID, success);
 80173e0:	4606      	mov	r6, r0
	if (not *success)
 80173e2:	b173      	cbz	r3, 8017402 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x32>
		return NULL;

	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80173e4:	f04f 31ff 	mov.w	r1, #4294967295
 80173e8:	6828      	ldr	r0, [r5, #0]
 80173ea:	f7f5 fd1f 	bl	800ce2c <osSemaphoreAcquire>
 80173ee:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
	for (PublishInterface &interface : publisher->interfaces) {
 80173f2:	429a      	cmp	r2, r3
 80173f4:	461e      	mov	r6, r3
 80173f6:	d106      	bne.n	8017406 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x36>
			osSemaphoreRelease(PublishersSemaphore);
			*success = true;
			return publish_interface_pointer;
		}
	}
	osSemaphoreRelease(PublishersSemaphore);
 80173f8:	6828      	ldr	r0, [r5, #0]
 80173fa:	f7f5 fd4b 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
 80173fe:	2300      	movs	r3, #0
 8017400:	7023      	strb	r3, [r4, #0]
		return NULL;
 8017402:	2600      	movs	r6, #0
 8017404:	e009      	b.n	801741a <_ZN10Publishers20FindPublishInterfaceEhhPb+0x4a>
		if (interface.interface == interface_ID) {
 8017406:	4633      	mov	r3, r6
 8017408:	f813 1b02 	ldrb.w	r1, [r3], #2
 801740c:	42b9      	cmp	r1, r7
 801740e:	d1f0      	bne.n	80173f2 <_ZN10Publishers20FindPublishInterfaceEhhPb+0x22>
			osSemaphoreRelease(PublishersSemaphore);
 8017410:	6828      	ldr	r0, [r5, #0]
 8017412:	f7f5 fd3f 	bl	800ce94 <osSemaphoreRelease>
			*success = true;
 8017416:	2301      	movs	r3, #1
 8017418:	7023      	strb	r3, [r4, #0]
	return NULL;
}
 801741a:	4630      	mov	r0, r6
 801741c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801741e <_ZN10Publishers17SetPublishAddressEhhh>:
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 801741e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017420:	461e      	mov	r6, r3
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8017422:	f10d 0307 	add.w	r3, sp, #7
bool Publishers::SetPublishAddress(uint8_t ID, uint8_t interface_ID, uint8_t address) {
 8017426:	4604      	mov	r4, r0
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8017428:	f7ff ffd2 	bl	80173d0 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 801742c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	PublishInterface* interface = FindPublishInterface(ID, interface_ID, &success);
 8017430:	4605      	mov	r5, r0
	if (success) return false;
 8017432:	b95b      	cbnz	r3, 801744c <_ZN10Publishers17SetPublishAddressEhhh+0x2e>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017434:	f04f 31ff 	mov.w	r1, #4294967295
 8017438:	6820      	ldr	r0, [r4, #0]
 801743a:	f7f5 fcf7 	bl	800ce2c <osSemaphoreAcquire>
	interface->address = address;
 801743e:	706e      	strb	r6, [r5, #1]
	osSemaphoreRelease(PublishersSemaphore);
 8017440:	6820      	ldr	r0, [r4, #0]
 8017442:	f7f5 fd27 	bl	800ce94 <osSemaphoreRelease>
	return true;
 8017446:	2001      	movs	r0, #1
}
 8017448:	b002      	add	sp, #8
 801744a:	bd70      	pop	{r4, r5, r6, pc}
	if (success) return false;
 801744c:	2000      	movs	r0, #0
 801744e:	e7fb      	b.n	8017448 <_ZN10Publishers17SetPublishAddressEhhh+0x2a>

08017450 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 8017450:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017452:	4611      	mov	r1, r2
 8017454:	b508      	push	{r3, lr}
			if (length != 3) return false;
 8017456:	d106      	bne.n	8017466 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x16>
			self->SetPublishAddress(input[0], input[1], input[2]);
 8017458:	7893      	ldrb	r3, [r2, #2]
 801745a:	7809      	ldrb	r1, [r1, #0]
 801745c:	7852      	ldrb	r2, [r2, #1]
 801745e:	f7ff ffde 	bl	801741e <_ZN10Publishers17SetPublishAddressEhhh>
			return true;
 8017462:	2001      	movs	r0, #1
		}
 8017464:	bd08      	pop	{r3, pc}
			if (length != 3) return false;
 8017466:	2000      	movs	r0, #0
 8017468:	e7fc      	b.n	8017464 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t+0x14>

0801746a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>:
 * @param input ID: the publisher ID
 * @param input interface_ID: the interface ID to find
 * @param output success: whether successful
 * @return the interface information index
 */
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 801746a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801746c:	461d      	mov	r5, r3
 801746e:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, success);
 8017470:	461a      	mov	r2, r3
uint8_t Publishers::FindPublishInterfaceIndex(uint8_t ID, uint8_t interface_ID, bool* success) {
 8017472:	4606      	mov	r6, r0
	Publisher* publisher = FindPublisher(ID, success);
 8017474:	f7ff feae 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (not *success)
 8017478:	782b      	ldrb	r3, [r5, #0]
	Publisher* publisher = FindPublisher(ID, success);
 801747a:	4604      	mov	r4, r0
	if (not *success)
 801747c:	b18b      	cbz	r3, 80174a2 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x38>
		return 0;

	uint8_t index = 0;
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801747e:	f04f 31ff 	mov.w	r1, #4294967295
 8017482:	6830      	ldr	r0, [r6, #0]
 8017484:	f7f5 fcd2 	bl	800ce2c <osSemaphoreAcquire>
	for (PublishInterface &interface : publisher->interfaces) {
 8017488:	2100      	movs	r1, #0
      : _M_current(__i) { }
 801748a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
		if (interface.interface == interface_ID) {
 801748e:	1e9c      	subs	r4, r3, #2
	for (PublishInterface &interface : publisher->interfaces) {
 8017490:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017494:	4290      	cmp	r0, r2
 8017496:	d106      	bne.n	80174a6 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x3c>
			*success = true;
			return index;
		}
		index++;
	}
	osSemaphoreRelease(PublishersSemaphore);
 8017498:	6830      	ldr	r0, [r6, #0]
 801749a:	f7f5 fcfb 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
 801749e:	2300      	movs	r3, #0
 80174a0:	702b      	strb	r3, [r5, #0]
		return 0;
 80174a2:	2400      	movs	r4, #0
 80174a4:	e00a      	b.n	80174bc <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x52>
		if (interface.interface == interface_ID) {
 80174a6:	1c4a      	adds	r2, r1, #1
 80174a8:	f814 c012 	ldrb.w	ip, [r4, r2, lsl #1]
 80174ac:	45bc      	cmp	ip, r7
 80174ae:	d107      	bne.n	80174c0 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x56>
			osSemaphoreRelease(PublishersSemaphore);
 80174b0:	6830      	ldr	r0, [r6, #0]
 80174b2:	b2cc      	uxtb	r4, r1
 80174b4:	f7f5 fcee 	bl	800ce94 <osSemaphoreRelease>
			*success = true;
 80174b8:	2301      	movs	r3, #1
 80174ba:	702b      	strb	r3, [r5, #0]
	return 0;
}
 80174bc:	4620      	mov	r0, r4
 80174be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174c0:	4611      	mov	r1, r2
 80174c2:	e7e5      	b.n	8017490 <_ZN10Publishers25FindPublishInterfaceIndexEhhPb+0x26>

080174c4 <_ZN10Publishers19UnlinkFromInterfaceEhh>:
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 80174c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174c6:	4617      	mov	r7, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80174c8:	f10d 0207 	add.w	r2, sp, #7
bool Publishers::UnlinkFromInterface(uint8_t ID, uint8_t interface_ID) {
 80174cc:	4605      	mov	r5, r0
 80174ce:	460e      	mov	r6, r1
	Publisher* publisher = FindPublisher(ID, &success);
 80174d0:	f7ff fe80 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80174d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	Publisher* publisher = FindPublisher(ID, &success);
 80174d8:	4604      	mov	r4, r0
	if (!success) return false;
 80174da:	b91b      	cbnz	r3, 80174e4 <_ZN10Publishers19UnlinkFromInterfaceEhh+0x20>
 80174dc:	2700      	movs	r7, #0
}
 80174de:	4638      	mov	r0, r7
 80174e0:	b003      	add	sp, #12
 80174e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80174e4:	463a      	mov	r2, r7
 80174e6:	4631      	mov	r1, r6
 80174e8:	f10d 0307 	add.w	r3, sp, #7
 80174ec:	4628      	mov	r0, r5
 80174ee:	f7ff ffbc 	bl	801746a <_ZN10Publishers25FindPublishInterfaceIndexEhhPb>
	if (!success) return false;
 80174f2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindPublishInterfaceIndex(ID, interface_ID, &success);
 80174f6:	4606      	mov	r6, r0
	if (!success) return false;
 80174f8:	2f00      	cmp	r7, #0
 80174fa:	d0ef      	beq.n	80174dc <_ZN10Publishers19UnlinkFromInterfaceEhh+0x18>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80174fc:	f04f 31ff 	mov.w	r1, #4294967295
 8017500:	6828      	ldr	r0, [r5, #0]
 8017502:	f7f5 fc93 	bl	800ce2c <osSemaphoreAcquire>
      { return __normal_iterator(_M_current + __n); }
 8017506:	68a0      	ldr	r0, [r4, #8]
 8017508:	b236      	sxth	r6, r6
      : _M_current(__i) { }
 801750a:	68e2      	ldr	r2, [r4, #12]
      { return __normal_iterator(_M_current + __n); }
 801750c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8017510:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 8017512:	4291      	cmp	r1, r2
 8017514:	d002      	beq.n	801751c <_ZN10Publishers19UnlinkFromInterfaceEhh+0x58>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017516:	1a52      	subs	r2, r2, r1
 8017518:	f006 faa8 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 801751c:	68e3      	ldr	r3, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 801751e:	6828      	ldr	r0, [r5, #0]
 8017520:	3b02      	subs	r3, #2
 8017522:	60e3      	str	r3, [r4, #12]
 8017524:	f7f5 fcb6 	bl	800ce94 <osSemaphoreRelease>
	return true;
 8017528:	e7d9      	b.n	80174de <_ZN10Publishers19UnlinkFromInterfaceEhh+0x1a>

0801752a <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801752a:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801752c:	4611      	mov	r1, r2
 801752e:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8017530:	d105      	bne.n	801753e <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x14>
			self->UnlinkFromInterface(input[0], input[1]);
 8017532:	7852      	ldrb	r2, [r2, #1]
 8017534:	7809      	ldrb	r1, [r1, #0]
 8017536:	f7ff ffc5 	bl	80174c4 <_ZN10Publishers19UnlinkFromInterfaceEhh>
 801753a:	2001      	movs	r0, #1
		}
 801753c:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801753e:	2000      	movs	r0, #0
 8017540:	e7fc      	b.n	801753c <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t+0x12>

08017542 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8017542:	b510      	push	{r4, lr}
 8017544:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8017546:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8017548:	b118      	cbz	r0, 8017552 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801754a:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801754c:	1a09      	subs	r1, r1, r0
 801754e:	f005 faeb 	bl	801cb28 <_ZdlPvj>
      }
 8017552:	4620      	mov	r0, r4
 8017554:	bd10      	pop	{r4, pc}

08017556 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8017556:	b510      	push	{r4, lr}
 8017558:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 801755a:	6800      	ldr	r0, [r0, #0]
	if (__p)
 801755c:	b118      	cbz	r0, 8017566 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801755e:	68a1      	ldr	r1, [r4, #8]
 8017560:	1a09      	subs	r1, r1, r0
 8017562:	f005 fae1 	bl	801cb28 <_ZdlPvj>
      }
 8017566:	4620      	mov	r0, r4
 8017568:	bd10      	pop	{r4, pc}

0801756a <_ZN9PublisherD1Ev>:
struct Publisher {
 801756a:	b510      	push	{r4, lr}
 801756c:	4604      	mov	r4, r0
      }
 801756e:	3014      	adds	r0, #20
 8017570:	f7ff fff1 	bl	8017556 <_ZNSt12_Vector_baseI5TopicSaIS0_EED1Ev>
 8017574:	f104 0008 	add.w	r0, r4, #8
 8017578:	f7ff ffe3 	bl	8017542 <_ZNSt12_Vector_baseI16PublishInterfaceSaIS0_EED1Ev>
 801757c:	4620      	mov	r0, r4
 801757e:	bd10      	pop	{r4, pc}

08017580 <_ZN10PublishersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017580:	2200      	movs	r2, #0
 8017582:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017586:	6142      	str	r2, [r0, #20]
}
 8017588:	4770      	bx	lr

0801758a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801758a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758c:	4604      	mov	r4, r0
 801758e:	460f      	mov	r7, r1
 8017590:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8017592:	2600      	movs	r6, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8017594:	42bc      	cmp	r4, r7
 8017596:	4628      	mov	r0, r5
 8017598:	f105 0520 	add.w	r5, r5, #32
 801759c:	d100      	bne.n	80175a0 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 801759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a0:	7823      	ldrb	r3, [r4, #0]

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80175a2:	4620      	mov	r0, r4
 80175a4:	f805 3c20 	strb.w	r3, [r5, #-32]
 80175a8:	7863      	ldrb	r3, [r4, #1]
 80175aa:	f805 3c1f 	strb.w	r3, [r5, #-31]
 80175ae:	8863      	ldrh	r3, [r4, #2]
 80175b0:	f825 3c1e 	strh.w	r3, [r5, #-30]
 80175b4:	88a3      	ldrh	r3, [r4, #4]
 80175b6:	f825 3c1c 	strh.w	r3, [r5, #-28]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80175ba:	68a3      	ldr	r3, [r4, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80175bc:	60a6      	str	r6, [r4, #8]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80175be:	f845 3c18 	str.w	r3, [r5, #-24]
 80175c2:	68e3      	ldr	r3, [r4, #12]
 80175c4:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 80175c8:	6923      	ldr	r3, [r4, #16]
 80175ca:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80175ce:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80175d0:	6166      	str	r6, [r4, #20]
 80175d2:	e9c4 6603 	strd	r6, r6, [r4, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80175d6:	f845 3c0c 	str.w	r3, [r5, #-12]
 80175da:	69a3      	ldr	r3, [r4, #24]
 80175dc:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 80175e0:	69e3      	ldr	r3, [r4, #28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80175e2:	e9c4 6606 	strd	r6, r6, [r4, #24]
	  _M_end_of_storage(__x._M_end_of_storage)
 80175e6:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 80175ea:	3420      	adds	r4, #32
 80175ec:	f7ff ffbd 	bl	801756a <_ZN9PublisherD1Ev>
 80175f0:	e7d0      	b.n	8017594 <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

080175f2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80175f2:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 80175f4:	680d      	ldr	r5, [r1, #0]
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80175f6:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 80175f8:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 80175fa:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 80175fe:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017600:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017602:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 8017604:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8017606:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017608:	688d      	ldr	r5, [r1, #8]
 801760a:	6085      	str	r5, [r0, #8]
      }
 801760c:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 801760e:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 8017610:	e9c1 3300 	strd	r3, r3, [r1]
 8017614:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8017618:	f7e9 fa62 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      }
 801761c:	b005      	add	sp, #20
 801761e:	bd30      	pop	{r4, r5, pc}

08017620 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017624:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8017628:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801762a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801762e:	ebaa 0208 	sub.w	r2, sl, r8
 8017632:	4607      	mov	r7, r0
 8017634:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8017636:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801763a:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 801763e:	d102      	bne.n	8017646 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8017640:	481e      	ldr	r0, [pc, #120]	@ (80176bc <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8017642:	f005 fb4b 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8017646:	45c2      	cmp	sl, r8
 8017648:	bf14      	ite	ne
 801764a:	4622      	movne	r2, r4
 801764c:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801764e:	eba1 0508 	sub.w	r5, r1, r8
 8017652:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017654:	d22e      	bcs.n	80176b4 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017656:	b37c      	cbz	r4, 80176b8 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017658:	429c      	cmp	r4, r3
 801765a:	bf28      	it	cs
 801765c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801765e:	00a0      	lsls	r0, r4, #2
 8017660:	f005 fa87 	bl	801cb72 <_Znwj>
 8017664:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017666:	f8db 3000 	ldr.w	r3, [fp]
      if (__count > 0)
 801766a:	2d00      	cmp	r5, #0
 801766c:	5173      	str	r3, [r6, r5]
 801766e:	dd04      	ble.n	801767a <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017670:	462a      	mov	r2, r5
 8017672:	4641      	mov	r1, r8
 8017674:	4630      	mov	r0, r6
 8017676:	f006 f9f9 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801767a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801767e:	3504      	adds	r5, #4
      if (__count > 0)
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	4435      	add	r5, r6
 8017686:	dd04      	ble.n	8017692 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017688:	4652      	mov	r2, sl
 801768a:	4649      	mov	r1, r9
 801768c:	4628      	mov	r0, r5
 801768e:	f006 fae5 	bl	801dc5c <memcpy>
      return __result + __count;
 8017692:	4455      	add	r5, sl
	if (__p)
 8017694:	f1b8 0f00 	cmp.w	r8, #0
 8017698:	d005      	beq.n	80176a6 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 801769a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801769c:	4640      	mov	r0, r8
 801769e:	eba1 0108 	sub.w	r1, r1, r8
 80176a2:	f005 fa41 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80176a6:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80176aa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80176ae:	60be      	str	r6, [r7, #8]
    }
 80176b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80176b4:	461c      	mov	r4, r3
 80176b6:	e7d2      	b.n	801765e <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80176b8:	4626      	mov	r6, r4
 80176ba:	e7d4      	b.n	8017666 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80176bc:	0801dd74 	.word	0x0801dd74

080176c0 <_ZN10Publishers8AddTopicEht>:
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 80176c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80176c4:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80176c6:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::AddTopic(uint8_t ID, uint16_t topic_ID) {
 80176ca:	4605      	mov	r5, r0
 80176cc:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 80176ce:	f7ff fd81 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80176d2:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 80176d6:	4604      	mov	r4, r0
	if (!success) return false;
 80176d8:	b927      	cbnz	r7, 80176e4 <_ZN10Publishers8AddTopicEht+0x24>
 80176da:	2700      	movs	r7, #0
}
 80176dc:	4638      	mov	r0, r7
 80176de:	b002      	add	sp, #8
 80176e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindTopic(ID, topic_ID, &success);
 80176e4:	f10d 0303 	add.w	r3, sp, #3
 80176e8:	4632      	mov	r2, r6
 80176ea:	4641      	mov	r1, r8
 80176ec:	4628      	mov	r0, r5
 80176ee:	f7ff fe1f 	bl	8017330 <_ZN10Publishers9FindTopicEhtPb>
	if (success) return false;
 80176f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d1ef      	bne.n	80176da <_ZN10Publishers8AddTopicEht+0x1a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 80176fa:	f04f 31ff 	mov.w	r1, #4294967295
 80176fe:	6828      	ldr	r0, [r5, #0]
	topic.activated = false;
 8017700:	f88d 3004 	strb.w	r3, [sp, #4]
	topic.ID = topic_ID;
 8017704:	f8ad 6006 	strh.w	r6, [sp, #6]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017708:	f7f5 fb90 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801770c:	e9d4 1306 	ldrd	r1, r3, [r4, #24]
 8017710:	4299      	cmp	r1, r3
 8017712:	d007      	beq.n	8017724 <_ZN10Publishers8AddTopicEht+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017714:	9801      	ldr	r0, [sp, #4]
 8017716:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
 801771a:	61a1      	str	r1, [r4, #24]
	osSemaphoreRelease(PublishersSemaphore);
 801771c:	6828      	ldr	r0, [r5, #0]
 801771e:	f7f5 fbb9 	bl	800ce94 <osSemaphoreRelease>
	return true;
 8017722:	e7db      	b.n	80176dc <_ZN10Publishers8AddTopicEht+0x1c>
	  _M_realloc_insert(end(), __x);
 8017724:	aa01      	add	r2, sp, #4
 8017726:	f104 0014 	add.w	r0, r4, #20
 801772a:	f7ff ff79 	bl	8017620 <_ZNSt6vectorI5TopicSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801772e:	e7f5      	b.n	801771c <_ZN10Publishers8AddTopicEht+0x5c>

08017730 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017734:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8017738:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801773a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801773e:	ebaa 0208 	sub.w	r2, sl, r8
 8017742:	4607      	mov	r7, r0
 8017744:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 8017746:	ebb3 0f62 	cmp.w	r3, r2, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801774a:	ea4f 0462 	mov.w	r4, r2, asr #1
	if (max_size() - size() < __n)
 801774e:	d102      	bne.n	8017756 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8017750:	481e      	ldr	r0, [pc, #120]	@ (80177cc <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8017752:	f005 fac3 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8017756:	45c2      	cmp	sl, r8
 8017758:	bf14      	ite	ne
 801775a:	4622      	movne	r2, r4
 801775c:	2201      	moveq	r2, #1
 801775e:	eba1 0508 	sub.w	r5, r1, r8
 8017762:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017764:	d22e      	bcs.n	80177c4 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017766:	b37c      	cbz	r4, 80177c8 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017768:	429c      	cmp	r4, r3
 801776a:	bf28      	it	cs
 801776c:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801776e:	0060      	lsls	r0, r4, #1
 8017770:	f005 f9ff 	bl	801cb72 <_Znwj>
 8017774:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017776:	f8bb 3000 	ldrh.w	r3, [fp]
      if (__count > 0)
 801777a:	2d00      	cmp	r5, #0
 801777c:	5373      	strh	r3, [r6, r5]
 801777e:	dd04      	ble.n	801778a <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017780:	462a      	mov	r2, r5
 8017782:	4641      	mov	r1, r8
 8017784:	4630      	mov	r0, r6
 8017786:	f006 f971 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801778a:	ebaa 0a09 	sub.w	sl, sl, r9
	      ++__new_finish;
 801778e:	3502      	adds	r5, #2
      if (__count > 0)
 8017790:	f1ba 0f00 	cmp.w	sl, #0
 8017794:	4435      	add	r5, r6
 8017796:	dd04      	ble.n	80177a2 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017798:	4652      	mov	r2, sl
 801779a:	4649      	mov	r1, r9
 801779c:	4628      	mov	r0, r5
 801779e:	f006 fa5d 	bl	801dc5c <memcpy>
      return __result + __count;
 80177a2:	4455      	add	r5, sl
	if (__p)
 80177a4:	f1b8 0f00 	cmp.w	r8, #0
 80177a8:	d005      	beq.n	80177b6 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
		    this->_M_impl._M_end_of_storage - __old_start);
 80177aa:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80177ac:	4640      	mov	r0, r8
 80177ae:	eba1 0108 	sub.w	r1, r1, r8
 80177b2:	f005 f9b9 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 80177b6:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80177ba:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 80177be:	60be      	str	r6, [r7, #8]
    }
 80177c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80177c4:	461c      	mov	r4, r3
 80177c6:	e7d2      	b.n	801776e <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80177c8:	4626      	mov	r6, r4
 80177ca:	e7d4      	b.n	8017776 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 80177cc:	0801dd74 	.word	0x0801dd74

080177d0 <_ZN10Publishers15LinkToInterfaceEhh>:
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 80177d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80177d4:	4616      	mov	r6, r2
	Publisher* publisher = FindPublisher(ID, &success);
 80177d6:	f10d 0203 	add.w	r2, sp, #3
bool Publishers::LinkToInterface(uint8_t ID, uint8_t interface_ID) {
 80177da:	4605      	mov	r5, r0
 80177dc:	4688      	mov	r8, r1
	Publisher* publisher = FindPublisher(ID, &success);
 80177de:	f7ff fcf9 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return false;
 80177e2:	f89d 7003 	ldrb.w	r7, [sp, #3]
	Publisher* publisher = FindPublisher(ID, &success);
 80177e6:	4604      	mov	r4, r0
	if (!success) return false;
 80177e8:	b927      	cbnz	r7, 80177f4 <_ZN10Publishers15LinkToInterfaceEhh+0x24>
 80177ea:	2700      	movs	r7, #0
}
 80177ec:	4638      	mov	r0, r7
 80177ee:	b002      	add	sp, #8
 80177f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FindPublishInterface(ID, interface_ID, &success);
 80177f4:	f10d 0303 	add.w	r3, sp, #3
 80177f8:	4632      	mov	r2, r6
 80177fa:	4641      	mov	r1, r8
 80177fc:	4628      	mov	r0, r5
 80177fe:	f7ff fde7 	bl	80173d0 <_ZN10Publishers20FindPublishInterfaceEhhPb>
	if (success) return false;
 8017802:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d1ef      	bne.n	80177ea <_ZN10Publishers15LinkToInterfaceEhh+0x1a>
	interface.address = ALL;
 801780a:	23ff      	movs	r3, #255	@ 0xff
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801780c:	f04f 31ff 	mov.w	r1, #4294967295
 8017810:	6828      	ldr	r0, [r5, #0]
	interface.address = ALL;
 8017812:	f88d 3005 	strb.w	r3, [sp, #5]
	interface.interface = interface_ID;
 8017816:	f88d 6004 	strb.w	r6, [sp, #4]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801781a:	f7f5 fb07 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801781e:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 8017822:	4299      	cmp	r1, r3
 8017824:	d008      	beq.n	8017838 <_ZN10Publishers15LinkToInterfaceEhh+0x68>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017826:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801782a:	f821 3b02 	strh.w	r3, [r1], #2
	    ++this->_M_impl._M_finish;
 801782e:	60e1      	str	r1, [r4, #12]
	osSemaphoreRelease(PublishersSemaphore);
 8017830:	6828      	ldr	r0, [r5, #0]
 8017832:	f7f5 fb2f 	bl	800ce94 <osSemaphoreRelease>
	return true;
 8017836:	e7d9      	b.n	80177ec <_ZN10Publishers15LinkToInterfaceEhh+0x1c>
	  _M_realloc_insert(end(), __x);
 8017838:	aa01      	add	r2, sp, #4
 801783a:	f104 0008 	add.w	r0, r4, #8
 801783e:	f7ff ff77 	bl	8017730 <_ZNSt6vectorI16PublishInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8017842:	e7f5      	b.n	8017830 <_ZN10Publishers15LinkToInterfaceEhh+0x60>

08017844 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8017844:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8017846:	4611      	mov	r1, r2
 8017848:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801784a:	d105      	bne.n	8017858 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			self->LinkToInterface(input[0], input[1]);
 801784c:	7852      	ldrb	r2, [r2, #1]
 801784e:	7809      	ldrb	r1, [r1, #0]
 8017850:	f7ff ffbe 	bl	80177d0 <_ZN10Publishers15LinkToInterfaceEhh>
 8017854:	2001      	movs	r0, #1
		}
 8017856:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8017858:	2000      	movs	r0, #0
 801785a:	e7fc      	b.n	8017856 <_ZZN10Publishers12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x12>

0801785c <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 801785c:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 801785e:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 8017860:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8017862:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8017864:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8017868:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 801786a:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801786c:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 801786e:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 8017870:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8017872:	688d      	ldr	r5, [r1, #8]
 8017874:	6085      	str	r5, [r0, #8]
      }
 8017876:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8017878:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 801787a:	e9c1 3300 	strd	r3, r3, [r1]
 801787e:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 8017882:	f7f9 fa21 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
      }
 8017886:	b005      	add	sp, #20
 8017888:	bd30      	pop	{r4, r5, pc}

0801788a <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>:
      _M_move_assign(vector&& __x, true_type) noexcept
 801788a:	b530      	push	{r4, r5, lr}
	  _M_start = __x._M_start;
 801788c:	680d      	ldr	r5, [r1, #0]
      _M_move_assign(vector&& __x, true_type) noexcept
 801788e:	b085      	sub	sp, #20
	  _M_end_of_storage = __x._M_end_of_storage;
 8017890:	6883      	ldr	r3, [r0, #8]
	  _M_finish = __x._M_finish;
 8017892:	e9d0 4200 	ldrd	r4, r2, [r0]
	  _M_start = __x._M_start;
 8017896:	6005      	str	r5, [r0, #0]
	  _M_finish = __x._M_finish;
 8017898:	684d      	ldr	r5, [r1, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801789a:	9303      	str	r3, [sp, #12]
	  _M_start = __x._M_start;
 801789c:	2300      	movs	r3, #0
	  _M_finish = __x._M_finish;
 801789e:	6045      	str	r5, [r0, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80178a0:	688d      	ldr	r5, [r1, #8]
 80178a2:	6085      	str	r5, [r0, #8]
      }
 80178a4:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 80178a6:	608b      	str	r3, [r1, #8]
	  _M_finish = __x._M_finish;
 80178a8:	e9c1 3300 	strd	r3, r3, [r1]
 80178ac:	e9cd 4201 	strd	r4, r2, [sp, #4]
      }
 80178b0:	f7ea fb74 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
      }
 80178b4:	b005      	add	sp, #20
 80178b6:	bd30      	pop	{r4, r5, pc}

080178b8 <_ZN9Registers11AddRegisterItEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 80178b8:	b570      	push	{r4, r5, r6, lr}
 80178ba:	4604      	mov	r4, r0
 80178bc:	b086      	sub	sp, #24
 80178be:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80178c0:	6800      	ldr	r0, [r0, #0]
 80178c2:	f04f 31ff 	mov.w	r1, #4294967295
 80178c6:	f7f5 fab1 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 80178ca:	f10d 0207 	add.w	r2, sp, #7
 80178ce:	4631      	mov	r1, r6
 80178d0:	4620      	mov	r0, r4
 80178d2:	f000 ff1a 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 80178d6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80178da:	b125      	cbz	r5, 80178e6 <_ZN9Registers11AddRegisterItEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 80178dc:	6820      	ldr	r0, [r4, #0]
 80178de:	f7f5 fad9 	bl	800ce94 <osSemaphoreRelease>
}
 80178e2:	b006      	add	sp, #24
 80178e4:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80178e6:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 80178ea:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80178ee:	f7ff fbc7 	bl	8017080 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 80178f2:	2301      	movs	r3, #1
 80178f4:	f8ad 600a 	strh.w	r6, [sp, #10]
 80178f8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80178fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8017900:	f88d 000c 	strb.w	r0, [sp, #12]
 8017904:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 8017908:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801790c:	2b00      	cmp	r3, #0
 801790e:	d0e5      	beq.n	80178dc <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8017910:	a902      	add	r1, sp, #8
 8017912:	1d20      	adds	r0, r4, #4
 8017914:	f7f8 fa8c 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 8017918:	e7e0      	b.n	80178dc <_ZN9Registers11AddRegisterItEEbt.isra.0+0x24>

0801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801791a:	b570      	push	{r4, r5, r6, lr}
 801791c:	4604      	mov	r4, r0
 801791e:	b086      	sub	sp, #24
 8017920:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017922:	6800      	ldr	r0, [r0, #0]
 8017924:	f04f 31ff 	mov.w	r1, #4294967295
 8017928:	f7f5 fa80 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801792c:	f10d 0207 	add.w	r2, sp, #7
 8017930:	4631      	mov	r1, r6
 8017932:	4620      	mov	r0, r4
 8017934:	f000 fee9 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8017938:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801793c:	b125      	cbz	r5, 8017948 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801793e:	6820      	ldr	r0, [r4, #0]
 8017940:	f7f5 faa8 	bl	800ce94 <osSemaphoreRelease>
}
 8017944:	b006      	add	sp, #24
 8017946:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017948:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801794c:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 8017950:	f7ff fbe4 	bl	801711c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 8017954:	2301      	movs	r3, #1
 8017956:	f8ad 600a 	strh.w	r6, [sp, #10]
 801795a:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801795e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 8017962:	f88d 000c 	strb.w	r0, [sp, #12]
 8017966:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801796a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801796e:	2b00      	cmp	r3, #0
 8017970:	d0e5      	beq.n	801793e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 8017972:	a902      	add	r1, sp, #8
 8017974:	1d20      	adds	r0, r4, #4
 8017976:	f7f8 fa5b 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801797a:	e7e0      	b.n	801793e <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801797c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017980:	460c      	mov	r4, r1
 8017982:	b087      	sub	sp, #28
 8017984:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017986:	f04f 31ff 	mov.w	r1, #4294967295
 801798a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801798c:	4698      	mov	r8, r3
 801798e:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017990:	f7f5 fa4c 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017994:	4621      	mov	r1, r4
 8017996:	f10d 0207 	add.w	r2, sp, #7
 801799a:	4630      	mov	r0, r6
 801799c:	f000 feb5 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80179a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80179a4:	4604      	mov	r4, r0
	if (!success) {
 80179a6:	b92b      	cbnz	r3, 80179b4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 80179a8:	6830      	ldr	r0, [r6, #0]
 80179aa:	f7f5 fa73 	bl	800ce94 <osSemaphoreRelease>
}
 80179ae:	b007      	add	sp, #28
 80179b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 80179b4:	f10d 0007 	add.w	r0, sp, #7
 80179b8:	f7ff fbb0 	bl	801711c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 80179bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d0f1      	beq.n	80179a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 80179c4:	7923      	ldrb	r3, [r4, #4]
 80179c6:	4298      	cmp	r0, r3
 80179c8:	d1ee      	bne.n	80179a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 80179ca:	3004      	adds	r0, #4
 80179cc:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80179d0:	2f00      	cmp	r7, #0
 80179d2:	d0e9      	beq.n	80179a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 80179d4:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80179d6:	e9d7 3500 	ldrd	r3, r5, [r7]
 80179da:	1aea      	subs	r2, r5, r3
 80179dc:	1112      	asrs	r2, r2, #4
 80179de:	b9b1      	cbnz	r1, 8017a0e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 80179e0:	7861      	ldrb	r1, [r4, #1]
 80179e2:	b9a1      	cbnz	r1, 8017a0e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 80179e4:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80179e6:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 80179e8:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 80179ea:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80179ec:	42a9      	cmp	r1, r5
		callback.write = write;
 80179ee:	e9cd 9803 	strd	r9, r8, [sp, #12]
 80179f2:	d008      	beq.n	8017a06 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 80179f4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80179f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80179fa:	3510      	adds	r5, #16
 80179fc:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 80179fe:	2301      	movs	r3, #1
 8017a00:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8017a02:	7223      	strb	r3, [r4, #8]
 8017a04:	e7d0      	b.n	80179a8 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8017a06:	4638      	mov	r0, r7
 8017a08:	f7f8 fffa 	bl	8010a00 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017a0c:	e7f7      	b.n	80179fe <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017a0e:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8017a10:	4291      	cmp	r1, r2
 8017a12:	d302      	bcc.n	8017a1a <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017a14:	4803      	ldr	r0, [pc, #12]	@ (8017a24 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8017a16:	f005 f964 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8017a1a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017a1e:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8017a22:	e7ec      	b.n	80179fe <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8017a24:	0801dfb4 	.word	0x0801dfb4

08017a28 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a2c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8017a30:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 8017a32:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a36:	eba9 0208 	sub.w	r2, r9, r8
 8017a3a:	4607      	mov	r7, r0
 8017a3c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 8017a3e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a42:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 8017a46:	d102      	bne.n	8017a4e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8017a48:	4820      	ldr	r0, [pc, #128]	@ (8017acc <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 8017a4a:	f005 f947 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 8017a4e:	45c1      	cmp	r9, r8
 8017a50:	bf14      	ite	ne
 8017a52:	4622      	movne	r2, r4
 8017a54:	2201      	moveq	r2, #1
 8017a56:	eba1 0508 	sub.w	r5, r1, r8
 8017a5a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017a5c:	d231      	bcs.n	8017ac2 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017a5e:	b394      	cbz	r4, 8017ac6 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017a60:	429c      	cmp	r4, r3
 8017a62:	bf28      	it	cs
 8017a64:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017a66:	0120      	lsls	r0, r4, #4
 8017a68:	f005 f883 	bl	801cb72 <_Znwj>
 8017a6c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017a6e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 8017a72:	2d00      	cmp	r5, #0
 8017a74:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8017a78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8017a7c:	dd04      	ble.n	8017a88 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017a7e:	462a      	mov	r2, r5
 8017a80:	4641      	mov	r1, r8
 8017a82:	4630      	mov	r0, r6
 8017a84:	f005 fff2 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 8017a88:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 8017a8c:	3510      	adds	r5, #16
      if (__count > 0)
 8017a8e:	f1b9 0f00 	cmp.w	r9, #0
 8017a92:	4435      	add	r5, r6
 8017a94:	dd04      	ble.n	8017aa0 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017a96:	464a      	mov	r2, r9
 8017a98:	4651      	mov	r1, sl
 8017a9a:	4628      	mov	r0, r5
 8017a9c:	f006 f8de 	bl	801dc5c <memcpy>
      return __result + __count;
 8017aa0:	444d      	add	r5, r9
	if (__p)
 8017aa2:	f1b8 0f00 	cmp.w	r8, #0
 8017aa6:	d005      	beq.n	8017ab4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017aa8:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017aaa:	4640      	mov	r0, r8
 8017aac:	eba1 0108 	sub.w	r1, r1, r8
 8017ab0:	f005 f83a 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8017ab4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017ab8:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8017abc:	60be      	str	r6, [r7, #8]
    }
 8017abe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017ac2:	461c      	mov	r4, r3
 8017ac4:	e7cf      	b.n	8017a66 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017ac6:	4626      	mov	r6, r4
 8017ac8:	e7d1      	b.n	8017a6e <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 8017aca:	bf00      	nop
 8017acc:	0801dd74 	.word	0x0801dd74

08017ad0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ad4:	460c      	mov	r4, r1
 8017ad6:	b087      	sub	sp, #28
 8017ad8:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017ada:	f04f 31ff 	mov.w	r1, #4294967295
 8017ade:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 8017ae0:	4698      	mov	r8, r3
 8017ae2:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017ae4:	f7f5 f9a2 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017ae8:	4621      	mov	r1, r4
 8017aea:	f10d 0207 	add.w	r2, sp, #7
 8017aee:	4630      	mov	r0, r6
 8017af0:	f000 fe0b 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017af8:	4604      	mov	r4, r0
	if (!success) {
 8017afa:	b92b      	cbnz	r3, 8017b08 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 8017afc:	6830      	ldr	r0, [r6, #0]
 8017afe:	f7f5 f9c9 	bl	800ce94 <osSemaphoreRelease>
}
 8017b02:	b007      	add	sp, #28
 8017b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 8017b08:	f10d 0007 	add.w	r0, sp, #7
 8017b0c:	f7ff fab8 	bl	8017080 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 8017b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d0f1      	beq.n	8017afc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 8017b18:	7923      	ldrb	r3, [r4, #4]
 8017b1a:	4298      	cmp	r0, r3
 8017b1c:	d1ee      	bne.n	8017afc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017b1e:	3004      	adds	r0, #4
 8017b20:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 8017b24:	2f00      	cmp	r7, #0
 8017b26:	d0e9      	beq.n	8017afc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 8017b28:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017b2a:	e9d7 3500 	ldrd	r3, r5, [r7]
 8017b2e:	1aea      	subs	r2, r5, r3
 8017b30:	1112      	asrs	r2, r2, #4
 8017b32:	b9b1      	cbnz	r1, 8017b62 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 8017b34:	7861      	ldrb	r1, [r4, #1]
 8017b36:	b9a1      	cbnz	r1, 8017b62 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 8017b38:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b3a:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 8017b3c:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 8017b3e:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017b40:	42a9      	cmp	r1, r5
		callback.write = write;
 8017b42:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8017b46:	d008      	beq.n	8017b5a <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017b48:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8017b4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8017b4e:	3510      	adds	r5, #16
 8017b50:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 8017b52:	2301      	movs	r3, #1
 8017b54:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 8017b56:	7223      	strb	r3, [r4, #8]
 8017b58:	e7d0      	b.n	8017afc <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 8017b5a:	4638      	mov	r0, r7
 8017b5c:	f7ff ff64 	bl	8017a28 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8017b60:	e7f7      	b.n	8017b52 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8017b62:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 8017b64:	4291      	cmp	r1, r2
 8017b66:	d302      	bcc.n	8017b6e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017b68:	4803      	ldr	r0, [pc, #12]	@ (8017b78 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 8017b6a:	f005 f8ba 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8017b6e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 8017b72:	e9c3 9801 	strd	r9, r8, [r3, #4]
 8017b76:	e7ec      	b.n	8017b52 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 8017b78:	0801dfb4 	.word	0x0801dfb4

08017b7c <_ZN10Publishers12AddRegistersEv>:
void Publishers::AddRegisters(void) {
 8017b7c:	b510      	push	{r4, lr}
 8017b7e:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_PUB_SET_STATUS);
 8017b80:	2110      	movs	r1, #16
 8017b82:	6840      	ldr	r0, [r0, #4]
 8017b84:	f7ff fec9 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_STATUS, 2);
 8017b88:	2202      	movs	r2, #2
 8017b8a:	2110      	movs	r1, #16
 8017b8c:	6860      	ldr	r0, [r4, #4]
 8017b8e:	f000 fe11 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_STATUS, (void*) this,
 8017b92:	4b37      	ldr	r3, [pc, #220]	@ (8017c70 <_ZN10Publishers12AddRegistersEv+0xf4>)
 8017b94:	4622      	mov	r2, r4
 8017b96:	6860      	ldr	r0, [r4, #4]
 8017b98:	2110      	movs	r1, #16
 8017b9a:	f7ff feef 	bl	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_TOPIC_STATUS);
 8017b9e:	6860      	ldr	r0, [r4, #4]
 8017ba0:	2111      	movs	r1, #17
 8017ba2:	f7ff fe89 	bl	80178b8 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TOPIC_STATUS, 3);
 8017ba6:	2203      	movs	r2, #3
 8017ba8:	2111      	movs	r1, #17
 8017baa:	6860      	ldr	r0, [r4, #4]
 8017bac:	f000 fe02 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_TOPIC_STATUS, (void*) this,
 8017bb0:	4b30      	ldr	r3, [pc, #192]	@ (8017c74 <_ZN10Publishers12AddRegistersEv+0xf8>)
 8017bb2:	4622      	mov	r2, r4
 8017bb4:	6860      	ldr	r0, [r4, #4]
 8017bb6:	2111      	movs	r1, #17
 8017bb8:	f7ff ff8a 	bl	8017ad0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_PUB_SET_PRESCALER);
 8017bbc:	6860      	ldr	r0, [r4, #4]
 8017bbe:	2112      	movs	r1, #18
 8017bc0:	f7ff fe7a 	bl	80178b8 <_ZN9Registers11AddRegisterItEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_PRESCALER, 2);
 8017bc4:	2202      	movs	r2, #2
 8017bc6:	2112      	movs	r1, #18
 8017bc8:	6860      	ldr	r0, [r4, #4]
 8017bca:	f000 fdf3 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_PUB_SET_PRESCALER, (void*) this,
 8017bce:	4622      	mov	r2, r4
 8017bd0:	4b29      	ldr	r3, [pc, #164]	@ (8017c78 <_ZN10Publishers12AddRegistersEv+0xfc>)
 8017bd2:	2112      	movs	r1, #18
 8017bd4:	6860      	ldr	r0, [r4, #4]
 8017bd6:	f7ff ff7b 	bl	8017ad0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_STOP_TOPICS);
 8017bda:	6860      	ldr	r0, [r4, #4]
 8017bdc:	2113      	movs	r1, #19
 8017bde:	f7ff fe9c 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_STOP_TOPICS);
 8017be2:	2113      	movs	r1, #19
 8017be4:	6860      	ldr	r0, [r4, #4]
 8017be6:	f000 fdc9 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_STOP_TOPICS, (void*) this,
 8017bea:	4b24      	ldr	r3, [pc, #144]	@ (8017c7c <_ZN10Publishers12AddRegistersEv+0x100>)
 8017bec:	4622      	mov	r2, r4
 8017bee:	6860      	ldr	r0, [r4, #4]
 8017bf0:	2113      	movs	r1, #19
 8017bf2:	f7ff fec3 	bl	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_LINK_INTERFACE);
 8017bf6:	6860      	ldr	r0, [r4, #4]
 8017bf8:	2114      	movs	r1, #20
 8017bfa:	f7ff fe8e 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_LINK_INTERFACE, 2);
 8017bfe:	2202      	movs	r2, #2
 8017c00:	2114      	movs	r1, #20
 8017c02:	6860      	ldr	r0, [r4, #4]
 8017c04:	f000 fdd6 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_LINK_INTERFACE, (void*) this,
 8017c08:	4b1d      	ldr	r3, [pc, #116]	@ (8017c80 <_ZN10Publishers12AddRegistersEv+0x104>)
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	6860      	ldr	r0, [r4, #4]
 8017c0e:	2114      	movs	r1, #20
 8017c10:	f7ff feb4 	bl	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_UNLINK_INTERFACE);
 8017c14:	6860      	ldr	r0, [r4, #4]
 8017c16:	2115      	movs	r1, #21
 8017c18:	f7ff fe7f 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_UNLINK_INTERFACE, 2);
 8017c1c:	2202      	movs	r2, #2
 8017c1e:	2115      	movs	r1, #21
 8017c20:	6860      	ldr	r0, [r4, #4]
 8017c22:	f000 fdc7 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_UNLINK_INTERFACE, (void*) this,
 8017c26:	4622      	mov	r2, r4
 8017c28:	4b16      	ldr	r3, [pc, #88]	@ (8017c84 <_ZN10Publishers12AddRegistersEv+0x108>)
 8017c2a:	2115      	movs	r1, #21
 8017c2c:	6860      	ldr	r0, [r4, #4]
 8017c2e:	f7ff fea5 	bl	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_CLEAR_INTERFACES);
 8017c32:	6860      	ldr	r0, [r4, #4]
 8017c34:	2116      	movs	r1, #22
 8017c36:	f7ff fe70 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_PUB_CLEAR_INTERFACES);
 8017c3a:	2116      	movs	r1, #22
 8017c3c:	6860      	ldr	r0, [r4, #4]
 8017c3e:	f000 fd9d 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_CLEAR_INTERFACES, (void*) this,
 8017c42:	4b11      	ldr	r3, [pc, #68]	@ (8017c88 <_ZN10Publishers12AddRegistersEv+0x10c>)
 8017c44:	4622      	mov	r2, r4
 8017c46:	6860      	ldr	r0, [r4, #4]
 8017c48:	2116      	movs	r1, #22
 8017c4a:	f7ff fe97 	bl	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_PUB_SET_TARGET_ADDRESS);
 8017c4e:	6860      	ldr	r0, [r4, #4]
 8017c50:	2117      	movs	r1, #23
 8017c52:	f7ff fe62 	bl	801791a <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_PUB_SET_TARGET_ADDRESS, 3);
 8017c56:	2203      	movs	r2, #3
 8017c58:	2117      	movs	r1, #23
 8017c5a:	6860      	ldr	r0, [r4, #4]
 8017c5c:	f000 fdaa 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8017c60:	4622      	mov	r2, r4
 8017c62:	6860      	ldr	r0, [r4, #4]
 8017c64:	2117      	movs	r1, #23
 8017c66:	4b09      	ldr	r3, [pc, #36]	@ (8017c8c <_ZN10Publishers12AddRegistersEv+0x110>)
}
 8017c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_PUB_SET_TARGET_ADDRESS, (void*) this,
 8017c6c:	f7ff be86 	b.w	801797c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 8017c70:	08017247 	.word	0x08017247
 8017c74:	080173b1 	.word	0x080173b1
 8017c78:	08017293 	.word	0x08017293
 8017c7c:	080172e5 	.word	0x080172e5
 8017c80:	08017845 	.word	0x08017845
 8017c84:	0801752b 	.word	0x0801752b
 8017c88:	08017325 	.word	0x08017325
 8017c8c:	08017451 	.word	0x08017451

08017c90 <_ZN9PublisherC1ERKS_>:
 8017c90:	b570      	push	{r4, r5, r6, lr}
 8017c92:	680a      	ldr	r2, [r1, #0]
 8017c94:	4604      	mov	r4, r0
 8017c96:	888b      	ldrh	r3, [r1, #4]
 8017c98:	460d      	mov	r5, r1
 8017c9a:	6002      	str	r2, [r0, #0]
 8017c9c:	8083      	strh	r3, [r0, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017c9e:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ca0:	e9d1 2602 	ldrd	r2, r6, [r1, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017ca4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017ca8:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017caa:	6103      	str	r3, [r0, #16]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017cac:	d03c      	beq.n	8017d28 <_ZN9PublisherC1ERKS_+0x98>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017cae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017cb2:	429e      	cmp	r6, r3
 8017cb4:	d301      	bcc.n	8017cba <_ZN9PublisherC1ERKS_+0x2a>
	      std::__throw_bad_array_new_length();
 8017cb6:	f005 f80e 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017cba:	4630      	mov	r0, r6
 8017cbc:	f004 ff59 	bl	801cb72 <_Znwj>
 8017cc0:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017cc2:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017cc4:	e9c4 3302 	strd	r3, r3, [r4, #8]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017cc8:	6126      	str	r6, [r4, #16]
      : _M_current(__i) { }
 8017cca:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
	  if (_Num)
 8017cce:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8017cd0:	eba2 0601 	sub.w	r6, r2, r1
	  if (_Num)
 8017cd4:	d004      	beq.n	8017ce0 <_ZN9PublisherC1ERKS_+0x50>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	4632      	mov	r2, r6
 8017cda:	f005 fec7 	bl	801da6c <memmove>
 8017cde:	4603      	mov	r3, r0
	  return __result + _Num;
 8017ce0:	4433      	add	r3, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017ce2:	e9d5 2605 	ldrd	r2, r6, [r5, #20]
	this->_M_impl._M_finish =
 8017ce6:	60e3      	str	r3, [r4, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017ce8:	2300      	movs	r3, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017cea:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017cec:	61e3      	str	r3, [r4, #28]
 8017cee:	e9c4 3305 	strd	r3, r3, [r4, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017cf2:	d01b      	beq.n	8017d2c <_ZN9PublisherC1ERKS_+0x9c>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8017d30 <_ZN9PublisherC1ERKS_+0xa0>)
 8017cf6:	429e      	cmp	r6, r3
 8017cf8:	d8dd      	bhi.n	8017cb6 <_ZN9PublisherC1ERKS_+0x26>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	f004 ff39 	bl	801cb72 <_Znwj>
 8017d00:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d02:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017d04:	e9c4 3305 	strd	r3, r3, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d08:	61e6      	str	r6, [r4, #28]
 8017d0a:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	  if (_Num)
 8017d0e:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 8017d10:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 8017d14:	d004      	beq.n	8017d20 <_ZN9PublisherC1ERKS_+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017d16:	4618      	mov	r0, r3
 8017d18:	462a      	mov	r2, r5
 8017d1a:	f005 fea7 	bl	801da6c <memmove>
 8017d1e:	4603      	mov	r3, r0
	  return __result + _Num;
 8017d20:	442b      	add	r3, r5
 8017d22:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 8017d24:	61a3      	str	r3, [r4, #24]
 8017d26:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017d28:	4633      	mov	r3, r6
 8017d2a:	e7ca      	b.n	8017cc2 <_ZN9PublisherC1ERKS_+0x32>
 8017d2c:	4633      	mov	r3, r6
 8017d2e:	e7e8      	b.n	8017d02 <_ZN9PublisherC1ERKS_+0x72>
 8017d30:	7ffffffc 	.word	0x7ffffffc

08017d34 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d38:	e9d0 7900 	ldrd	r7, r9, [r0]
 8017d3c:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
 8017d3e:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d42:	eba9 0207 	sub.w	r2, r9, r7
 8017d46:	4606      	mov	r6, r0
 8017d48:	4688      	mov	r8, r1
	if (max_size() - size() < __n)
 8017d4a:	ebb3 1f62 	cmp.w	r3, r2, asr #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017d4e:	ea4f 1462 	mov.w	r4, r2, asr #5
	if (max_size() - size() < __n)
 8017d52:	d102      	bne.n	8017d5a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8017d54:	481a      	ldr	r0, [pc, #104]	@ (8017dc0 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 8017d56:	f004 ffc1 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 8017d5a:	45b9      	cmp	r9, r7
 8017d5c:	bf14      	ite	ne
 8017d5e:	4622      	movne	r2, r4
 8017d60:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 8017d62:	eba1 0b07 	sub.w	fp, r1, r7
 8017d66:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017d68:	d225      	bcs.n	8017db6 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017d6a:	b334      	cbz	r4, 8017dba <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017d6c:	429c      	cmp	r4, r3
 8017d6e:	bf28      	it	cs
 8017d70:	461c      	movcs	r4, r3
 8017d72:	0160      	lsls	r0, r4, #5
 8017d74:	f004 fefd 	bl	801cb72 <_Znwj>
 8017d78:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017d7a:	4651      	mov	r1, sl
 8017d7c:	eb05 000b 	add.w	r0, r5, fp
 8017d80:	f7ff ff86 	bl	8017c90 <_ZN9PublisherC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 8017d84:	4641      	mov	r1, r8
 8017d86:	462a      	mov	r2, r5
 8017d88:	4638      	mov	r0, r7
 8017d8a:	f7ff fbfe 	bl	801758a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8017d8e:	4649      	mov	r1, r9
 8017d90:	f100 0220 	add.w	r2, r0, #32
 8017d94:	4640      	mov	r0, r8
 8017d96:	f7ff fbf8 	bl	801758a <_ZSt14__relocate_a_1IP9PublisherS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 8017d9a:	4680      	mov	r8, r0
	if (__p)
 8017d9c:	b127      	cbz	r7, 8017da8 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 8017d9e:	68b1      	ldr	r1, [r6, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017da0:	4638      	mov	r0, r7
 8017da2:	1bc9      	subs	r1, r1, r7
 8017da4:	f004 fec0 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017da8:	eb05 1444 	add.w	r4, r5, r4, lsl #5
      this->_M_impl._M_finish = __new_finish;
 8017dac:	e9c6 5800 	strd	r5, r8, [r6]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017db0:	60b4      	str	r4, [r6, #8]
    }
 8017db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017db6:	461c      	mov	r4, r3
 8017db8:	e7db      	b.n	8017d72 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017dba:	4625      	mov	r5, r4
 8017dbc:	e7dd      	b.n	8017d7a <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 8017dbe:	bf00      	nop
 8017dc0:	0801dd74 	.word	0x0801dd74

08017dc4 <_ZN10Publishers12AddPublisherEh>:
bool Publishers::AddPublisher(uint8_t ID) {
 8017dc4:	b530      	push	{r4, r5, lr}
 8017dc6:	b08b      	sub	sp, #44	@ 0x2c
 8017dc8:	4604      	mov	r4, r0
 8017dca:	460d      	mov	r5, r1
	FindPublisher(ID, &success);
 8017dcc:	f10d 0207 	add.w	r2, sp, #7
 8017dd0:	f7ff fa00 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (success)
 8017dd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017dd8:	bb6b      	cbnz	r3, 8017e36 <_ZN10Publishers12AddPublisherEh+0x72>
	publisher.prescaler = 1;
 8017dda:	2201      	movs	r2, #1
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8017de0:	6820      	ldr	r0, [r4, #0]
	publisher.activated = false;
 8017de2:	f88d 3009 	strb.w	r3, [sp, #9]
	publisher.counter = 0;
 8017de6:	f8ad 300c 	strh.w	r3, [sp, #12]
	publisher.ID = ID;
 8017dea:	f88d 5008 	strb.w	r5, [sp, #8]
	publisher.prescaler = 1;
 8017dee:	f8ad 200a 	strh.w	r2, [sp, #10]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017df2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017df6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8017dfa:	e9cd 3308 	strd	r3, r3, [sp, #32]
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 8017dfe:	f7f5 f815 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8017e02:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 8017e06:	4298      	cmp	r0, r3
 8017e08:	d00e      	beq.n	8017e28 <_ZN10Publishers12AddPublisherEh+0x64>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017e0a:	a902      	add	r1, sp, #8
 8017e0c:	f7ff ff40 	bl	8017c90 <_ZN9PublisherC1ERKS_>
	    ++this->_M_impl._M_finish;
 8017e10:	6923      	ldr	r3, [r4, #16]
 8017e12:	3320      	adds	r3, #32
 8017e14:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(PublishersSemaphore);
 8017e16:	6820      	ldr	r0, [r4, #0]
 8017e18:	f7f5 f83c 	bl	800ce94 <osSemaphoreRelease>
}
 8017e1c:	a802      	add	r0, sp, #8
 8017e1e:	f7ff fba4 	bl	801756a <_ZN9PublisherD1Ev>
	return true;
 8017e22:	2001      	movs	r0, #1
}
 8017e24:	b00b      	add	sp, #44	@ 0x2c
 8017e26:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 8017e28:	4601      	mov	r1, r0
 8017e2a:	aa02      	add	r2, sp, #8
 8017e2c:	f104 000c 	add.w	r0, r4, #12
 8017e30:	f7ff ff80 	bl	8017d34 <_ZNSt6vectorI9PublisherSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8017e34:	e7ef      	b.n	8017e16 <_ZN10Publishers12AddPublisherEh+0x52>
		return false;
 8017e36:	2000      	movs	r0, #0
 8017e38:	e7f4      	b.n	8017e24 <_ZN10Publishers12AddPublisherEh+0x60>
	...

08017e3c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>:
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e40:	4680      	mov	r8, r0
 8017e42:	b0c5      	sub	sp, #276	@ 0x114
 8017e44:	468a      	mov	sl, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017e46:	6800      	ldr	r0, [r0, #0]
 8017e48:	f04f 31ff 	mov.w	r1, #4294967295
bool Registers::ReadRegister(uint16_t ID, T* output, uint16_t* length, bool use_semaphore) {
 8017e4c:	9300      	str	r3, [sp, #0]
 8017e4e:	4616      	mov	r6, r2
 8017e50:	f89d b138 	ldrb.w	fp, [sp, #312]	@ 0x138
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8017e54:	f7f4 ffea 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017e58:	f10d 020f 	add.w	r2, sp, #15
 8017e5c:	4651      	mov	r1, sl
 8017e5e:	4640      	mov	r0, r8
 8017e60:	f000 fc53 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8017e64:	f89d 300f 	ldrb.w	r3, [sp, #15]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8017e68:	4605      	mov	r5, r0
	if (!success) {
 8017e6a:	b943      	cbnz	r3, 8017e7e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x42>
		return false;
 8017e6c:	2400      	movs	r4, #0
		osSemaphoreRelease(RegistersSemaphore);
 8017e6e:	f8d8 0000 	ldr.w	r0, [r8]
 8017e72:	f7f5 f80f 	bl	800ce94 <osSemaphoreRelease>
}
 8017e76:	4620      	mov	r0, r4
 8017e78:	b045      	add	sp, #276	@ 0x114
 8017e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017e7e:	4972      	ldr	r1, [pc, #456]	@ (8018048 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x20c>)
 8017e80:	4872      	ldr	r0, [pc, #456]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017e82:	f004 ff0d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017e86:	4604      	mov	r4, r0
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d14f      	bne.n	8017f2c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf0>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017e8c:	4970      	ldr	r1, [pc, #448]	@ (8018050 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x214>)
 8017e8e:	486f      	ldr	r0, [pc, #444]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017e90:	f004 ff06 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017e94:	4604      	mov	r4, r0
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d14a      	bne.n	8017f30 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf4>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017e9a:	496e      	ldr	r1, [pc, #440]	@ (8018054 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x218>)
 8017e9c:	486b      	ldr	r0, [pc, #428]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017e9e:	f004 feff 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	d145      	bne.n	8017f34 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xf8>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8017ea8:	496b      	ldr	r1, [pc, #428]	@ (8018058 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x21c>)
 8017eaa:	4868      	ldr	r0, [pc, #416]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017eac:	f004 fef8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d140      	bne.n	8017f38 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xfc>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017eb6:	4965      	ldr	r1, [pc, #404]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017eb8:	4608      	mov	r0, r1
 8017eba:	f004 fef1 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	2800      	cmp	r0, #0
 8017ec2:	d13b      	bne.n	8017f3c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x100>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017ec4:	4965      	ldr	r1, [pc, #404]	@ (801805c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x220>)
 8017ec6:	4861      	ldr	r0, [pc, #388]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017ec8:	f004 feea 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017ecc:	4604      	mov	r4, r0
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	d136      	bne.n	8017f40 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x104>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017ed2:	4963      	ldr	r1, [pc, #396]	@ (8018060 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x224>)
 8017ed4:	485d      	ldr	r0, [pc, #372]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017ed6:	f004 fee3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8017eda:	4604      	mov	r4, r0
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d131      	bne.n	8017f44 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x108>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8017ee0:	4960      	ldr	r1, [pc, #384]	@ (8018064 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x228>)
 8017ee2:	485a      	ldr	r0, [pc, #360]	@ (801804c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x210>)
 8017ee4:	f004 fedc 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8017ee8:	1e04      	subs	r4, r0, #0
 8017eea:	bf14      	ite	ne
 8017eec:	2309      	movne	r3, #9
 8017eee:	2300      	moveq	r3, #0
 8017ef0:	f88d 400f 	strb.w	r4, [sp, #15]
	if (!success) {
 8017ef4:	2c00      	cmp	r4, #0
 8017ef6:	d0b9      	beq.n	8017e6c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->register_info.type != registered_type) {
 8017ef8:	792a      	ldrb	r2, [r5, #4]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d1b6      	bne.n	8017e6c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (callbacks[target_register->register_info.type] == NULL) {
 8017efe:	3304      	adds	r3, #4
 8017f00:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d0b1      	beq.n	8017e6c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x30>
	if (target_register->access.read) {
 8017f08:	7a6a      	ldrb	r2, [r5, #9]
 8017f0a:	2a00      	cmp	r2, #0
 8017f0c:	d066      	beq.n	8017fdc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017f0e:	8969      	ldrh	r1, [r5, #10]
		success = false; // false by default to use pointer mode if the callback doesn't update the flag
 8017f10:	2200      	movs	r2, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017f12:	e9d3 0300 	ldrd	r0, r3, [r3]
 8017f16:	f88d 200f 	strb.w	r2, [sp, #15]
 8017f1a:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8017f1c:	ebb1 1f23 	cmp.w	r1, r3, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017f20:	ea4f 1223 	mov.w	r2, r3, asr #4
	if (__n >= this->size())
 8017f24:	d310      	bcc.n	8017f48 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x10c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8017f26:	4850      	ldr	r0, [pc, #320]	@ (8018068 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x22c>)
 8017f28:	f004 fedb 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	e7df      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8017f30:	2301      	movs	r3, #1
 8017f32:	e7dd      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8017f34:	2302      	movs	r3, #2
 8017f36:	e7db      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8017f38:	2303      	movs	r3, #3
 8017f3a:	e7d9      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8017f3c:	2304      	movs	r3, #4
 8017f3e:	e7d7      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8017f40:	2306      	movs	r3, #6
 8017f42:	e7d5      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8017f44:	2308      	movs	r3, #8
 8017f46:	e7d3      	b.n	8017ef0 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0xb4>
	return *(this->_M_impl._M_start + __n);
 8017f48:	010b      	lsls	r3, r1, #4
 8017f4a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
		RegisterCallbacks<T> callbacks = target_callback_list->at(target_register->callbacks_ID);
 8017f4e:	f850 9003 	ldr.w	r9, [r0, r3]
 8017f52:	684b      	ldr	r3, [r1, #4]
 8017f54:	9301      	str	r3, [sp, #4]
 8017f56:	68cb      	ldr	r3, [r1, #12]
 8017f58:	461f      	mov	r7, r3
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017f5a:	f1bb 0f00 	cmp.w	fp, #0
 8017f5e:	d006      	beq.n	8017f6e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x132>
 8017f60:	68eb      	ldr	r3, [r5, #12]
 8017f62:	b123      	cbz	r3, 8017f6e <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x132>
			osSemaphoreAcquire(*(target_register->register_semaphore), osWaitForever);
 8017f64:	f04f 31ff 	mov.w	r1, #4294967295
 8017f68:	6818      	ldr	r0, [r3, #0]
 8017f6a:	f7f4 ff5f 	bl	800ce2c <osSemaphoreAcquire>
		if (target_register->mode.callbacks) {
 8017f6e:	786b      	ldrb	r3, [r5, #1]
 8017f70:	b1c3      	cbz	r3, 8017fa4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
			if (output != NULL) {
 8017f72:	2e00      	cmp	r6, #0
 8017f74:	d037      	beq.n	8017fe6 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1aa>
				*callback_output = output;
 8017f76:	4632      	mov	r2, r6
 8017f78:	2300      	movs	r3, #0
 8017f7a:	601a      	str	r2, [r3, #0]
			if (callbacks.read != NULL) {
 8017f7c:	b197      	cbz	r7, 8017fa4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8017f7e:	9b00      	ldr	r3, [sp, #0]
 8017f80:	2200      	movs	r2, #0
 8017f82:	4651      	mov	r1, sl
 8017f84:	9801      	ldr	r0, [sp, #4]
 8017f86:	47b8      	blx	r7
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8017f88:	796b      	ldrb	r3, [r5, #5]
				success = callbacks.read(callbacks.context, ID, callback_output, length);
 8017f8a:	f88d 000f 	strb.w	r0, [sp, #15]
				if (target_register->register_info.isArray && target_register->register_info.length > 0) {
 8017f8e:	b363      	cbz	r3, 8017fea <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ae>
 8017f90:	88eb      	ldrh	r3, [r5, #6]
 8017f92:	b10b      	cbz	r3, 8017f98 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x15c>
					*length = 1;
 8017f94:	9a00      	ldr	r2, [sp, #0]
 8017f96:	8013      	strh	r3, [r2, #0]
				if (*callback_output != output && output != NULL) {
 8017f98:	2300      	movs	r3, #0
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	42b3      	cmp	r3, r6
 8017f9e:	d001      	beq.n	8017fa4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
 8017fa0:	2e00      	cmp	r6, #0
 8017fa2:	d130      	bne.n	8018006 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ca>
		if (not success && target_register->mode.pointer) {
 8017fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8017fa8:	b983      	cbnz	r3, 8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
 8017faa:	782b      	ldrb	r3, [r5, #0]
 8017fac:	b173      	cbz	r3, 8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
			success = true;
 8017fae:	2301      	movs	r3, #1
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8017fb0:	796a      	ldrb	r2, [r5, #5]
			success = true;
 8017fb2:	f88d 300f 	strb.w	r3, [sp, #15]
			if (target_register->register_info.isArray && target_register->register_info.length == 0) {
 8017fb6:	2a00      	cmp	r2, #0
 8017fb8:	d03d      	beq.n	8018036 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1fa>
 8017fba:	88e9      	ldrh	r1, [r5, #6]
 8017fbc:	2900      	cmp	r1, #0
 8017fbe:	d130      	bne.n	8018022 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1e6>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017fc0:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017fc4:	1a9b      	subs	r3, r3, r2
				*length = register_vector->size();
 8017fc6:	9a00      	ldr	r2, [sp, #0]
 8017fc8:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 8017fca:	bb26      	cbnz	r6, 8018016 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1da>
		if (use_semaphore && target_register->register_semaphore != NULL) {
 8017fcc:	f1bb 0f00 	cmp.w	fp, #0
 8017fd0:	d004      	beq.n	8017fdc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
 8017fd2:	68eb      	ldr	r3, [r5, #12]
 8017fd4:	b113      	cbz	r3, 8017fdc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1a0>
			osSemaphoreRelease(*(target_register->register_semaphore));
 8017fd6:	6818      	ldr	r0, [r3, #0]
 8017fd8:	f7f4 ff5c 	bl	800ce94 <osSemaphoreRelease>
	osSemaphoreRelease(RegistersSemaphore);
 8017fdc:	f8d8 0000 	ldr.w	r0, [r8]
 8017fe0:	f7f4 ff58 	bl	800ce94 <osSemaphoreRelease>
	return true;
 8017fe4:	e747      	b.n	8017e76 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x3a>
				*callback_output = output_buffer; // use a temporary buffer to store values if not input. TODO the size is limited so there is possibly an issue if output == NULL and length > 256
 8017fe6:	aa04      	add	r2, sp, #16
 8017fe8:	e7c6      	b.n	8017f78 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x13c>
					*length = 1;
 8017fea:	2301      	movs	r3, #1
 8017fec:	e7d2      	b.n	8017f94 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x158>
						output[index] = (*callback_output )[index];
 8017fee:	2300      	movs	r3, #0
 8017ff0:	b291      	uxth	r1, r2
 8017ff2:	3201      	adds	r2, #1
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	5c5b      	ldrb	r3, [r3, r1]
 8017ff8:	5473      	strb	r3, [r6, r1]
					for (uint16_t index = 0; index < *length; index++) {
 8017ffa:	9b00      	ldr	r3, [sp, #0]
 8017ffc:	8819      	ldrh	r1, [r3, #0]
 8017ffe:	b293      	uxth	r3, r2
 8018000:	4299      	cmp	r1, r3
 8018002:	d8f4      	bhi.n	8017fee <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1b2>
 8018004:	e7ce      	b.n	8017fa4 <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x168>
 8018006:	2200      	movs	r2, #0
 8018008:	e7f7      	b.n	8017ffa <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1be>
 801800a:	b28b      	uxth	r3, r1
						output[index] = (*register_vector)[index];
 801800c:	f8d9 2000 	ldr.w	r2, [r9]
 8018010:	3101      	adds	r1, #1
 8018012:	56d2      	ldrsb	r2, [r2, r3]
 8018014:	54f2      	strb	r2, [r6, r3]
					for (uint16_t index = 0; index < *length; index++) {
 8018016:	9b00      	ldr	r3, [sp, #0]
 8018018:	881a      	ldrh	r2, [r3, #0]
 801801a:	b28b      	uxth	r3, r1
 801801c:	429a      	cmp	r2, r3
 801801e:	d8f4      	bhi.n	801800a <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x1ce>
 8018020:	e7d4      	b.n	8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
				*length = target_register->register_info.length;
 8018022:	9b00      	ldr	r3, [sp, #0]
 8018024:	8019      	strh	r1, [r3, #0]
				if (output != NULL) {
 8018026:	2e00      	cmp	r6, #0
 8018028:	d0d0      	beq.n	8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
			      _Category>::__copy_m(__first, __last, __result);
 801802a:	4632      	mov	r2, r6
 801802c:	4449      	add	r1, r9
 801802e:	4648      	mov	r0, r9
 8018030:	f7fa f898 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8018034:	e7ca      	b.n	8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
				*length = 1;
 8018036:	9a00      	ldr	r2, [sp, #0]
 8018038:	8013      	strh	r3, [r2, #0]
				if (output != NULL) {
 801803a:	2e00      	cmp	r6, #0
 801803c:	d0c6      	beq.n	8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
					*output = *callbacks.pointer;
 801803e:	f999 3000 	ldrsb.w	r3, [r9]
 8018042:	7033      	strb	r3, [r6, #0]
 8018044:	e7c2      	b.n	8017fcc <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb+0x190>
 8018046:	bf00      	nop
 8018048:	0801e1c4 	.word	0x0801e1c4
 801804c:	0801e1cc 	.word	0x0801e1cc
 8018050:	0801e1bc 	.word	0x0801e1bc
 8018054:	0801e1ac 	.word	0x0801e1ac
 8018058:	0801e1a4 	.word	0x0801e1a4
 801805c:	0801e1b4 	.word	0x0801e1b4
 8018060:	0801e19c 	.word	0x0801e19c
 8018064:	0801e194 	.word	0x0801e194
 8018068:	0801dfb4 	.word	0x0801dfb4

0801806c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0>:
	if (__first != __last)
 801806c:	429a      	cmp	r2, r3
      vector<_Tp, _Alloc>::
 801806e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018072:	4604      	mov	r4, r0
 8018074:	460d      	mov	r5, r1
 8018076:	4617      	mov	r7, r2
 8018078:	4699      	mov	r9, r3
	if (__first != __last)
 801807a:	d020      	beq.n	80180be <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x52>
 801807c:	eba3 0802 	sub.w	r8, r3, r2
			  - this->_M_impl._M_finish) >= __n)
 8018080:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8018084:	1b9b      	subs	r3, r3, r6
	    if (size_type(this->_M_impl._M_end_of_storage
 8018086:	4598      	cmp	r8, r3
 8018088:	d831      	bhi.n	80180ee <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x82>
 801808a:	eba6 0a01 	sub.w	sl, r6, r1
		if (__elems_after > __n)
 801808e:	45d0      	cmp	r8, sl
 8018090:	d217      	bcs.n	80180c2 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x56>
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8018092:	eba6 0a08 	sub.w	sl, r6, r8
			      _Category>::__copy_m(__first, __last, __result);
 8018096:	4632      	mov	r2, r6
 8018098:	4631      	mov	r1, r6
 801809a:	4650      	mov	r0, sl
 801809c:	f7e9 fdca 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __n;
 80180a0:	6863      	ldr	r3, [r4, #4]
	  if (_Num)
 80180a2:	ebba 0205 	subs.w	r2, sl, r5
 80180a6:	4443      	add	r3, r8
 80180a8:	6063      	str	r3, [r4, #4]
 80180aa:	d003      	beq.n	80180b4 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x48>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80180ac:	4629      	mov	r1, r5
 80180ae:	1ab0      	subs	r0, r6, r2
 80180b0:	f005 fcdc 	bl	801da6c <memmove>
			      _Category>::__copy_m(__first, __last, __result);
 80180b4:	462a      	mov	r2, r5
 80180b6:	4649      	mov	r1, r9
 80180b8:	4638      	mov	r0, r7
 80180ba:	f7e8 fdb5 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      }
	  }
      }
 80180be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { _M_current += __n; return *this; }
 80180c2:	eb02 0b0a 	add.w	fp, r2, sl
 80180c6:	4649      	mov	r1, r9
 80180c8:	4632      	mov	r2, r6
		    this->_M_impl._M_finish += __n - __elems_after;
 80180ca:	eba8 080a 	sub.w	r8, r8, sl
 80180ce:	4658      	mov	r0, fp
 80180d0:	f7e8 fdaa 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80180d4:	6862      	ldr	r2, [r4, #4]
 80180d6:	4631      	mov	r1, r6
 80180d8:	4628      	mov	r0, r5
 80180da:	4442      	add	r2, r8
 80180dc:	6062      	str	r2, [r4, #4]
 80180de:	f7e9 fda9 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
		    this->_M_impl._M_finish += __elems_after;
 80180e2:	6863      	ldr	r3, [r4, #4]
 80180e4:	462a      	mov	r2, r5
 80180e6:	4659      	mov	r1, fp
 80180e8:	4453      	add	r3, sl
 80180ea:	6063      	str	r3, [r4, #4]
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80180ec:	e7e4      	b.n	80180b8 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x4c>
		  _M_check_len(__n, "vector::_M_range_insert");
 80180ee:	4641      	mov	r1, r8
		pointer __old_start = this->_M_impl._M_start;
 80180f0:	f8d0 a000 	ldr.w	sl, [r0]
		  _M_check_len(__n, "vector::_M_range_insert");
 80180f4:	4a12      	ldr	r2, [pc, #72]	@ (8018140 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0xd4>)
 80180f6:	f7e8 fd14 	bl	8000b22 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80180fa:	4683      	mov	fp, r0
		pointer __new_start(this->_M_allocate(__len));
 80180fc:	f7fe ffb5 	bl	801706a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
			      _Category>::__copy_m(__first, __last, __result);
 8018100:	4629      	mov	r1, r5
 8018102:	4602      	mov	r2, r0
 8018104:	4680      	mov	r8, r0
 8018106:	4650      	mov	r0, sl
 8018108:	f7e9 fd94 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 801810c:	4649      	mov	r1, r9
 801810e:	4602      	mov	r2, r0
 8018110:	4638      	mov	r0, r7
 8018112:	f7e8 fd89 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8018116:	4631      	mov	r1, r6
 8018118:	4602      	mov	r2, r0
 801811a:	4628      	mov	r0, r5
 801811c:	f7e9 fd8a 	bl	8001c34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8018120:	4605      	mov	r5, r0
	if (__p)
 8018122:	f1ba 0f00 	cmp.w	sl, #0
 8018126:	d005      	beq.n	8018134 <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0xc8>
			      this->_M_impl._M_end_of_storage - __old_start);
 8018128:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801812a:	4650      	mov	r0, sl
 801812c:	eba1 010a 	sub.w	r1, r1, sl
 8018130:	f004 fcfa 	bl	801cb28 <_ZdlPvj>
		this->_M_impl._M_end_of_storage = __new_start + __len;
 8018134:	eb08 000b 	add.w	r0, r8, fp
		this->_M_impl._M_finish = __new_finish;
 8018138:	e9c4 8500 	strd	r8, r5, [r4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 801813c:	60a0      	str	r0, [r4, #8]
      }
 801813e:	e7be      	b.n	80180be <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0+0x52>
 8018140:	0801ddbf 	.word	0x0801ddbf

08018144 <_ZN10Publishers13SpinPublisherEh>:
void Publishers::SpinPublisher(uint8_t ID) {
 8018144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018148:	b0ab      	sub	sp, #172	@ 0xac
 801814a:	4605      	mov	r5, r0
	Publisher* publisher = FindPublisher(ID, &success);
 801814c:	aa06      	add	r2, sp, #24
 801814e:	f7ff f841 	bl	80171d4 <_ZN10Publishers13FindPublisherEhPb>
	if (!success) return;
 8018152:	f89d 3018 	ldrb.w	r3, [sp, #24]
	Publisher* publisher = FindPublisher(ID, &success);
 8018156:	4606      	mov	r6, r0
	if (!success) return;
 8018158:	b14b      	cbz	r3, 801816e <_ZN10Publishers13SpinPublisherEh+0x2a>
	osSemaphoreAcquire(PublishersSemaphore, osWaitForever);
 801815a:	f04f 31ff 	mov.w	r1, #4294967295
 801815e:	6828      	ldr	r0, [r5, #0]
 8018160:	f7f4 fe64 	bl	800ce2c <osSemaphoreAcquire>
	if (not publisher->activated) {
 8018164:	7873      	ldrb	r3, [r6, #1]
 8018166:	b92b      	cbnz	r3, 8018174 <_ZN10Publishers13SpinPublisherEh+0x30>
	osSemaphoreRelease(PublishersSemaphore);
 8018168:	6828      	ldr	r0, [r5, #0]
 801816a:	f7f4 fe93 	bl	800ce94 <osSemaphoreRelease>
}
 801816e:	b02b      	add	sp, #172	@ 0xac
 8018170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	publisher->counter += 1;
 8018174:	88b3      	ldrh	r3, [r6, #4]
	if (publisher->counter >= publisher->prescaler) {
 8018176:	8872      	ldrh	r2, [r6, #2]
	publisher->counter += 1;
 8018178:	3301      	adds	r3, #1
 801817a:	b29b      	uxth	r3, r3
	if (publisher->counter >= publisher->prescaler) {
 801817c:	429a      	cmp	r2, r3
	publisher->counter += 1;
 801817e:	80b3      	strh	r3, [r6, #4]
	if (publisher->counter >= publisher->prescaler) {
 8018180:	d8f2      	bhi.n	8018168 <_ZN10Publishers13SpinPublisherEh+0x24>
		publisher->counter = 0;
 8018182:	2400      	movs	r4, #0
      : _M_current(__i) { }
 8018184:	68f3      	ldr	r3, [r6, #12]
 8018186:	f8d6 8008 	ldr.w	r8, [r6, #8]
					Register element_register = registers->FindRegister(topic.ID, &success);
 801818a:	f10d 0a20 	add.w	sl, sp, #32
		publisher->counter = 0;
 801818e:	80b4      	strh	r4, [r6, #4]
 8018190:	9302      	str	r3, [sp, #8]
		for (PublishInterface interface : publisher->interfaces) {
 8018192:	9b02      	ldr	r3, [sp, #8]
 8018194:	4543      	cmp	r3, r8
 8018196:	d0e7      	beq.n	8018168 <_ZN10Publishers13SpinPublisherEh+0x24>
 8018198:	f898 3001 	ldrb.w	r3, [r8, #1]
 801819c:	f898 2000 	ldrb.w	r2, [r8]
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80181a0:	f8d6 9014 	ldr.w	r9, [r6, #20]
			message.target_address = interface.address;
 80181a4:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
 80181a8:	69b3      	ldr	r3, [r6, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80181aa:	941c      	str	r4, [sp, #112]	@ 0x70
			message.interface = interface.interface;
 80181ac:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 80181b0:	9303      	str	r3, [sp, #12]
 80181b2:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
			for (Topic topic : publisher->topics) {
 80181b6:	9b03      	ldr	r3, [sp, #12]
 80181b8:	454b      	cmp	r3, r9
 80181ba:	d11d      	bne.n	80181f8 <_ZN10Publishers13SpinPublisherEh+0xb4>
			if (message.payload.size() > 0) {
 80181bc:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80181c0:	429a      	cmp	r2, r3
 80181c2:	d013      	beq.n	80181ec <_ZN10Publishers13SpinPublisherEh+0xa8>
 80181c4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80181c8:	a91a      	add	r1, sp, #104	@ 0x68
				communication->Send(message);
 80181ca:	68af      	ldr	r7, [r5, #8]
 80181cc:	a825      	add	r0, sp, #148	@ 0x94
 80181ce:	f88d 3090 	strb.w	r3, [sp, #144]	@ 0x90
 80181d2:	f7e8 fd35 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 80181d6:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 80181da:	a924      	add	r1, sp, #144	@ 0x90
 80181dc:	4638      	mov	r0, r7
 80181de:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
 80181e2:	f7f8 ffa5 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
      }
 80181e6:	a825      	add	r0, sp, #148	@ 0x94
 80181e8:	f7e8 fc7a 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80181ec:	a81a      	add	r0, sp, #104	@ 0x68
 80181ee:	f108 0802 	add.w	r8, r8, #2
 80181f2:	f7e8 fc75 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80181f6:	e7cc      	b.n	8018192 <_ZN10Publishers13SpinPublisherEh+0x4e>
				if (topic.activated) {
 80181f8:	f899 3000 	ldrb.w	r3, [r9]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	f000 8095 	beq.w	801832c <_ZN10Publishers13SpinPublisherEh+0x1e8>
					Register element_register = registers->FindRegister(topic.ID, &success);
 8018202:	ab06      	add	r3, sp, #24
 8018204:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8018208:	6869      	ldr	r1, [r5, #4]
 801820a:	4650      	mov	r0, sl
	: _M_start(), _M_finish(), _M_end_of_storage()
 801820c:	9423      	str	r4, [sp, #140]	@ 0x8c
					element.ack = false;
 801820e:	f8ad 407e 	strh.w	r4, [sp, #126]	@ 0x7e
					element.access = false;
 8018212:	f88d 4080 	strb.w	r4, [sp, #128]	@ 0x80
 8018216:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
					Register element_register = registers->FindRegister(topic.ID, &success);
 801821a:	f000 fa87 	bl	801872c <_ZN9Registers12FindRegisterEtPb>
					if (not success)
 801821e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d07f      	beq.n	8018326 <_ZN10Publishers13SpinPublisherEh+0x1e2>
					element.element_register = element_register;
 8018226:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801822a:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 801822e:	901e      	str	r0, [sp, #120]	@ 0x78
					switch (element.element_register.type) {
 8018230:	f3c0 4007 	ubfx	r0, r0, #16, #8
					element.element_register = element_register;
 8018234:	f8ad 107c 	strh.w	r1, [sp, #124]	@ 0x7c
					switch (element.element_register.type) {
 8018238:	2804      	cmp	r0, #4
 801823a:	940c      	str	r4, [sp, #48]	@ 0x30
 801823c:	d005      	beq.n	801824a <_ZN10Publishers13SpinPublisherEh+0x106>
 801823e:	2808      	cmp	r0, #8
 8018240:	f000 80ba 	beq.w	80183b8 <_ZN10Publishers13SpinPublisherEh+0x274>
						success = false;
 8018244:	f88d 4018 	strb.w	r4, [sp, #24]
					if (not success)
 8018248:	e06a      	b.n	8018320 <_ZN10Publishers13SpinPublisherEh+0x1dc>
						register_read = communication->ReadElement<int8_t>(&element, &success);
 801824a:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 801824c:	2701      	movs	r7, #1
 801824e:	f10d 0219 	add.w	r2, sp, #25
 8018252:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8018256:	6858      	ldr	r0, [r3, #4]
 8018258:	ab07      	add	r3, sp, #28
 801825a:	9700      	str	r7, [sp, #0]
 801825c:	940f      	str	r4, [sp, #60]	@ 0x3c
 801825e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8018262:	f7ff fdeb 	bl	8017e3c <_ZN9Registers12ReadRegisterIaEEbtPT_Ptb>
 8018266:	f88d 0018 	strb.w	r0, [sp, #24]
	if (not *success)
 801826a:	2800      	cmp	r0, #0
 801826c:	d04c      	beq.n	8018308 <_ZN10Publishers13SpinPublisherEh+0x1c4>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 801826e:	a91e      	add	r1, sp, #120	@ 0x78
 8018270:	a824      	add	r0, sp, #144	@ 0x90
 8018272:	f7f8 fe5a 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 8018276:	f89d 3093 	ldrb.w	r3, [sp, #147]	@ 0x93
 801827a:	9412      	str	r4, [sp, #72]	@ 0x48
 801827c:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 8018280:	2b00      	cmp	r3, #0
 8018282:	d156      	bne.n	8018332 <_ZN10Publishers13SpinPublisherEh+0x1ee>
		vector = std::vector<T>{*data};
 8018284:	f89d 3019 	ldrb.w	r3, [sp, #25]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018288:	4638      	mov	r0, r7
 801828a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801828e:	f7fe fee1 	bl	8017054 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8018292:	f10d 014d 	add.w	r1, sp, #77	@ 0x4d
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018296:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018298:	4602      	mov	r2, r0
 801829a:	9016      	str	r0, [sp, #88]	@ 0x58
 801829c:	a813      	add	r0, sp, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801829e:	9318      	str	r3, [sp, #96]	@ 0x60
 80182a0:	f7f9 ff60 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80182a4:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_finish =
 80182a6:	9017      	str	r0, [sp, #92]	@ 0x5c
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80182a8:	a810      	add	r0, sp, #64	@ 0x40
 80182aa:	f7ff fad7 	bl	801785c <_ZNSt6vectorIaSaIaEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 80182ae:	a816      	add	r0, sp, #88	@ 0x58
 80182b0:	f7f8 fd0a 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 80182b4:	a827      	add	r0, sp, #156	@ 0x9c
 80182b6:	f7e8 fc13 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80182ba:	e9dd b110 	ldrd	fp, r1, [sp, #64]	@ 0x40
 80182be:	eba1 030b 	sub.w	r3, r1, fp
 80182c2:	9105      	str	r1, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80182c4:	4618      	mov	r0, r3
 80182c6:	9304      	str	r3, [sp, #16]
 80182c8:	f7fe fec4 	bl	8017054 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80182cc:	9b04      	ldr	r3, [sp, #16]
 80182ce:	4602      	mov	r2, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80182d0:	9016      	str	r0, [sp, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80182d2:	4403      	add	r3, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 80182d4:	4607      	mov	r7, r0
 80182d6:	9905      	ldr	r1, [sp, #20]
 80182d8:	4658      	mov	r0, fp
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80182da:	9318      	str	r3, [sp, #96]	@ 0x60
 80182dc:	f7f9 ff42 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
 80182e0:	4683      	mov	fp, r0
	this->_M_impl._M_finish =
 80182e2:	9017      	str	r0, [sp, #92]	@ 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 80182e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80182e6:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
    for (T input : inputs) {
 80182ea:	455f      	cmp	r7, fp
 80182ec:	d14e      	bne.n	801838c <_ZN10Publishers13SpinPublisherEh+0x248>
	data = BuildVector<T>(register_read_vector_cast);
 80182ee:	a913      	add	r1, sp, #76	@ 0x4c
 80182f0:	a80d      	add	r0, sp, #52	@ 0x34
 80182f2:	f7ff f97e 	bl	80175f2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 80182f6:	a813      	add	r0, sp, #76	@ 0x4c
 80182f8:	f7e8 fbf2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80182fc:	a816      	add	r0, sp, #88	@ 0x58
 80182fe:	f7f8 fce3 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
 8018302:	a810      	add	r0, sp, #64	@ 0x40
 8018304:	f7f8 fce0 	bl	8010cc8 <_ZNSt12_Vector_baseIaSaIaEED1Ev>
						register_read = communication->ReadElement<float>(&element, &success);
 8018308:	a90d      	add	r1, sp, #52	@ 0x34
 801830a:	a80a      	add	r0, sp, #40	@ 0x28
 801830c:	f7ff f971 	bl	80175f2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
 8018310:	a80d      	add	r0, sp, #52	@ 0x34
 8018312:	f7e8 fbe5 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
					if (not success)
 8018316:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801831a:	2b00      	cmp	r3, #0
 801831c:	f040 80ff 	bne.w	801851e <_ZN10Publishers13SpinPublisherEh+0x3da>
 8018320:	a80a      	add	r0, sp, #40	@ 0x28
 8018322:	f7e8 fbdd 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8018326:	a821      	add	r0, sp, #132	@ 0x84
 8018328:	f7e8 fbda 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      operator++() _GLIBCXX_NOEXCEPT
 801832c:	f109 0904 	add.w	r9, r9, #4
	return *this;
 8018330:	e741      	b.n	80181b6 <_ZN10Publishers13SpinPublisherEh+0x72>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8018332:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 8018336:	b15f      	cbz	r7, 8018350 <_ZN10Publishers13SpinPublisherEh+0x20c>
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018338:	4638      	mov	r0, r7
 801833a:	f7fe fe8b 	bl	8017054 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801833e:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018340:	4602      	mov	r2, r0
 8018342:	9016      	str	r0, [sp, #88]	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018344:	9318      	str	r3, [sp, #96]	@ 0x60
 8018346:	f10d 0319 	add.w	r3, sp, #25
 801834a:	19d9      	adds	r1, r3, r7
 801834c:	4618      	mov	r0, r3
 801834e:	e7a7      	b.n	80182a0 <_ZN10Publishers13SpinPublisherEh+0x15c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018350:	f8dd 101d 	ldr.w	r1, [sp, #29]
 8018354:	f8dd b019 	ldr.w	fp, [sp, #25]
	  if (__xlen > capacity())
 8018358:	ebb1 070b 	subs.w	r7, r1, fp
 801835c:	d011      	beq.n	8018382 <_ZN10Publishers13SpinPublisherEh+0x23e>
	  pointer __result = this->_M_allocate(__n);
 801835e:	4638      	mov	r0, r7
 8018360:	9105      	str	r1, [sp, #20]
 8018362:	f7fe fe77 	bl	8017054 <_ZNSt12_Vector_baseIaSaIaEE11_M_allocateEj.isra.0>
 8018366:	9905      	ldr	r1, [sp, #20]
 8018368:	4602      	mov	r2, r0
 801836a:	9004      	str	r0, [sp, #16]
 801836c:	4658      	mov	r0, fp
 801836e:	f7f9 fef9 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 8018372:	9a04      	ldr	r2, [sp, #16]
 8018374:	9210      	str	r2, [sp, #64]	@ 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8018376:	443a      	add	r2, r7
 8018378:	9212      	str	r2, [sp, #72]	@ 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 801837a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801837c:	443b      	add	r3, r7
 801837e:	9311      	str	r3, [sp, #68]	@ 0x44
      return *this;
 8018380:	e798      	b.n	80182b4 <_ZN10Publishers13SpinPublisherEh+0x170>
 8018382:	463a      	mov	r2, r7
 8018384:	4658      	mov	r0, fp
 8018386:	f7f9 feed 	bl	8012164 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIaEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801838a:	e7f6      	b.n	801837a <_ZN10Publishers13SpinPublisherEh+0x236>
    for (T input : inputs) {
 801838c:	f917 3b01 	ldrsb.w	r3, [r7], #1
      { emplace_back(std::move(__x)); }
 8018390:	f10d 011a 	add.w	r1, sp, #26
 8018394:	a824      	add	r0, sp, #144	@ 0x90
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018396:	9426      	str	r4, [sp, #152]	@ 0x98
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 8018398:	f88d 301a 	strb.w	r3, [sp, #26]
 801839c:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
      { emplace_back(std::move(__x)); }
 80183a0:	f7f8 fcde 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	  _M_range_insert(__pos, __first, __last,
 80183a4:	a813      	add	r0, sp, #76	@ 0x4c
 80183a6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80183a8:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 80183ac:	f7ff fe5e 	bl	801806c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0>
      }
 80183b0:	a824      	add	r0, sp, #144	@ 0x90
 80183b2:	f7e8 fb95 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 80183b6:	e798      	b.n	80182ea <_ZN10Publishers13SpinPublisherEh+0x1a6>
						register_read = communication->ReadElement<float>(&element, &success);
 80183b8:	68ab      	ldr	r3, [r5, #8]
	*success = registers->ReadRegister<T>(element->element_register.address, &register_read, &length);
 80183ba:	2701      	movs	r7, #1
 80183bc:	aa07      	add	r2, sp, #28
 80183be:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 80183c2:	6858      	ldr	r0, [r3, #4]
 80183c4:	f10d 031a 	add.w	r3, sp, #26
 80183c8:	9700      	str	r7, [sp, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80183ca:	940f      	str	r4, [sp, #60]	@ 0x3c
 80183cc:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 80183d0:	f7f7 fc24 	bl	800fc1c <_ZN9Registers12ReadRegisterIfEEbtPT_Ptb>
 80183d4:	f88d 0018 	strb.w	r0, [sp, #24]
	if (not *success)
 80183d8:	2800      	cmp	r0, #0
 80183da:	d095      	beq.n	8018308 <_ZN10Publishers13SpinPublisherEh+0x1c4>
	std::vector<T> register_read_vector_cast = BuildTVector(*element, &register_read);
 80183dc:	a91e      	add	r1, sp, #120	@ 0x78
 80183de:	a824      	add	r0, sp, #144	@ 0x90
 80183e0:	f7f8 fda3 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
	if (not element.element_register.isArray) {
 80183e4:	f89d 3093 	ldrb.w	r3, [sp, #147]	@ 0x93
 80183e8:	9412      	str	r4, [sp, #72]	@ 0x48
 80183ea:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d13f      	bne.n	8018472 <_ZN10Publishers13SpinPublisherEh+0x32e>
		vector = std::vector<T>{*data};
 80183f2:	9b07      	ldr	r3, [sp, #28]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80183f4:	4638      	mov	r0, r7
 80183f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80183f8:	f7fe fe1a 	bl	8017030 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80183fc:	a914      	add	r1, sp, #80	@ 0x50
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80183fe:	1d03      	adds	r3, r0, #4
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018400:	4602      	mov	r2, r0
 8018402:	9016      	str	r0, [sp, #88]	@ 0x58
 8018404:	a813      	add	r0, sp, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018406:	9318      	str	r3, [sp, #96]	@ 0x60
 8018408:	f7fa fada 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801840c:	a916      	add	r1, sp, #88	@ 0x58
	  this->_M_impl._M_finish =
 801840e:	9017      	str	r0, [sp, #92]	@ 0x5c
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8018410:	a810      	add	r0, sp, #64	@ 0x40
 8018412:	f7ff fa3a 	bl	801788a <_ZNSt6vectorIfSaIfEE14_M_move_assignEOS1_St17integral_constantIbLb1EE.isra.0>
      }
 8018416:	a816      	add	r0, sp, #88	@ 0x58
 8018418:	f7e9 fdc0 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801841c:	a827      	add	r0, sp, #156	@ 0x9c
 801841e:	f7e8 fb5f 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018422:	e9dd b110 	ldrd	fp, r1, [sp, #64]	@ 0x40
 8018426:	eba1 030b 	sub.w	r3, r1, fp
 801842a:	9105      	str	r1, [sp, #20]
	this->_M_impl._M_start = this->_M_allocate(__n);
 801842c:	1098      	asrs	r0, r3, #2
 801842e:	9304      	str	r3, [sp, #16]
 8018430:	f7fe fdfe 	bl	8017030 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018434:	9b04      	ldr	r3, [sp, #16]
 8018436:	4602      	mov	r2, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018438:	9016      	str	r0, [sp, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801843a:	4403      	add	r3, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801843c:	4607      	mov	r7, r0
 801843e:	9905      	ldr	r1, [sp, #20]
 8018440:	4658      	mov	r0, fp
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018442:	9318      	str	r3, [sp, #96]	@ 0x60
 8018444:	f7fa fabc 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8018448:	4683      	mov	fp, r0
	this->_M_impl._M_finish =
 801844a:	9017      	str	r0, [sp, #92]	@ 0x5c
	: _M_start(), _M_finish(), _M_end_of_storage()
 801844c:	9415      	str	r4, [sp, #84]	@ 0x54
 801844e:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
    for (T input : inputs) {
 8018452:	45bb      	cmp	fp, r7
 8018454:	d137      	bne.n	80184c6 <_ZN10Publishers13SpinPublisherEh+0x382>
	data = BuildVector<T>(register_read_vector_cast);
 8018456:	a913      	add	r1, sp, #76	@ 0x4c
 8018458:	a80d      	add	r0, sp, #52	@ 0x34
 801845a:	f7ff f8ca 	bl	80175f2 <_ZNSt6vectorIhSaIhEEaSEOS1_.isra.0>
      }
 801845e:	a813      	add	r0, sp, #76	@ 0x4c
 8018460:	f7e8 fb3e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8018464:	a816      	add	r0, sp, #88	@ 0x58
 8018466:	f7e9 fd99 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 801846a:	a810      	add	r0, sp, #64	@ 0x40
 801846c:	f7e9 fd96 	bl	8001f9c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8018470:	e74a      	b.n	8018308 <_ZN10Publishers13SpinPublisherEh+0x1c4>
	} else if (element.element_register.isArray && element.element_register.length > 0)
 8018472:	f8bd 0094 	ldrh.w	r0, [sp, #148]	@ 0x94
 8018476:	b150      	cbz	r0, 801848e <_ZN10Publishers13SpinPublisherEh+0x34a>
		vector = std::vector<T>(data, data + element.element_register.length);
 8018478:	0087      	lsls	r7, r0, #2
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 801847a:	f7fe fdd9 	bl	8017030 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 801847e:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018480:	19c3      	adds	r3, r0, r7
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8018482:	9016      	str	r0, [sp, #88]	@ 0x58
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018484:	9318      	str	r3, [sp, #96]	@ 0x60
 8018486:	ab07      	add	r3, sp, #28
 8018488:	19d9      	adds	r1, r3, r7
 801848a:	4618      	mov	r0, r3
 801848c:	e7bc      	b.n	8018408 <_ZN10Publishers13SpinPublisherEh+0x2c4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801848e:	e9dd b107 	ldrd	fp, r1, [sp, #28]
	  if (__xlen > capacity())
 8018492:	ebb1 070b 	subs.w	r7, r1, fp
 8018496:	d011      	beq.n	80184bc <_ZN10Publishers13SpinPublisherEh+0x378>
	  pointer __result = this->_M_allocate(__n);
 8018498:	10b8      	asrs	r0, r7, #2
 801849a:	9105      	str	r1, [sp, #20]
 801849c:	f7fe fdc8 	bl	8017030 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj.isra.0>
 80184a0:	9905      	ldr	r1, [sp, #20]
 80184a2:	4602      	mov	r2, r0
 80184a4:	9004      	str	r0, [sp, #16]
 80184a6:	4658      	mov	r0, fp
 80184a8:	f7fa fa8a 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 80184ac:	9a04      	ldr	r2, [sp, #16]
 80184ae:	9210      	str	r2, [sp, #64]	@ 0x40
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 80184b0:	443a      	add	r2, r7
 80184b2:	9212      	str	r2, [sp, #72]	@ 0x48
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 80184b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80184b6:	443b      	add	r3, r7
 80184b8:	9311      	str	r3, [sp, #68]	@ 0x44
      return *this;
 80184ba:	e7af      	b.n	801841c <_ZN10Publishers13SpinPublisherEh+0x2d8>
 80184bc:	463a      	mov	r2, r7
 80184be:	4658      	mov	r0, fp
 80184c0:	f7fa fa7e 	bl	80129c0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80184c4:	e7f6      	b.n	80184b4 <_ZN10Publishers13SpinPublisherEh+0x370>
    for (T input : inputs) {
 80184c6:	f857 2b04 	ldr.w	r2, [r7], #4
    std::memcpy(&reinterpreted_input, &input, sizeof(T)); // this is mandatory to get rid of the memory alignment problem. A simple cast can't work here
 80184ca:	2318      	movs	r3, #24
	: _M_start(), _M_finish(), _M_end_of_storage()
 80184cc:	9426      	str	r4, [sp, #152]	@ 0x98
 80184ce:	e9cd 4424 	strd	r4, r4, [sp, #144]	@ 0x90
		data.push_back((uint8_t) ((reinterpreted_input >> ((type_length - 1 - index) << 3)) & 0xFF)); // previously (8 * (type_length - 1 - index))) & 0xFF))
 80184d2:	f1c3 0c20 	rsb	ip, r3, #32
 80184d6:	fa22 f103 	lsr.w	r1, r2, r3
 80184da:	f1a3 0020 	sub.w	r0, r3, #32
 80184de:	fa04 fc0c 	lsl.w	ip, r4, ip
 80184e2:	fa24 f000 	lsr.w	r0, r4, r0
 80184e6:	ea41 010c 	orr.w	r1, r1, ip
 80184ea:	4301      	orrs	r1, r0
      { emplace_back(std::move(__x)); }
 80184ec:	a824      	add	r0, sp, #144	@ 0x90
 80184ee:	f88d 1019 	strb.w	r1, [sp, #25]
 80184f2:	f10d 0119 	add.w	r1, sp, #25
 80184f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80184fa:	f7f8 fc31 	bl	8010d60 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
	for (uint8_t index = 0; index < type_length; index++) {
 80184fe:	9b05      	ldr	r3, [sp, #20]
 8018500:	9a04      	ldr	r2, [sp, #16]
 8018502:	3b08      	subs	r3, #8
 8018504:	f113 0f08 	cmn.w	r3, #8
 8018508:	d1e3      	bne.n	80184d2 <_ZN10Publishers13SpinPublisherEh+0x38e>
	  _M_range_insert(__pos, __first, __last,
 801850a:	a813      	add	r0, sp, #76	@ 0x4c
 801850c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801850e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	@ 0x90
 8018512:	f7ff fdab 	bl	801806c <_ZNSt6vectorIhSaIhEE15_M_range_insertIN9__gnu_cxx17__normal_iteratorIPhS1_EEEEvS6_T_S7_St20forward_iterator_tag.isra.0>
      }
 8018516:	a824      	add	r0, sp, #144	@ 0x90
 8018518:	f7e8 fae2 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
	return *this;
 801851c:	e799      	b.n	8018452 <_ZN10Publishers13SpinPublisherEh+0x30e>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801851e:	e9dd b10a 	ldrd	fp, r1, [sp, #40]	@ 0x28
	  if (__xlen > capacity())
 8018522:	ebb1 070b 	subs.w	r7, r1, fp
 8018526:	d04e      	beq.n	80185c6 <_ZN10Publishers13SpinPublisherEh+0x482>
	  pointer __result = this->_M_allocate(__n);
 8018528:	4638      	mov	r0, r7
 801852a:	9105      	str	r1, [sp, #20]
 801852c:	f7fe fd9d 	bl	801706a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj.isra.0>
 8018530:	9905      	ldr	r1, [sp, #20]
 8018532:	4602      	mov	r2, r0
 8018534:	9004      	str	r0, [sp, #16]
 8018536:	4658      	mov	r0, fp
 8018538:	f7e8 fb76 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
	      this->_M_impl._M_start = __tmp;
 801853c:	9a04      	ldr	r2, [sp, #16]
 801853e:	9221      	str	r2, [sp, #132]	@ 0x84
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8018540:	443a      	add	r2, r7
 8018542:	9223      	str	r2, [sp, #140]	@ 0x8c
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8018544:	9b21      	ldr	r3, [sp, #132]	@ 0x84
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 8018546:	a91e      	add	r1, sp, #120	@ 0x78
 8018548:	a824      	add	r0, sp, #144	@ 0x90
 801854a:	443b      	add	r3, r7
 801854c:	68af      	ldr	r7, [r5, #8]
 801854e:	9322      	str	r3, [sp, #136]	@ 0x88
 8018550:	f7f8 fceb 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 8018554:	aa24      	add	r2, sp, #144	@ 0x90
 8018556:	a919      	add	r1, sp, #100	@ 0x64
 8018558:	4638      	mov	r0, r7
 801855a:	f7f9 fc75 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
 801855e:	2800      	cmp	r0, #0
 8018560:	d136      	bne.n	80185d0 <_ZN10Publishers13SpinPublisherEh+0x48c>
 8018562:	e9dd 371a 	ldrd	r3, r7, [sp, #104]	@ 0x68
 8018566:	1aff      	subs	r7, r7, r3
 8018568:	bf18      	it	ne
 801856a:	2701      	movne	r7, #1
      }
 801856c:	a827      	add	r0, sp, #156	@ 0x9c
 801856e:	f7e8 fab7 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8018572:	2f00      	cmp	r7, #0
 8018574:	f43f aed4 	beq.w	8018320 <_ZN10Publishers13SpinPublisherEh+0x1dc>
 8018578:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801857c:	a91a      	add	r1, sp, #104	@ 0x68
						communication->Send(message);
 801857e:	68af      	ldr	r7, [r5, #8]
 8018580:	a825      	add	r0, sp, #148	@ 0x94
 8018582:	f88d 3090 	strb.w	r3, [sp, #144]	@ 0x90
 8018586:	f7e8 fb5b 	bl	8000c40 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
 801858a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 801858e:	a924      	add	r1, sp, #144	@ 0x90
 8018590:	4638      	mov	r0, r7
 8018592:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
 8018596:	f7f8 fdcb 	bl	8011130 <_ZN13Communication4SendE13MessageHeader>
 801859a:	a825      	add	r0, sp, #148	@ 0x94
 801859c:	f7e8 faa0 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
						communication->BuildPayload(&message, element);
 80185a0:	68af      	ldr	r7, [r5, #8]
 80185a2:	a91e      	add	r1, sp, #120	@ 0x78
 80185a4:	a824      	add	r0, sp, #144	@ 0x90
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80185a6:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80185aa:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 80185ac:	bf18      	it	ne
 80185ae:	931b      	strne	r3, [sp, #108]	@ 0x6c
 80185b0:	f7f8 fcbb 	bl	8010f2a <_ZN14MessageElementC1ERKS_>
 80185b4:	aa24      	add	r2, sp, #144	@ 0x90
 80185b6:	a919      	add	r1, sp, #100	@ 0x64
 80185b8:	4638      	mov	r0, r7
 80185ba:	f7f9 fc45 	bl	8011e48 <_ZN13Communication12BuildPayloadEP13MessageHeader14MessageElement>
      }
 80185be:	a827      	add	r0, sp, #156	@ 0x9c
 80185c0:	f7e8 fa8e 	bl	8000ae0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80185c4:	e6ac      	b.n	8018320 <_ZN10Publishers13SpinPublisherEh+0x1dc>
 80185c6:	463a      	mov	r2, r7
 80185c8:	4658      	mov	r0, fp
 80185ca:	f7e8 fb2d 	bl	8000c28 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80185ce:	e7b9      	b.n	8018544 <_ZN10Publishers13SpinPublisherEh+0x400>
					if (not communication->BuildPayload(&message, element) && message.payload.size() > 0) {
 80185d0:	2700      	movs	r7, #0
 80185d2:	e7cb      	b.n	801856c <_ZN10Publishers13SpinPublisherEh+0x428>

080185d4 <_ZZN9Registers16AddBaseRegistersEvENUlPvtPPmPtE_4_FUNES0_tS2_S3_>:
void Registers::AddBaseRegisters(void) {
	// Register to get the timestamp in ms
	AddRegister<uint32_t>(REG_TIMEBASE);
	SetRegisterAsSingle(REG_TIMEBASE);
	AddReadCallback<uint32_t>(REG_TIMEBASE, NULL,
		[](void* context, uint16_t register_id, uint32_t** output, uint16_t* length) -> bool {
 80185d4:	b538      	push	{r3, r4, r5, lr}
			*length = 1;
 80185d6:	2401      	movs	r4, #1
			**output = HAL_GetTick();
 80185d8:	6815      	ldr	r5, [r2, #0]
			*length = 1;
 80185da:	801c      	strh	r4, [r3, #0]
			**output = HAL_GetTick();
 80185dc:	f7ea ff76 	bl	80034cc <HAL_GetTick>
 80185e0:	6028      	str	r0, [r5, #0]
			return true;
		}
 80185e2:	4620      	mov	r0, r4
 80185e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080185e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80185e8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80185ea:	491e      	ldr	r1, [pc, #120]	@ (8018664 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80185ec:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80185ee:	481e      	ldr	r0, [pc, #120]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80185f0:	f004 fb56 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80185f4:	bb40      	cbnz	r0, 8018648 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80185f6:	491d      	ldr	r1, [pc, #116]	@ (801866c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 80185f8:	481b      	ldr	r0, [pc, #108]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 80185fa:	f004 fb51 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80185fe:	bb28      	cbnz	r0, 801864c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018600:	4919      	ldr	r1, [pc, #100]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018602:	4608      	mov	r0, r1
 8018604:	f004 fb4c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018608:	bb10      	cbnz	r0, 8018650 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801860a:	4919      	ldr	r1, [pc, #100]	@ (8018670 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 801860c:	4816      	ldr	r0, [pc, #88]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801860e:	f004 fb47 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018612:	b9f8      	cbnz	r0, 8018654 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018614:	4917      	ldr	r1, [pc, #92]	@ (8018674 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8018616:	4814      	ldr	r0, [pc, #80]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018618:	f004 fb42 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801861c:	b9e0      	cbnz	r0, 8018658 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801861e:	4916      	ldr	r1, [pc, #88]	@ (8018678 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8018620:	4811      	ldr	r0, [pc, #68]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018622:	f004 fb3d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018626:	b9c8      	cbnz	r0, 801865c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018628:	4914      	ldr	r1, [pc, #80]	@ (801867c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 801862a:	480f      	ldr	r0, [pc, #60]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 801862c:	f004 fb38 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018630:	b9b0      	cbnz	r0, 8018660 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018632:	4913      	ldr	r1, [pc, #76]	@ (8018680 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8018634:	480c      	ldr	r0, [pc, #48]	@ (8018668 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018636:	f004 fb33 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801863a:	2800      	cmp	r0, #0
 801863c:	bf14      	ite	ne
 801863e:	2309      	movne	r3, #9
 8018640:	2300      	moveq	r3, #0
 8018642:	7020      	strb	r0, [r4, #0]
}
 8018644:	4618      	mov	r0, r3
 8018646:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018648:	2300      	movs	r3, #0
 801864a:	e7fa      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801864c:	2301      	movs	r3, #1
 801864e:	e7f8      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018650:	2302      	movs	r3, #2
 8018652:	e7f6      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018654:	2303      	movs	r3, #3
 8018656:	e7f4      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018658:	2304      	movs	r3, #4
 801865a:	e7f2      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801865c:	2306      	movs	r3, #6
 801865e:	e7f0      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018660:	2308      	movs	r3, #8
 8018662:	e7ee      	b.n	8018642 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 8018664:	0801e1c4 	.word	0x0801e1c4
 8018668:	0801e1ac 	.word	0x0801e1ac
 801866c:	0801e1bc 	.word	0x0801e1bc
 8018670:	0801e1a4 	.word	0x0801e1a4
 8018674:	0801e1cc 	.word	0x0801e1cc
 8018678:	0801e1b4 	.word	0x0801e1b4
 801867c:	0801e19c 	.word	0x0801e19c
 8018680:	0801e194 	.word	0x0801e194

08018684 <_ZN9RegistersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018684:	2200      	movs	r2, #0
 8018686:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801868a:	60c2      	str	r2, [r0, #12]
	callbacks[INT16_TYPE] = NULL;
 801868c:	6242      	str	r2, [r0, #36]	@ 0x24
	callbacks[INT64_TYPE] = NULL;
 801868e:	62c2      	str	r2, [r0, #44]	@ 0x2c
 8018690:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8018694:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8018698:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 801869c:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 80186a0:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 80186a4:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 80186a8:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 80186ac:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 80186b0:	e9c0 221e 	strd	r2, r2, [r0, #120]	@ 0x78
 80186b4:	e9c0 2220 	strd	r2, r2, [r0, #128]	@ 0x80
 80186b8:	e9c0 2222 	strd	r2, r2, [r0, #136]	@ 0x88
 80186bc:	e9c0 2224 	strd	r2, r2, [r0, #144]	@ 0x90
Registers::Registers() {
 80186c0:	f100 0238 	add.w	r2, r0, #56	@ 0x38
	callbacks[UINT8_TYPE] = &uint8_t_callbacks;
 80186c4:	6102      	str	r2, [r0, #16]
Registers::Registers() {
 80186c6:	f100 0244 	add.w	r2, r0, #68	@ 0x44
	callbacks[UINT16_TYPE] = &uint16_t_callbacks;
 80186ca:	6142      	str	r2, [r0, #20]
Registers::Registers() {
 80186cc:	f100 0250 	add.w	r2, r0, #80	@ 0x50
	callbacks[UINT32_TYPE] = &uint32_t_callbacks;
 80186d0:	6182      	str	r2, [r0, #24]
Registers::Registers() {
 80186d2:	f100 025c 	add.w	r2, r0, #92	@ 0x5c
	callbacks[UINT64_TYPE] = &uint64_t_callbacks;
 80186d6:	61c2      	str	r2, [r0, #28]
Registers::Registers() {
 80186d8:	f100 0268 	add.w	r2, r0, #104	@ 0x68
	callbacks[INT8_TYPE] = &int8_t_callbacks;
 80186dc:	6202      	str	r2, [r0, #32]
Registers::Registers() {
 80186de:	f100 0274 	add.w	r2, r0, #116	@ 0x74
	callbacks[INT32_TYPE] = &int32_t_callbacks;
 80186e2:	6282      	str	r2, [r0, #40]	@ 0x28
Registers::Registers() {
 80186e4:	f100 0280 	add.w	r2, r0, #128	@ 0x80
	callbacks[FLOAT_TYPE] = &float_callbacks;
 80186e8:	6302      	str	r2, [r0, #48]	@ 0x30
Registers::Registers() {
 80186ea:	f100 028c 	add.w	r2, r0, #140	@ 0x8c
	callbacks[DOUBLE_TYPE] = &double_callbacks;
 80186ee:	6342      	str	r2, [r0, #52]	@ 0x34
}
 80186f0:	4770      	bx	lr

080186f2 <_ZN9Registers4InitEv>:
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 80186f2:	2101      	movs	r1, #1
 80186f4:	2200      	movs	r2, #0
void Registers::Init(void) {
 80186f6:	b510      	push	{r4, lr}
 80186f8:	4604      	mov	r4, r0
	RegistersSemaphore = osSemaphoreNew(1,1,NULL);
 80186fa:	4608      	mov	r0, r1
 80186fc:	f7f4 fb3a 	bl	800cd74 <osSemaphoreNew>
 8018700:	6020      	str	r0, [r4, #0]
}
 8018702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(RegistersSemaphore);
 8018706:	f7f4 bbc5 	b.w	800ce94 <osSemaphoreRelease>

0801870a <_ZN9Registers25FindRegisterConfigurationEtPb>:
 *
 * @param input ID: register address
 * @param output success: whether successful
 * @return the pointer to the register configuration
 */
RegisterConfiguration* Registers::FindRegisterConfiguration(uint16_t ID, bool* success) {
 801870a:	b530      	push	{r4, r5, lr}
 801870c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
	for (RegisterConfiguration &register_configuration : registers) {
 8018710:	429c      	cmp	r4, r3
 8018712:	4618      	mov	r0, r3
 8018714:	d103      	bne.n	801871e <_ZN9Registers25FindRegisterConfigurationEtPb+0x14>
 8018716:	2300      	movs	r3, #0
			*success = true;
			return &register_configuration;
		}
	}
	*success = false;
	return NULL;
 8018718:	4618      	mov	r0, r3
			*success = true;
 801871a:	7013      	strb	r3, [r2, #0]
}
 801871c:	bd30      	pop	{r4, r5, pc}
		if (register_configuration.register_info.address == ID) {
 801871e:	8845      	ldrh	r5, [r0, #2]
 8018720:	f100 0310 	add.w	r3, r0, #16
 8018724:	428d      	cmp	r5, r1
 8018726:	d1f3      	bne.n	8018710 <_ZN9Registers25FindRegisterConfigurationEtPb+0x6>
 8018728:	2301      	movs	r3, #1
 801872a:	e7f6      	b.n	801871a <_ZN9Registers25FindRegisterConfigurationEtPb+0x10>

0801872c <_ZN9Registers12FindRegisterEtPb>:
Register Registers::FindRegister(uint16_t ID, bool* success) {
 801872c:	b510      	push	{r4, lr}
 801872e:	4604      	mov	r4, r0
 8018730:	4608      	mov	r0, r1
 8018732:	4611      	mov	r1, r2
	RegisterConfiguration* register_configuration = FindRegisterConfiguration(ID, success);
 8018734:	461a      	mov	r2, r3
 8018736:	f7ff ffe8 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	return register_configuration->register_info;
 801873a:	f8d0 3002 	ldr.w	r3, [r0, #2]
 801873e:	6023      	str	r3, [r4, #0]
 8018740:	88c3      	ldrh	r3, [r0, #6]
}
 8018742:	4620      	mov	r0, r4
	return register_configuration->register_info;
 8018744:	80a3      	strh	r3, [r4, #4]
}
 8018746:	bd10      	pop	{r4, pc}

08018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>:
 *
 * @param input ID: register address
 * @param input register_semaphore: pointer to the semaphore to link
 * @return whether successful
 */
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8018748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801874a:	460e      	mov	r6, r1
 801874c:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801874e:	f04f 31ff 	mov.w	r1, #4294967295
 8018752:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterSemaphore(uint16_t ID, osSemaphoreId_t* register_semaphore) {
 8018754:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018756:	f7f4 fb69 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801875a:	4631      	mov	r1, r6
 801875c:	f10d 0207 	add.w	r2, sp, #7
 8018760:	4620      	mov	r0, r4
 8018762:	f7ff ffd2 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018766:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801876a:	b92e      	cbnz	r6, 8018778 <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x30>
		osSemaphoreRelease(RegistersSemaphore);
		return false;
	}

	target_register->register_semaphore = register_semaphore;
	osSemaphoreRelease(RegistersSemaphore);
 801876c:	6820      	ldr	r0, [r4, #0]
 801876e:	f7f4 fb91 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 8018772:	4630      	mov	r0, r6
 8018774:	b002      	add	sp, #8
 8018776:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_semaphore = register_semaphore;
 8018778:	60c5      	str	r5, [r0, #12]
 801877a:	e7f7      	b.n	801876c <_ZN9Registers20AddRegisterSemaphoreEtPPv+0x24>

0801877c <_ZN9Registers19SetRegisterAsSingleEt>:
 * @brief Set the register as a single value (not an array nor a vector)
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsSingle(uint16_t ID) {
 801877c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801877e:	460d      	mov	r5, r1
 8018780:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018782:	f04f 31ff 	mov.w	r1, #4294967295
 8018786:	6800      	ldr	r0, [r0, #0]
 8018788:	f7f4 fb50 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801878c:	4629      	mov	r1, r5
 801878e:	f10d 0207 	add.w	r2, sp, #7
 8018792:	4620      	mov	r0, r4
 8018794:	f7ff ffb9 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018798:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801879c:	b92d      	cbnz	r5, 80187aa <_ZN9Registers19SetRegisterAsSingleEt+0x2e>
		return false;
	}

	target_register->register_info.isArray = false;
	target_register->register_info.length = 1;
	osSemaphoreRelease(RegistersSemaphore);
 801879e:	6820      	ldr	r0, [r4, #0]
 80187a0:	f7f4 fb78 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 80187a4:	4628      	mov	r0, r5
 80187a6:	b003      	add	sp, #12
 80187a8:	bd30      	pop	{r4, r5, pc}
	target_register->register_info.isArray = false;
 80187aa:	2300      	movs	r3, #0
 80187ac:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = 1;
 80187ae:	2301      	movs	r3, #1
 80187b0:	80c3      	strh	r3, [r0, #6]
 80187b2:	e7f4      	b.n	801879e <_ZN9Registers19SetRegisterAsSingleEt+0x22>

080187b4 <_ZN9Registers18SetRegisterAsArrayEtt>:
 *
 * @param input ID: register address
 * @param input length_: length of the array
 * @return whether successful
 */
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 80187b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80187b6:	460e      	mov	r6, r1
 80187b8:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80187ba:	f04f 31ff 	mov.w	r1, #4294967295
 80187be:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterAsArray(uint16_t ID, uint16_t length_) {
 80187c0:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80187c2:	f7f4 fb33 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80187c6:	4631      	mov	r1, r6
 80187c8:	f10d 0207 	add.w	r2, sp, #7
 80187cc:	4620      	mov	r0, r4
 80187ce:	f7ff ff9c 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80187d2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80187d6:	b92e      	cbnz	r6, 80187e4 <_ZN9Registers18SetRegisterAsArrayEtt+0x30>
		return false;
	}

	target_register->register_info.isArray = true;
	target_register->register_info.length = length_;
	osSemaphoreRelease(RegistersSemaphore);
 80187d8:	6820      	ldr	r0, [r4, #0]
 80187da:	f7f4 fb5b 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 80187de:	4630      	mov	r0, r6
 80187e0:	b002      	add	sp, #8
 80187e2:	bd70      	pop	{r4, r5, r6, pc}
	target_register->register_info.isArray = true;
 80187e4:	2301      	movs	r3, #1
	target_register->register_info.length = length_;
 80187e6:	80c5      	strh	r5, [r0, #6]
	target_register->register_info.isArray = true;
 80187e8:	7143      	strb	r3, [r0, #5]
	target_register->register_info.length = length_;
 80187ea:	e7f5      	b.n	80187d8 <_ZN9Registers18SetRegisterAsArrayEtt+0x24>

080187ec <_ZN9Registers19SetRegisterAsVectorEt>:
 *
 * @param input ID: register address
 * @return whether successful
 */
bool Registers::SetRegisterAsVector(uint16_t ID) {
	return SetRegisterAsArray(ID, 0);
 80187ec:	2200      	movs	r2, #0
 80187ee:	f7ff bfe1 	b.w	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>

080187f2 <_ZN9Registers22SetRegisterPermissionsEth>:
 *
 * @param input ID: register address
 * @param input permissions_: WRITE_PERMISSION or READ_PERMISSION
 * @return whether successful
 */
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 80187f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80187f4:	460e      	mov	r6, r1
 80187f6:	4604      	mov	r4, r0
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 80187f8:	f04f 31ff 	mov.w	r1, #4294967295
 80187fc:	6800      	ldr	r0, [r0, #0]
bool Registers::SetRegisterPermissions(uint16_t ID, uint8_t permissions_) {
 80187fe:	4615      	mov	r5, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018800:	f7f4 fb14 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 8018804:	4631      	mov	r1, r6
 8018806:	f10d 0207 	add.w	r2, sp, #7
 801880a:	4620      	mov	r0, r4
 801880c:	f7ff ff7d 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 8018810:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8018814:	b92e      	cbnz	r6, 8018822 <_ZN9Registers22SetRegisterPermissionsEth+0x30>
		return false;
	}

	target_register->access.write = permissions_ & WRITE_PERMISSION;
	target_register->access.read = permissions_ & READ_PERMISSION;
	osSemaphoreRelease(RegistersSemaphore);
 8018816:	6820      	ldr	r0, [r4, #0]
 8018818:	f7f4 fb3c 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 801881c:	4630      	mov	r0, r6
 801881e:	b002      	add	sp, #8
 8018820:	bd70      	pop	{r4, r5, r6, pc}
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 8018822:	f005 0301 	and.w	r3, r5, #1
	target_register->access.read = permissions_ & READ_PERMISSION;
 8018826:	f3c5 0540 	ubfx	r5, r5, #1, #1
	target_register->access.write = permissions_ & WRITE_PERMISSION;
 801882a:	7203      	strb	r3, [r0, #8]
	target_register->access.read = permissions_ & READ_PERMISSION;
 801882c:	7245      	strb	r5, [r0, #9]
 801882e:	e7f2      	b.n	8018816 <_ZN9Registers22SetRegisterPermissionsEth+0x24>

08018830 <_ZN9Registers12IsRegisteredEt>:
 * @brief Check the register exists
 *
 * @param input ID: register address to check
 * @return true if the register is found
 */
bool Registers::IsRegistered(uint16_t ID) {
 8018830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018832:	4604      	mov	r4, r0
 8018834:	460d      	mov	r5, r1
	bool success;
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018836:	6800      	ldr	r0, [r0, #0]
 8018838:	f04f 31ff 	mov.w	r1, #4294967295
 801883c:	f7f4 faf6 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 8018840:	f10d 0207 	add.w	r2, sp, #7
 8018844:	4629      	mov	r1, r5
 8018846:	4620      	mov	r0, r4
 8018848:	f7ff ff5f 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	osSemaphoreRelease(RegistersSemaphore);
 801884c:	6820      	ldr	r0, [r4, #0]
 801884e:	f7f4 fb21 	bl	800ce94 <osSemaphoreRelease>
	return success;
}
 8018852:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8018856:	b003      	add	sp, #12
 8018858:	bd30      	pop	{r4, r5, pc}
	...

0801885c <_ZN9Registers11GetTypeSizeEh>:
 *
 * @param input type: the type ID
 * @return the size in byte of the input type
 */
uint8_t Registers::GetTypeSize(uint8_t type) {
	if (type == UINT8_TYPE || type == INT8_TYPE)
 801885c:	2909      	cmp	r1, #9
 801885e:	bf9a      	itte	ls
 8018860:	4b01      	ldrls	r3, [pc, #4]	@ (8018868 <_ZN9Registers11GetTypeSizeEh+0xc>)
 8018862:	5c58      	ldrbls	r0, [r3, r1]
uint8_t Registers::GetTypeSize(uint8_t type) {
 8018864:	2000      	movhi	r0, #0
		return 4;
	if (type == UINT64_TYPE || type == INT64_TYPE || type == DOUBLE_TYPE)
		return 8;

	return 0;
}
 8018866:	4770      	bx	lr
 8018868:	0801e0c4 	.word	0x0801e0c4

0801886c <_ZN9Registers16AddBaseRegistersEv>:
void Registers::AddBaseRegisters(void) {
 801886c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801886e:	4604      	mov	r4, r0
 8018870:	b087      	sub	sp, #28
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 8018872:	f04f 31ff 	mov.w	r1, #4294967295
 8018876:	6800      	ldr	r0, [r0, #0]
 8018878:	f7f4 fad8 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801887c:	f10d 0207 	add.w	r2, sp, #7
 8018880:	2100      	movs	r1, #0
 8018882:	4620      	mov	r0, r4
 8018884:	f7ff ff41 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 8018888:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801888c:	b1dd      	cbz	r5, 80188c6 <_ZN9Registers16AddBaseRegistersEv+0x5a>
	osSemaphoreRelease(RegistersSemaphore);
 801888e:	6820      	ldr	r0, [r4, #0]
 8018890:	f7f4 fb00 	bl	800ce94 <osSemaphoreRelease>
	SetRegisterAsSingle(REG_TIMEBASE);
 8018894:	2100      	movs	r1, #0
 8018896:	4620      	mov	r0, r4
 8018898:	f7ff ff70 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801889c:	f04f 31ff 	mov.w	r1, #4294967295
 80188a0:	6820      	ldr	r0, [r4, #0]
 80188a2:	f7f4 fac3 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80188a6:	f10d 0207 	add.w	r2, sp, #7
 80188aa:	2100      	movs	r1, #0
 80188ac:	4620      	mov	r0, r4
 80188ae:	f7ff ff2c 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 80188b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 80188b6:	4605      	mov	r5, r0
	if (!success) {
 80188b8:	bb3b      	cbnz	r3, 801890a <_ZN9Registers16AddBaseRegistersEv+0x9e>
	osSemaphoreRelease(RegistersSemaphore);
 80188ba:	6820      	ldr	r0, [r4, #0]
}
 80188bc:	b007      	add	sp, #28
 80188be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80188c2:	f7f4 bae7 	b.w	800ce94 <osSemaphoreRelease>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 80188c6:	f10d 0007 	add.w	r0, sp, #7
 80188ca:	f7ff fe8d 	bl	80185e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 80188ce:	2301      	movs	r3, #1
	configuration_.mode = mode;
 80188d0:	9502      	str	r5, [sp, #8]
	configuration_.register_info = register_;
 80188d2:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 80188d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 80188da:	f88d 000c 	strb.w	r0, [sp, #12]
 80188de:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 80188e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d0d1      	beq.n	801888e <_ZN9Registers16AddBaseRegistersEv+0x22>
      push_back(const value_type& __x)
 80188ea:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80188ec:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 80188f0:	429d      	cmp	r5, r3
 80188f2:	d005      	beq.n	8018900 <_ZN9Registers16AddBaseRegistersEv+0x94>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80188f4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80188f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 80188fa:	3510      	adds	r5, #16
 80188fc:	60a5      	str	r5, [r4, #8]
 80188fe:	e7c6      	b.n	801888e <_ZN9Registers16AddBaseRegistersEv+0x22>
	  _M_realloc_insert(end(), __x);
 8018900:	4629      	mov	r1, r5
 8018902:	1d20      	adds	r0, r4, #4
 8018904:	f7f7 fa34 	bl	800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 8018908:	e7c1      	b.n	801888e <_ZN9Registers16AddBaseRegistersEv+0x22>
	uint8_t registered_type = GetTypeID<T>(&success);
 801890a:	f10d 0007 	add.w	r0, sp, #7
 801890e:	f7ff fe6b 	bl	80185e8 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 8018912:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d0cf      	beq.n	80188ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (target_register->register_info.type != registered_type) {
 801891a:	792b      	ldrb	r3, [r5, #4]
 801891c:	4298      	cmp	r0, r3
 801891e:	d1cc      	bne.n	80188ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (callbacks[target_register->register_info.type] == NULL) {
 8018920:	3004      	adds	r0, #4
 8018922:	f854 7020 	ldr.w	r7, [r4, r0, lsl #2]
 8018926:	2f00      	cmp	r7, #0
 8018928:	d0c7      	beq.n	80188ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801892a:	7829      	ldrb	r1, [r5, #0]
 801892c:	4814      	ldr	r0, [pc, #80]	@ (8018980 <_ZN9Registers16AddBaseRegistersEv+0x114>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801892e:	e9d7 3600 	ldrd	r3, r6, [r7]
 8018932:	1af2      	subs	r2, r6, r3
 8018934:	1112      	asrs	r2, r2, #4
 8018936:	b9b1      	cbnz	r1, 8018966 <_ZN9Registers16AddBaseRegistersEv+0xfa>
 8018938:	7869      	ldrb	r1, [r5, #1]
 801893a:	b9a1      	cbnz	r1, 8018966 <_ZN9Registers16AddBaseRegistersEv+0xfa>
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801893c:	816a      	strh	r2, [r5, #10]
 801893e:	aa02      	add	r2, sp, #8
		callback.read = read;
 8018940:	9005      	str	r0, [sp, #20]
		callback.write = NULL;
 8018942:	e9cd 1103 	strd	r1, r1, [sp, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8018946:	68b9      	ldr	r1, [r7, #8]
 8018948:	42b1      	cmp	r1, r6
 801894a:	d008      	beq.n	801895e <_ZN9Registers16AddBaseRegistersEv+0xf2>
 801894c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801894e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8018952:	3610      	adds	r6, #16
 8018954:	607e      	str	r6, [r7, #4]
	target_register->mode.callbacks = true;
 8018956:	2301      	movs	r3, #1
 8018958:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 801895a:	726b      	strb	r3, [r5, #9]
 801895c:	e7ad      	b.n	80188ba <_ZN9Registers16AddBaseRegistersEv+0x4e>
	  _M_realloc_insert(end(), __x);
 801895e:	4638      	mov	r0, r7
 8018960:	f7fb fc94 	bl	801428c <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 8018964:	e7f7      	b.n	8018956 <_ZN9Registers16AddBaseRegistersEv+0xea>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 8018966:	8969      	ldrh	r1, [r5, #10]
	if (__n >= this->size())
 8018968:	4291      	cmp	r1, r2
 801896a:	d302      	bcc.n	8018972 <_ZN9Registers16AddBaseRegistersEv+0x106>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801896c:	4805      	ldr	r0, [pc, #20]	@ (8018984 <_ZN9Registers16AddBaseRegistersEv+0x118>)
 801896e:	f004 f9b8 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8018972:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->context = context;
 8018976:	2200      	movs	r2, #0
		callback->read = read;
 8018978:	60d8      	str	r0, [r3, #12]
		callback->context = context;
 801897a:	605a      	str	r2, [r3, #4]
 801897c:	e7eb      	b.n	8018956 <_ZN9Registers16AddBaseRegistersEv+0xea>
 801897e:	bf00      	nop
 8018980:	080185d5 	.word	0x080185d5
 8018984:	0801dfb4 	.word	0x0801dfb4

08018988 <_ZZN7Sensors12AddRegistersEvENUlPvtPPhPtE_4_FUNES0_tS2_S3_>:
void Sensors::AddRegisters(void) {
	// Register to access the general sensor reading status
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
			[](void* context, uint16_t register_id, uint8_t** output, uint16_t* length) -> bool {
 8018988:	b538      	push	{r3, r4, r5, lr}
 801898a:	4604      	mov	r4, r0
 801898c:	4615      	mov	r5, r2
			Sensors* self = (Sensors*) context;
			osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 801898e:	f04f 31ff 	mov.w	r1, #4294967295
 8018992:	6800      	ldr	r0, [r0, #0]
 8018994:	f7f4 fa4a 	bl	800ce2c <osSemaphoreAcquire>
			**output = (uint8_t) self->active;
 8018998:	682b      	ldr	r3, [r5, #0]
 801899a:	7922      	ldrb	r2, [r4, #4]
 801899c:	701a      	strb	r2, [r3, #0]
			osSemaphoreRelease(self->SensorsSemaphore);
 801899e:	6820      	ldr	r0, [r4, #0]
 80189a0:	f7f4 fa78 	bl	800ce94 <osSemaphoreRelease>
			return true;
		}
 80189a4:	2001      	movs	r0, #1
 80189a6:	bd38      	pop	{r3, r4, r5, pc}

080189a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 80189a8:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80189aa:	491e      	ldr	r1, [pc, #120]	@ (8018a24 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 80189ac:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 80189ae:	481e      	ldr	r0, [pc, #120]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189b0:	f004 f976 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189b4:	bb40      	cbnz	r0, 8018a08 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 80189b6:	491d      	ldr	r1, [pc, #116]	@ (8018a2c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x84>)
 80189b8:	481b      	ldr	r0, [pc, #108]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189ba:	f004 f971 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189be:	bb28      	cbnz	r0, 8018a0c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 80189c0:	491b      	ldr	r1, [pc, #108]	@ (8018a30 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x88>)
 80189c2:	4819      	ldr	r0, [pc, #100]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189c4:	f004 f96c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189c8:	bb10      	cbnz	r0, 8018a10 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 80189ca:	491a      	ldr	r1, [pc, #104]	@ (8018a34 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x8c>)
 80189cc:	4816      	ldr	r0, [pc, #88]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189ce:	f004 f967 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189d2:	b9f8      	cbnz	r0, 8018a14 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 80189d4:	4918      	ldr	r1, [pc, #96]	@ (8018a38 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x90>)
 80189d6:	4814      	ldr	r0, [pc, #80]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189d8:	f004 f962 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189dc:	b9e0      	cbnz	r0, 8018a18 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 80189de:	4917      	ldr	r1, [pc, #92]	@ (8018a3c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x94>)
 80189e0:	4811      	ldr	r0, [pc, #68]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189e2:	f004 f95d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189e6:	b9c8      	cbnz	r0, 8018a1c <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 80189e8:	490f      	ldr	r1, [pc, #60]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189ea:	4608      	mov	r0, r1
 80189ec:	f004 f958 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 80189f0:	b9b0      	cbnz	r0, 8018a20 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 80189f2:	4913      	ldr	r1, [pc, #76]	@ (8018a40 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x98>)
 80189f4:	480c      	ldr	r0, [pc, #48]	@ (8018a28 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x80>)
 80189f6:	f004 f953 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 80189fa:	2800      	cmp	r0, #0
 80189fc:	bf14      	ite	ne
 80189fe:	2309      	movne	r3, #9
 8018a00:	2300      	moveq	r3, #0
 8018a02:	7020      	strb	r0, [r4, #0]
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	e7fa      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	e7f8      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018a10:	2302      	movs	r3, #2
 8018a12:	e7f6      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018a14:	2303      	movs	r3, #3
 8018a16:	e7f4      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018a18:	2304      	movs	r3, #4
 8018a1a:	e7f2      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018a1c:	2306      	movs	r3, #6
 8018a1e:	e7f0      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018a20:	2308      	movs	r3, #8
 8018a22:	e7ee      	b.n	8018a02 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0+0x5a>
 8018a24:	0801e1c4 	.word	0x0801e1c4
 8018a28:	0801e19c 	.word	0x0801e19c
 8018a2c:	0801e1bc 	.word	0x0801e1bc
 8018a30:	0801e1ac 	.word	0x0801e1ac
 8018a34:	0801e1a4 	.word	0x0801e1a4
 8018a38:	0801e1cc 	.word	0x0801e1cc
 8018a3c:	0801e1b4 	.word	0x0801e1b4
 8018a40:	0801e194 	.word	0x0801e194

08018a44 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018a44:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018a46:	491e      	ldr	r1, [pc, #120]	@ (8018ac0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018a48:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018a4a:	481e      	ldr	r0, [pc, #120]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a4c:	f004 f928 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a50:	bb40      	cbnz	r0, 8018aa4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018a52:	491d      	ldr	r1, [pc, #116]	@ (8018ac8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x84>)
 8018a54:	481b      	ldr	r0, [pc, #108]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a56:	f004 f923 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a5a:	bb28      	cbnz	r0, 8018aa8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018a5c:	491b      	ldr	r1, [pc, #108]	@ (8018acc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x88>)
 8018a5e:	4819      	ldr	r0, [pc, #100]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a60:	f004 f91e 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a64:	bb10      	cbnz	r0, 8018aac <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018a66:	4917      	ldr	r1, [pc, #92]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a68:	4608      	mov	r0, r1
 8018a6a:	f004 f919 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a6e:	b9f8      	cbnz	r0, 8018ab0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018a70:	4917      	ldr	r1, [pc, #92]	@ (8018ad0 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x8c>)
 8018a72:	4814      	ldr	r0, [pc, #80]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a74:	f004 f914 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a78:	b9e0      	cbnz	r0, 8018ab4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018a7a:	4916      	ldr	r1, [pc, #88]	@ (8018ad4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x90>)
 8018a7c:	4811      	ldr	r0, [pc, #68]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a7e:	f004 f90f 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a82:	b9c8      	cbnz	r0, 8018ab8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018a84:	4914      	ldr	r1, [pc, #80]	@ (8018ad8 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x94>)
 8018a86:	480f      	ldr	r0, [pc, #60]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a88:	f004 f90a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018a8c:	b9b0      	cbnz	r0, 8018abc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018a8e:	4913      	ldr	r1, [pc, #76]	@ (8018adc <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x98>)
 8018a90:	480c      	ldr	r0, [pc, #48]	@ (8018ac4 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x80>)
 8018a92:	f004 f905 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018a96:	2800      	cmp	r0, #0
 8018a98:	bf14      	ite	ne
 8018a9a:	2309      	movne	r3, #9
 8018a9c:	2300      	moveq	r3, #0
 8018a9e:	7020      	strb	r0, [r4, #0]
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	e7fa      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018aa8:	2301      	movs	r3, #1
 8018aaa:	e7f8      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018aac:	2302      	movs	r3, #2
 8018aae:	e7f6      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018ab0:	2303      	movs	r3, #3
 8018ab2:	e7f4      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018ab4:	2304      	movs	r3, #4
 8018ab6:	e7f2      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018ab8:	2306      	movs	r3, #6
 8018aba:	e7f0      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018abc:	2308      	movs	r3, #8
 8018abe:	e7ee      	b.n	8018a9e <_ZN9Registers9GetTypeIDIyEEhPb.isra.0+0x5a>
 8018ac0:	0801e1c4 	.word	0x0801e1c4
 8018ac4:	0801e1a4 	.word	0x0801e1a4
 8018ac8:	0801e1bc 	.word	0x0801e1bc
 8018acc:	0801e1ac 	.word	0x0801e1ac
 8018ad0:	0801e1cc 	.word	0x0801e1cc
 8018ad4:	0801e1b4 	.word	0x0801e1b4
 8018ad8:	0801e19c 	.word	0x0801e19c
 8018adc:	0801e194 	.word	0x0801e194

08018ae0 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
 8018ae0:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018ae2:	b170      	cbz	r0, 8018b02 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x22>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8018ae4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8018ae8:	d306      	bcc.n	8018af8 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x18>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8018aea:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8018aee:	d301      	bcc.n	8018af4 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0+0x14>
	      std::__throw_bad_array_new_length();
 8018af0:	f004 f8f1 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8018af4:	f004 f8ec 	bl	801ccd0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018af8:	0080      	lsls	r0, r0, #2
      }
 8018afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018afe:	f004 b838 	b.w	801cb72 <_Znwj>
 8018b02:	bd08      	pop	{r3, pc}

08018b04 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018b04:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b06:	491e      	ldr	r1, [pc, #120]	@ (8018b80 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018b08:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b0a:	481e      	ldr	r0, [pc, #120]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b0c:	f004 f8c8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b10:	bb40      	cbnz	r0, 8018b64 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018b12:	491d      	ldr	r1, [pc, #116]	@ (8018b88 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x84>)
 8018b14:	481b      	ldr	r0, [pc, #108]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b16:	f004 f8c3 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b1a:	bb28      	cbnz	r0, 8018b68 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018b1c:	4919      	ldr	r1, [pc, #100]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b1e:	4608      	mov	r0, r1
 8018b20:	f004 f8be 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b24:	bb10      	cbnz	r0, 8018b6c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018b26:	4919      	ldr	r1, [pc, #100]	@ (8018b8c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x88>)
 8018b28:	4816      	ldr	r0, [pc, #88]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b2a:	f004 f8b9 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b2e:	b9f8      	cbnz	r0, 8018b70 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018b30:	4917      	ldr	r1, [pc, #92]	@ (8018b90 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x8c>)
 8018b32:	4814      	ldr	r0, [pc, #80]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b34:	f004 f8b4 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b38:	b9e0      	cbnz	r0, 8018b74 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018b3a:	4916      	ldr	r1, [pc, #88]	@ (8018b94 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x90>)
 8018b3c:	4811      	ldr	r0, [pc, #68]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b3e:	f004 f8af 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b42:	b9c8      	cbnz	r0, 8018b78 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018b44:	4914      	ldr	r1, [pc, #80]	@ (8018b98 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x94>)
 8018b46:	480f      	ldr	r0, [pc, #60]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b48:	f004 f8aa 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018b4c:	b9b0      	cbnz	r0, 8018b7c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018b4e:	4913      	ldr	r1, [pc, #76]	@ (8018b9c <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x98>)
 8018b50:	480c      	ldr	r0, [pc, #48]	@ (8018b84 <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x80>)
 8018b52:	f004 f8a5 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018b56:	2800      	cmp	r0, #0
 8018b58:	bf14      	ite	ne
 8018b5a:	2309      	movne	r3, #9
 8018b5c:	2300      	moveq	r3, #0
 8018b5e:	7020      	strb	r0, [r4, #0]
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018b64:	2300      	movs	r3, #0
 8018b66:	e7fa      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018b68:	2301      	movs	r3, #1
 8018b6a:	e7f8      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018b6c:	2302      	movs	r3, #2
 8018b6e:	e7f6      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018b70:	2303      	movs	r3, #3
 8018b72:	e7f4      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018b74:	2304      	movs	r3, #4
 8018b76:	e7f2      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018b78:	2306      	movs	r3, #6
 8018b7a:	e7f0      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018b7c:	2308      	movs	r3, #8
 8018b7e:	e7ee      	b.n	8018b5e <_ZN9Registers9GetTypeIDImEEhPb.isra.0+0x5a>
 8018b80:	0801e1c4 	.word	0x0801e1c4
 8018b84:	0801e1ac 	.word	0x0801e1ac
 8018b88:	0801e1bc 	.word	0x0801e1bc
 8018b8c:	0801e1a4 	.word	0x0801e1a4
 8018b90:	0801e1cc 	.word	0x0801e1cc
 8018b94:	0801e1b4 	.word	0x0801e1b4
 8018b98:	0801e19c 	.word	0x0801e19c
 8018b9c:	0801e194 	.word	0x0801e194

08018ba0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>:
uint8_t Registers::GetTypeID (bool* success) {
 8018ba0:	b510      	push	{r4, lr}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018ba2:	491e      	ldr	r1, [pc, #120]	@ (8018c1c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018ba4:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018ba6:	481e      	ldr	r0, [pc, #120]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018ba8:	f004 f87a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bac:	bb40      	cbnz	r0, 8018c00 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018bae:	491c      	ldr	r1, [pc, #112]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bb0:	4608      	mov	r0, r1
 8018bb2:	f004 f875 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bb6:	bb28      	cbnz	r0, 8018c04 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018bb8:	491a      	ldr	r1, [pc, #104]	@ (8018c24 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x84>)
 8018bba:	4819      	ldr	r0, [pc, #100]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bbc:	f004 f870 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bc0:	bb10      	cbnz	r0, 8018c08 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018bc2:	4919      	ldr	r1, [pc, #100]	@ (8018c28 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x88>)
 8018bc4:	4816      	ldr	r0, [pc, #88]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bc6:	f004 f86b 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bca:	b9f8      	cbnz	r0, 8018c0c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018bcc:	4917      	ldr	r1, [pc, #92]	@ (8018c2c <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x8c>)
 8018bce:	4814      	ldr	r0, [pc, #80]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bd0:	f004 f866 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bd4:	b9e0      	cbnz	r0, 8018c10 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018bd6:	4916      	ldr	r1, [pc, #88]	@ (8018c30 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x90>)
 8018bd8:	4811      	ldr	r0, [pc, #68]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bda:	f004 f861 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018bde:	b9c8      	cbnz	r0, 8018c14 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018be0:	4914      	ldr	r1, [pc, #80]	@ (8018c34 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x94>)
 8018be2:	480f      	ldr	r0, [pc, #60]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018be4:	f004 f85c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018be8:	b9b0      	cbnz	r0, 8018c18 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018bea:	4913      	ldr	r1, [pc, #76]	@ (8018c38 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x98>)
 8018bec:	480c      	ldr	r0, [pc, #48]	@ (8018c20 <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x80>)
 8018bee:	f004 f857 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018bf2:	2800      	cmp	r0, #0
 8018bf4:	bf14      	ite	ne
 8018bf6:	2309      	movne	r3, #9
 8018bf8:	2300      	moveq	r3, #0
 8018bfa:	7020      	strb	r0, [r4, #0]
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c00:	2300      	movs	r3, #0
 8018c02:	e7fa      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018c04:	2301      	movs	r3, #1
 8018c06:	e7f8      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018c08:	2302      	movs	r3, #2
 8018c0a:	e7f6      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018c0c:	2303      	movs	r3, #3
 8018c0e:	e7f4      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018c10:	2304      	movs	r3, #4
 8018c12:	e7f2      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018c14:	2306      	movs	r3, #6
 8018c16:	e7f0      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018c18:	2308      	movs	r3, #8
 8018c1a:	e7ee      	b.n	8018bfa <_ZN9Registers9GetTypeIDItEEhPb.isra.0+0x5a>
 8018c1c:	0801e1c4 	.word	0x0801e1c4
 8018c20:	0801e1bc 	.word	0x0801e1bc
 8018c24:	0801e1ac 	.word	0x0801e1ac
 8018c28:	0801e1a4 	.word	0x0801e1a4
 8018c2c:	0801e1cc 	.word	0x0801e1cc
 8018c30:	0801e1b4 	.word	0x0801e1b4
 8018c34:	0801e19c 	.word	0x0801e19c
 8018c38:	0801e194 	.word	0x0801e194

08018c3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c3c:	491e      	ldr	r1, [pc, #120]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 8018c3e:	b510      	push	{r4, lr}
 8018c40:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c42:	4608      	mov	r0, r1
 8018c44:	f004 f82c 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c48:	bb40      	cbnz	r0, 8018c9c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018c4a:	491c      	ldr	r1, [pc, #112]	@ (8018cbc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 8018c4c:	481a      	ldr	r0, [pc, #104]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c4e:	f004 f827 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c52:	bb28      	cbnz	r0, 8018ca0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018c54:	491a      	ldr	r1, [pc, #104]	@ (8018cc0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 8018c56:	4818      	ldr	r0, [pc, #96]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c58:	f004 f822 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c5c:	bb10      	cbnz	r0, 8018ca4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018c5e:	4919      	ldr	r1, [pc, #100]	@ (8018cc4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 8018c60:	4815      	ldr	r0, [pc, #84]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c62:	f004 f81d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c66:	b9f8      	cbnz	r0, 8018ca8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018c68:	4917      	ldr	r1, [pc, #92]	@ (8018cc8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 8018c6a:	4813      	ldr	r0, [pc, #76]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c6c:	f004 f818 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c70:	b9e0      	cbnz	r0, 8018cac <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018c72:	4916      	ldr	r1, [pc, #88]	@ (8018ccc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 8018c74:	4810      	ldr	r0, [pc, #64]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c76:	f004 f813 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c7a:	b9c8      	cbnz	r0, 8018cb0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018c7c:	4914      	ldr	r1, [pc, #80]	@ (8018cd0 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 8018c7e:	480e      	ldr	r0, [pc, #56]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c80:	f004 f80e 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 8018c84:	b9b0      	cbnz	r0, 8018cb4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 8018c86:	4913      	ldr	r1, [pc, #76]	@ (8018cd4 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 8018c88:	480b      	ldr	r0, [pc, #44]	@ (8018cb8 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 8018c8a:	f004 f809 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 8018c8e:	2800      	cmp	r0, #0
 8018c90:	bf14      	ite	ne
 8018c92:	2309      	movne	r3, #9
 8018c94:	2300      	moveq	r3, #0
 8018c96:	7020      	strb	r0, [r4, #0]
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	e7fa      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	e7f8      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 8018ca4:	2302      	movs	r3, #2
 8018ca6:	e7f6      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 8018ca8:	2303      	movs	r3, #3
 8018caa:	e7f4      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 8018cac:	2304      	movs	r3, #4
 8018cae:	e7f2      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 8018cb0:	2306      	movs	r3, #6
 8018cb2:	e7f0      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 8018cb4:	2308      	movs	r3, #8
 8018cb6:	e7ee      	b.n	8018c96 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 8018cb8:	0801e1c4 	.word	0x0801e1c4
 8018cbc:	0801e1bc 	.word	0x0801e1bc
 8018cc0:	0801e1ac 	.word	0x0801e1ac
 8018cc4:	0801e1a4 	.word	0x0801e1a4
 8018cc8:	0801e1cc 	.word	0x0801e1cc
 8018ccc:	0801e1b4 	.word	0x0801e1b4
 8018cd0:	0801e19c 	.word	0x0801e19c
 8018cd4:	0801e194 	.word	0x0801e194

08018cd8 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>:
 * @param input size: size in bytes of the input buffer
 */
template<typename T>
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
	// Get memory_address content into temp
	uint64_t temp = 0;
 8018cd8:	2300      	movs	r3, #0
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8018cda:	b5f0      	push	{r4, r5, r6, r7, lr}
	std::memcpy(&temp, memory_address, sizeof(T));
 8018cdc:	8804      	ldrh	r4, [r0, #0]
 8018cde:	f364 030f 	bfi	r3, r4, #0, #16

	// Shift left the memory_address content to leave the size of buffer free on LSB
	if (temp != 0)
 8018ce2:	b10b      	cbz	r3, 8018ce8 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x10>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 8018ce4:	00d4      	lsls	r4, r2, #3
 8018ce6:	40a3      	lsls	r3, r4
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8018ce8:	2500      	movs	r5, #0
 8018cea:	461e      	mov	r6, r3

	// Transfer data from buffer to memory_adress LSB
	for (uint8_t index = 0; index < size; index++) {
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8018cec:	f102 3cff 	add.w	ip, r2, #4294967295
void Sensors::TransferBuffer(T* memory_address, uint8_t* buffer, uint16_t size) {
 8018cf0:	462f      	mov	r7, r5
	for (uint8_t index = 0; index < size; index++) {
 8018cf2:	b2ec      	uxtb	r4, r5
 8018cf4:	3501      	adds	r5, #1
 8018cf6:	4294      	cmp	r4, r2
 8018cf8:	db04      	blt.n	8018d04 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x2c>
 8018cfa:	2f00      	cmp	r7, #0
 8018cfc:	bf18      	it	ne
 8018cfe:	4633      	movne	r3, r6

	// Recast temp
	T* reinterpreted_temp = reinterpret_cast<T*>(&temp);

	// Update memory_address content
	*memory_address = *reinterpreted_temp;
 8018d00:	8003      	strh	r3, [r0, #0]
}
 8018d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 8018d04:	5d0f      	ldrb	r7, [r1, r4]
 8018d06:	ebac 0404 	sub.w	r4, ip, r4
 8018d0a:	00e4      	lsls	r4, r4, #3
 8018d0c:	fa07 f404 	lsl.w	r4, r7, r4
 8018d10:	2701      	movs	r7, #1
 8018d12:	4326      	orrs	r6, r4
	for (uint8_t index = 0; index < size; index++) {
 8018d14:	e7ed      	b.n	8018cf2 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0+0x1a>

08018d16 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>:
      erase(const_iterator __position)
 8018d16:	b510      	push	{r4, lr}
 8018d18:	4604      	mov	r4, r0
 8018d1a:	4608      	mov	r0, r1
      { return __normal_iterator(_M_current + __n); }
 8018d1c:	3104      	adds	r1, #4
      : _M_current(__i) { }
 8018d1e:	6862      	ldr	r2, [r4, #4]
      if (__position + 1 != end())
 8018d20:	4291      	cmp	r1, r2
 8018d22:	d002      	beq.n	8018d2a <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8018d24:	1a52      	subs	r2, r2, r1
 8018d26:	f004 fea1 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 8018d2a:	6863      	ldr	r3, [r4, #4]
 8018d2c:	3b04      	subs	r3, #4
 8018d2e:	6063      	str	r3, [r4, #4]
      { return _M_erase(begin() + (__position - cbegin())); }
 8018d30:	bd10      	pop	{r4, pc}

08018d32 <_ZN7SensorsC1Ev>:
Sensors::Sensors() {
 8018d32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018d36:	2300      	movs	r3, #0
 8018d38:	4604      	mov	r4, r0
 8018d3a:	f100 0774 	add.w	r7, r0, #116	@ 0x74
 8018d3e:	f100 0680 	add.w	r6, r0, #128	@ 0x80
 8018d42:	6483      	str	r3, [r0, #72]	@ 0x48
 8018d44:	67c3      	str	r3, [r0, #124]	@ 0x7c
 8018d46:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8018d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018d4e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018d52:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8018d56:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8018d5a:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30
 8018d5e:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
 8018d62:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
 8018d66:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 8018d6a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8018d6e:	2028      	movs	r0, #40	@ 0x28
 8018d70:	f003 feff 	bl	801cb72 <_Znwj>
 8018d74:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8018d76:	e9d4 8207 	ldrd	r8, r2, [r4, #28]
 8018d7a:	eba2 0208 	sub.w	r2, r2, r8
      if (__count > 0)
 8018d7e:	2a00      	cmp	r2, #0
 8018d80:	dd09      	ble.n	8018d96 <_ZN7SensorsC1Ev+0x64>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018d82:	4641      	mov	r1, r8
 8018d84:	f004 fe72 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 8018d88:	6a61      	ldr	r1, [r4, #36]	@ 0x24
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018d8a:	4640      	mov	r0, r8
 8018d8c:	eba1 0108 	sub.w	r1, r1, r8
 8018d90:	f003 feca 	bl	801cb28 <_ZdlPvj>
      }
 8018d94:	e002      	b.n	8018d9c <_ZN7SensorsC1Ev+0x6a>
	if (__p)
 8018d96:	f1b8 0f00 	cmp.w	r8, #0
 8018d9a:	d1f5      	bne.n	8018d88 <_ZN7SensorsC1Ev+0x56>
			 - this->_M_impl._M_start); }
 8018d9c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018da0:	1a9b      	subs	r3, r3, r2
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018da2:	e9c4 5507 	strd	r5, r5, [r4, #28]
      if (this->capacity() < __n)
 8018da6:	2b4c      	cmp	r3, #76	@ 0x4c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018da8:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8018dac:	6265      	str	r5, [r4, #36]	@ 0x24
      if (this->capacity() < __n)
 8018dae:	d81f      	bhi.n	8018df0 <_ZN7SensorsC1Ev+0xbe>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018db0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018db2:	2050      	movs	r0, #80	@ 0x50
 8018db4:	eba3 0802 	sub.w	r8, r3, r2
 8018db8:	f003 fedb 	bl	801cb72 <_Znwj>
 8018dbc:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8018dbe:	e9d4 920a 	ldrd	r9, r2, [r4, #40]	@ 0x28
 8018dc2:	eba2 0209 	sub.w	r2, r2, r9
      if (__count > 0)
 8018dc6:	2a00      	cmp	r2, #0
 8018dc8:	dd09      	ble.n	8018dde <_ZN7SensorsC1Ev+0xac>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018dca:	4649      	mov	r1, r9
 8018dcc:	f004 fe4e 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 8018dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018dd2:	4648      	mov	r0, r9
 8018dd4:	eba1 0109 	sub.w	r1, r1, r9
 8018dd8:	f003 fea6 	bl	801cb28 <_ZdlPvj>
      }
 8018ddc:	e002      	b.n	8018de4 <_ZN7SensorsC1Ev+0xb2>
	if (__p)
 8018dde:	f1b9 0f00 	cmp.w	r9, #0
 8018de2:	d1f5      	bne.n	8018dd0 <_ZN7SensorsC1Ev+0x9e>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018de4:	eb05 0308 	add.w	r3, r5, r8
	  this->_M_impl._M_start = __tmp;
 8018de8:	62a5      	str	r5, [r4, #40]	@ 0x28
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018dea:	3550      	adds	r5, #80	@ 0x50
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018dee:	6325      	str	r5, [r4, #48]	@ 0x30
			 - this->_M_impl._M_start); }
 8018df0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018df2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018df4:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8018df6:	2b98      	cmp	r3, #152	@ 0x98
 8018df8:	d81f      	bhi.n	8018e3a <_ZN7SensorsC1Ev+0x108>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018dfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018dfc:	20a0      	movs	r0, #160	@ 0xa0
 8018dfe:	eba3 0902 	sub.w	r9, r3, r2
 8018e02:	f003 feb6 	bl	801cb72 <_Znwj>
 8018e06:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8018e08:	e9d4 820d 	ldrd	r8, r2, [r4, #52]	@ 0x34
 8018e0c:	eba2 0208 	sub.w	r2, r2, r8
      if (__count > 0)
 8018e10:	2a00      	cmp	r2, #0
 8018e12:	dd09      	ble.n	8018e28 <_ZN7SensorsC1Ev+0xf6>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018e14:	4641      	mov	r1, r8
 8018e16:	f004 fe29 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 8018e1a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018e1c:	4640      	mov	r0, r8
 8018e1e:	eba1 0108 	sub.w	r1, r1, r8
 8018e22:	f003 fe81 	bl	801cb28 <_ZdlPvj>
      }
 8018e26:	e002      	b.n	8018e2e <_ZN7SensorsC1Ev+0xfc>
	if (__p)
 8018e28:	f1b8 0f00 	cmp.w	r8, #0
 8018e2c:	d1f5      	bne.n	8018e1a <_ZN7SensorsC1Ev+0xe8>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018e2e:	eb05 0309 	add.w	r3, r5, r9
	  this->_M_impl._M_start = __tmp;
 8018e32:	6365      	str	r5, [r4, #52]	@ 0x34
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018e34:	35a0      	adds	r5, #160	@ 0xa0
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018e36:	63a3      	str	r3, [r4, #56]	@ 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018e38:	63e5      	str	r5, [r4, #60]	@ 0x3c
			 - this->_M_impl._M_start); }
 8018e3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018e3c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8018e3e:	1a9b      	subs	r3, r3, r2
      if (this->capacity() < __n)
 8018e40:	2b4c      	cmp	r3, #76	@ 0x4c
 8018e42:	d81f      	bhi.n	8018e84 <_ZN7SensorsC1Ev+0x152>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018e44:	6c63      	ldr	r3, [r4, #68]	@ 0x44
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8018e46:	2050      	movs	r0, #80	@ 0x50
 8018e48:	eba3 0902 	sub.w	r9, r3, r2
 8018e4c:	f003 fe91 	bl	801cb72 <_Znwj>
 8018e50:	4605      	mov	r5, r0
      ptrdiff_t __count = __last - __first;
 8018e52:	e9d4 8210 	ldrd	r8, r2, [r4, #64]	@ 0x40
 8018e56:	eba2 0208 	sub.w	r2, r2, r8
      if (__count > 0)
 8018e5a:	2a00      	cmp	r2, #0
 8018e5c:	dd09      	ble.n	8018e72 <_ZN7SensorsC1Ev+0x140>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8018e5e:	4641      	mov	r1, r8
 8018e60:	f004 fe04 	bl	801da6c <memmove>
			- this->_M_impl._M_start);
 8018e64:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8018e66:	4640      	mov	r0, r8
 8018e68:	eba1 0108 	sub.w	r1, r1, r8
 8018e6c:	f003 fe5c 	bl	801cb28 <_ZdlPvj>
      }
 8018e70:	e002      	b.n	8018e78 <_ZN7SensorsC1Ev+0x146>
	if (__p)
 8018e72:	f1b8 0f00 	cmp.w	r8, #0
 8018e76:	d1f5      	bne.n	8018e64 <_ZN7SensorsC1Ev+0x132>
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018e78:	eb05 0309 	add.w	r3, r5, r9
	  this->_M_impl._M_start = __tmp;
 8018e7c:	6425      	str	r5, [r4, #64]	@ 0x40
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018e7e:	3550      	adds	r5, #80	@ 0x50
	  this->_M_impl._M_finish = __tmp + __old_size;
 8018e80:	6463      	str	r3, [r4, #68]	@ 0x44
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018e82:	64a5      	str	r5, [r4, #72]	@ 0x48
	functions[UINT8_TYPE] = NULL;
 8018e84:	2300      	movs	r3, #0
}
 8018e86:	4620      	mov	r0, r4
	functions[UINT16_TYPE] = &uint16_t_sensor_functions;
 8018e88:	6527      	str	r7, [r4, #80]	@ 0x50
	functions[UINT8_TYPE] = NULL;
 8018e8a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	functions[DOUBLE_TYPE] = NULL;
 8018e8c:	6723      	str	r3, [r4, #112]	@ 0x70
	functions[FLOAT_TYPE] = &float_sensor_functions;
 8018e8e:	66e6      	str	r6, [r4, #108]	@ 0x6c
	functions[UINT64_TYPE] = NULL;
 8018e90:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
	functions[INT16_TYPE] = NULL;
 8018e94:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
	functions[INT64_TYPE] = NULL;
 8018e98:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
}
 8018e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018ea0 <_ZN7Sensors4InitEP9RegistersP10PublishersP13HardwareDelayP4LEDS>:
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 8018ea0:	b510      	push	{r4, lr}
	publishers = publishers_;
 8018ea2:	e9c0 1223 	strd	r1, r2, [r0, #140]	@ 0x8c
	hardware_delay = hardware_delay_;
 8018ea6:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018eaa:	2101      	movs	r1, #1
	leds = leds_;
 8018eac:	9b02      	ldr	r3, [sp, #8]
void Sensors::Init(Registers* registers_, Publishers* publishers_, HardwareDelay* hardware_delay_, LEDS* leds_) {
 8018eae:	4604      	mov	r4, r0
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018eb0:	2200      	movs	r2, #0
	leds = leds_;
 8018eb2:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
	SensorsSemaphore = osSemaphoreNew(1, 1, NULL);
 8018eb6:	4608      	mov	r0, r1
 8018eb8:	f7f3 ff5c 	bl	800cd74 <osSemaphoreNew>
 8018ebc:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8018ebe:	f7f3 ffe9 	bl	800ce94 <osSemaphoreRelease>
	active = false;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	7123      	strb	r3, [r4, #4]
	delayed_index = 0;
 8018ec6:	7363      	strb	r3, [r4, #13]
	period_ms = DEFAULT_SENSORS_PERIOD;
 8018ec8:	230a      	movs	r3, #10
 8018eca:	60a3      	str	r3, [r4, #8]
}
 8018ecc:	bd10      	pop	{r4, pc}

08018ece <_ZN7Sensors16SetReadingStatusEb>:
 * @brief Set the reading status of the class
 *
 * @param input status: reading status. true = read sensors
 * @return whether successful
 */
bool Sensors::SetReadingStatus(bool status) {
 8018ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	460d      	mov	r5, r1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018ed4:	6800      	ldr	r0, [r0, #0]
 8018ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8018eda:	f7f3 ffa7 	bl	800ce2c <osSemaphoreAcquire>
	active = status;
 8018ede:	7125      	strb	r5, [r4, #4]

	// Reset all read indexes if reading is stopped to restart a new reading from zero
	if (!status) {
 8018ee0:	b91d      	cbnz	r5, 8018eea <_ZN7Sensors16SetReadingStatusEb+0x1c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018ee2:	e9d4 3004 	ldrd	r3, r0, [r4, #16]
		for (I2CInterface &interface : interfaces) {
 8018ee6:	4298      	cmp	r0, r3
 8018ee8:	d104      	bne.n	8018ef4 <_ZN7Sensors16SetReadingStatusEb+0x26>
				}
			}
		}
	}

	osSemaphoreRelease(SensorsSemaphore);
 8018eea:	6820      	ldr	r0, [r4, #0]
 8018eec:	f7f3 ffd2 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 8018ef0:	2001      	movs	r0, #1
 8018ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			interface.read_index = 0;
 8018ef4:	e9d3 2616 	ldrd	r2, r6, [r3, #88]	@ 0x58
 8018ef8:	f883 5055 	strb.w	r5, [r3, #85]	@ 0x55
			for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018efc:	4296      	cmp	r6, r2
 8018efe:	d101      	bne.n	8018f04 <_ZN7Sensors16SetReadingStatusEb+0x36>
      operator++() _GLIBCXX_NOEXCEPT
 8018f00:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 8018f02:	e7f0      	b.n	8018ee6 <_ZN7Sensors16SetReadingStatusEb+0x18>
				sensor_group.read_index = 0;
 8018f04:	e9d2 1703 	ldrd	r1, r7, [r2, #12]
 8018f08:	7215      	strb	r5, [r2, #8]
				for (Sensor &sensor : sensor_group.sensors) {
 8018f0a:	428f      	cmp	r7, r1
 8018f0c:	d101      	bne.n	8018f12 <_ZN7Sensors16SetReadingStatusEb+0x44>
      operator++() _GLIBCXX_NOEXCEPT
 8018f0e:	3218      	adds	r2, #24
	return *this;
 8018f10:	e7f4      	b.n	8018efc <_ZN7Sensors16SetReadingStatusEb+0x2e>
					sensor.read_index = 0;
 8018f12:	740d      	strb	r5, [r1, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8018f14:	3128      	adds	r1, #40	@ 0x28
	return *this;
 8018f16:	e7f8      	b.n	8018f0a <_ZN7Sensors16SetReadingStatusEb+0x3c>

08018f18 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			return self->SetReadingStatus((bool) *input);
 8018f18:	7811      	ldrb	r1, [r2, #0]
 8018f1a:	3900      	subs	r1, #0
 8018f1c:	bf18      	it	ne
 8018f1e:	2101      	movne	r1, #1
 8018f20:	f7ff bfd5 	b.w	8018ece <_ZN7Sensors16SetReadingStatusEb>

08018f24 <_ZN7Sensors25DeactivateAllSensorGroupsEv>:
/**
 * @brief Deactivate all sensor groups on all interfaces
 *
 * @return whether successful
 */
bool Sensors::DeactivateAllSensorGroups(void) {
 8018f24:	b538      	push	{r3, r4, r5, lr}
 8018f26:	4604      	mov	r4, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018f28:	f04f 31ff 	mov.w	r1, #4294967295
 8018f2c:	6800      	ldr	r0, [r0, #0]
 8018f2e:	f7f3 ff7d 	bl	800ce2c <osSemaphoreAcquire>
	for (I2CInterface &interface : interfaces) {
		for (SensorGroup &sensor_group : interface.sensor_groups) {
			sensor_group.active = false;
 8018f32:	2000      	movs	r0, #0
 8018f34:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
	for (I2CInterface &interface : interfaces) {
 8018f38:	4299      	cmp	r1, r3
 8018f3a:	d104      	bne.n	8018f46 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x22>
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 8018f3c:	6820      	ldr	r0, [r4, #0]
 8018f3e:	f7f3 ffa9 	bl	800ce94 <osSemaphoreRelease>
	return true;
}
 8018f42:	2001      	movs	r0, #1
 8018f44:	bd38      	pop	{r3, r4, r5, pc}
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018f46:	e9d3 2516 	ldrd	r2, r5, [r3, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018f4a:	4295      	cmp	r5, r2
 8018f4c:	d101      	bne.n	8018f52 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x2e>
      operator++() _GLIBCXX_NOEXCEPT
 8018f4e:	337c      	adds	r3, #124	@ 0x7c
	return *this;
 8018f50:	e7f2      	b.n	8018f38 <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x14>
			sensor_group.active = false;
 8018f52:	f802 0b18 	strb.w	r0, [r2], #24
 8018f56:	e7f8      	b.n	8018f4a <_ZN7Sensors25DeactivateAllSensorGroupsEv+0x26>

08018f58 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE2_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorGroups();
 8018f58:	f7ff bfe4 	b.w	8018f24 <_ZN7Sensors25DeactivateAllSensorGroupsEv>

08018f5c <_ZN7Sensors13DetectSensorsEmm>:
 * @brief Force a detection of I2C sensors to update presence flag. Can be useful if a sensor if plugged after creation
 *
 * @param input trials: number of trials used to detect the sensor
 * @param input timeout: maximum time in ms left to detect a sensor
 */
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f60:	4605      	mov	r5, r0
 8018f62:	9101      	str	r1, [sp, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018f64:	6800      	ldr	r0, [r0, #0]
 8018f66:	f04f 31ff 	mov.w	r1, #4294967295
void Sensors::DetectSensors(uint32_t trials, uint32_t timeout) {
 8018f6a:	4690      	mov	r8, r2
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8018f6c:	f7f3 ff5e 	bl	800ce2c <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018f70:	e9d5 4904 	ldrd	r4, r9, [r5, #16]
	HAL_StatusTypeDef status;
	for (I2CInterface &interface : interfaces) {
 8018f74:	45a1      	cmp	r9, r4
 8018f76:	d105      	bne.n	8018f84 <_ZN7Sensors13DetectSensorsEmm+0x28>
					// If not I2C, force presence
					sensor.present = true;
			}
		}
	}
	osSemaphoreRelease(SensorsSemaphore);
 8018f78:	6828      	ldr	r0, [r5, #0]
}
 8018f7a:	b003      	add	sp, #12
 8018f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 8018f80:	f7f3 bf88 	b.w	800ce94 <osSemaphoreRelease>
 8018f84:	e9d4 6a16 	ldrd	r6, sl, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 8018f88:	45b2      	cmp	sl, r6
 8018f8a:	d101      	bne.n	8018f90 <_ZN7Sensors13DetectSensorsEmm+0x34>
      operator++() _GLIBCXX_NOEXCEPT
 8018f8c:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8018f8e:	e7f1      	b.n	8018f74 <_ZN7Sensors13DetectSensorsEmm+0x18>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018f90:	e9d6 7b03 	ldrd	r7, fp, [r6, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 8018f94:	45bb      	cmp	fp, r7
 8018f96:	d101      	bne.n	8018f9c <_ZN7Sensors13DetectSensorsEmm+0x40>
      operator++() _GLIBCXX_NOEXCEPT
 8018f98:	3618      	adds	r6, #24
	return *this;
 8018f9a:	e7f5      	b.n	8018f88 <_ZN7Sensors13DetectSensorsEmm+0x2c>
				if (interface.ID != INTERNAL) {
 8018f9c:	7823      	ldrb	r3, [r4, #0]
 8018f9e:	2b0a      	cmp	r3, #10
 8018fa0:	d00b      	beq.n	8018fba <_ZN7Sensors13DetectSensorsEmm+0x5e>
					status = HAL_I2C_IsDeviceReady(interface.interface, sensor.address, trials, timeout);
 8018fa2:	4643      	mov	r3, r8
 8018fa4:	9a01      	ldr	r2, [sp, #4]
 8018fa6:	88f9      	ldrh	r1, [r7, #6]
 8018fa8:	68e0      	ldr	r0, [r4, #12]
 8018faa:	f7ee fb8f 	bl	80076cc <HAL_I2C_IsDeviceReady>
					sensor.present = (status == HAL_OK);
 8018fae:	fab0 f080 	clz	r0, r0
 8018fb2:	0940      	lsrs	r0, r0, #5
 8018fb4:	70b8      	strb	r0, [r7, #2]
      operator++() _GLIBCXX_NOEXCEPT
 8018fb6:	3728      	adds	r7, #40	@ 0x28
	return *this;
 8018fb8:	e7ec      	b.n	8018f94 <_ZN7Sensors13DetectSensorsEmm+0x38>
 8018fba:	2001      	movs	r0, #1
 8018fbc:	e7fa      	b.n	8018fb4 <_ZN7Sensors13DetectSensorsEmm+0x58>

08018fbe <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8018fbe:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint32_t* input, uint16_t length) -> bool {
 8018fc0:	b508      	push	{r3, lr}
			if (length != 2) return false;
 8018fc2:	d105      	bne.n	8018fd0 <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x12>
			self->DetectSensors(input[0], input[1]);
 8018fc4:	e9d2 1200 	ldrd	r1, r2, [r2]
 8018fc8:	f7ff ffc8 	bl	8018f5c <_ZN7Sensors13DetectSensorsEmm>
 8018fcc:	2001      	movs	r0, #1
		}
 8018fce:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 8018fd0:	2000      	movs	r0, #0
 8018fd2:	e7fc      	b.n	8018fce <_ZZN7Sensors12AddRegistersEvENUlPvtPmtE8_4_FUNES0_tS1_t+0x10>

08018fd4 <_ZN10SensorDataC1ERKS_>:
struct SensorData {
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	788b      	ldrb	r3, [r1, #2]
 8018fd8:	4604      	mov	r4, r0
 8018fda:	880a      	ldrh	r2, [r1, #0]
 8018fdc:	460d      	mov	r5, r1
 8018fde:	7083      	strb	r3, [r0, #2]
 8018fe0:	8002      	strh	r2, [r0, #0]
 8018fe2:	7a0b      	ldrb	r3, [r1, #8]
 8018fe4:	684a      	ldr	r2, [r1, #4]
 8018fe6:	7203      	strb	r3, [r0, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018fe8:	2300      	movs	r3, #0
 8018fea:	6042      	str	r2, [r0, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018fec:	e9d1 2603 	ldrd	r2, r6, [r1, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018ff4:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 8018ff6:	6143      	str	r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8018ff8:	d01b      	beq.n	8019032 <_ZN10SensorDataC1ERKS_+0x5e>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8018ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8019038 <_ZN10SensorDataC1ERKS_+0x64>)
 8018ffc:	429e      	cmp	r6, r3
 8018ffe:	d901      	bls.n	8019004 <_ZN10SensorDataC1ERKS_+0x30>
	      std::__throw_bad_array_new_length();
 8019000:	f003 fe69 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8019004:	4630      	mov	r0, r6
 8019006:	f003 fdb4 	bl	801cb72 <_Znwj>
 801900a:	4603      	mov	r3, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801900c:	441e      	add	r6, r3
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801900e:	e9c4 3303 	strd	r3, r3, [r4, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8019012:	6166      	str	r6, [r4, #20]
      : _M_current(__i) { }
 8019014:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
	  if (_Num)
 8019018:	4291      	cmp	r1, r2
	  const ptrdiff_t _Num = __last - __first;
 801901a:	eba2 0501 	sub.w	r5, r2, r1
	  if (_Num)
 801901e:	d004      	beq.n	801902a <_ZN10SensorDataC1ERKS_+0x56>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8019020:	4618      	mov	r0, r3
 8019022:	462a      	mov	r2, r5
 8019024:	f004 fd22 	bl	801da6c <memmove>
 8019028:	4603      	mov	r3, r0
	  return __result + _Num;
 801902a:	442b      	add	r3, r5
 801902c:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801902e:	6123      	str	r3, [r4, #16]
 8019030:	bd70      	pop	{r4, r5, r6, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8019032:	4633      	mov	r3, r6
 8019034:	e7ea      	b.n	801900c <_ZN10SensorDataC1ERKS_+0x38>
 8019036:	bf00      	nop
 8019038:	7fffffd0 	.word	0x7fffffd0

0801903c <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>:
 *
 * @param input interface: the interface pointer
 * @param input sensor_group: sensor group to check
 * @return true if no sensor left to read in the regular loop in the sensor group
 */
bool Sensors::RegularGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 801903c:	b530      	push	{r4, r5, lr}
	// Check sensor group read index
	if (sensor_group->read_index > 0) return false;
 801903e:	7a10      	ldrb	r0, [r2, #8]
 8019040:	b9d8      	cbnz	r0, 801907a <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3e>
	if (sensor_group->sensors.size() == 0) return true;
 8019042:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8019046:	4293      	cmp	r3, r2
 8019048:	d015      	beq.n	8019076 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3a>

	// Check read index of the first sensor
	Sensor* sensor = &(sensor_group->sensors[0]);
	if (sensor->read_index > 0) return false;
 801904a:	7c1a      	ldrb	r2, [r3, #16]
 801904c:	b962      	cbnz	r2, 8019068 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>
	if (sensor->data.size() == 0) return true;
 801904e:	e9d3 0205 	ldrd	r0, r2, [r3, #20]
 8019052:	4282      	cmp	r2, r0
 8019054:	d00f      	beq.n	8019076 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x3a>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019056:	e9d1 2419 	ldrd	r2, r4, [r1, #100]	@ 0x64

	// Check the sensor is not pending.
	// If it is actually the case, it means that the regular list has been processed. Then, do not check the related data.
	for (Sensor* pending_sensor : interface->pending_sensors) {
 801905a:	4294      	cmp	r4, r2
 801905c:	4611      	mov	r1, r2
 801905e:	d104      	bne.n	801906a <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2e>
		if (pending_sensor->ID == sensor->ID) return true;
	}

	// Check read index of first data
	SensorData* sensor_data = &(sensor->data[0]);
	if (sensor_data->read_index > 0) return false;
 8019060:	7a00      	ldrb	r0, [r0, #8]
 8019062:	fab0 f080 	clz	r0, r0
 8019066:	0940      	lsrs	r0, r0, #5

	return true;
}
 8019068:	bd30      	pop	{r4, r5, pc}
		if (pending_sensor->ID == sensor->ID) return true;
 801906a:	6809      	ldr	r1, [r1, #0]
 801906c:	3204      	adds	r2, #4
 801906e:	790d      	ldrb	r5, [r1, #4]
 8019070:	7919      	ldrb	r1, [r3, #4]
 8019072:	428d      	cmp	r5, r1
 8019074:	d1f1      	bne.n	801905a <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x1e>
	if (sensor_group->sensors.size() == 0) return true;
 8019076:	2001      	movs	r0, #1
 8019078:	e7f6      	b.n	8019068 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>
	if (sensor_group->read_index > 0) return false;
 801907a:	2000      	movs	r0, #0
 801907c:	e7f4      	b.n	8019068 <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup+0x2c>

0801907e <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>:
 801907e:	e9d1 1019 	ldrd	r1, r0, [r1, #100]	@ 0x64
 *
 * @param input interface: the interface pointer
 * @param input sensor_group: sensor group to check
 * @return true if no sensor left to read in the pending list in the sensor group
 */
bool Sensors::PendingGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 8019082:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Check that no sensor with the same ID is found in the pending list
	for (Sensor* pending_sensor : interface->pending_sensors) {
 8019084:	4288      	cmp	r0, r1
 8019086:	d101      	bne.n	801908c <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0xe>
		for (Sensor &registered_sensor : sensor_group->sensors) {
			if (pending_sensor->ID == registered_sensor.ID) return false;
		}
	}
	return true;
 8019088:	2001      	movs	r0, #1
}
 801908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (Sensor* pending_sensor : interface->pending_sensors) {
 801908c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019090:	e9d2 3403 	ldrd	r3, r4, [r2, #12]
		for (Sensor &registered_sensor : sensor_group->sensors) {
 8019094:	429c      	cmp	r4, r3
 8019096:	d0f5      	beq.n	8019084 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0x6>
			if (pending_sensor->ID == registered_sensor.ID) return false;
 8019098:	792f      	ldrb	r7, [r5, #4]
 801909a:	3328      	adds	r3, #40	@ 0x28
 801909c:	f813 6c24 	ldrb.w	r6, [r3, #-36]
 80190a0:	42b7      	cmp	r7, r6
 80190a2:	d1f7      	bne.n	8019094 <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0x16>
 80190a4:	2000      	movs	r0, #0
 80190a6:	e7f0      	b.n	801908a <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup+0xc>

080190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>:
void Sensors::ProccessGroupTermination(I2CInterface* interface, SensorGroup* sensor_group) {
 80190a8:	b570      	push	{r4, r5, r6, lr}
 80190aa:	4604      	mov	r4, r0
 80190ac:	460e      	mov	r6, r1
 80190ae:	4615      	mov	r5, r2
	if (RegularGroupTermination(interface, sensor_group) && PendingGroupTermination(interface, sensor_group)) {
 80190b0:	f7ff ffc4 	bl	801903c <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>
 80190b4:	b1c0      	cbz	r0, 80190e8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
 80190b6:	462a      	mov	r2, r5
 80190b8:	4631      	mov	r1, r6
 80190ba:	4620      	mov	r0, r4
 80190bc:	f7ff ffdf 	bl	801907e <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>
 80190c0:	b190      	cbz	r0, 80190e8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
		sensor_group->counter = 0;
 80190c2:	2300      	movs	r3, #0
 80190c4:	80eb      	strh	r3, [r5, #6]
		if (sensor_group->publishable) {
 80190c6:	78eb      	ldrb	r3, [r5, #3]
 80190c8:	b173      	cbz	r3, 80190e8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup+0x40>
			osSemaphoreRelease(SensorsSemaphore);
 80190ca:	6820      	ldr	r0, [r4, #0]
 80190cc:	f7f3 fee2 	bl	800ce94 <osSemaphoreRelease>
			publishers->SpinPublisher(sensor_group->ID);
 80190d0:	78a9      	ldrb	r1, [r5, #2]
 80190d2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80190d6:	f7ff f835 	bl	8018144 <_ZN10Publishers13SpinPublisherEh>
			osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80190da:	6820      	ldr	r0, [r4, #0]
 80190dc:	f04f 31ff 	mov.w	r1, #4294967295
}
 80190e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80190e4:	f7f3 bea2 	b.w	800ce2c <osSemaphoreAcquire>
}
 80190e8:	bd70      	pop	{r4, r5, r6, pc}

080190ea <_ZN7Sensors18FindInterfaceIndexEhPb>:
 *
 * @param input ID: interface ID to find
 * @param output success: whether successful
 * @return the interface index
 */
uint8_t Sensors::FindInterfaceIndex(uint8_t ID, bool* success) {
 80190ea:	b570      	push	{r4, r5, r6, lr}
 80190ec:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (I2CInterface &interface : interfaces) {
 80190f0:	2000      	movs	r0, #0
 80190f2:	429c      	cmp	r4, r3
 80190f4:	461d      	mov	r5, r3
 80190f6:	d102      	bne.n	80190fe <_ZN7Sensors18FindInterfaceIndexEhPb+0x14>
 80190f8:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 80190fa:	4618      	mov	r0, r3
 80190fc:	e006      	b.n	801910c <_ZN7Sensors18FindInterfaceIndexEhPb+0x22>
		if (interface.ID == ID) {
 80190fe:	782d      	ldrb	r5, [r5, #0]
 8019100:	1c46      	adds	r6, r0, #1
 8019102:	337c      	adds	r3, #124	@ 0x7c
 8019104:	428d      	cmp	r5, r1
 8019106:	d103      	bne.n	8019110 <_ZN7Sensors18FindInterfaceIndexEhPb+0x26>
 8019108:	b2c0      	uxtb	r0, r0
 801910a:	2301      	movs	r3, #1
			*success = true;
 801910c:	7013      	strb	r3, [r2, #0]
}
 801910e:	bd70      	pop	{r4, r5, r6, pc}
 8019110:	4630      	mov	r0, r6
 8019112:	e7ee      	b.n	80190f2 <_ZN7Sensors18FindInterfaceIndexEhPb+0x8>

08019114 <_ZN7Sensors13FindInterfaceEhPb>:
I2CInterface* Sensors::FindInterface(uint8_t ID, bool* success) {
 8019114:	b538      	push	{r3, r4, r5, lr}
 8019116:	4604      	mov	r4, r0
	uint8_t index = FindInterfaceIndex(ID, success);
 8019118:	f7ff ffe7 	bl	80190ea <_ZN7Sensors18FindInterfaceIndexEhPb>
 801911c:	4603      	mov	r3, r0
	if (not *success)
 801911e:	7810      	ldrb	r0, [r2, #0]
 8019120:	b128      	cbz	r0, 801912e <_ZN7Sensors13FindInterfaceEhPb+0x1a>
	return *(this->_M_impl._M_start + __n);
 8019122:	b21b      	sxth	r3, r3
 8019124:	6920      	ldr	r0, [r4, #16]
 8019126:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801912a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
 801912e:	bd38      	pop	{r3, r4, r5, pc}

08019130 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb>:
 *
 * @param input interface: the I2C hardware interface handle to find
 * @param output success: whether successful
 * @return the interface index
 */
uint8_t Sensors::FindInterfaceIndexWithHandle(I2C_HandleTypeDef* interface, bool* success) {
 8019130:	b570      	push	{r4, r5, r6, lr}
 8019132:	e9d0 3404 	ldrd	r3, r4, [r0, #16]
	uint8_t index = 0;
	for (I2CInterface &I2C_interface : interfaces) {
 8019136:	2000      	movs	r0, #0
 8019138:	429c      	cmp	r4, r3
 801913a:	461d      	mov	r5, r3
 801913c:	d102      	bne.n	8019144 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x14>
 801913e:	2300      	movs	r3, #0
			return index;
		}
		index++;
	}
	*success = false;
	return 0;
 8019140:	4618      	mov	r0, r3
 8019142:	e006      	b.n	8019152 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x22>
		if (I2C_interface.interface == interface) {
 8019144:	68ed      	ldr	r5, [r5, #12]
 8019146:	1c46      	adds	r6, r0, #1
 8019148:	337c      	adds	r3, #124	@ 0x7c
 801914a:	428d      	cmp	r5, r1
 801914c:	d103      	bne.n	8019156 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x26>
 801914e:	b2c0      	uxtb	r0, r0
 8019150:	2301      	movs	r3, #1
			*success = true;
 8019152:	7013      	strb	r3, [r2, #0]
}
 8019154:	bd70      	pop	{r4, r5, r6, pc}
 8019156:	4630      	mov	r0, r6
 8019158:	e7ee      	b.n	8019138 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb+0x8>

0801915a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>:
 * @param input group_ID: the group ID to find
 * @param output interface_: interface linked to the sensor group
 * @param output success: whether successful
 * @return the sensor group pointer
 */
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 801915a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801915c:	e9d0 4604 	ldrd	r4, r6, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 8019160:	42a6      	cmp	r6, r4
 8019162:	d102      	bne.n	801916a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x10>
 8019164:	2200      	movs	r2, #0
				return sensor_group_pointer;
			}
		}
	}
	*success = false;
	return NULL;
 8019166:	4610      	mov	r0, r2
 8019168:	e00f      	b.n	801918a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x30>
 801916a:	e9d4 5716 	ldrd	r5, r7, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801916e:	42bd      	cmp	r5, r7
 8019170:	4628      	mov	r0, r5
 8019172:	d101      	bne.n	8019178 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 8019174:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8019176:	e7f3      	b.n	8019160 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x6>
			if (sensor_group.ID == group_ID) {
 8019178:	f890 c002 	ldrb.w	ip, [r0, #2]
 801917c:	f100 0518 	add.w	r5, r0, #24
 8019180:	458c      	cmp	ip, r1
 8019182:	d1f4      	bne.n	801916e <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x14>
				if (interface_ != NULL) *interface_ = &interface;
 8019184:	b102      	cbz	r2, 8019188 <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb+0x2e>
 8019186:	6014      	str	r4, [r2, #0]
SensorGroup* Sensors::FindSensorGroupPath(uint8_t group_ID, I2CInterface** interface_, bool* success) {
 8019188:	2201      	movs	r2, #1
				*success = true;
 801918a:	701a      	strb	r2, [r3, #0]
}
 801918c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801918e <_ZN7Sensors15FindSensorGroupEhPb>:
SensorGroup* Sensors::FindSensorGroup(uint8_t group_ID, bool* success) {
 801918e:	4613      	mov	r3, r2
	return FindSensorGroupPath(group_ID, NULL, success);
 8019190:	2200      	movs	r2, #0
 8019192:	f7ff bfe2 	b.w	801915a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>

08019196 <_ZN7Sensors23SetSensorGroupPrescalerEht>:
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 8019196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019198:	4616      	mov	r6, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 801919a:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupPrescaler(uint8_t group_ID, uint16_t prescaler) {
 801919e:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80191a0:	f7ff fff5 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 80191a4:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80191a8:	4605      	mov	r5, r0
	if (!success) return false;
 80191aa:	b147      	cbz	r7, 80191be <_ZN7Sensors23SetSensorGroupPrescalerEht+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80191ac:	f04f 31ff 	mov.w	r1, #4294967295
 80191b0:	6820      	ldr	r0, [r4, #0]
 80191b2:	f7f3 fe3b 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80191b6:	6820      	ldr	r0, [r4, #0]
	sensor_group->prescaler = prescaler;
 80191b8:	80ae      	strh	r6, [r5, #4]
	osSemaphoreRelease(SensorsSemaphore);
 80191ba:	f7f3 fe6b 	bl	800ce94 <osSemaphoreRelease>
}
 80191be:	4638      	mov	r0, r7
 80191c0:	b003      	add	sp, #12
 80191c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191c4 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 80191c4:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80191c6:	4611      	mov	r1, r2
			if (length != 2) return false;
 80191c8:	d103      	bne.n	80191d2 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE7_4_FUNES0_tS1_t+0xe>
			return self->SetSensorGroupPrescaler((uint8_t) input[0], input[1]);
 80191ca:	8852      	ldrh	r2, [r2, #2]
 80191cc:	7809      	ldrb	r1, [r1, #0]
 80191ce:	f7ff bfe2 	b.w	8019196 <_ZN7Sensors23SetSensorGroupPrescalerEht>
		}
 80191d2:	2000      	movs	r0, #0
 80191d4:	4770      	bx	lr

080191d6 <_ZN7Sensors20SetSensorGroupStatusEhb>:
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80191d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191d8:	4614      	mov	r4, r2
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80191da:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorGroupStatus(uint8_t group_ID, bool status) {
 80191de:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80191e0:	f7ff ffd5 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return false;
 80191e4:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorGroup* sensor_group = FindSensorGroup(group_ID, &success);
 80191e8:	4605      	mov	r5, r0
	if (!success) return false;
 80191ea:	b14f      	cbz	r7, 8019200 <_ZN7Sensors20SetSensorGroupStatusEhb+0x2a>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80191ec:	f04f 31ff 	mov.w	r1, #4294967295
 80191f0:	6830      	ldr	r0, [r6, #0]
 80191f2:	f7f3 fe1b 	bl	800ce2c <osSemaphoreAcquire>
	sensor_group->active = status;
 80191f6:	702c      	strb	r4, [r5, #0]
	if (!status) {
 80191f8:	b12c      	cbz	r4, 8019206 <_ZN7Sensors20SetSensorGroupStatusEhb+0x30>
	osSemaphoreRelease(SensorsSemaphore);
 80191fa:	6830      	ldr	r0, [r6, #0]
 80191fc:	f7f3 fe4a 	bl	800ce94 <osSemaphoreRelease>
}
 8019200:	4638      	mov	r0, r7
 8019202:	b003      	add	sp, #12
 8019204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_group->read_index = 0;
 8019206:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801920a:	722c      	strb	r4, [r5, #8]
		for (Sensor &sensor : sensor_group->sensors) {
 801920c:	429a      	cmp	r2, r3
 801920e:	d0f4      	beq.n	80191fa <_ZN7Sensors20SetSensorGroupStatusEhb+0x24>
			sensor.read_index = 0;
 8019210:	741c      	strb	r4, [r3, #16]
      operator++() _GLIBCXX_NOEXCEPT
 8019212:	3328      	adds	r3, #40	@ 0x28
	return *this;
 8019214:	e7fa      	b.n	801920c <_ZN7Sensors20SetSensorGroupStatusEhb+0x36>

08019216 <_ZN7Sensors19ActivateSensorGroupEh>:
	return SetSensorGroupStatus(group_ID, true);
 8019216:	2201      	movs	r2, #1
 8019218:	f7ff bfdd 	b.w	80191d6 <_ZN7Sensors20SetSensorGroupStatusEhb>

0801921c <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801921c:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801921e:	4611      	mov	r1, r2
			if (length != 2) return false;
 8019220:	d106      	bne.n	8019230 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t+0x14>
			return self->SetSensorGroupStatus(input[0], (bool) input[1]);
 8019222:	7852      	ldrb	r2, [r2, #1]
 8019224:	7809      	ldrb	r1, [r1, #0]
 8019226:	3a00      	subs	r2, #0
 8019228:	bf18      	it	ne
 801922a:	2201      	movne	r2, #1
 801922c:	f7ff bfd3 	b.w	80191d6 <_ZN7Sensors20SetSensorGroupStatusEhb>
		}
 8019230:	2000      	movs	r0, #0
 8019232:	4770      	bx	lr

08019234 <_ZN7Sensors20DeactivateAllSensorsEh>:
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 8019234:	b573      	push	{r0, r1, r4, r5, r6, lr}
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8019236:	f10d 0303 	add.w	r3, sp, #3
 801923a:	aa01      	add	r2, sp, #4
bool Sensors::DeactivateAllSensors(uint8_t group_ID) {
 801923c:	4604      	mov	r4, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801923e:	f7ff ff8c 	bl	801915a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 8019242:	f89d 6003 	ldrb.w	r6, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 8019246:	4605      	mov	r5, r0
	if (!success) return false;
 8019248:	b166      	cbz	r6, 8019264 <_ZN7Sensors20DeactivateAllSensorsEh+0x30>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801924a:	f04f 31ff 	mov.w	r1, #4294967295
 801924e:	6820      	ldr	r0, [r4, #0]
 8019250:	f7f3 fdec 	bl	800ce2c <osSemaphoreAcquire>
		sensor.active = false;
 8019254:	2100      	movs	r1, #0
 8019256:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
	for (Sensor &sensor : sensor_group->sensors) {
 801925a:	429a      	cmp	r2, r3
 801925c:	d105      	bne.n	801926a <_ZN7Sensors20DeactivateAllSensorsEh+0x36>
	osSemaphoreRelease(SensorsSemaphore);
 801925e:	6820      	ldr	r0, [r4, #0]
 8019260:	f7f3 fe18 	bl	800ce94 <osSemaphoreRelease>
}
 8019264:	4630      	mov	r0, r6
 8019266:	b002      	add	sp, #8
 8019268:	bd70      	pop	{r4, r5, r6, pc}
		sensor.active = false;
 801926a:	f803 1b28 	strb.w	r1, [r3], #40
 801926e:	e7f4      	b.n	801925a <_ZN7Sensors20DeactivateAllSensorsEh+0x26>

08019270 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE4_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensors(*input);
 8019270:	7811      	ldrb	r1, [r2, #0]
 8019272:	f7ff bfdf 	b.w	8019234 <_ZN7Sensors20DeactivateAllSensorsEh>

08019276 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>:
 * @param output interface_: interface linked to the sensor
 * @param output sensor_group_: the sensor group linked to the sensor
 * @param output success: whether successful
 * @return the sensor pointer
 */
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 8019276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801927a:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
	for (I2CInterface &interface : interfaces) {
 801927e:	42a7      	cmp	r7, r4
 8019280:	d102      	bne.n	8019288 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x12>
 8019282:	2300      	movs	r3, #0
				}
			}
		}
	}
	*success = false;
	return NULL;
 8019284:	4618      	mov	r0, r3
 8019286:	e017      	b.n	80192b8 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x42>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019288:	e9d4 5c16 	ldrd	r5, ip, [r4, #88]	@ 0x58
		for (SensorGroup &sensor_group : interface.sensor_groups) {
 801928c:	4565      	cmp	r5, ip
 801928e:	d101      	bne.n	8019294 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x1e>
      operator++() _GLIBCXX_NOEXCEPT
 8019290:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 8019292:	e7f4      	b.n	801927e <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x8>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8019294:	e9d5 6e03 	ldrd	r6, lr, [r5, #12]
			for (Sensor &sensor : sensor_group.sensors) {
 8019298:	45b6      	cmp	lr, r6
 801929a:	4630      	mov	r0, r6
 801929c:	d101      	bne.n	80192a2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x2c>
      operator++() _GLIBCXX_NOEXCEPT
 801929e:	3518      	adds	r5, #24
	return *this;
 80192a0:	e7f4      	b.n	801928c <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x16>
				if (sensor.ID == sensor_ID) {
 80192a2:	f890 8004 	ldrb.w	r8, [r0, #4]
 80192a6:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 80192aa:	4588      	cmp	r8, r1
 80192ac:	d1f4      	bne.n	8019298 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x22>
					if (interface_ != NULL) *interface_ = &interface;
 80192ae:	b102      	cbz	r2, 80192b2 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x3c>
 80192b0:	6014      	str	r4, [r2, #0]
					if (sensor_group_ != NULL) *sensor_group_ = &sensor_group;
 80192b2:	b103      	cbz	r3, 80192b6 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb+0x40>
 80192b4:	601d      	str	r5, [r3, #0]
Sensor* Sensors::FindSensorPath(uint8_t sensor_ID, I2CInterface** interface_, SensorGroup** sensor_group_, bool* success) {
 80192b6:	2301      	movs	r3, #1
					*success = true;
 80192b8:	9a06      	ldr	r2, [sp, #24]
 80192ba:	7013      	strb	r3, [r2, #0]
}
 80192bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192c0 <_ZN7Sensors10FindSensorEhPb>:
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80192c0:	2300      	movs	r3, #0
Sensor* Sensors::FindSensor(uint8_t sensor_ID, bool* success) {
 80192c2:	b507      	push	{r0, r1, r2, lr}
	return FindSensorPath(sensor_ID, NULL, NULL, success);
 80192c4:	9200      	str	r2, [sp, #0]
 80192c6:	461a      	mov	r2, r3
 80192c8:	f7ff ffd5 	bl	8019276 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
}
 80192cc:	b003      	add	sp, #12
 80192ce:	f85d fb04 	ldr.w	pc, [sp], #4

080192d2 <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E>:
bool Sensors::AddSensorCallback(uint8_t sensor_ID, void* context, void (*callback)(void*)) {
 80192d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80192d6:	4617      	mov	r7, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80192d8:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::AddSensorCallback(uint8_t sensor_ID, void* context, void (*callback)(void*)) {
 80192dc:	4604      	mov	r4, r0
 80192de:	461e      	mov	r6, r3
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80192e0:	f7ff ffee 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 80192e4:	f89d 8007 	ldrb.w	r8, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 80192e8:	4605      	mov	r5, r0
	if (!success) return false;
 80192ea:	f1b8 0f00 	cmp.w	r8, #0
 80192ee:	d009      	beq.n	8019304 <_ZN7Sensors17AddSensorCallbackEhPvPFvS0_E+0x32>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80192f0:	f04f 31ff 	mov.w	r1, #4294967295
 80192f4:	6820      	ldr	r0, [r4, #0]
 80192f6:	f7f3 fd99 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80192fa:	6820      	ldr	r0, [r4, #0]
	sensor->callback = callback;
 80192fc:	e9c5 7608 	strd	r7, r6, [r5, #32]
	osSemaphoreRelease(SensorsSemaphore);
 8019300:	f7f3 fdc8 	bl	800ce94 <osSemaphoreRelease>
}
 8019304:	4640      	mov	r0, r8
 8019306:	b002      	add	sp, #8
 8019308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801930c <_ZN7Sensors15SetSensorStatusEhb>:
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 801930c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801930e:	4616      	mov	r6, r2
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019310:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::SetSensorStatus(uint8_t sensor_ID, bool status) {
 8019314:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019316:	f7ff ffd3 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801931a:	f89d 7007 	ldrb.w	r7, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801931e:	4605      	mov	r5, r0
	if (!success) return false;
 8019320:	b147      	cbz	r7, 8019334 <_ZN7Sensors15SetSensorStatusEhb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8019322:	f04f 31ff 	mov.w	r1, #4294967295
 8019326:	6820      	ldr	r0, [r4, #0]
 8019328:	f7f3 fd80 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 801932c:	6820      	ldr	r0, [r4, #0]
	sensor->active = status;
 801932e:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 8019330:	f7f3 fdb0 	bl	800ce94 <osSemaphoreRelease>
}
 8019334:	4638      	mov	r0, r7
 8019336:	b003      	add	sp, #12
 8019338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801933a <_ZN7Sensors14ActivateSensorEh>:
	return SetSensorStatus(sensor_ID, true);
 801933a:	2201      	movs	r2, #1
 801933c:	f7ff bfe6 	b.w	801930c <_ZN7Sensors15SetSensorStatusEhb>

08019340 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 8019340:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 8019342:	4611      	mov	r1, r2
			if (length != 2) return false;
 8019344:	d106      	bne.n	8019354 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE3_4_FUNES0_tS1_t+0x14>
			return self->SetSensorStatus(input[0], (bool) input[1]);
 8019346:	7852      	ldrb	r2, [r2, #1]
 8019348:	7809      	ldrb	r1, [r1, #0]
 801934a:	3a00      	subs	r2, #0
 801934c:	bf18      	it	ne
 801934e:	2201      	movne	r2, #1
 8019350:	f7ff bfdc 	b.w	801930c <_ZN7Sensors15SetSensorStatusEhb>
		}
 8019354:	2000      	movs	r0, #0
 8019356:	4770      	bx	lr

08019358 <_ZN7Sensors15ConfigureSensorEhtPhtm>:
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8019358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935c:	b087      	sub	sp, #28
 801935e:	4691      	mov	r9, r2
 8019360:	469a      	mov	sl, r3
 8019362:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019364:	f10d 0217 	add.w	r2, sp, #23
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t* data, uint16_t size, uint32_t timeout) {
 8019368:	f8bd b040 	ldrh.w	fp, [sp, #64]	@ 0x40
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801936c:	f7ff ffa8 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return HAL_ERROR;
 8019370:	f89d 3017 	ldrb.w	r3, [sp, #23]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019374:	4605      	mov	r5, r0
	if (!success) return HAL_ERROR;
 8019376:	b923      	cbnz	r3, 8019382 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x2a>
 8019378:	2601      	movs	r6, #1
}
 801937a:	4630      	mov	r0, r6
 801937c:	b007      	add	sp, #28
 801937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!sensor->present) return HAL_ERROR;
 8019382:	7883      	ldrb	r3, [r0, #2]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d0f7      	beq.n	8019378 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 8019388:	7841      	ldrb	r1, [r0, #1]
 801938a:	f10d 0217 	add.w	r2, sp, #23
 801938e:	4620      	mov	r0, r4
 8019390:	f7ff fefd 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return HAL_ERROR;
 8019394:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d0ed      	beq.n	8019378 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	I2CInterface* interface = FindInterface(sensor_group->parent, &success);
 801939c:	7841      	ldrb	r1, [r0, #1]
 801939e:	f10d 0217 	add.w	r2, sp, #23
 80193a2:	4620      	mov	r0, r4
 80193a4:	f7ff feb6 	bl	8019114 <_ZN7Sensors13FindInterfaceEhPb>
	if (!success) return HAL_ERROR;
 80193a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
	I2CInterface* interface = FindInterface(sensor_group->parent, &success);
 80193ac:	4680      	mov	r8, r0
	if (!success) return HAL_ERROR;
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d0e2      	beq.n	8019378 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x20>
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80193b2:	f7ea f88b 	bl	80034cc <HAL_GetTick>
 80193b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80193b8:	f04f 31ff 	mov.w	r1, #4294967295
	uint32_t end_timestamp = HAL_GetTick() + timeout;
 80193bc:	18c7      	adds	r7, r0, r3
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80193be:	6820      	ldr	r0, [r4, #0]
 80193c0:	f7f3 fd34 	bl	800ce2c <osSemaphoreAcquire>
		status = HAL_I2C_Mem_Write(interface->interface, sensor->address, memory_address, sensor->memory_address_size, data, size, timeout);
 80193c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80193c6:	892b      	ldrh	r3, [r5, #8]
 80193c8:	88e9      	ldrh	r1, [r5, #6]
 80193ca:	f8cd a000 	str.w	sl, [sp]
 80193ce:	e9cd b201 	strd	fp, r2, [sp, #4]
 80193d2:	464a      	mov	r2, r9
 80193d4:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80193d8:	f7ed ff38 	bl	800724c <HAL_I2C_Mem_Write>
	} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 80193dc:	2802      	cmp	r0, #2
		status = HAL_I2C_Mem_Write(interface->interface, sensor->address, memory_address, sensor->memory_address_size, data, size, timeout);
 80193de:	4606      	mov	r6, r0
	} while ((status == HAL_BUSY) && (HAL_GetTick() < end_timestamp)); // try until the bus is free
 80193e0:	d103      	bne.n	80193ea <_ZN7Sensors15ConfigureSensorEhtPhtm+0x92>
 80193e2:	f7ea f873 	bl	80034cc <HAL_GetTick>
 80193e6:	42b8      	cmp	r0, r7
 80193e8:	d3ec      	bcc.n	80193c4 <_ZN7Sensors15ConfigureSensorEhtPhtm+0x6c>
	osSemaphoreRelease(SensorsSemaphore);
 80193ea:	6820      	ldr	r0, [r4, #0]
 80193ec:	f7f3 fd52 	bl	800ce94 <osSemaphoreRelease>
	return status;
 80193f0:	e7c3      	b.n	801937a <_ZN7Sensors15ConfigureSensorEhtPhtm+0x22>

080193f2 <_ZN7Sensors15ConfigureSensorEhthm>:
HAL_StatusTypeDef Sensors::ConfigureSensor(uint8_t sensor_ID, uint16_t memory_address, uint8_t data, uint32_t timeout) {
 80193f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buffer = data;
 80193f4:	f88d 300f 	strb.w	r3, [sp, #15]
	return ConfigureSensor(sensor_ID, memory_address, &buffer, 1, timeout);
 80193f8:	9b06      	ldr	r3, [sp, #24]
 80193fa:	9301      	str	r3, [sp, #4]
 80193fc:	2301      	movs	r3, #1
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	f10d 030f 	add.w	r3, sp, #15
 8019404:	f7ff ffa8 	bl	8019358 <_ZN7Sensors15ConfigureSensorEhtPhtm>
}
 8019408:	b005      	add	sp, #20
 801940a:	f85d fb04 	ldr.w	pc, [sp], #4

0801940e <_ZN7Sensors23DeactivateAllSensorDataEh>:
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 801940e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019410:	f10d 0207 	add.w	r2, sp, #7
bool Sensors::DeactivateAllSensorData(uint8_t sensor_ID) {
 8019414:	4604      	mov	r4, r0
	Sensor* sensor = FindSensor(sensor_ID, &success);
 8019416:	f7ff ff53 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801941a:	f89d 6007 	ldrb.w	r6, [sp, #7]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801941e:	4605      	mov	r5, r0
	if (!success) return false;
 8019420:	b166      	cbz	r6, 801943c <_ZN7Sensors23DeactivateAllSensorDataEh+0x2e>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 8019422:	f04f 31ff 	mov.w	r1, #4294967295
 8019426:	6820      	ldr	r0, [r4, #0]
 8019428:	f7f3 fd00 	bl	800ce2c <osSemaphoreAcquire>
		data.active = false;
 801942c:	2100      	movs	r1, #0
 801942e:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
	for (SensorData &data : sensor->data) {
 8019432:	429a      	cmp	r2, r3
 8019434:	d105      	bne.n	8019442 <_ZN7Sensors23DeactivateAllSensorDataEh+0x34>
	osSemaphoreRelease(SensorsSemaphore);
 8019436:	6820      	ldr	r0, [r4, #0]
 8019438:	f7f3 fd2c 	bl	800ce94 <osSemaphoreRelease>
}
 801943c:	4630      	mov	r0, r6
 801943e:	b002      	add	sp, #8
 8019440:	bd70      	pop	{r4, r5, r6, pc}
		data.active = false;
 8019442:	f803 1b18 	strb.w	r1, [r3], #24
 8019446:	e7f4      	b.n	8019432 <_ZN7Sensors23DeactivateAllSensorDataEh+0x24>

08019448 <_ZZN7Sensors12AddRegistersEvENUlPvtPhtE6_4_FUNES0_tS1_t>:
			return self->DeactivateAllSensorData(*input);
 8019448:	7811      	ldrb	r1, [r2, #0]
 801944a:	f7ff bfe0 	b.w	801940e <_ZN7Sensors23DeactivateAllSensorDataEh>

0801944e <_ZN7Sensors14FindSensorDataEhtPb>:
SensorData* Sensors::FindSensorData(uint8_t sensor_ID, uint16_t sensor_register, bool* success) {
 801944e:	b538      	push	{r3, r4, r5, lr}
 8019450:	461c      	mov	r4, r3
 8019452:	4615      	mov	r5, r2
	Sensor* sensor = FindSensor(sensor_ID, success);
 8019454:	461a      	mov	r2, r3
 8019456:	f7ff ff33 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (not *success) return NULL;
 801945a:	7823      	ldrb	r3, [r4, #0]
 801945c:	b133      	cbz	r3, 801946c <_ZN7Sensors14FindSensorDataEhtPb+0x1e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801945e:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
	for (SensorData &data : sensor->data) {
 8019462:	429a      	cmp	r2, r3
 8019464:	4618      	mov	r0, r3
 8019466:	d103      	bne.n	8019470 <_ZN7Sensors14FindSensorDataEhtPb+0x22>
	*success = false;
 8019468:	2300      	movs	r3, #0
 801946a:	7023      	strb	r3, [r4, #0]
	if (not *success) return NULL;
 801946c:	2000      	movs	r0, #0
 801946e:	e003      	b.n	8019478 <_ZN7Sensors14FindSensorDataEhtPb+0x2a>
		if (data.register_address == sensor_register) {
 8019470:	8899      	ldrh	r1, [r3, #4]
 8019472:	3318      	adds	r3, #24
 8019474:	42a9      	cmp	r1, r5
 8019476:	d1f4      	bne.n	8019462 <_ZN7Sensors14FindSensorDataEhtPb+0x14>
}
 8019478:	bd38      	pop	{r3, r4, r5, pc}

0801947a <_ZN7Sensors18IsSensorDataActiveEht>:
bool Sensors::IsSensorDataActive(uint8_t sensor_ID, uint16_t sensor_register) {
 801947a:	b507      	push	{r0, r1, r2, lr}
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801947c:	f10d 0307 	add.w	r3, sp, #7
 8019480:	f7ff ffe5 	bl	801944e <_ZN7Sensors14FindSensorDataEhtPb>
 8019484:	4603      	mov	r3, r0
	if (!success) return false;
 8019486:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801948a:	b100      	cbz	r0, 801948e <_ZN7Sensors18IsSensorDataActiveEht+0x14>
	bool status = sensor_data->active;
 801948c:	7818      	ldrb	r0, [r3, #0]
}
 801948e:	b003      	add	sp, #12
 8019490:	f85d fb04 	ldr.w	pc, [sp], #4

08019494 <_ZN7Sensors19SetSensorDataStatusEhtb>:
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 8019494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019496:	461e      	mov	r6, r3
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 8019498:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::SetSensorDataStatus(uint8_t sensor_ID, uint16_t sensor_register, bool status) {
 801949c:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801949e:	f7ff ffd6 	bl	801944e <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 80194a2:	f89d 7007 	ldrb.w	r7, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 80194a6:	4605      	mov	r5, r0
	if (!success) return false;
 80194a8:	b147      	cbz	r7, 80194bc <_ZN7Sensors19SetSensorDataStatusEhtb+0x28>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 80194aa:	f04f 31ff 	mov.w	r1, #4294967295
 80194ae:	6820      	ldr	r0, [r4, #0]
 80194b0:	f7f3 fcbc 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(SensorsSemaphore);
 80194b4:	6820      	ldr	r0, [r4, #0]
	sensor_data->active = status;
 80194b6:	702e      	strb	r6, [r5, #0]
	osSemaphoreRelease(SensorsSemaphore);
 80194b8:	f7f3 fcec 	bl	800ce94 <osSemaphoreRelease>
}
 80194bc:	4638      	mov	r0, r7
 80194be:	b003      	add	sp, #12
 80194c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080194c2 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t>:
			if (length != 3) return false;
 80194c2:	2b03      	cmp	r3, #3
		[](void* context, uint16_t register_id, uint16_t* input, uint16_t length) -> bool {
 80194c4:	4611      	mov	r1, r2
			if (length != 3) return false;
 80194c6:	d107      	bne.n	80194d8 <_ZZN7Sensors12AddRegistersEvENUlPvtPttE5_4_FUNES0_tS1_t+0x16>
			return self->SetSensorDataStatus((uint8_t) input[0], input[1], (bool) input[2]);
 80194c8:	8893      	ldrh	r3, [r2, #4]
 80194ca:	7809      	ldrb	r1, [r1, #0]
 80194cc:	3b00      	subs	r3, #0
 80194ce:	8852      	ldrh	r2, [r2, #2]
 80194d0:	bf18      	it	ne
 80194d2:	2301      	movne	r3, #1
 80194d4:	f7ff bfde 	b.w	8019494 <_ZN7Sensors19SetSensorDataStatusEhtb>
		}
 80194d8:	2000      	movs	r0, #0
 80194da:	4770      	bx	lr

080194dc <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh>:
 *
 * @param input interface: interface linked to the sensor
 * @param input sensor_ID: sensor ID to check
 * @return true if the sensor is part of the pending list
 */
bool Sensors::IsSensorPending(I2CInterface* interface, uint8_t sensor_ID) {
 80194dc:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80194de:	e9d1 4319 	ldrd	r4, r3, [r1, #100]	@ 0x64
	for (uint8_t index = 0; index < interface->pending_sensors.size(); index++) {
 80194e2:	2100      	movs	r1, #0
 80194e4:	1b1b      	subs	r3, r3, r4
 80194e6:	109b      	asrs	r3, r3, #2
 80194e8:	b2c8      	uxtb	r0, r1
 80194ea:	4298      	cmp	r0, r3
 80194ec:	d301      	bcc.n	80194f2 <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0x16>
		if (interface->pending_sensors[index]->ID == sensor_ID) {
			return true;
		}
	}
	return false;
 80194ee:	2000      	movs	r0, #0
}
 80194f0:	bd10      	pop	{r4, pc}
		if (interface->pending_sensors[index]->ID == sensor_ID) {
 80194f2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80194f6:	3101      	adds	r1, #1
 80194f8:	7900      	ldrb	r0, [r0, #4]
 80194fa:	4290      	cmp	r0, r2
 80194fc:	d1f4      	bne.n	80194e8 <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0xc>
			return true;
 80194fe:	2001      	movs	r0, #1
 8019500:	e7f6      	b.n	80194f0 <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh+0x14>

08019502 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>:
 *
 * @param input interface: interface linked to the sensor
 * @param input sensor_ID: sensor ID to check
 * @return true if there is a data linked to sensor in the request list
 */
bool Sensors::IsSensorRequested(I2CInterface* interface, uint8_t sensor_ID) {
 8019502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019504:	4606      	mov	r6, r0
 8019506:	460c      	mov	r4, r1
 8019508:	4617      	mov	r7, r2
	bool success;
	for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801950a:	2500      	movs	r5, #0
 801950c:	b2ea      	uxtb	r2, r5
 801950e:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	@ 0x70
 8019512:	1ac9      	subs	r1, r1, r3
 8019514:	ebb2 1f61 	cmp.w	r2, r1, asr #5
 8019518:	d302      	bcc.n	8019520 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x1e>

		if (sensor->ID == sensor_ID) {
			return true;
		}
	}
	return false;
 801951a:	2000      	movs	r0, #0
}
 801951c:	b003      	add	sp, #12
 801951e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Sensor* sensor = FindSensor(interface->pending_requests[request_index].data.parent, &success);
 8019520:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019524:	4630      	mov	r0, r6
 8019526:	f10d 0207 	add.w	r2, sp, #7
 801952a:	7a59      	ldrb	r1, [r3, #9]
 801952c:	f7ff fec8 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
 8019530:	4603      	mov	r3, r0
		if (!success) continue;
 8019532:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8019536:	b110      	cbz	r0, 801953e <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x3c>
		if (sensor->ID == sensor_ID) {
 8019538:	791b      	ldrb	r3, [r3, #4]
 801953a:	42bb      	cmp	r3, r7
 801953c:	d0ee      	beq.n	801951c <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0x1a>
	for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801953e:	3501      	adds	r5, #1
 8019540:	e7e4      	b.n	801950c <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh+0xa>
	...

08019544 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>:
 *
 * @param input interface: the interface to select the next group
 * @param input reset: true to reset the interface reading index if interface terminated
 * @return false if no other group left
 */
bool Sensors::MoveToNextGroup(I2CInterface* interface, bool reset) {
 8019544:	b510      	push	{r4, lr}
 8019546:	e9d1 4316 	ldrd	r4, r3, [r1, #88]	@ 0x58
	interface->read_index += 1;
 801954a:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
 801954e:	1b1b      	subs	r3, r3, r4
 8019550:	4c08      	ldr	r4, [pc, #32]	@ (8019574 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x30>)
 8019552:	3001      	adds	r0, #1
 8019554:	10db      	asrs	r3, r3, #3
 8019556:	b2c0      	uxtb	r0, r0
 8019558:	4363      	muls	r3, r4
 801955a:	f881 0055 	strb.w	r0, [r1, #85]	@ 0x55
	if (interface->read_index < interface->sensor_groups.size())
 801955e:	4298      	cmp	r0, r3
 8019560:	d306      	bcc.n	8019570 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x2c>
		return true;

	if (reset) interface->read_index = 0;
 8019562:	b90a      	cbnz	r2, 8019568 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x24>
	return false;
 8019564:	2000      	movs	r0, #0
}
 8019566:	bd10      	pop	{r4, pc}
	if (reset) interface->read_index = 0;
 8019568:	2300      	movs	r3, #0
 801956a:	f881 3055 	strb.w	r3, [r1, #85]	@ 0x55
 801956e:	e7f9      	b.n	8019564 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x20>
		return true;
 8019570:	2001      	movs	r0, #1
 8019572:	e7f8      	b.n	8019566 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb+0x22>
 8019574:	aaaaaaab 	.word	0xaaaaaaab

08019578 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>:
 * @param input interface: the interface
 * @param input sensor_group: the sensor group to select the next sensor
 * @param input reset: true to reset the group reading index and process group termination if group terminated
 * @return false if no other sensor left
 */
bool Sensors::MoveToNextSensor(I2CInterface* interface, SensorGroup* sensor_group, bool reset) {
 8019578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801957a:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
	sensor_group->read_index += 1;
 801957e:	7a16      	ldrb	r6, [r2, #8]
 8019580:	1bed      	subs	r5, r5, r7
 8019582:	4f08      	ldr	r7, [pc, #32]	@ (80195a4 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x2c>)
 8019584:	3601      	adds	r6, #1
 8019586:	10ed      	asrs	r5, r5, #3
 8019588:	b2f6      	uxtb	r6, r6
 801958a:	437d      	muls	r5, r7
 801958c:	7216      	strb	r6, [r2, #8]
	if (sensor_group->read_index < sensor_group->sensors.size())
 801958e:	42ae      	cmp	r6, r5
 8019590:	d306      	bcc.n	80195a0 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x28>
		return true;

	if (reset) {
 8019592:	b11b      	cbz	r3, 801959c <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x24>
		sensor_group->read_index = 0;
 8019594:	2300      	movs	r3, #0
 8019596:	7213      	strb	r3, [r2, #8]
		ProccessGroupTermination(interface, sensor_group);
 8019598:	f7ff fd86 	bl	80190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
		return true;
 801959c:	2000      	movs	r0, #0
	}
	return false;
}
 801959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
 80195a0:	2001      	movs	r0, #1
 80195a2:	e7fc      	b.n	801959e <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb+0x26>
 80195a4:	cccccccd 	.word	0xcccccccd

080195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>:
 *
 * @param input sensor: the sensor to select the next data
 * @param input reset: true to reset the sensor reading index, stop sensor processing and process sensor callback if sensor terminated
 * @return false if no other sensor data left
 */
bool Sensors::MoveToNextData(Sensor* sensor, bool reset) {
 80195a8:	b538      	push	{r3, r4, r5, lr}
	sensor->read_index += 1;
 80195aa:	7c0b      	ldrb	r3, [r1, #16]
bool Sensors::MoveToNextData(Sensor* sensor, bool reset) {
 80195ac:	460c      	mov	r4, r1
 80195ae:	4817      	ldr	r0, [pc, #92]	@ (801960c <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x64>)
	sensor->read_index += 1;
 80195b0:	3301      	adds	r3, #1
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	740b      	strb	r3, [r1, #16]
 80195b6:	e9d1 5105 	ldrd	r5, r1, [r1, #20]
 80195ba:	1b49      	subs	r1, r1, r5
 80195bc:	10c9      	asrs	r1, r1, #3
 80195be:	4341      	muls	r1, r0
	if (sensor->read_index < sensor->data.size()) {
 80195c0:	428b      	cmp	r3, r1
 80195c2:	d217      	bcs.n	80195f4 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4c>
	return *(this->_M_impl._M_start + __n);
 80195c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80195c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		SensorData* sensor_data = &(sensor->data[sensor->read_index]);
		if (sensor_data->sequence.size() == 0) return true;
 80195cc:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80195d0:	429a      	cmp	r2, r3
 80195d2:	d00d      	beq.n	80195f0 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x48>
		I2CAccess* I2C_access = &(sensor_data->sequence[0]);
		if (I2C_access->access_mode == DELAY_MODE)
 80195d4:	781b      	ldrb	r3, [r3, #0]
 80195d6:	2b04      	cmp	r3, #4
 80195d8:	d10a      	bne.n	80195f0 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x48>
			sensor->timestamp = HAL_GetTick() + sensor_data->sequence[sensor_data->read_index].delay;
 80195da:	f7e9 ff77 	bl	80034cc <HAL_GetTick>
 80195de:	7a2b      	ldrb	r3, [r5, #8]
 80195e0:	68ea      	ldr	r2, [r5, #12]
 80195e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80195e6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80195ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80195ec:	4403      	add	r3, r0
 80195ee:	60e3      	str	r3, [r4, #12]
		if (sensor_data->sequence.size() == 0) return true;
 80195f0:	2001      	movs	r0, #1
 80195f2:	e001      	b.n	80195f8 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x50>
		return true;
	}

	if (reset) {
 80195f4:	b90a      	cbnz	r2, 80195fa <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x52>
		sensor->read_index = 0;

		// Process the callback
		if (sensor->callback != NULL) sensor->callback(sensor->context);
	}
	return false;
 80195f6:	2000      	movs	r0, #0
}
 80195f8:	bd38      	pop	{r3, r4, r5, pc}
		sensor->processing = false;
 80195fa:	2300      	movs	r3, #0
 80195fc:	70e3      	strb	r3, [r4, #3]
		sensor->read_index = 0;
 80195fe:	7423      	strb	r3, [r4, #16]
		if (sensor->callback != NULL) sensor->callback(sensor->context);
 8019600:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019602:	2b00      	cmp	r3, #0
 8019604:	d0f7      	beq.n	80195f6 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4e>
 8019606:	6a20      	ldr	r0, [r4, #32]
 8019608:	4798      	blx	r3
 801960a:	e7f4      	b.n	80195f6 <_ZN7Sensors14MoveToNextDataEP6Sensorb+0x4e>
 801960c:	aaaaaaab 	.word	0xaaaaaaab

08019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>:
 *
 * @param input sensor_data: the sensor data to select the next access
 * @param input reset: true to reset the sensor data reading index if sensor data terminated
 * @return false if no other access left
 */
bool Sensors::MoveToNextSequence(SensorData* sensor_data, bool reset) {
 8019610:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sensor_data->read_index += 1;
 8019612:	7a0b      	ldrb	r3, [r1, #8]
bool Sensors::MoveToNextSequence(SensorData* sensor_data, bool reset) {
 8019614:	460c      	mov	r4, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019616:	4e17      	ldr	r6, [pc, #92]	@ (8019674 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x64>)
	sensor_data->read_index += 1;
 8019618:	3301      	adds	r3, #1
 801961a:	b2db      	uxtb	r3, r3
 801961c:	720b      	strb	r3, [r1, #8]
 801961e:	e9d1 5103 	ldrd	r5, r1, [r1, #12]
 8019622:	1b49      	subs	r1, r1, r5
 8019624:	1109      	asrs	r1, r1, #4
 8019626:	4371      	muls	r1, r6

	if (sensor_data->read_index < sensor_data->sequence.size()) {
 8019628:	428b      	cmp	r3, r1
 801962a:	d21b      	bcs.n	8019664 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x54>
	return *(this->_M_impl._M_start + __n);
 801962c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019630:	011b      	lsls	r3, r3, #4
		// If the next sequence is a Delay, set the end timestamp
		I2CAccess* I2C_access = &(sensor_data->sequence[sensor_data->read_index]);
		if (I2C_access->access_mode == DELAY_MODE) {
 8019632:	5ceb      	ldrb	r3, [r5, r3]
 8019634:	2b04      	cmp	r3, #4
 8019636:	d113      	bne.n	8019660 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x50>
			bool success;
			Sensor* sensor = FindSensor(sensor_data->parent, &success);
 8019638:	f10d 0207 	add.w	r2, sp, #7
 801963c:	7861      	ldrb	r1, [r4, #1]
 801963e:	f7ff fe3f 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
			if (success)
 8019642:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Sensor* sensor = FindSensor(sensor_data->parent, &success);
 8019646:	4605      	mov	r5, r0
			if (success)
 8019648:	b153      	cbz	r3, 8019660 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x50>
				sensor->timestamp = HAL_GetTick() + sensor_data->sequence[sensor_data->read_index].delay;
 801964a:	f7e9 ff3f 	bl	80034cc <HAL_GetTick>
 801964e:	7a23      	ldrb	r3, [r4, #8]
 8019650:	68e2      	ldr	r2, [r4, #12]
 8019652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019656:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801965a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801965c:	4403      	add	r3, r0
 801965e:	60eb      	str	r3, [r5, #12]
		}
		return true;
 8019660:	2001      	movs	r0, #1
 8019662:	e001      	b.n	8019668 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x58>
	}

	if (reset)
 8019664:	b912      	cbnz	r2, 801966c <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x5c>
		sensor_data->read_index = 0;
	return false;
 8019666:	2000      	movs	r0, #0
}
 8019668:	b002      	add	sp, #8
 801966a:	bd70      	pop	{r4, r5, r6, pc}
		sensor_data->read_index = 0;
 801966c:	2300      	movs	r3, #0
 801966e:	7223      	strb	r3, [r4, #8]
 8019670:	e7f9      	b.n	8019666 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab+0x56>
 8019672:	bf00      	nop
 8019674:	cccccccd 	.word	0xcccccccd

08019678 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801967c:	e9d0 5600 	ldrd	r5, r6, [r0]
	  for (; __first != __last; ++__first)
 8019680:	42ae      	cmp	r6, r5
 8019682:	d107      	bne.n	8019694 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 8019684:	6820      	ldr	r0, [r4, #0]
	if (__p)
 8019686:	b118      	cbz	r0, 8019690 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8019688:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801968a:	1a09      	subs	r1, r1, r0
 801968c:	f003 fa4c 	bl	801cb28 <_ZdlPvj>
      }
 8019690:	4620      	mov	r0, r4
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	f105 000c 	add.w	r0, r5, #12
 8019698:	3518      	adds	r5, #24
 801969a:	f7e8 fcab 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801969e:	e7ef      	b.n	8019680 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev+0x8>

080196a0 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80196a0:	b570      	push	{r4, r5, r6, lr}
 80196a2:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80196a4:	e9d0 5600 	ldrd	r5, r6, [r0]
 80196a8:	42ae      	cmp	r6, r5
 80196aa:	d107      	bne.n	80196bc <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x1c>
	_M_deallocate(_M_impl._M_start,
 80196ac:	6820      	ldr	r0, [r4, #0]
	if (__p)
 80196ae:	b118      	cbz	r0, 80196b8 <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80196b0:	68a1      	ldr	r1, [r4, #8]
 80196b2:	1a09      	subs	r1, r1, r0
 80196b4:	f003 fa38 	bl	801cb28 <_ZdlPvj>
      }
 80196b8:	4620      	mov	r0, r4
 80196ba:	bd70      	pop	{r4, r5, r6, pc}
struct Sensor {
 80196bc:	f105 0014 	add.w	r0, r5, #20
 80196c0:	3528      	adds	r5, #40	@ 0x28
 80196c2:	f7ff ffd9 	bl	8019678 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 80196c6:	e7ef      	b.n	80196a8 <_ZNSt6vectorI6SensorSaIS0_EED1Ev+0x8>

080196c8 <_ZN12I2CInterfaceD1Ev>:
struct I2CInterface {
 80196c8:	b570      	push	{r4, r5, r6, lr}
 80196ca:	4604      	mov	r4, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80196cc:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 80196d0:	42ae      	cmp	r6, r5
 80196d2:	d117      	bne.n	8019704 <_ZN12I2CInterfaceD1Ev+0x3c>
	_M_deallocate(_M_impl._M_start,
 80196d4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
	if (__p)
 80196d6:	b118      	cbz	r0, 80196e0 <_ZN12I2CInterfaceD1Ev+0x18>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80196d8:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80196da:	1a09      	subs	r1, r1, r0
 80196dc:	f003 fa24 	bl	801cb28 <_ZdlPvj>
	_M_deallocate(_M_impl._M_start,
 80196e0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
	if (__p)
 80196e2:	b118      	cbz	r0, 80196ec <_ZN12I2CInterfaceD1Ev+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80196e4:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80196e6:	1a09      	subs	r1, r1, r0
 80196e8:	f003 fa1e 	bl	801cb28 <_ZdlPvj>
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80196ec:	e9d4 5616 	ldrd	r5, r6, [r4, #88]	@ 0x58
 80196f0:	42ae      	cmp	r6, r5
 80196f2:	d10d      	bne.n	8019710 <_ZN12I2CInterfaceD1Ev+0x48>
	_M_deallocate(_M_impl._M_start,
 80196f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
	if (__p)
 80196f6:	b118      	cbz	r0, 8019700 <_ZN12I2CInterfaceD1Ev+0x38>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80196f8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80196fa:	1a09      	subs	r1, r1, r0
 80196fc:	f003 fa14 	bl	801cb28 <_ZdlPvj>
 8019700:	4620      	mov	r0, r4
 8019702:	bd70      	pop	{r4, r5, r6, pc}
      }
 8019704:	f105 0014 	add.w	r0, r5, #20
 8019708:	3520      	adds	r5, #32
 801970a:	f7e8 fc73 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801970e:	e7df      	b.n	80196d0 <_ZN12I2CInterfaceD1Ev+0x8>
struct SensorGroup {
 8019710:	f105 000c 	add.w	r0, r5, #12
 8019714:	3518      	adds	r5, #24
 8019716:	f7ff ffc3 	bl	80196a0 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801971a:	e7e9      	b.n	80196f0 <_ZN12I2CInterfaceD1Ev+0x28>

0801971c <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801971c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019720:	4604      	mov	r4, r0
 8019722:	4689      	mov	r9, r1
 8019724:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019726:	f04f 0800 	mov.w	r8, #0
      for (; __first != __last; ++__first, (void)++__cur)
 801972a:	454c      	cmp	r4, r9
 801972c:	4628      	mov	r0, r5
 801972e:	f105 057c 	add.w	r5, r5, #124	@ 0x7c
 8019732:	d101      	bne.n	8019738 <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x1c>
    }
 8019734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct I2CInterface {
 8019738:	7823      	ldrb	r3, [r4, #0]
 801973a:	f104 0710 	add.w	r7, r4, #16
 801973e:	f1a5 066c 	sub.w	r6, r5, #108	@ 0x6c
 8019742:	f805 3c7c 	strb.w	r3, [r5, #-124]
 8019746:	7863      	ldrb	r3, [r4, #1]
 8019748:	f805 3c7b 	strb.w	r3, [r5, #-123]
 801974c:	78a3      	ldrb	r3, [r4, #2]
 801974e:	f805 3c7a 	strb.w	r3, [r5, #-122]
 8019752:	6863      	ldr	r3, [r4, #4]
 8019754:	f845 3c78 	str.w	r3, [r5, #-120]
 8019758:	68a3      	ldr	r3, [r4, #8]
 801975a:	f845 3c74 	str.w	r3, [r5, #-116]
 801975e:	68e3      	ldr	r3, [r4, #12]
 8019760:	f845 3c70 	str.w	r3, [r5, #-112]
 8019764:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019766:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019768:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801976a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801976c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801976e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019770:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019774:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8019778:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
	{ __p->~_Up(); }
 801977c:	4620      	mov	r0, r4
 801977e:	f805 3c2c 	strb.w	r3, [r5, #-44]
 8019782:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8019786:	f805 3c2b 	strb.w	r3, [r5, #-43]
 801978a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 801978e:	f825 3c2a 	strh.w	r3, [r5, #-42]
 8019792:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019796:	f805 3c28 	strb.w	r3, [r5, #-40]
 801979a:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801979e:	f805 3c27 	strb.w	r3, [r5, #-39]
 80197a2:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
 80197a6:	f805 3c26 	strb.w	r3, [r5, #-38]
 80197aa:	f894 3057 	ldrb.w	r3, [r4, #87]	@ 0x57
 80197ae:	f805 3c25 	strb.w	r3, [r5, #-37]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80197b4:	f845 3c24 	str.w	r3, [r5, #-36]
 80197b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80197ba:	f845 3c20 	str.w	r3, [r5, #-32]
	  _M_end_of_storage(__x._M_end_of_storage)
 80197be:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80197c0:	f845 3c1c 	str.w	r3, [r5, #-28]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197c4:	e9c4 8817 	strd	r8, r8, [r4, #92]	@ 0x5c
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197ca:	f8c4 8058 	str.w	r8, [r4, #88]	@ 0x58
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197ce:	f845 3c18 	str.w	r3, [r5, #-24]
 80197d2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197d4:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197d8:	f845 3c14 	str.w	r3, [r5, #-20]
	  _M_end_of_storage(__x._M_end_of_storage)
 80197dc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80197de:	f845 3c10 	str.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197e4:	f8c4 8070 	str.w	r8, [r4, #112]	@ 0x70
 80197e8:	e9c4 881a 	strd	r8, r8, [r4, #104]	@ 0x68
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80197ec:	f845 3c0c 	str.w	r3, [r5, #-12]
 80197f0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80197f2:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 80197f6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80197f8:	e9c4 881d 	strd	r8, r8, [r4, #116]	@ 0x74
	  _M_end_of_storage(__x._M_end_of_storage)
 80197fc:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8019800:	347c      	adds	r4, #124	@ 0x7c
 8019802:	f7ff ff61 	bl	80196c8 <_ZN12I2CInterfaceD1Ev>
 8019806:	e790      	b.n	801972a <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xe>

08019808 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8019808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801980a:	4604      	mov	r4, r0
 801980c:	460e      	mov	r6, r1
 801980e:	4615      	mov	r5, r2
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019810:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8019812:	42b4      	cmp	r4, r6
 8019814:	4628      	mov	r0, r5
 8019816:	f105 0518 	add.w	r5, r5, #24
 801981a:	d100      	bne.n	801981e <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 801981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct SensorGroup {
 801981e:	7823      	ldrb	r3, [r4, #0]
 8019820:	4620      	mov	r0, r4
 8019822:	f805 3c18 	strb.w	r3, [r5, #-24]
 8019826:	7863      	ldrb	r3, [r4, #1]
 8019828:	f805 3c17 	strb.w	r3, [r5, #-23]
 801982c:	78a3      	ldrb	r3, [r4, #2]
 801982e:	f805 3c16 	strb.w	r3, [r5, #-22]
 8019832:	78e3      	ldrb	r3, [r4, #3]
 8019834:	f805 3c15 	strb.w	r3, [r5, #-21]
 8019838:	88a3      	ldrh	r3, [r4, #4]
 801983a:	f825 3c14 	strh.w	r3, [r5, #-20]
 801983e:	88e3      	ldrh	r3, [r4, #6]
 8019840:	f825 3c12 	strh.w	r3, [r5, #-18]
 8019844:	7a23      	ldrb	r3, [r4, #8]
 8019846:	f805 3c10 	strb.w	r3, [r5, #-16]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801984a:	68e3      	ldr	r3, [r4, #12]
 801984c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8019850:	6923      	ldr	r3, [r4, #16]
 8019852:	f845 3c08 	str.w	r3, [r5, #-8]
	  _M_end_of_storage(__x._M_end_of_storage)
 8019856:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019858:	e9c4 7704 	strd	r7, r7, [r4, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801985c:	f845 3c04 	str.w	r3, [r5, #-4]
      for (; __first != __last; ++__first, (void)++__cur)
 8019860:	3418      	adds	r4, #24
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8019862:	f840 7f0c 	str.w	r7, [r0, #12]!
 8019866:	f7ff ff1b 	bl	80196a0 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801986a:	e7d2      	b.n	8019812 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

0801986c <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801986e:	4604      	mov	r4, r0
 8019870:	460e      	mov	r6, r1
 8019872:	4615      	mov	r5, r2
 8019874:	2700      	movs	r7, #0
      for (; __first != __last; ++__first, (void)++__cur)
 8019876:	42b4      	cmp	r4, r6
 8019878:	4628      	mov	r0, r5
 801987a:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 801987e:	d100      	bne.n	8019882 <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0x16>
    }
 8019880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
struct Sensor {
 8019882:	7823      	ldrb	r3, [r4, #0]
 8019884:	f104 0014 	add.w	r0, r4, #20
 8019888:	f805 3c28 	strb.w	r3, [r5, #-40]
 801988c:	7863      	ldrb	r3, [r4, #1]
 801988e:	f805 3c27 	strb.w	r3, [r5, #-39]
 8019892:	78a3      	ldrb	r3, [r4, #2]
 8019894:	f805 3c26 	strb.w	r3, [r5, #-38]
 8019898:	78e3      	ldrb	r3, [r4, #3]
 801989a:	f805 3c25 	strb.w	r3, [r5, #-37]
 801989e:	7923      	ldrb	r3, [r4, #4]
 80198a0:	f805 3c24 	strb.w	r3, [r5, #-36]
 80198a4:	88e3      	ldrh	r3, [r4, #6]
 80198a6:	f825 3c22 	strh.w	r3, [r5, #-34]
 80198aa:	8923      	ldrh	r3, [r4, #8]
 80198ac:	f825 3c20 	strh.w	r3, [r5, #-32]
 80198b0:	68e3      	ldr	r3, [r4, #12]
 80198b2:	f845 3c1c 	str.w	r3, [r5, #-28]
 80198b6:	7c23      	ldrb	r3, [r4, #16]
 80198b8:	f805 3c18 	strb.w	r3, [r5, #-24]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80198bc:	6963      	ldr	r3, [r4, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80198be:	6167      	str	r7, [r4, #20]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 80198c0:	f845 3c14 	str.w	r3, [r5, #-20]
 80198c4:	69a3      	ldr	r3, [r4, #24]
 80198c6:	f845 3c10 	str.w	r3, [r5, #-16]
	  _M_end_of_storage(__x._M_end_of_storage)
 80198ca:	69e3      	ldr	r3, [r4, #28]
 80198cc:	f845 3c0c 	str.w	r3, [r5, #-12]
 80198d0:	6a23      	ldr	r3, [r4, #32]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 80198d2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80198d6:	f845 3c08 	str.w	r3, [r5, #-8]
      for (; __first != __last; ++__first, (void)++__cur)
 80198da:	3428      	adds	r4, #40	@ 0x28
 80198dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80198e0:	f845 3c04 	str.w	r3, [r5, #-4]
 80198e4:	f7ff fec8 	bl	8019678 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 80198e8:	e7c5      	b.n	8019876 <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0+0xa>

080198ea <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>:
      erase(const_iterator __position)
 80198ea:	b5f0      	push	{r4, r5, r6, r7, lr}
      { return __normal_iterator(_M_current + __n); }
 80198ec:	f101 0420 	add.w	r4, r1, #32
      : _M_current(__i) { }
 80198f0:	6845      	ldr	r5, [r0, #4]
 80198f2:	b085      	sub	sp, #20
 80198f4:	4606      	mov	r6, r0
      if (__position + 1 != end())
 80198f6:	42ac      	cmp	r4, r5
 80198f8:	d108      	bne.n	801990c <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x22>
      --this->_M_impl._M_finish;
 80198fa:	6870      	ldr	r0, [r6, #4]
 80198fc:	f1a0 0320 	sub.w	r3, r0, #32
      }
 8019900:	380c      	subs	r0, #12
 8019902:	6073      	str	r3, [r6, #4]
 8019904:	f7e8 fb76 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
      { return _M_erase(begin() + (__position - cbegin())); }
 8019908:	b005      	add	sp, #20
 801990a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801990c:	1b2d      	subs	r5, r5, r4
	  _M_start = __x._M_start;
 801990e:	2700      	movs	r7, #0
 8019910:	116d      	asrs	r5, r5, #5
 8019912:	2d00      	cmp	r5, #0
 8019914:	f104 0420 	add.w	r4, r4, #32
 8019918:	ddef      	ble.n	80198fa <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x10>
struct ReadRequest {
 801991a:	f814 3c20 	ldrb.w	r3, [r4, #-32]
 801991e:	3d01      	subs	r5, #1
 8019920:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8019924:	f804 3c40 	strb.w	r3, [r4, #-64]
 8019928:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 801992c:	f844 3c3c 	str.w	r3, [r4, #-60]
struct SensorData {
 8019930:	f814 3c18 	ldrb.w	r3, [r4, #-24]
 8019934:	f804 3c38 	strb.w	r3, [r4, #-56]
 8019938:	f814 3c17 	ldrb.w	r3, [r4, #-23]
 801993c:	f804 3c37 	strb.w	r3, [r4, #-55]
 8019940:	f814 3c16 	ldrb.w	r3, [r4, #-22]
 8019944:	f804 3c36 	strb.w	r3, [r4, #-54]
 8019948:	f834 3c14 	ldrh.w	r3, [r4, #-20]
 801994c:	f824 3c34 	strh.w	r3, [r4, #-52]
 8019950:	f814 3c12 	ldrb.w	r3, [r4, #-18]
 8019954:	f804 3c32 	strb.w	r3, [r4, #-50]
 8019958:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	  _M_finish = __x._M_finish;
 801995c:	e954 120b 	ldrd	r1, r2, [r4, #-44]	@ 0x2c
	  _M_start = __x._M_start;
 8019960:	f844 0c2c 	str.w	r0, [r4, #-44]
	  _M_finish = __x._M_finish;
 8019964:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8019968:	f804 3c31 	strb.w	r3, [r4, #-49]
 801996c:	f814 3c10 	ldrb.w	r3, [r4, #-16]
 8019970:	f844 0c28 	str.w	r0, [r4, #-40]
	  _M_end_of_storage = __x._M_end_of_storage;
 8019974:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8019978:	f804 3c30 	strb.w	r3, [r4, #-48]
 801997c:	f854 3c24 	ldr.w	r3, [r4, #-36]
 8019980:	f844 0c24 	str.w	r0, [r4, #-36]
      }
 8019984:	a801      	add	r0, sp, #4
	  _M_end_of_storage = __x._M_end_of_storage;
 8019986:	9303      	str	r3, [sp, #12]
	  _M_finish = __x._M_finish;
 8019988:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801998c:	e944 7703 	strd	r7, r7, [r4, #-12]
	  _M_end_of_storage = __x._M_end_of_storage;
 8019990:	f844 7c04 	str.w	r7, [r4, #-4]
      }
 8019994:	f7e8 fb2e 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 8019998:	e7bb      	b.n	8019912 <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0+0x28>
	...

0801999c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80199a0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      push_back(const value_type& __x)
 80199a4:	4604      	mov	r4, r0
 80199a6:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80199a8:	4293      	cmp	r3, r2
 80199aa:	d005      	beq.n	80199b8 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80199ac:	680a      	ldr	r2, [r1, #0]
 80199ae:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 80199b2:	6043      	str	r3, [r0, #4]
      }
 80199b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199b8:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 80199bc:	f06f 4760 	mvn.w	r7, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199c0:	eba3 0508 	sub.w	r5, r3, r8
	if (max_size() - size() < __n)
 80199c4:	ebb7 0fa5 	cmp.w	r7, r5, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80199c8:	ea4f 02a5 	mov.w	r2, r5, asr #2
	if (max_size() - size() < __n)
 80199cc:	d102      	bne.n	80199d4 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x38>
	  __throw_length_error(__N(__s));
 80199ce:	4815      	ldr	r0, [pc, #84]	@ (8019a24 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x88>)
 80199d0:	f003 f984 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 80199d4:	4543      	cmp	r3, r8
 80199d6:	bf14      	ite	ne
 80199d8:	4611      	movne	r1, r2
 80199da:	2101      	moveq	r1, #1
 80199dc:	1852      	adds	r2, r2, r1
 80199de:	d202      	bcs.n	80199e6 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x4a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80199e0:	4297      	cmp	r7, r2
 80199e2:	bf28      	it	cs
 80199e4:	4617      	movcs	r7, r2
      pointer __new_start(this->_M_allocate(__len));
 80199e6:	4638      	mov	r0, r7
 80199e8:	f7ff f87a 	bl	8018ae0 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>
 80199ec:	f8d9 3000 	ldr.w	r3, [r9]
      if (__count > 0)
 80199f0:	2d00      	cmp	r5, #0
 80199f2:	4606      	mov	r6, r0
 80199f4:	5143      	str	r3, [r0, r5]
 80199f6:	dd03      	ble.n	8019a00 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x64>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80199f8:	462a      	mov	r2, r5
 80199fa:	4641      	mov	r1, r8
 80199fc:	f004 f836 	bl	801da6c <memmove>
	      ++__new_finish;
 8019a00:	3504      	adds	r5, #4
 8019a02:	4435      	add	r5, r6
	if (__p)
 8019a04:	f1b8 0f00 	cmp.w	r8, #0
 8019a08:	d005      	beq.n	8019a16 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x7a>
		    this->_M_impl._M_end_of_storage - __old_start);
 8019a0a:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8019a0c:	4640      	mov	r0, r8
 8019a0e:	eba1 0108 	sub.w	r1, r1, r8
 8019a12:	f003 f889 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 8019a16:	e9c4 6500 	strd	r6, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8019a1a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8019a1e:	60a6      	str	r6, [r4, #8]
      }
 8019a20:	e7c8      	b.n	80199b4 <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_+0x18>
 8019a22:	bf00      	nop
 8019a24:	0801dd74 	.word	0x0801dd74

08019a28 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>:
void Sensors::ProcessAccess(I2CInterface* interface, SensorGroup* sensor_group, Sensor* sensor, SensorData* sensor_data, I2CAccess* I2C_access) {
 8019a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a2c:	b087      	sub	sp, #28
 8019a2e:	4606      	mov	r6, r0
 8019a30:	460c      	mov	r4, r1
 8019a32:	4690      	mov	r8, r2
 8019a34:	af02      	add	r7, sp, #8
 8019a36:	e9d7 950c 	ldrd	r9, r5, [r7, #48]	@ 0x30
 8019a3a:	607b      	str	r3, [r7, #4]
	if (I2C_access->access_mode == DELAY_MODE) {
 8019a3c:	782b      	ldrb	r3, [r5, #0]
 8019a3e:	2b04      	cmp	r3, #4
 8019a40:	d12c      	bne.n	8019a9c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x74>
		sensor->timestamp = HAL_GetTick() + I2C_access->delay;
 8019a42:	f7e9 fd43 	bl	80034cc <HAL_GetTick>
 8019a46:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8019a48:	687a      	ldr	r2, [r7, #4]
 8019a4a:	4403      	add	r3, r0
 8019a4c:	60d3      	str	r3, [r2, #12]
		if (interface->access_source == REGULAR_ACCESS) {
 8019a4e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019a52:	b9f3      	cbnz	r3, 8019a92 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x6a>
			interface->pending_sensors.push_back(sensor);
 8019a54:	1d39      	adds	r1, r7, #4
 8019a56:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8019a5a:	f7ff ff9f 	bl	801999c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>
			if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(interface->ID);}
 8019a5e:	2301      	movs	r3, #1
 8019a60:	4642      	mov	r2, r8
 8019a62:	4621      	mov	r1, r4
 8019a64:	4630      	mov	r0, r6
 8019a66:	f7ff fd87 	bl	8019578 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 8019a6a:	b138      	cbz	r0, 8019a7c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x54>
			if (MoveToNextGroup(interface)) {return ReadNextSensor(interface->ID);}
 8019a6c:	7821      	ldrb	r1, [r4, #0]
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f000 f8c6 	bl	8019c00 <_ZN7Sensors14ReadNextSensorEh>
}
 8019a74:	3714      	adds	r7, #20
 8019a76:	46bd      	mov	sp, r7
 8019a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (MoveToNextGroup(interface)) {return ReadNextSensor(interface->ID);}
 8019a7c:	2201      	movs	r2, #1
 8019a7e:	4621      	mov	r1, r4
 8019a80:	4630      	mov	r0, r6
 8019a82:	f7ff fd5f 	bl	8019544 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 8019a86:	2800      	cmp	r0, #0
 8019a88:	d1f0      	bne.n	8019a6c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x44>
			return ExitRegular(interface);
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	f000 faa0 	bl	8019fd0 <_ZN7Sensors11ExitRegularEP12I2CInterface>
 8019a90:	e7f0      	b.n	8019a74 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
			return ExitPending(interface);
 8019a92:	4621      	mov	r1, r4
 8019a94:	4630      	mov	r0, r6
 8019a96:	f000 fba5 	bl	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
 8019a9a:	e7eb      	b.n	8019a74 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
	} else if (I2C_access->access_mode == WRITE_MODE) {
 8019a9c:	2b03      	cmp	r3, #3
 8019a9e:	d838      	bhi.n	8019b12 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0xea>
 8019aa0:	e8df f003 	tbb	[pc, r3]
 8019aa4:	21022a15 	.word	0x21022a15
		status = HAL_I2C_Master_Transmit_DMA(interface->interface, sensor->address, I2C_access->write_data, I2C_access->size);
 8019aa8:	6879      	ldr	r1, [r7, #4]
 8019aaa:	1daa      	adds	r2, r5, #6
 8019aac:	886b      	ldrh	r3, [r5, #2]
 8019aae:	88c9      	ldrh	r1, [r1, #6]
 8019ab0:	68e0      	ldr	r0, [r4, #12]
 8019ab2:	f7ed fa79 	bl	8006fa8 <HAL_I2C_Master_Transmit_DMA>
	if (status == HAL_BUSY)
 8019ab6:	2802      	cmp	r0, #2
 8019ab8:	f040 809c 	bne.w	8019bf4 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x1cc>
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 8019abc:	4642      	mov	r2, r8
 8019abe:	4621      	mov	r1, r4
 8019ac0:	4630      	mov	r0, r6
 8019ac2:	e9cd 9500 	strd	r9, r5, [sp]
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	f7ff ffae 	bl	8019a28 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>
 8019acc:	e7d2      	b.n	8019a74 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
		status = HAL_I2C_Mem_Write_DMA(interface->interface, sensor->address, I2C_access->memory_address, sensor->memory_address_size, I2C_access->write_data, I2C_access->size);
 8019ace:	6879      	ldr	r1, [r7, #4]
 8019ad0:	8868      	ldrh	r0, [r5, #2]
 8019ad2:	890b      	ldrh	r3, [r1, #8]
 8019ad4:	88aa      	ldrh	r2, [r5, #4]
 8019ad6:	88c9      	ldrh	r1, [r1, #6]
 8019ad8:	9001      	str	r0, [sp, #4]
 8019ada:	1da8      	adds	r0, r5, #6
 8019adc:	9000      	str	r0, [sp, #0]
 8019ade:	68e0      	ldr	r0, [r4, #12]
 8019ae0:	f7ed fc8a 	bl	80073f8 <HAL_I2C_Mem_Write_DMA>
 8019ae4:	e7e7      	b.n	8019ab6 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		status = HAL_I2C_Master_Receive_DMA(interface->interface, sensor->address, interface->buffer, I2C_access->size);
 8019ae6:	f101 0210 	add.w	r2, r1, #16
 8019aea:	6879      	ldr	r1, [r7, #4]
 8019aec:	886b      	ldrh	r3, [r5, #2]
 8019aee:	88c9      	ldrh	r1, [r1, #6]
 8019af0:	68e0      	ldr	r0, [r4, #12]
 8019af2:	f7ed fb03 	bl	80070fc <HAL_I2C_Master_Receive_DMA>
 8019af6:	e7de      	b.n	8019ab6 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		status = HAL_I2C_Mem_Read_DMA(interface->interface, sensor->address, I2C_access->memory_address, sensor->memory_address_size, interface->buffer, I2C_access->size);
 8019af8:	6879      	ldr	r1, [r7, #4]
 8019afa:	8868      	ldrh	r0, [r5, #2]
 8019afc:	890b      	ldrh	r3, [r1, #8]
 8019afe:	88aa      	ldrh	r2, [r5, #4]
 8019b00:	88c9      	ldrh	r1, [r1, #6]
 8019b02:	9001      	str	r0, [sp, #4]
 8019b04:	f104 0010 	add.w	r0, r4, #16
 8019b08:	9000      	str	r0, [sp, #0]
 8019b0a:	68e0      	ldr	r0, [r4, #12]
 8019b0c:	f7ed fd28 	bl	8007560 <HAL_I2C_Mem_Read_DMA>
 8019b10:	e7d1      	b.n	8019ab6 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x8e>
		switch (sensor_data->type) {
 8019b12:	f899 3007 	ldrb.w	r3, [r9, #7]
 8019b16:	2b01      	cmp	r3, #1
 8019b18:	d005      	beq.n	8019b26 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0xfe>
 8019b1a:	2b08      	cmp	r3, #8
 8019b1c:	d03a      	beq.n	8019b94 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x16c>
	osSemaphoreRelease(SensorsSemaphore);
 8019b1e:	6830      	ldr	r0, [r6, #0]
 8019b20:	f7f3 f9b8 	bl	800ce94 <osSemaphoreRelease>
 8019b24:	e7a6      	b.n	8019a74 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x4c>
 * @param input I2C_access: access to process
 */
template<typename T>
void Sensors::ProcessCode(I2CInterface* interface, SensorData* sensor_data, I2CAccess* I2C_access) {
	// Check that the type is supported by custom functions
	if (functions[sensor_data->type] == NULL)
 8019b26:	6d03      	ldr	r3, [r0, #80]	@ 0x50

	// Transfer to interface buffer. Mirror required
	for (uint8_t index = 0; index < I2C_access->size; index++) {
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
	}
}
 8019b28:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 8019b2a:	b33b      	cbz	r3, 8019b7c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 8019b2c:	f895 104c 	ldrb.w	r1, [r5, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019b30:	e9d3 0300 	ldrd	r0, r3, [r3]
 8019b34:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8019b36:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019b3a:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 8019b3e:	d302      	bcc.n	8019b46 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x11e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8019b40:	482e      	ldr	r0, [pc, #184]	@ (8019bfc <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x1d4>)
 8019b42:	f003 f8ce 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 8019b46:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 8019b4a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8019b4e:	685b      	ldr	r3, [r3, #4]
 8019b50:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 8019b52:	886a      	ldrh	r2, [r5, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 8019b54:	f107 010c 	add.w	r1, r7, #12
	T code_output = sensor_function.function(sensor_function.context);
 8019b58:	81b8      	strh	r0, [r7, #12]
	uint8_t array_output[I2C_access->size];
 8019b5a:	1dd3      	adds	r3, r2, #7
 8019b5c:	08db      	lsrs	r3, r3, #3
 8019b5e:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 8019b62:	469d      	mov	sp, r3
 8019b64:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 8019b68:	4648      	mov	r0, r9
 8019b6a:	f004 f877 	bl	801dc5c <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 8019b6e:	2100      	movs	r1, #0
 8019b70:	b2ca      	uxtb	r2, r1
 8019b72:	886b      	ldrh	r3, [r5, #2]
 8019b74:	3101      	adds	r1, #1
 8019b76:	4293      	cmp	r3, r2
 8019b78:	dc05      	bgt.n	8019b86 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x15e>
 8019b7a:	46c5      	mov	sp, r8
		ProccessReceivedData(interface);
 8019b7c:	4621      	mov	r1, r4
 8019b7e:	4630      	mov	r0, r6
 8019b80:	f000 fb40 	bl	801a204 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>
	if (status == HAL_ERROR)
 8019b84:	e7cb      	b.n	8019b1e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0xf6>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 8019b86:	3b01      	subs	r3, #1
 8019b88:	18a0      	adds	r0, r4, r2
 8019b8a:	1a9b      	subs	r3, r3, r2
 8019b8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019b90:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 8019b92:	e7ed      	b.n	8019b70 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x148>
	if (functions[sensor_data->type] == NULL)
 8019b94:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
}
 8019b96:	46e8      	mov	r8, sp
	if (functions[sensor_data->type] == NULL)
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d0ef      	beq.n	8019b7c <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x154>
	SensorFunction<T> sensor_function = reinterpreted_functions->at(I2C_access->function_index);
 8019b9c:	f895 104c 	ldrb.w	r1, [r5, #76]	@ 0x4c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019ba0:	e9d3 0300 	ldrd	r0, r3, [r3]
 8019ba4:	1a1b      	subs	r3, r3, r0
	if (__n >= this->size())
 8019ba6:	ebb1 0fe3 	cmp.w	r1, r3, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019baa:	ea4f 02e3 	mov.w	r2, r3, asr #3
	if (__n >= this->size())
 8019bae:	d2c7      	bcs.n	8019b40 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x118>
	return *(this->_M_impl._M_start + __n);
 8019bb0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	T code_output = sensor_function.function(sensor_function.context);
 8019bb4:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8019bb8:	685b      	ldr	r3, [r3, #4]
 8019bba:	4798      	blx	r3
	uint8_t array_output[I2C_access->size];
 8019bbc:	886a      	ldrh	r2, [r5, #2]
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 8019bbe:	f107 010c 	add.w	r1, r7, #12
	T code_output = sensor_function.function(sensor_function.context);
 8019bc2:	ed87 0a03 	vstr	s0, [r7, #12]
	uint8_t array_output[I2C_access->size];
 8019bc6:	1dd3      	adds	r3, r2, #7
 8019bc8:	08db      	lsrs	r3, r3, #3
 8019bca:	eba8 03c3 	sub.w	r3, r8, r3, lsl #3
 8019bce:	469d      	mov	sp, r3
 8019bd0:	f10d 0908 	add.w	r9, sp, #8
	std::memcpy(&array_output[0], &code_output, I2C_access->size);
 8019bd4:	4648      	mov	r0, r9
 8019bd6:	f004 f841 	bl	801dc5c <memcpy>
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 8019bda:	2100      	movs	r1, #0
 8019bdc:	b2ca      	uxtb	r2, r1
 8019bde:	886b      	ldrh	r3, [r5, #2]
 8019be0:	3101      	adds	r1, #1
 8019be2:	4293      	cmp	r3, r2
 8019be4:	ddc9      	ble.n	8019b7a <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x152>
		interface->buffer[index] = array_output[I2C_access->size - 1 - index];
 8019be6:	3b01      	subs	r3, #1
 8019be8:	18a0      	adds	r0, r4, r2
 8019bea:	1a9b      	subs	r3, r3, r2
 8019bec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8019bf0:	7403      	strb	r3, [r0, #16]
	for (uint8_t index = 0; index < I2C_access->size; index++) {
 8019bf2:	e7f3      	b.n	8019bdc <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0x1b4>
 8019bf4:	2801      	cmp	r0, #1
		interface->error_flag = true;
 8019bf6:	bf08      	it	eq
 8019bf8:	70a0      	strbeq	r0, [r4, #2]
 8019bfa:	e790      	b.n	8019b1e <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess+0xf6>
 8019bfc:	0801dfb4 	.word	0x0801dfb4

08019c00 <_ZN7Sensors14ReadNextSensorEh>:
void Sensors::ReadNextSensor(uint8_t ID) {
 8019c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c04:	4605      	mov	r5, r0
 8019c06:	b08b      	sub	sp, #44	@ 0x2c
 8019c08:	9105      	str	r1, [sp, #20]
	uint8_t index = FindInterfaceIndex(ID, &success);
 8019c0a:	f10d 021f 	add.w	r2, sp, #31
 8019c0e:	9905      	ldr	r1, [sp, #20]
 8019c10:	4628      	mov	r0, r5
 8019c12:	f7ff fa6a 	bl	80190ea <_ZN7Sensors18FindInterfaceIndexEhPb>
	if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019c16:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8019c1a:	b92b      	cbnz	r3, 8019c28 <_ZN7Sensors14ReadNextSensorEh+0x28>
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019c1c:	6828      	ldr	r0, [r5, #0]
}
 8019c1e:	b00b      	add	sp, #44	@ 0x2c
 8019c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019c24:	f7f3 b936 	b.w	800ce94 <osSemaphoreRelease>
 8019c28:	b200      	sxth	r0, r0
 8019c2a:	692c      	ldr	r4, [r5, #16]
 8019c2c:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8019c30:	eb04 0480 	add.w	r4, r4, r0, lsl #2
	if (interface->pending_requests.size() > 0) {
 8019c34:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 8019c38:	429a      	cmp	r2, r3
 8019c3a:	f000 809e 	beq.w	8019d7a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 8019c3e:	f04f 0900 	mov.w	r9, #0
				interface->pending_requests[request_index].processing = true;
 8019c42:	f04f 0b01 	mov.w	fp, #1
 8019c46:	e028      	b.n	8019c9a <_ZN7Sensors14ReadNextSensorEh+0x9a>
			Sensor* request_sensor = FindSensorPath(request_data->parent, NULL, &request_group, &success);
 8019c48:	f10d 031f 	add.w	r3, sp, #31
 8019c4c:	ea4f 1a46 	mov.w	sl, r6, lsl #5
 8019c50:	eb08 1646 	add.w	r6, r8, r6, lsl #5
 8019c54:	2200      	movs	r2, #0
 8019c56:	4628      	mov	r0, r5
 8019c58:	7a71      	ldrb	r1, [r6, #9]
 8019c5a:	9300      	str	r3, [sp, #0]
 8019c5c:	ab08      	add	r3, sp, #32
 8019c5e:	f7ff fb0a 	bl	8019276 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019c62:	f89d 301f 	ldrb.w	r3, [sp, #31]
			Sensor* request_sensor = FindSensorPath(request_data->parent, NULL, &request_group, &success);
 8019c66:	4607      	mov	r7, r0
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d0d7      	beq.n	8019c1c <_ZN7Sensors14ReadNextSensorEh+0x1c>
			if (!interface->pending_requests[request_index].processing) {
 8019c6c:	f818 300a 	ldrb.w	r3, [r8, sl]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d139      	bne.n	8019ce8 <_ZN7Sensors14ReadNextSensorEh+0xe8>
				if (IsSensorPending(interface, request_sensor->ID) || (interface->current_sensor_ID == request_sensor->ID) || IsSensorRequested(interface, request_sensor->ID)) continue; // checks that sensor is not pending nor currently read in nominal loop nor current read by a request
 8019c74:	7903      	ldrb	r3, [r0, #4]
 8019c76:	4621      	mov	r1, r4
 8019c78:	4628      	mov	r0, r5
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	9303      	str	r3, [sp, #12]
 8019c7e:	f7ff fc2d 	bl	80194dc <_ZN7Sensors15IsSensorPendingEP12I2CInterfaceh>
 8019c82:	b940      	cbnz	r0, 8019c96 <_ZN7Sensors14ReadNextSensorEh+0x96>
 8019c84:	f894 1051 	ldrb.w	r1, [r4, #81]	@ 0x51
 8019c88:	4291      	cmp	r1, r2
 8019c8a:	d004      	beq.n	8019c96 <_ZN7Sensors14ReadNextSensorEh+0x96>
 8019c8c:	4621      	mov	r1, r4
 8019c8e:	4628      	mov	r0, r5
 8019c90:	f7ff fc37 	bl	8019502 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 8019c94:	b1e0      	cbz	r0, 8019cd0 <_ZN7Sensors14ReadNextSensorEh+0xd0>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 8019c96:	f109 0901 	add.w	r9, r9, #1
 8019c9a:	fa5f f689 	uxtb.w	r6, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019c9e:	e9d4 831c 	ldrd	r8, r3, [r4, #112]	@ 0x70
 8019ca2:	eba3 0308 	sub.w	r3, r3, r8
 8019ca6:	ebb6 1f63 	cmp.w	r6, r3, asr #5
 8019caa:	d3cd      	bcc.n	8019c48 <_ZN7Sensors14ReadNextSensorEh+0x48>
		if (!interface->request_regular_process && RegularInterfaceTermination(interface) && interface->pending_sensors.size() == 0)
 8019cac:	7861      	ldrb	r1, [r4, #1]
 8019cae:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	@ 0x64
 8019cb2:	2900      	cmp	r1, #0
 8019cb4:	d161      	bne.n	8019d7a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 8019cb6:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 8019cba:	29ff      	cmp	r1, #255	@ 0xff
 8019cbc:	d15d      	bne.n	8019d7a <_ZN7Sensors14ReadNextSensorEh+0x17a>
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d15f      	bne.n	8019d82 <_ZN7Sensors14ReadNextSensorEh+0x182>
			return ExitRegular(interface);
 8019cc2:	4621      	mov	r1, r4
				return ExitRegular(interface);
 8019cc4:	4628      	mov	r0, r5
}
 8019cc6:	b00b      	add	sp, #44	@ 0x2c
 8019cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				return ExitRegular(interface);
 8019ccc:	f000 b980 	b.w	8019fd0 <_ZN7Sensors11ExitRegularEP12I2CInterface>
				if (request_data->sequence[0].access_mode == DELAY_MODE)
 8019cd0:	6973      	ldr	r3, [r6, #20]
				interface->pending_requests[request_index].processing = true;
 8019cd2:	f808 b00a 	strb.w	fp, [r8, sl]
				if (request_data->sequence[0].access_mode == DELAY_MODE)
 8019cd6:	781b      	ldrb	r3, [r3, #0]
 8019cd8:	2b04      	cmp	r3, #4
 8019cda:	d105      	bne.n	8019ce8 <_ZN7Sensors14ReadNextSensorEh+0xe8>
					request_sensor->timestamp = HAL_GetTick() + request_data->sequence[0].delay;
 8019cdc:	f7e9 fbf6 	bl	80034cc <HAL_GetTick>
 8019ce0:	6973      	ldr	r3, [r6, #20]
 8019ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019ce4:	4403      	add	r3, r0
 8019ce6:	60fb      	str	r3, [r7, #12]
	return *(this->_M_impl._M_start + __n);
 8019ce8:	f896 8010 	ldrb.w	r8, [r6, #16]
 8019cec:	6973      	ldr	r3, [r6, #20]
 8019cee:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8019cf2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8019cf6:	eb03 1808 	add.w	r8, r3, r8, lsl #4
			if ((request_access->access_mode == DELAY_MODE && HAL_GetTick() > request_sensor->timestamp) || request_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = REQUEST_ACCESS)*/) {
 8019cfa:	5c99      	ldrb	r1, [r3, r2]
 8019cfc:	2904      	cmp	r1, #4
 8019cfe:	d10b      	bne.n	8019d18 <_ZN7Sensors14ReadNextSensorEh+0x118>
 8019d00:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8019d04:	f7e9 fbe2 	bl	80034cc <HAL_GetTick>
 8019d08:	68f9      	ldr	r1, [r7, #12]
 8019d0a:	4288      	cmp	r0, r1
 8019d0c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8019d10:	d802      	bhi.n	8019d18 <_ZN7Sensors14ReadNextSensorEh+0x118>
 8019d12:	5c99      	ldrb	r1, [r3, r2]
 8019d14:	2904      	cmp	r1, #4
 8019d16:	d0be      	beq.n	8019c96 <_ZN7Sensors14ReadNextSensorEh+0x96>
				if (request_access->access_mode == DELAY_MODE) {
 8019d18:	5c9b      	ldrb	r3, [r3, r2]
			SensorData* request_data = &(interface->pending_requests[request_index].data);
 8019d1a:	f106 0b08 	add.w	fp, r6, #8
				if (request_access->access_mode == DELAY_MODE) {
 8019d1e:	2b04      	cmp	r3, #4
 8019d20:	d11b      	bne.n	8019d5a <_ZN7Sensors14ReadNextSensorEh+0x15a>
					if (!MoveToNextSequence(request_data)) {
 8019d22:	2201      	movs	r2, #1
 8019d24:	4659      	mov	r1, fp
 8019d26:	4628      	mov	r0, r5
 8019d28:	f7ff fc72 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 8019d2c:	b978      	cbnz	r0, 8019d4e <_ZN7Sensors14ReadNextSensorEh+0x14e>
 8019d2e:	4620      	mov	r0, r4
						*(interface->pending_requests[request_index].flag) = true;
 8019d30:	2201      	movs	r2, #1
 8019d32:	f850 1f70 	ldr.w	r1, [r0, #112]!
 8019d36:	4451      	add	r1, sl
 8019d38:	684b      	ldr	r3, [r1, #4]
 8019d3a:	701a      	strb	r2, [r3, #0]
						interface->pending_requests.erase(interface->pending_requests.begin() + request_index);
 8019d3c:	f7ff fdd5 	bl	80198ea <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
							return ExitPending(interface);
 8019d40:	4621      	mov	r1, r4
 8019d42:	4628      	mov	r0, r5
}
 8019d44:	b00b      	add	sp, #44	@ 0x2c
 8019d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
							return ExitPending(interface);
 8019d4a:	f000 ba4b 	b.w	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
 8019d4e:	7c33      	ldrb	r3, [r6, #16]
 8019d50:	6972      	ldr	r2, [r6, #20]
 8019d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019d56:	eb02 1803 	add.w	r8, r2, r3, lsl #4
				interface->access_source = REQUEST_ACCESS;																// Setup the flag to precise the source of the sensor access
 8019d5a:	2302      	movs	r3, #2
				return ProcessAccess(interface, request_group, request_sensor, request_data, request_access);
 8019d5c:	9a08      	ldr	r2, [sp, #32]
				interface->request_index = request_index;																// Save which request is being processed
 8019d5e:	f884 9057 	strb.w	r9, [r4, #87]	@ 0x57
				interface->access_source = REQUEST_ACCESS;																// Setup the flag to precise the source of the sensor access
 8019d62:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
				return ProcessAccess(interface, request_group, request_sensor, request_data, request_access);
 8019d66:	463b      	mov	r3, r7
 8019d68:	e9cd b800 	strd	fp, r8, [sp]
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f7ff fe5a 	bl	8019a28 <_ZN7Sensors13ProcessAccessEP12I2CInterfaceP11SensorGroupP6SensorP10SensorDataP9I2CAccess>
}
 8019d74:	b00b      	add	sp, #44	@ 0x2c
 8019d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (interface->pending_sensors.size() > 0) {
 8019d7a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	@ 0x64
 8019d7e:	429a      	cmp	r2, r3
 8019d80:	d04b      	beq.n	8019e1a <_ZN7Sensors14ReadNextSensorEh+0x21a>
 8019d82:	f04f 0900 	mov.w	r9, #0
 8019d86:	e039      	b.n	8019dfc <_ZN7Sensors14ReadNextSensorEh+0x1fc>
 8019d88:	009a      	lsls	r2, r3, #2
			Sensor* pending_sensor = interface->pending_sensors[pending_index];
 8019d8a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 8019d8e:	4628      	mov	r0, r5
 8019d90:	9204      	str	r2, [sp, #16]
 8019d92:	f10d 021f 	add.w	r2, sp, #31
 8019d96:	7871      	ldrb	r1, [r6, #1]
 8019d98:	f7ff f9f9 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
 8019d9c:	7c33      	ldrb	r3, [r6, #16]
 8019d9e:	6977      	ldr	r7, [r6, #20]
 8019da0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019da4:	f89d 201f 	ldrb.w	r2, [sp, #31]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 8019da8:	9003      	str	r0, [sp, #12]
 8019daa:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8019dae:	f897 8008 	ldrb.w	r8, [r7, #8]
 8019db2:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8019db6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8019dba:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8019dbe:	eb0b 1808 	add.w	r8, fp, r8, lsl #4
			if (!success) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019dc2:	2a00      	cmp	r2, #0
 8019dc4:	f43f af2a 	beq.w	8019c1c <_ZN7Sensors14ReadNextSensorEh+0x1c>
			if (!pending_sensor->processing) {
 8019dc8:	78f2      	ldrb	r2, [r6, #3]
 8019dca:	b942      	cbnz	r2, 8019dde <_ZN7Sensors14ReadNextSensorEh+0x1de>
				if (IsSensorRequested(interface, pending_sensor->ID)) continue;
 8019dcc:	7932      	ldrb	r2, [r6, #4]
 8019dce:	4621      	mov	r1, r4
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f7ff fb96 	bl	8019502 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 8019dd6:	b978      	cbnz	r0, 8019df8 <_ZN7Sensors14ReadNextSensorEh+0x1f8>
				pending_sensor->processing = true;
 8019dd8:	f04f 0301 	mov.w	r3, #1
 8019ddc:	70f3      	strb	r3, [r6, #3]
			if ((pending_access->access_mode == DELAY_MODE && HAL_GetTick() > pending_sensor->timestamp) || pending_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = PENDING_ACCESS)*/) {
 8019dde:	f81b 200a 	ldrb.w	r2, [fp, sl]
 8019de2:	2a04      	cmp	r2, #4
 8019de4:	d15b      	bne.n	8019e9e <_ZN7Sensors14ReadNextSensorEh+0x29e>
 8019de6:	f7e9 fb71 	bl	80034cc <HAL_GetTick>
 8019dea:	68f2      	ldr	r2, [r6, #12]
				if (pending_access->access_mode == DELAY_MODE) {
 8019dec:	f81b 300a 	ldrb.w	r3, [fp, sl]
			if ((pending_access->access_mode == DELAY_MODE && HAL_GetTick() > pending_sensor->timestamp) || pending_access->access_mode != DELAY_MODE /*|| (delay_flag && interface->access_source = PENDING_ACCESS)*/) {
 8019df0:	4290      	cmp	r0, r2
 8019df2:	d852      	bhi.n	8019e9a <_ZN7Sensors14ReadNextSensorEh+0x29a>
 8019df4:	2b04      	cmp	r3, #4
 8019df6:	d152      	bne.n	8019e9e <_ZN7Sensors14ReadNextSensorEh+0x29e>
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 8019df8:	f109 0901 	add.w	r9, r9, #1
 8019dfc:	fa5f f389 	uxtb.w	r3, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8019e00:	e9d4 1219 	ldrd	r1, r2, [r4, #100]	@ 0x64
 8019e04:	1a52      	subs	r2, r2, r1
 8019e06:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8019e0a:	d3bd      	bcc.n	8019d88 <_ZN7Sensors14ReadNextSensorEh+0x188>
		if (!interface->request_regular_process && RegularInterfaceTermination(interface))
 8019e0c:	7863      	ldrb	r3, [r4, #1]
 8019e0e:	b923      	cbnz	r3, 8019e1a <_ZN7Sensors14ReadNextSensorEh+0x21a>
 8019e10:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8019e14:	2bff      	cmp	r3, #255	@ 0xff
 8019e16:	f43f af54 	beq.w	8019cc2 <_ZN7Sensors14ReadNextSensorEh+0xc2>
	if (active) {
 8019e1a:	792b      	ldrb	r3, [r5, #4]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d0a9      	beq.n	8019d74 <_ZN7Sensors14ReadNextSensorEh+0x174>
		interface->request_regular_process = false;	// reset the flag to start a new regular reading loop
 8019e20:	2300      	movs	r3, #0
 8019e22:	7063      	strb	r3, [r4, #1]
		interface->pending_index = 0;
 8019e24:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
		if (interface->sensor_groups.size() == 0) {osSemaphoreRelease(SensorsSemaphore); return;}
 8019e28:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	@ 0x58
 8019e2c:	4293      	cmp	r3, r2
 8019e2e:	f43f aef5 	beq.w	8019c1c <_ZN7Sensors14ReadNextSensorEh+0x1c>
	return *(this->_M_impl._M_start + __n);
 8019e32:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
		if (interface->current_group_ID == UINT8_MAX || sensor_group->ID != interface->current_group_ID) {
 8019e36:	f894 1050 	ldrb.w	r1, [r4, #80]	@ 0x50
 8019e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e3e:	29ff      	cmp	r1, #255	@ 0xff
 8019e40:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8019e44:	d002      	beq.n	8019e4c <_ZN7Sensors14ReadNextSensorEh+0x24c>
 8019e46:	78b0      	ldrb	r0, [r6, #2]
 8019e48:	4288      	cmp	r0, r1
 8019e4a:	d05b      	beq.n	8019f04 <_ZN7Sensors14ReadNextSensorEh+0x304>
			if (!sensor_group->active || sensor_group->counter < sensor_group->prescaler - 1 || sensor_group->sensors.size() == 0 || (RegularGroupTermination(interface, sensor_group) && !PendingGroupTermination(interface, sensor_group))) {
 8019e4c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8019e50:	88f7      	ldrh	r7, [r6, #6]
 8019e52:	f8b6 8004 	ldrh.w	r8, [r6, #4]
 8019e56:	b1ab      	cbz	r3, 8019e84 <_ZN7Sensors14ReadNextSensorEh+0x284>
 8019e58:	f108 33ff 	add.w	r3, r8, #4294967295
 8019e5c:	429f      	cmp	r7, r3
 8019e5e:	db11      	blt.n	8019e84 <_ZN7Sensors14ReadNextSensorEh+0x284>
 8019e60:	e9d6 3203 	ldrd	r3, r2, [r6, #12]
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d00d      	beq.n	8019e84 <_ZN7Sensors14ReadNextSensorEh+0x284>
 8019e68:	4632      	mov	r2, r6
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	f7ff f8e5 	bl	801903c <_ZN7Sensors23RegularGroupTerminationEP12I2CInterfaceP11SensorGroup>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	d043      	beq.n	8019efe <_ZN7Sensors14ReadNextSensorEh+0x2fe>
 8019e76:	4632      	mov	r2, r6
 8019e78:	4621      	mov	r1, r4
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f7ff f8ff 	bl	801907e <_ZN7Sensors23PendingGroupTerminationEP12I2CInterfaceP11SensorGroup>
 8019e80:	2800      	cmp	r0, #0
 8019e82:	d13c      	bne.n	8019efe <_ZN7Sensors14ReadNextSensorEh+0x2fe>
				if (sensor_group->counter < sensor_group->prescaler) sensor_group->counter += 1;
 8019e84:	4547      	cmp	r7, r8
 8019e86:	d36b      	bcc.n	8019f60 <_ZN7Sensors14ReadNextSensorEh+0x360>
				if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 8019e88:	2201      	movs	r2, #1
 8019e8a:	4621      	mov	r1, r4
 8019e8c:	4628      	mov	r0, r5
 8019e8e:	f7ff fb59 	bl	8019544 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 8019e92:	2800      	cmp	r0, #0
 8019e94:	f47f aeb9 	bne.w	8019c0a <_ZN7Sensors14ReadNextSensorEh+0xa>
 8019e98:	e714      	b.n	8019cc4 <_ZN7Sensors14ReadNextSensorEh+0xc4>
				if (pending_access->access_mode == DELAY_MODE) {
 8019e9a:	2b04      	cmp	r3, #4
 8019e9c:	d009      	beq.n	8019eb2 <_ZN7Sensors14ReadNextSensorEh+0x2b2>
				interface->access_source = PENDING_ACCESS;																// Setup the flag to precise the source of the sensor access
 8019e9e:	2301      	movs	r3, #1
				interface->pending_index = pending_index;																// Save which pending sensor is being processed
 8019ea0:	f884 9056 	strb.w	r9, [r4, #86]	@ 0x56
				return ProcessAccess(interface, pending_group, pending_sensor, pending_data, pending_access);
 8019ea4:	9a03      	ldr	r2, [sp, #12]
				interface->access_source = PENDING_ACCESS;																// Setup the flag to precise the source of the sensor access
 8019ea6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
				return ProcessAccess(interface, pending_group, pending_sensor, pending_data, pending_access);
 8019eaa:	4633      	mov	r3, r6
 8019eac:	e9cd 7800 	strd	r7, r8, [sp]
 8019eb0:	e75c      	b.n	8019d6c <_ZN7Sensors14ReadNextSensorEh+0x16c>
					if (!MoveToNextSequence(pending_data)) {
 8019eb2:	2201      	movs	r2, #1
 8019eb4:	4639      	mov	r1, r7
 8019eb6:	4628      	mov	r0, r5
 8019eb8:	f7ff fbaa 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 8019ebc:	b990      	cbnz	r0, 8019ee4 <_ZN7Sensors14ReadNextSensorEh+0x2e4>
						if (!MoveToNextData(pending_sensor)) {
 8019ebe:	2201      	movs	r2, #1
 8019ec0:	4631      	mov	r1, r6
 8019ec2:	4628      	mov	r0, r5
 8019ec4:	f7ff fb70 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 8019ec8:	b960      	cbnz	r0, 8019ee4 <_ZN7Sensors14ReadNextSensorEh+0x2e4>
      { return __normal_iterator(_M_current + __n); }
 8019eca:	4620      	mov	r0, r4
							interface->pending_sensors.erase(interface->pending_sensors.begin() + pending_index);
 8019ecc:	9b04      	ldr	r3, [sp, #16]
 8019ece:	f850 1f64 	ldr.w	r1, [r0, #100]!
 8019ed2:	4419      	add	r1, r3
 8019ed4:	f7fe ff1f 	bl	8018d16 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
							ProccessGroupTermination(interface, pending_group);
 8019ed8:	9a03      	ldr	r2, [sp, #12]
 8019eda:	4621      	mov	r1, r4
 8019edc:	4628      	mov	r0, r5
 8019ede:	f7ff f8e3 	bl	80190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 8019ee2:	e72d      	b.n	8019d40 <_ZN7Sensors14ReadNextSensorEh+0x140>
 8019ee4:	7c33      	ldrb	r3, [r6, #16]
 8019ee6:	6977      	ldr	r7, [r6, #20]
 8019ee8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019eec:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8019ef0:	7a3b      	ldrb	r3, [r7, #8]
 8019ef2:	68fa      	ldr	r2, [r7, #12]
 8019ef4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019ef8:	eb02 1803 	add.w	r8, r2, r3, lsl #4
 8019efc:	e7cf      	b.n	8019e9e <_ZN7Sensors14ReadNextSensorEh+0x29e>
			interface->current_group_ID = sensor_group->ID;
 8019efe:	78b3      	ldrb	r3, [r6, #2]
 8019f00:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 8019f04:	7a33      	ldrb	r3, [r6, #8]
 8019f06:	68f2      	ldr	r2, [r6, #12]
 8019f08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (interface->current_sensor_ID == UINT8_MAX || sensor->ID != interface->current_sensor_ID) { // avoid checking for sensor validity if already selected
 8019f0c:	f894 1051 	ldrb.w	r1, [r4, #81]	@ 0x51
 8019f10:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8019f14:	29ff      	cmp	r1, #255	@ 0xff
		Sensor* sensor = &(sensor_group->sensors[sensor_group->read_index]);
 8019f16:	9709      	str	r7, [sp, #36]	@ 0x24
		if (interface->current_sensor_ID == UINT8_MAX || sensor->ID != interface->current_sensor_ID) { // avoid checking for sensor validity if already selected
 8019f18:	d002      	beq.n	8019f20 <_ZN7Sensors14ReadNextSensorEh+0x320>
 8019f1a:	7938      	ldrb	r0, [r7, #4]
 8019f1c:	4288      	cmp	r0, r1
 8019f1e:	d024      	beq.n	8019f6a <_ZN7Sensors14ReadNextSensorEh+0x36a>
			if (!sensor->active || !sensor->present || sensor->data.size() == 0) {
 8019f20:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8019f24:	b193      	cbz	r3, 8019f4c <_ZN7Sensors14ReadNextSensorEh+0x34c>
 8019f26:	78bb      	ldrb	r3, [r7, #2]
 8019f28:	b183      	cbz	r3, 8019f4c <_ZN7Sensors14ReadNextSensorEh+0x34c>
 8019f2a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d00c      	beq.n	8019f4c <_ZN7Sensors14ReadNextSensorEh+0x34c>
			if (IsSensorRequested(interface, sensor->ID)) {
 8019f32:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019f36:	4621      	mov	r1, r4
 8019f38:	4628      	mov	r0, r5
 8019f3a:	4642      	mov	r2, r8
 8019f3c:	f7ff fae1 	bl	8019502 <_ZN7Sensors17IsSensorRequestedEP12I2CInterfaceh>
 8019f40:	b188      	cbz	r0, 8019f66 <_ZN7Sensors14ReadNextSensorEh+0x366>
				interface->pending_sensors.push_back(sensor);
 8019f42:	a909      	add	r1, sp, #36	@ 0x24
 8019f44:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8019f48:	f7ff fd28 	bl	801999c <_ZNSt6vectorIP6SensorSaIS1_EE9push_backERKS1_>
				if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(ID);}
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	4632      	mov	r2, r6
 8019f50:	4621      	mov	r1, r4
 8019f52:	4628      	mov	r0, r5
 8019f54:	f7ff fb10 	bl	8019578 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 8019f58:	2800      	cmp	r0, #0
 8019f5a:	f47f ae56 	bne.w	8019c0a <_ZN7Sensors14ReadNextSensorEh+0xa>
 8019f5e:	e793      	b.n	8019e88 <_ZN7Sensors14ReadNextSensorEh+0x288>
				if (sensor_group->counter < sensor_group->prescaler) sensor_group->counter += 1;
 8019f60:	3701      	adds	r7, #1
 8019f62:	80f7      	strh	r7, [r6, #6]
				if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 8019f64:	e790      	b.n	8019e88 <_ZN7Sensors14ReadNextSensorEh+0x288>
			interface->current_sensor_ID = sensor->ID;
 8019f66:	f884 8051 	strb.w	r8, [r4, #81]	@ 0x51
 8019f6a:	7c3a      	ldrb	r2, [r7, #16]
		if (interface->current_data_address == UINT16_MAX || sensor_data->register_address != interface->current_data_address) { // avoid checking for data validity if already selected
 8019f6c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019f70:	f8b4 0052 	ldrh.w	r0, [r4, #82]	@ 0x52
 8019f74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f78:	6979      	ldr	r1, [r7, #20]
 8019f7a:	4560      	cmp	r0, ip
 8019f7c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8019f80:	d003      	beq.n	8019f8a <_ZN7Sensors14ReadNextSensorEh+0x38a>
 8019f82:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8019f86:	4584      	cmp	ip, r0
 8019f88:	d009      	beq.n	8019f9e <_ZN7Sensors14ReadNextSensorEh+0x39e>
			if (!sensor_data->active || sensor_data->sequence.size() == 0) {
 8019f8a:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
 8019f8e:	b1b2      	cbz	r2, 8019fbe <_ZN7Sensors14ReadNextSensorEh+0x3be>
 8019f90:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 8019f94:	4291      	cmp	r1, r2
 8019f96:	d012      	beq.n	8019fbe <_ZN7Sensors14ReadNextSensorEh+0x3be>
			interface->current_data_address = sensor_data->register_address;
 8019f98:	889a      	ldrh	r2, [r3, #4]
 8019f9a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 8019f9e:	7a1a      	ldrb	r2, [r3, #8]
 8019fa0:	68d9      	ldr	r1, [r3, #12]
 8019fa2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019fa6:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		interface->access_source = REGULAR_ACCESS;																		// Setup the flag to precise the source of the sensor access
 8019faa:	2200      	movs	r2, #0
 8019fac:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
		sensor->processing = true;																						// Set sensor processing flag to avoid starting a reading request of the sensor
 8019fb0:	2201      	movs	r2, #1
 8019fb2:	70fa      	strb	r2, [r7, #3]
		return ProcessAccess(interface, sensor_group, sensor, sensor_data, I2C_access);
 8019fb4:	4632      	mov	r2, r6
 8019fb6:	e9cd 3100 	strd	r3, r1, [sp]
 8019fba:	463b      	mov	r3, r7
 8019fbc:	e6d6      	b.n	8019d6c <_ZN7Sensors14ReadNextSensorEh+0x16c>
				if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 8019fbe:	2201      	movs	r2, #1
 8019fc0:	4639      	mov	r1, r7
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	f7ff faf0 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 8019fc8:	2800      	cmp	r0, #0
 8019fca:	f47f ae1e 	bne.w	8019c0a <_ZN7Sensors14ReadNextSensorEh+0xa>
 8019fce:	e7bd      	b.n	8019f4c <_ZN7Sensors14ReadNextSensorEh+0x34c>

08019fd0 <_ZN7Sensors11ExitRegularEP12I2CInterface>:
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 8019fd0:	e9d1 3219 	ldrd	r3, r2, [r1, #100]	@ 0x64
void Sensors::ExitRegular(I2CInterface* interface) {
 8019fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 8019fd8:	429a      	cmp	r2, r3
void Sensors::ExitRegular(I2CInterface* interface) {
 8019fda:	b091      	sub	sp, #68	@ 0x44
 8019fdc:	4605      	mov	r5, r0
 8019fde:	460c      	mov	r4, r1
	if (interface->pending_sensors.size() > 0 || interface->pending_requests.size() > 0) {
 8019fe0:	d103      	bne.n	8019fea <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1a>
 8019fe2:	e9d1 231c 	ldrd	r2, r3, [r1, #112]	@ 0x70
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d024      	beq.n	801a034 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x64>
		uint32_t current_timestamp = HAL_GetTick();
 8019fea:	f7e9 fa6f 	bl	80034cc <HAL_GetTick>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 8019fee:	f04f 0900 	mov.w	r9, #0
		uint32_t current_timestamp = HAL_GetTick();
 8019ff2:	4607      	mov	r7, r0
		uint32_t min_remaining_time = UINT32_MAX;
 8019ff4:	f04f 38ff 	mov.w	r8, #4294967295
struct ReadRequest {
 8019ff8:	f04f 0a01 	mov.w	sl, #1
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 8019ffc:	fa5f f189 	uxtb.w	r1, r9
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a000:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 801a004:	1a9b      	subs	r3, r3, r2
 801a006:	ebb1 1f63 	cmp.w	r1, r3, asr #5
 801a00a:	d31f      	bcc.n	801a04c <_ZN7Sensors11ExitRegularEP12I2CInterface+0x7c>
 801a00c:	f04f 0b00 	mov.w	fp, #0
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 801a010:	fa5f f28b 	uxtb.w	r2, fp
 801a014:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	@ 0x64
 801a018:	1a09      	subs	r1, r1, r0
 801a01a:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 801a01e:	d371      	bcc.n	801a104 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x134>
			hardware_delay->AddDelayMS(interface->ID, min_remaining_time, context, HardwareDelayISR);
 801a020:	4b6d      	ldr	r3, [pc, #436]	@ (801a1d8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x208>)
 801a022:	fa1f f288 	uxth.w	r2, r8
 801a026:	9300      	str	r3, [sp, #0]
 801a028:	462b      	mov	r3, r5
 801a02a:	7821      	ldrb	r1, [r4, #0]
 801a02c:	f8d5 0094 	ldr.w	r0, [r5, #148]	@ 0x94
 801a030:	f7fb f902 	bl	8015238 <_ZN13HardwareDelay10AddDelayMSEhtPvPFvS0_hE>
	interface->activity_timestamp = HAL_GetTick();
 801a034:	f7e9 fa4a 	bl	80034cc <HAL_GetTick>
	interface->current_group_ID = UINT8_MAX;
 801a038:	f04f 33ff 	mov.w	r3, #4294967295
	interface->activity_timestamp = HAL_GetTick();
 801a03c:	6060      	str	r0, [r4, #4]
	interface->current_group_ID = UINT8_MAX;
 801a03e:	6523      	str	r3, [r4, #80]	@ 0x50
	osSemaphoreRelease(SensorsSemaphore);
 801a040:	6828      	ldr	r0, [r5, #0]
}
 801a042:	b011      	add	sp, #68	@ 0x44
 801a044:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801a048:	f7f2 bf24 	b.w	800ce94 <osSemaphoreRelease>
	return *(this->_M_impl._M_start + __n);
 801a04c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 801a050:	eb02 1141 	add.w	r1, r2, r1, lsl #5
			if (!interface->pending_requests[request_index].processing) continue;
 801a054:	f812 300b 	ldrb.w	r3, [r2, fp]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d050      	beq.n	801a0fe <_ZN7Sensors11ExitRegularEP12I2CInterface+0x12e>
 801a05c:	684b      	ldr	r3, [r1, #4]
 801a05e:	a80a      	add	r0, sp, #40	@ 0x28
 801a060:	3108      	adds	r1, #8
 801a062:	f88d a020 	strb.w	sl, [sp, #32]
 801a066:	9309      	str	r3, [sp, #36]	@ 0x24
 801a068:	f7fe ffb4 	bl	8018fd4 <_ZN10SensorDataC1ERKS_>
			if (request_data->read_index >= request_data->sequence.size()) continue;
 801a06c:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a070:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801a074:	1ad2      	subs	r2, r2, r3
 801a076:	9303      	str	r3, [sp, #12]
 801a078:	4b58      	ldr	r3, [pc, #352]	@ (801a1dc <_ZN7Sensors11ExitRegularEP12I2CInterface+0x20c>)
 801a07a:	1112      	asrs	r2, r2, #4
 801a07c:	435a      	muls	r2, r3
 801a07e:	4296      	cmp	r6, r2
 801a080:	d23a      	bcs.n	801a0f8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x128>
			Sensor* request_sensor = FindSensor(request_data->parent, &success);
 801a082:	f10d 021f 	add.w	r2, sp, #31
 801a086:	f89d 1029 	ldrb.w	r1, [sp, #41]	@ 0x29
 801a08a:	4628      	mov	r0, r5
 801a08c:	f7ff f918 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
			if (!success) continue;
 801a090:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801a094:	b382      	cbz	r2, 801a0f8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x128>
	return *(this->_M_impl._M_start + __n);
 801a096:	eb06 0686 	add.w	r6, r6, r6, lsl #2
			if (request_access->access_mode != DELAY_MODE) {return ReadNextSensor(interface->ID);}
 801a09a:	9b03      	ldr	r3, [sp, #12]
 801a09c:	0136      	lsls	r6, r6, #4
 801a09e:	5d9b      	ldrb	r3, [r3, r6]
 801a0a0:	2b04      	cmp	r3, #4
 801a0a2:	d004      	beq.n	801a0ae <_ZN7Sensors11ExitRegularEP12I2CInterface+0xde>
				return ReadNextSensor(interface->ID);
 801a0a4:	7821      	ldrb	r1, [r4, #0]
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	f7ff fdaa 	bl	8019c00 <_ZN7Sensors14ReadNextSensorEh>
 801a0ac:	e016      	b.n	801a0dc <_ZN7Sensors11ExitRegularEP12I2CInterface+0x10c>
			if (request_sensor->timestamp <= current_timestamp) {
 801a0ae:	68c3      	ldr	r3, [r0, #12]
 801a0b0:	42bb      	cmp	r3, r7
 801a0b2:	d819      	bhi.n	801a0e8 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x118>
				if (!MoveToNextSequence(request_data)) {
 801a0b4:	2201      	movs	r2, #1
 801a0b6:	a90a      	add	r1, sp, #40	@ 0x28
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	f7ff faa9 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a0be:	2800      	cmp	r0, #0
 801a0c0:	d1f0      	bne.n	801a0a4 <_ZN7Sensors11ExitRegularEP12I2CInterface+0xd4>
 801a0c2:	4620      	mov	r0, r4
 801a0c4:	f850 1f70 	ldr.w	r1, [r0, #112]!
 801a0c8:	4459      	add	r1, fp
					*(interface->pending_requests[request_index].flag) = true;									// flag to exit the blocking request loop from RequestRead
 801a0ca:	684b      	ldr	r3, [r1, #4]
 801a0cc:	f883 a000 	strb.w	sl, [r3]
					interface->pending_requests.erase(interface->pending_requests.begin() + request_index);
 801a0d0:	f7ff fc0b 	bl	80198ea <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
					return ExitPending(interface);
 801a0d4:	4621      	mov	r1, r4
 801a0d6:	4628      	mov	r0, r5
 801a0d8:	f000 f884 	bl	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
      }
 801a0dc:	a80d      	add	r0, sp, #52	@ 0x34
 801a0de:	f7e7 ff89 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
}
 801a0e2:	b011      	add	sp, #68	@ 0x44
 801a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remaining_time = request_sensor->timestamp - current_timestamp;
 801a0e8:	1bdb      	subs	r3, r3, r7
			if (remaining_time < min_remaining_time) {
 801a0ea:	4598      	cmp	r8, r3
				delay_source = REQUEST_ACCESS;
 801a0ec:	bf81      	itttt	hi
 801a0ee:	2202      	movhi	r2, #2
 801a0f0:	4698      	movhi	r8, r3
				delayed_index = request_index;
 801a0f2:	f885 900d 	strbhi.w	r9, [r5, #13]
				delay_source = REQUEST_ACCESS;
 801a0f6:	732a      	strbhi	r2, [r5, #12]
 801a0f8:	a80d      	add	r0, sp, #52	@ 0x34
 801a0fa:	f7e7 ff7b 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
		for (uint8_t request_index = 0; request_index < interface->pending_requests.size(); request_index++) {
 801a0fe:	f109 0901 	add.w	r9, r9, #1
 801a102:	e77b      	b.n	8019ffc <_ZN7Sensors11ExitRegularEP12I2CInterface+0x2c>
			if (!interface->pending_sensors[pending_index]->processing) continue;
 801a104:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
	return *(this->_M_impl._M_start + __n);
 801a108:	0093      	lsls	r3, r2, #2
 801a10a:	78f2      	ldrb	r2, [r6, #3]
 801a10c:	9304      	str	r3, [sp, #16]
 801a10e:	2a00      	cmp	r2, #0
 801a110:	d05e      	beq.n	801a1d0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a112:	4b33      	ldr	r3, [pc, #204]	@ (801a1e0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x210>)
			if (pending_sensor->read_index >= pending_sensor->data.size()) continue;
 801a114:	7c31      	ldrb	r1, [r6, #16]
 801a116:	e9d6 0205 	ldrd	r0, r2, [r6, #20]
 801a11a:	1a12      	subs	r2, r2, r0
 801a11c:	10d2      	asrs	r2, r2, #3
 801a11e:	435a      	muls	r2, r3
 801a120:	4291      	cmp	r1, r2
 801a122:	d255      	bcs.n	801a1d0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
	return *(this->_M_impl._M_start + __n);
 801a124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a128:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a12c:	e9d9 3203 	ldrd	r3, r2, [r9, #12]
			if (pending_data->read_index >= pending_data->sequence.size()) continue;
 801a130:	f899 a008 	ldrb.w	sl, [r9, #8]
 801a134:	1ad2      	subs	r2, r2, r3
 801a136:	9305      	str	r3, [sp, #20]
 801a138:	4b28      	ldr	r3, [pc, #160]	@ (801a1dc <_ZN7Sensors11ExitRegularEP12I2CInterface+0x20c>)
 801a13a:	1112      	asrs	r2, r2, #4
 801a13c:	435a      	muls	r2, r3
 801a13e:	4592      	cmp	sl, r2
 801a140:	d246      	bcs.n	801a1d0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801a142:	f10d 021f 	add.w	r2, sp, #31
 801a146:	7871      	ldrb	r1, [r6, #1]
 801a148:	4628      	mov	r0, r5
 801a14a:	f7ff f820 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
			if (!success) continue;
 801a14e:	f89d 201f 	ldrb.w	r2, [sp, #31]
			SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801a152:	9003      	str	r0, [sp, #12]
			if (!success) continue;
 801a154:	2a00      	cmp	r2, #0
 801a156:	d03b      	beq.n	801a1d0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x200>
	return *(this->_M_impl._M_start + __n);
 801a158:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
			if (pending_access->access_mode != DELAY_MODE) {return ReadNextSensor(interface->ID);}
 801a15c:	9b05      	ldr	r3, [sp, #20]
 801a15e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 801a162:	f813 200a 	ldrb.w	r2, [r3, sl]
 801a166:	2a04      	cmp	r2, #4
 801a168:	d006      	beq.n	801a178 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1a8>
				return ReadNextSensor(interface->ID); // if delay and time has already elapsed, process
 801a16a:	7821      	ldrb	r1, [r4, #0]
 801a16c:	4628      	mov	r0, r5
}
 801a16e:	b011      	add	sp, #68	@ 0x44
 801a170:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				return ReadNextSensor(interface->ID); // if delay and time has already elapsed, process
 801a174:	f7ff bd44 	b.w	8019c00 <_ZN7Sensors14ReadNextSensorEh>
			if (pending_sensor->timestamp <= current_timestamp) {
 801a178:	68f2      	ldr	r2, [r6, #12]
 801a17a:	42ba      	cmp	r2, r7
 801a17c:	d820      	bhi.n	801a1c0 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x1f0>
				if (!MoveToNextSequence(pending_data)) {
 801a17e:	2201      	movs	r2, #1
 801a180:	4649      	mov	r1, r9
 801a182:	4628      	mov	r0, r5
 801a184:	f7ff fa44 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a188:	2800      	cmp	r0, #0
 801a18a:	d1ee      	bne.n	801a16a <_ZN7Sensors11ExitRegularEP12I2CInterface+0x19a>
					if (!MoveToNextData(pending_sensor)) {
 801a18c:	2201      	movs	r2, #1
 801a18e:	4631      	mov	r1, r6
 801a190:	4628      	mov	r0, r5
 801a192:	f7ff fa09 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801a196:	2800      	cmp	r0, #0
 801a198:	d1e7      	bne.n	801a16a <_ZN7Sensors11ExitRegularEP12I2CInterface+0x19a>
 801a19a:	4620      	mov	r0, r4
						interface->pending_sensors.erase(interface->pending_sensors.begin() + pending_index);
 801a19c:	9b04      	ldr	r3, [sp, #16]
 801a19e:	f850 1f64 	ldr.w	r1, [r0, #100]!
 801a1a2:	4419      	add	r1, r3
 801a1a4:	f7fe fdb7 	bl	8018d16 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
						ProccessGroupTermination(interface, pending_group);
 801a1a8:	4621      	mov	r1, r4
 801a1aa:	4628      	mov	r0, r5
 801a1ac:	9a03      	ldr	r2, [sp, #12]
 801a1ae:	f7fe ff7b 	bl	80190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
						return ExitPending(interface);
 801a1b2:	4621      	mov	r1, r4
 801a1b4:	4628      	mov	r0, r5
}
 801a1b6:	b011      	add	sp, #68	@ 0x44
 801a1b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						return ExitPending(interface);
 801a1bc:	f000 b812 	b.w	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
			remaining_time = pending_sensor->timestamp - current_timestamp;
 801a1c0:	1bd2      	subs	r2, r2, r7
			if (remaining_time < min_remaining_time) {
 801a1c2:	4590      	cmp	r8, r2
				delay_source = PENDING_ACCESS;
 801a1c4:	bf81      	itttt	hi
 801a1c6:	2101      	movhi	r1, #1
 801a1c8:	4690      	movhi	r8, r2
				delayed_index = pending_index;
 801a1ca:	f885 b00d 	strbhi.w	fp, [r5, #13]
				delay_source = PENDING_ACCESS;
 801a1ce:	7329      	strbhi	r1, [r5, #12]
		for (uint8_t pending_index = 0; pending_index < interface->pending_sensors.size(); pending_index++) {
 801a1d0:	f10b 0b01 	add.w	fp, fp, #1
 801a1d4:	e71c      	b.n	801a010 <_ZN7Sensors11ExitRegularEP12I2CInterface+0x40>
 801a1d6:	bf00      	nop
 801a1d8:	0801a7b1 	.word	0x0801a7b1
 801a1dc:	cccccccd 	.word	0xcccccccd
 801a1e0:	aaaaaaab 	.word	0xaaaaaaab

0801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>:
void Sensors::ExitPending(I2CInterface* interface) {
 801a1e4:	b538      	push	{r3, r4, r5, lr}
	if (!RegularInterfaceTermination(interface)) ReadNextSensor(interface->ID);
 801a1e6:	f891 3050 	ldrb.w	r3, [r1, #80]	@ 0x50
void Sensors::ExitPending(I2CInterface* interface) {
 801a1ea:	4605      	mov	r5, r0
 801a1ec:	460c      	mov	r4, r1
	if (!RegularInterfaceTermination(interface)) ReadNextSensor(interface->ID);
 801a1ee:	2bff      	cmp	r3, #255	@ 0xff
 801a1f0:	d002      	beq.n	801a1f8 <_ZN7Sensors11ExitPendingEP12I2CInterface+0x14>
 801a1f2:	7809      	ldrb	r1, [r1, #0]
 801a1f4:	f7ff fd04 	bl	8019c00 <_ZN7Sensors14ReadNextSensorEh>
	return ExitRegular(interface);
 801a1f8:	4621      	mov	r1, r4
 801a1fa:	4628      	mov	r0, r5
}
 801a1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ExitRegular(interface);
 801a200:	f7ff bee6 	b.w	8019fd0 <_ZN7Sensors11ExitRegularEP12I2CInterface>

0801a204 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>:
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (interface->access_source == REQUEST_ACCESS) {
 801a208:	f891 3054 	ldrb.w	r3, [r1, #84]	@ 0x54
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801a20c:	b089      	sub	sp, #36	@ 0x24
 801a20e:	4604      	mov	r4, r0
 801a210:	460d      	mov	r5, r1
	if (interface->access_source == REQUEST_ACCESS) {
 801a212:	2b02      	cmp	r3, #2
	uint8_t ID = interface->ID;
 801a214:	f891 8000 	ldrb.w	r8, [r1]
	if (interface->access_source == REQUEST_ACCESS) {
 801a218:	d126      	bne.n	801a268 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x64>
 801a21a:	f891 2057 	ldrb.w	r2, [r1, #87]	@ 0x57
 801a21e:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 801a220:	eb03 1342 	add.w	r3, r3, r2, lsl #5
		sensor = FindSensorPath(sensor_data->parent, NULL, &sensor_group, &success);
 801a224:	2200      	movs	r2, #0
 801a226:	7a59      	ldrb	r1, [r3, #9]
		sensor_data = &(interface->pending_requests[interface->request_index].data);
 801a228:	f103 0608 	add.w	r6, r3, #8
		sensor = FindSensorPath(sensor_data->parent, NULL, &sensor_group, &success);
 801a22c:	f10d 031b 	add.w	r3, sp, #27
 801a230:	9300      	str	r3, [sp, #0]
 801a232:	ab07      	add	r3, sp, #28
 801a234:	f7ff f81f 	bl	8019276 <_ZN7Sensors14FindSensorPathEhPP12I2CInterfacePP11SensorGroupPb>
 801a238:	4607      	mov	r7, r0
	I2C_access = &(sensor_data->sequence[sensor_data->read_index]);
 801a23a:	7a33      	ldrb	r3, [r6, #8]
	switch (sensor_data->type) {
 801a23c:	79f2      	ldrb	r2, [r6, #7]
 801a23e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 801a242:	f8d6 900c 	ldr.w	r9, [r6, #12]
 801a246:	3a01      	subs	r2, #1
 801a248:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 801a24c:	eb09 1b0b 	add.w	fp, r9, fp, lsl #4
 801a250:	2a07      	cmp	r2, #7
 801a252:	d86f      	bhi.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
 801a254:	e8df f012 	tbh	[pc, r2, lsl #1]
 801a258:	0083004b 	.word	0x0083004b
 801a25c:	006e00bc 	.word	0x006e00bc
 801a260:	006e006e 	.word	0x006e006e
 801a264:	0108006e 	.word	0x0108006e
	} else if (interface->access_source == PENDING_ACCESS) {
 801a268:	2b01      	cmp	r3, #1
 801a26a:	d118      	bne.n	801a29e <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x9a>
 801a26c:	f891 2056 	ldrb.w	r2, [r1, #86]	@ 0x56
		sensor = interface->pending_sensors[interface->pending_index];
 801a270:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801a272:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		sensor_group = FindSensorGroup(sensor->parent, &success);
 801a276:	f10d 021b 	add.w	r2, sp, #27
 801a27a:	7879      	ldrb	r1, [r7, #1]
 801a27c:	f7fe ff87 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a280:	7c3a      	ldrb	r2, [r7, #16]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a282:	49c6      	ldr	r1, [pc, #792]	@ (801a59c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x398>)
		sensor_group = FindSensorGroup(sensor->parent, &success);
 801a284:	9007      	str	r0, [sp, #28]
 801a286:	e9d7 6305 	ldrd	r6, r3, [r7, #20]
 801a28a:	1b9b      	subs	r3, r3, r6
 801a28c:	10db      	asrs	r3, r3, #3
 801a28e:	434b      	muls	r3, r1
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a290:	429a      	cmp	r2, r3
 801a292:	d20e      	bcs.n	801a2b2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
	return *(this->_M_impl._M_start + __n);
 801a294:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a298:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 801a29c:	e7cd      	b.n	801a23a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x36>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a29e:	e9d1 3216 	ldrd	r3, r2, [r1, #88]	@ 0x58
		if (interface->read_index >= interface->sensor_groups.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a2a2:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
 801a2a6:	1ad2      	subs	r2, r2, r3
 801a2a8:	49bc      	ldr	r1, [pc, #752]	@ (801a59c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x398>)
 801a2aa:	10d2      	asrs	r2, r2, #3
 801a2ac:	434a      	muls	r2, r1
 801a2ae:	4290      	cmp	r0, r2
 801a2b0:	d305      	bcc.n	801a2be <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xba>
	osSemaphoreRelease(SensorsSemaphore);
 801a2b2:	6820      	ldr	r0, [r4, #0]
}
 801a2b4:	b009      	add	sp, #36	@ 0x24
 801a2b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	osSemaphoreRelease(SensorsSemaphore);
 801a2ba:	f7f2 bdeb 	b.w	800ce94 <osSemaphoreRelease>
	return *(this->_M_impl._M_start + __n);
 801a2be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a2c2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a2c6:	48b6      	ldr	r0, [pc, #728]	@ (801a5a0 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x39c>)
		if (sensor_group->read_index >= sensor_group->sensors.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a2c8:	7a1a      	ldrb	r2, [r3, #8]
		sensor_group = &(interface->sensor_groups[interface->read_index]);
 801a2ca:	9307      	str	r3, [sp, #28]
 801a2cc:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
 801a2d0:	1bdb      	subs	r3, r3, r7
 801a2d2:	10db      	asrs	r3, r3, #3
 801a2d4:	4343      	muls	r3, r0
		if (sensor_group->read_index >= sensor_group->sensors.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a2d6:	429a      	cmp	r2, r3
 801a2d8:	d2eb      	bcs.n	801a2b2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
	return *(this->_M_impl._M_start + __n);
 801a2da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a2de:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a2e2:	e9d7 6305 	ldrd	r6, r3, [r7, #20]
		if (sensor->read_index >= sensor->data.size()) {osSemaphoreRelease(SensorsSemaphore); return;}
 801a2e6:	7c3a      	ldrb	r2, [r7, #16]
 801a2e8:	1b9b      	subs	r3, r3, r6
 801a2ea:	10db      	asrs	r3, r3, #3
 801a2ec:	e7cf      	b.n	801a28e <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x8a>
		if (sensor_data->read_index == 0)
 801a2ee:	b91b      	cbnz	r3, 801a2f8 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xf4>
	return *(this->_M_impl._M_start + __n);
 801a2f0:	79b1      	ldrb	r1, [r6, #6]
			sensor_data_uint16[sensor_data->index] = 0; // Clean buffer when start access
 801a2f2:	69e2      	ldr	r2, [r4, #28]
 801a2f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801a2f8:	f819 300a 	ldrb.w	r3, [r9, sl]
 801a2fc:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801a300:	2b01      	cmp	r3, #1
 801a302:	d109      	bne.n	801a318 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x114>
 801a304:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint16_t>(&(sensor_data_uint16[sensor_data->index]), interface->buffer, I2C_access->size);
 801a306:	f105 0110 	add.w	r1, r5, #16
 801a30a:	69e3      	ldr	r3, [r4, #28]
 801a30c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801a310:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801a314:	f7fe fce0 	bl	8018cd8 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>
		if (I2C_access->access_mode == CODE_MODE)
 801a318:	f819 300a 	ldrb.w	r3, [r9, sl]
 801a31c:	2b05      	cmp	r3, #5
 801a31e:	d109      	bne.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
 801a320:	79b0      	ldrb	r0, [r6, #6]
			TransferBuffer<uint16_t>(&(sensor_data_uint16[sensor_data->index]), interface->buffer, I2C_access->size);
 801a322:	f105 0110 	add.w	r1, r5, #16
 801a326:	69e3      	ldr	r3, [r4, #28]
 801a328:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801a32c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801a330:	f7fe fcd2 	bl	8018cd8 <_ZN7Sensors14TransferBufferItEEvPT_Pht.isra.0>
	if (interface->access_source == REQUEST_ACCESS) {
 801a334:	f895 9054 	ldrb.w	r9, [r5, #84]	@ 0x54
 801a338:	f1b9 0f02 	cmp.w	r9, #2
 801a33c:	f040 80e0 	bne.w	801a500 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2fc>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801a340:	2201      	movs	r2, #1
 801a342:	4631      	mov	r1, r6
 801a344:	4620      	mov	r0, r4
 801a346:	f7ff f963 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a34a:	2800      	cmp	r0, #0
 801a34c:	f000 80c1 	beq.w	801a4d2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2ce>
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801a350:	4641      	mov	r1, r8
 801a352:	4620      	mov	r0, r4
}
 801a354:	b009      	add	sp, #36	@ 0x24
 801a356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801a35a:	f7ff bc51 	b.w	8019c00 <_ZN7Sensors14ReadNextSensorEh>
		if (sensor_data->read_index == 0)
 801a35e:	b91b      	cbnz	r3, 801a368 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x164>
 801a360:	79b1      	ldrb	r1, [r6, #6]
			sensor_data_uint32[sensor_data->index] = 0; // Clean buffer when start access
 801a362:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801a364:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801a368:	f819 300a 	ldrb.w	r3, [r9, sl]
 801a36c:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801a370:	2b01      	cmp	r3, #1
 801a372:	d1df      	bne.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
			TransferBuffer<uint32_t>(&(sensor_data_uint32[sensor_data->index]), interface->buffer, I2C_access->size);
 801a374:	f105 0310 	add.w	r3, r5, #16
 801a378:	f896 a006 	ldrb.w	sl, [r6, #6]
 801a37c:	f8d4 9028 	ldr.w	r9, [r4, #40]	@ 0x28
 801a380:	4618      	mov	r0, r3
 801a382:	f8bb c002 	ldrh.w	ip, [fp, #2]
	std::memcpy(&temp, memory_address, sizeof(T));
 801a386:	f859 302a 	ldr.w	r3, [r9, sl, lsl #2]
	if (temp != 0)
 801a38a:	b113      	cbz	r3, 801a392 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x18e>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 801a38c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a390:	4093      	lsls	r3, r2
void Sensors::ProccessReceivedData(I2CInterface* interface) {
 801a392:	2100      	movs	r1, #0
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a394:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a398:	9303      	str	r3, [sp, #12]
 801a39a:	468e      	mov	lr, r1
	for (uint8_t index = 0; index < size; index++) {
 801a39c:	b2ca      	uxtb	r2, r1
 801a39e:	3101      	adds	r1, #1
 801a3a0:	4562      	cmp	r2, ip
 801a3a2:	db07      	blt.n	801a3b4 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x1b0>
 801a3a4:	9a03      	ldr	r2, [sp, #12]
 801a3a6:	f1be 0f00 	cmp.w	lr, #0
 801a3aa:	bf18      	it	ne
 801a3ac:	4613      	movne	r3, r2
	*memory_address = *reinterpreted_temp;
 801a3ae:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
}
 801a3b2:	e7bf      	b.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a3b4:	f810 e002 	ldrb.w	lr, [r0, r2]
 801a3b8:	ebab 0202 	sub.w	r2, fp, r2
 801a3bc:	00d2      	lsls	r2, r2, #3
 801a3be:	fa0e fe02 	lsl.w	lr, lr, r2
 801a3c2:	9a03      	ldr	r2, [sp, #12]
 801a3c4:	ea4e 0202 	orr.w	r2, lr, r2
 801a3c8:	f04f 0e01 	mov.w	lr, #1
 801a3cc:	9203      	str	r2, [sp, #12]
	for (uint8_t index = 0; index < size; index++) {
 801a3ce:	e7e5      	b.n	801a39c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x198>
		if (sensor_data->read_index == 0)
 801a3d0:	b93b      	cbnz	r3, 801a3e2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x1de>
 801a3d2:	79b2      	ldrb	r2, [r6, #6]
			sensor_data_uint64[sensor_data->index] = 0; // Clean buffer when start access
 801a3d4:	2000      	movs	r0, #0
 801a3d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a3d8:	2100      	movs	r1, #0
 801a3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a3de:	e9c3 0100 	strd	r0, r1, [r3]
		if (I2C_access->access_mode == READ_MODE || I2C_access->access_mode == MEM_READ_MODE)
 801a3e2:	f819 300a 	ldrb.w	r3, [r9, sl]
 801a3e6:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 801a3ea:	2b01      	cmp	r3, #1
 801a3ec:	d1a2      	bne.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
 801a3ee:	f896 e006 	ldrb.w	lr, [r6, #6]
			TransferBuffer<uint64_t>(&(sensor_data_uint64[sensor_data->index]), interface->buffer, I2C_access->size);
 801a3f2:	f105 0310 	add.w	r3, r5, #16
 801a3f6:	f8d4 c034 	ldr.w	ip, [r4, #52]	@ 0x34
 801a3fa:	9303      	str	r3, [sp, #12]
 801a3fc:	eb0c 0ace 	add.w	sl, ip, lr, lsl #3
	std::memcpy(&temp, memory_address, sizeof(T));
 801a400:	f85c 203e 	ldr.w	r2, [ip, lr, lsl #3]
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 801a404:	f8bb 9002 	ldrh.w	r9, [fp, #2]
	std::memcpy(&temp, memory_address, sizeof(T));
 801a408:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (temp != 0)
 801a40c:	ea52 0103 	orrs.w	r1, r2, r3
 801a410:	d00e      	beq.n	801a430 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x22c>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 801a412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801a416:	f1a1 0b20 	sub.w	fp, r1, #32
 801a41a:	f1c1 0020 	rsb	r0, r1, #32
 801a41e:	408b      	lsls	r3, r1
 801a420:	fa02 fb0b 	lsl.w	fp, r2, fp
 801a424:	fa22 f000 	lsr.w	r0, r2, r0
 801a428:	408a      	lsls	r2, r1
 801a42a:	ea43 030b 	orr.w	r3, r3, fp
 801a42e:	4303      	orrs	r3, r0
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a430:	f109 31ff 	add.w	r1, r9, #4294967295
 801a434:	f04f 0b00 	mov.w	fp, #0
 801a438:	9105      	str	r1, [sp, #20]
	for (uint8_t index = 0; index < size; index++) {
 801a43a:	fa5f f18b 	uxtb.w	r1, fp
 801a43e:	f10b 0b01 	add.w	fp, fp, #1
 801a442:	4549      	cmp	r1, r9
 801a444:	db04      	blt.n	801a450 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x24c>
	*memory_address = *reinterpreted_temp;
 801a446:	f84c 203e 	str.w	r2, [ip, lr, lsl #3]
 801a44a:	f8ca 3004 	str.w	r3, [sl, #4]
}
 801a44e:	e771      	b.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a450:	9803      	ldr	r0, [sp, #12]
 801a452:	5c40      	ldrb	r0, [r0, r1]
 801a454:	9004      	str	r0, [sp, #16]
 801a456:	9805      	ldr	r0, [sp, #20]
 801a458:	1a41      	subs	r1, r0, r1
 801a45a:	9804      	ldr	r0, [sp, #16]
 801a45c:	00c9      	lsls	r1, r1, #3
 801a45e:	4088      	lsls	r0, r1
 801a460:	4302      	orrs	r2, r0
 801a462:	ea43 73e0 	orr.w	r3, r3, r0, asr #31
	for (uint8_t index = 0; index < size; index++) {
 801a466:	e7e8      	b.n	801a43a <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x236>
		if (sensor_data->read_index == 0)
 801a468:	b92b      	cbnz	r3, 801a476 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x272>
 801a46a:	79b2      	ldrb	r2, [r6, #6]
			sensor_data_float[sensor_data->index] = 0; // Clean buffer when start access
 801a46c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a46e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a472:	2200      	movs	r2, #0
 801a474:	601a      	str	r2, [r3, #0]
		if (I2C_access->access_mode == CODE_MODE)
 801a476:	f819 300a 	ldrb.w	r3, [r9, sl]
 801a47a:	2b05      	cmp	r3, #5
 801a47c:	f47f af5a 	bne.w	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
 801a480:	79b2      	ldrb	r2, [r6, #6]
			TransferBuffer<float>(&(sensor_data_float[sensor_data->index]), interface->buffer, I2C_access->size);
 801a482:	f105 0a10 	add.w	sl, r5, #16
 801a486:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a488:	f8bb c002 	ldrh.w	ip, [fp, #2]
	std::memcpy(&temp, memory_address, sizeof(T));
 801a48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a490:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	if (temp != 0)
 801a494:	b111      	cbz	r1, 801a49c <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x298>
		temp = temp << (size << 3); // * 8 <=> Shift left by 3 to accumulate reads (MSB first)
 801a496:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801a49a:	4099      	lsls	r1, r3
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a49c:	2000      	movs	r0, #0
 801a49e:	460a      	mov	r2, r1
 801a4a0:	f10c 3bff 	add.w	fp, ip, #4294967295
 801a4a4:	4686      	mov	lr, r0
	for (uint8_t index = 0; index < size; index++) {
 801a4a6:	b2c3      	uxtb	r3, r0
 801a4a8:	3001      	adds	r0, #1
 801a4aa:	4563      	cmp	r3, ip
 801a4ac:	db06      	blt.n	801a4bc <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2b8>
	*memory_address = *reinterpreted_temp;
 801a4ae:	f1be 0f00 	cmp.w	lr, #0
 801a4b2:	bf08      	it	eq
 801a4b4:	460a      	moveq	r2, r1
 801a4b6:	f8c9 2000 	str.w	r2, [r9]
}
 801a4ba:	e73b      	b.n	801a334 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x130>
		temp |= (buffer[index] << ((size - 1 - index) << 3));
 801a4bc:	f81a e003 	ldrb.w	lr, [sl, r3]
 801a4c0:	ebab 0303 	sub.w	r3, fp, r3
 801a4c4:	00db      	lsls	r3, r3, #3
 801a4c6:	fa0e f303 	lsl.w	r3, lr, r3
 801a4ca:	f04f 0e01 	mov.w	lr, #1
 801a4ce:	431a      	orrs	r2, r3
	for (uint8_t index = 0; index < size; index++) {
 801a4d0:	e7e9      	b.n	801a4a6 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2a2>
 801a4d2:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
		*(interface->pending_requests[interface->request_index].flag) = true;
 801a4d4:	2101      	movs	r1, #1
 801a4d6:	f895 3057 	ldrb.w	r3, [r5, #87]	@ 0x57
		interface->pending_requests.erase(interface->pending_requests.begin() + interface->request_index);
 801a4da:	f105 0070 	add.w	r0, r5, #112	@ 0x70
		*(interface->pending_requests[interface->request_index].flag) = true;
 801a4de:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	7019      	strb	r1, [r3, #0]
 801a4e6:	f895 1057 	ldrb.w	r1, [r5, #87]	@ 0x57
		interface->pending_requests.erase(interface->pending_requests.begin() + interface->request_index);
 801a4ea:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 801a4ee:	f7ff f9fc 	bl	80198ea <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
		return ExitPending(interface);
 801a4f2:	4629      	mov	r1, r5
 801a4f4:	4620      	mov	r0, r4
}
 801a4f6:	b009      	add	sp, #36	@ 0x24
 801a4f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return ExitPending(interface);
 801a4fc:	f7ff be72 	b.w	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
	} else if (interface->access_source == PENDING_ACCESS) {
 801a500:	f1b9 0f01 	cmp.w	r9, #1
 801a504:	d11e      	bne.n	801a544 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x340>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801a506:	464a      	mov	r2, r9
 801a508:	4631      	mov	r1, r6
 801a50a:	4620      	mov	r0, r4
 801a50c:	f7ff f880 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a510:	2800      	cmp	r0, #0
 801a512:	f47f af1d 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
		if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 801a516:	464a      	mov	r2, r9
 801a518:	4639      	mov	r1, r7
 801a51a:	4620      	mov	r0, r4
 801a51c:	f7ff f844 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801a520:	2800      	cmp	r0, #0
 801a522:	f47f af15 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
 801a526:	4628      	mov	r0, r5
 801a528:	f895 1056 	ldrb.w	r1, [r5, #86]	@ 0x56
 801a52c:	f850 3f64 	ldr.w	r3, [r0, #100]!
		interface->pending_sensors.erase(interface->pending_sensors.begin() + interface->pending_index);
 801a530:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a534:	f7fe fbef 	bl	8018d16 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
		ProccessGroupTermination(interface, sensor_group);
 801a538:	9a07      	ldr	r2, [sp, #28]
 801a53a:	4629      	mov	r1, r5
 801a53c:	4620      	mov	r0, r4
 801a53e:	f7fe fdb3 	bl	80190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801a542:	e7d6      	b.n	801a4f2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x2ee>
	} else if (interface->access_source == REGULAR_ACCESS) {
 801a544:	f1b9 0f00 	cmp.w	r9, #0
 801a548:	f47f aeb3 	bne.w	801a2b2 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0xae>
		if (MoveToNextSequence(sensor_data)) {return ReadNextSensor(ID);}
 801a54c:	2201      	movs	r2, #1
 801a54e:	4631      	mov	r1, r6
 801a550:	4620      	mov	r0, r4
 801a552:	f7ff f85d 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a556:	2800      	cmp	r0, #0
 801a558:	f47f aefa 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
		if (MoveToNextData(sensor)) {return ReadNextSensor(ID);}
 801a55c:	2201      	movs	r2, #1
 801a55e:	4639      	mov	r1, r7
 801a560:	4620      	mov	r0, r4
 801a562:	f7ff f821 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801a566:	2800      	cmp	r0, #0
 801a568:	f47f aef2 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
		if (MoveToNextSensor(interface, sensor_group)) {return ReadNextSensor(ID);}
 801a56c:	2301      	movs	r3, #1
 801a56e:	9a07      	ldr	r2, [sp, #28]
 801a570:	4629      	mov	r1, r5
 801a572:	4620      	mov	r0, r4
 801a574:	f7ff f800 	bl	8019578 <_ZN7Sensors16MoveToNextSensorEP12I2CInterfaceP11SensorGroupb>
 801a578:	2800      	cmp	r0, #0
 801a57a:	f47f aee9 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
		if (MoveToNextGroup(interface)) {return ReadNextSensor(ID);}
 801a57e:	2201      	movs	r2, #1
 801a580:	4629      	mov	r1, r5
 801a582:	4620      	mov	r0, r4
 801a584:	f7fe ffde 	bl	8019544 <_ZN7Sensors15MoveToNextGroupEP12I2CInterfaceb>
 801a588:	2800      	cmp	r0, #0
 801a58a:	f47f aee1 	bne.w	801a350 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface+0x14c>
		return ExitRegular(interface);
 801a58e:	4620      	mov	r0, r4
}
 801a590:	b009      	add	sp, #36	@ 0x24
 801a592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return ExitRegular(interface);
 801a596:	f7ff bd1b 	b.w	8019fd0 <_ZN7Sensors11ExitRegularEP12I2CInterface>
 801a59a:	bf00      	nop
 801a59c:	aaaaaaab 	.word	0xaaaaaaab
 801a5a0:	cccccccd 	.word	0xcccccccd

0801a5a4 <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef>:
void Sensors::ReceiveSensorData(I2C_HandleTypeDef* harware_interface) {
 801a5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801a5a6:	f10d 0207 	add.w	r2, sp, #7
void Sensors::ReceiveSensorData(I2C_HandleTypeDef* harware_interface) {
 801a5aa:	4605      	mov	r5, r0
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801a5ac:	f7fe fdc0 	bl	8019130 <_ZN7Sensors28FindInterfaceIndexWithHandleEP19__I2C_HandleTypeDefPb>
	if (!success) return;
 801a5b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	uint8_t ID = FindInterfaceIndexWithHandle(harware_interface, &success);
 801a5b4:	4604      	mov	r4, r0
	if (!success) return;
 801a5b6:	b183      	cbz	r3, 801a5da <_ZN7Sensors17ReceiveSensorDataEP19__I2C_HandleTypeDef+0x36>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a5b8:	f04f 31ff 	mov.w	r1, #4294967295
 801a5bc:	6828      	ldr	r0, [r5, #0]
 801a5be:	f7f2 fc35 	bl	800ce2c <osSemaphoreAcquire>
 801a5c2:	692b      	ldr	r3, [r5, #16]
 801a5c4:	b221      	sxth	r1, r4
	ProccessReceivedData(interface);
 801a5c6:	4628      	mov	r0, r5
 801a5c8:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 801a5cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
}
 801a5d0:	b003      	add	sp, #12
 801a5d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ProccessReceivedData(interface);
 801a5d6:	f7ff be15 	b.w	801a204 <_ZN7Sensors20ProccessReceivedDataEP12I2CInterface>
}
 801a5da:	b003      	add	sp, #12
 801a5dc:	bd30      	pop	{r4, r5, pc}

0801a5de <_ZN7Sensors4SpinEv>:
void Sensors::Spin(void) {
 801a5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e0:	4605      	mov	r5, r0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a5e2:	f04f 31ff 	mov.w	r1, #4294967295
 801a5e6:	6800      	ldr	r0, [r0, #0]
 801a5e8:	f7f2 fc20 	bl	800ce2c <osSemaphoreAcquire>
	if (active) {
 801a5ec:	792b      	ldrb	r3, [r5, #4]
 801a5ee:	b93b      	cbnz	r3, 801a600 <_ZN7Sensors4SpinEv+0x22>
	osSemaphoreRelease(SensorsSemaphore);
 801a5f0:	6828      	ldr	r0, [r5, #0]
 801a5f2:	f7f2 fc4f 	bl	800ce94 <osSemaphoreRelease>
	osDelay(period_ms);
 801a5f6:	68a8      	ldr	r0, [r5, #8]
}
 801a5f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	osDelay(period_ms);
 801a5fc:	f7f2 bbac 	b.w	800cd58 <osDelay>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801a600:	e9d5 4604 	ldrd	r4, r6, [r5, #16]
			interface.request_regular_process = true; // flag to restart a new regular reading loop
 801a604:	2701      	movs	r7, #1
 801a606:	347c      	adds	r4, #124	@ 0x7c
		for (I2CInterface &interface : interfaces) {
 801a608:	f1a4 037c 	sub.w	r3, r4, #124	@ 0x7c
 801a60c:	429e      	cmp	r6, r3
 801a60e:	d0ef      	beq.n	801a5f0 <_ZN7Sensors4SpinEv+0x12>
			if (RegularInterfaceTermination(&interface)) {
 801a610:	f814 3c2c 	ldrb.w	r3, [r4, #-44]
			interface.request_regular_process = true; // flag to restart a new regular reading loop
 801a614:	f804 7c7b 	strb.w	r7, [r4, #-123]
			if (RegularInterfaceTermination(&interface)) {
 801a618:	2bff      	cmp	r3, #255	@ 0xff
 801a61a:	d121      	bne.n	801a660 <_ZN7Sensors4SpinEv+0x82>
					ReadNextSensor(interface.ID);
 801a61c:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
				if (interface.pending_requests.size() == 0 && interface.pending_sensors.size() == 0) {
 801a620:	e954 3203 	ldrd	r3, r2, [r4, #-12]
 801a624:	429a      	cmp	r2, r3
 801a626:	d10d      	bne.n	801a644 <_ZN7Sensors4SpinEv+0x66>
 801a628:	e954 3206 	ldrd	r3, r2, [r4, #-24]
 801a62c:	429a      	cmp	r2, r3
 801a62e:	d109      	bne.n	801a644 <_ZN7Sensors4SpinEv+0x66>
				ReadNextSensor(interface.ID);
 801a630:	4628      	mov	r0, r5
 801a632:	f7ff fae5 	bl	8019c00 <_ZN7Sensors14ReadNextSensorEh>
				osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a636:	f04f 31ff 	mov.w	r1, #4294967295
 801a63a:	6828      	ldr	r0, [r5, #0]
 801a63c:	f7f2 fbf6 	bl	800ce2c <osSemaphoreAcquire>
      operator++() _GLIBCXX_NOEXCEPT
 801a640:	347c      	adds	r4, #124	@ 0x7c
	return *this;
 801a642:	e7e1      	b.n	801a608 <_ZN7Sensors4SpinEv+0x2a>
				} else if (hardware_delay->IsDelayRegistered(interface.ID)) {
 801a644:	f8d5 0094 	ldr.w	r0, [r5, #148]	@ 0x94
 801a648:	f7fa fd77 	bl	801513a <_ZN13HardwareDelay17IsDelayRegisteredEh>
 801a64c:	b140      	cbz	r0, 801a660 <_ZN7Sensors4SpinEv+0x82>
					hardware_delay->RemoveDelayMS(interface.ID);
 801a64e:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
 801a652:	f8d5 0094 	ldr.w	r0, [r5, #148]	@ 0x94
 801a656:	f7fa fe7f 	bl	8015358 <_ZN13HardwareDelay13RemoveDelayMSEh>
				ReadNextSensor(interface.ID);
 801a65a:	f814 1c7c 	ldrb.w	r1, [r4, #-124]
 801a65e:	e7e7      	b.n	801a630 <_ZN7Sensors4SpinEv+0x52>
			if (interface.error_flag || HAL_GetTick() > interface.activity_timestamp + interface.timeout) {
 801a660:	f814 3c7a 	ldrb.w	r3, [r4, #-122]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d1f8      	bne.n	801a65a <_ZN7Sensors4SpinEv+0x7c>
 801a668:	f7e8 ff30 	bl	80034cc <HAL_GetTick>
 801a66c:	e954 321e 	ldrd	r3, r2, [r4, #-120]	@ 0x78
 801a670:	4413      	add	r3, r2
 801a672:	4298      	cmp	r0, r3
 801a674:	d8f1      	bhi.n	801a65a <_ZN7Sensors4SpinEv+0x7c>
 801a676:	e7e3      	b.n	801a640 <_ZN7Sensors4SpinEv+0x62>

0801a678 <_ZN7Sensors21ReceiveDelayInterruptEh>:
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801a678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t index = FindInterfaceIndex(ID, &success);
 801a67c:	f10d 0207 	add.w	r2, sp, #7
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801a680:	4604      	mov	r4, r0
	uint8_t index = FindInterfaceIndex(ID, &success);
 801a682:	f7fe fd32 	bl	80190ea <_ZN7Sensors18FindInterfaceIndexEhPb>
	if (!success) return;
 801a686:	f89d 3007 	ldrb.w	r3, [sp, #7]
void Sensors::ReceiveDelayInterrupt(uint8_t ID) {
 801a68a:	460e      	mov	r6, r1
	if (!success) return;
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	f000 8088 	beq.w	801a7a2 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
 801a692:	b200      	sxth	r0, r0
 801a694:	6925      	ldr	r5, [r4, #16]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801a696:	f04f 31ff 	mov.w	r1, #4294967295
 801a69a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 801a69e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 801a6a2:	6820      	ldr	r0, [r4, #0]
 801a6a4:	f7f2 fbc2 	bl	800ce2c <osSemaphoreAcquire>
	if (delay_source == REQUEST_ACCESS) {
 801a6a8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a6ac:	f1b9 0f02 	cmp.w	r9, #2
 801a6b0:	d12b      	bne.n	801a70a <_ZN7Sensors21ReceiveDelayInterruptEh+0x92>
 801a6b2:	7b63      	ldrb	r3, [r4, #13]
 801a6b4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a6b6:	4f3c      	ldr	r7, [pc, #240]	@ (801a7a8 <_ZN7Sensors21ReceiveDelayInterruptEh+0x130>)
	return *(this->_M_impl._M_start + __n);
 801a6b8:	eb01 1143 	add.w	r1, r1, r3, lsl #5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a6bc:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
		if (request_data->read_index >= request_data->sequence.size()) return;
 801a6c0:	7c0b      	ldrb	r3, [r1, #16]
 801a6c2:	1a12      	subs	r2, r2, r0
 801a6c4:	1112      	asrs	r2, r2, #4
 801a6c6:	437a      	muls	r2, r7
 801a6c8:	4293      	cmp	r3, r2
 801a6ca:	d26a      	bcs.n	801a7a2 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801a6cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a6d0:	011b      	lsls	r3, r3, #4
		if (request_access->access_mode == DELAY_MODE) {
 801a6d2:	5cc3      	ldrb	r3, [r0, r3]
 801a6d4:	2b04      	cmp	r3, #4
 801a6d6:	d15d      	bne.n	801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
			if (!MoveToNextSequence(request_data)) {
 801a6d8:	2201      	movs	r2, #1
 801a6da:	3108      	adds	r1, #8
 801a6dc:	4620      	mov	r0, r4
 801a6de:	f7fe ff97 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a6e2:	2800      	cmp	r0, #0
 801a6e4:	d156      	bne.n	801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
 801a6e6:	4628      	mov	r0, r5
 801a6e8:	7b63      	ldrb	r3, [r4, #13]
				*(interface->pending_requests[delayed_index].flag) = true;
 801a6ea:	2201      	movs	r2, #1
 801a6ec:	f850 1f70 	ldr.w	r1, [r0, #112]!
 801a6f0:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 801a6f4:	684b      	ldr	r3, [r1, #4]
 801a6f6:	701a      	strb	r2, [r3, #0]
				interface->pending_requests.erase(interface->pending_requests.begin() + delayed_index);
 801a6f8:	f7ff f8f7 	bl	80198ea <_ZNSt6vectorI11ReadRequestSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE.isra.0>
					return ExitPending(interface);
 801a6fc:	4629      	mov	r1, r5
 801a6fe:	4620      	mov	r0, r4
}
 801a700:	b003      	add	sp, #12
 801a702:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
					return ExitPending(interface);
 801a706:	f7ff bd6d 	b.w	801a1e4 <_ZN7Sensors11ExitPendingEP12I2CInterface>
	} else if (delay_source == PENDING_ACCESS) {
 801a70a:	f1b9 0f01 	cmp.w	r9, #1
 801a70e:	d141      	bne.n	801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
 801a710:	7b62      	ldrb	r2, [r4, #13]
		SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801a712:	4620      	mov	r0, r4
		Sensor* pending_sensor = interface->pending_sensors[delayed_index];
 801a714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a716:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		SensorGroup* pending_group = FindSensorGroup(pending_sensor->parent, &success);
 801a71a:	f10d 0207 	add.w	r2, sp, #7
 801a71e:	7879      	ldrb	r1, [r7, #1]
 801a720:	f7fe fd35 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
 801a724:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a726:	4821      	ldr	r0, [pc, #132]	@ (801a7ac <_ZN7Sensors21ReceiveDelayInterruptEh+0x134>)
		if (pending_sensor->read_index >= pending_sensor->data.size()) return;
 801a728:	7c3a      	ldrb	r2, [r7, #16]
 801a72a:	e9d7 1305 	ldrd	r1, r3, [r7, #20]
 801a72e:	1a5b      	subs	r3, r3, r1
 801a730:	10db      	asrs	r3, r3, #3
 801a732:	4343      	muls	r3, r0
 801a734:	429a      	cmp	r2, r3
 801a736:	d234      	bcs.n	801a7a2 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801a738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a73c:	f8df c068 	ldr.w	ip, [pc, #104]	@ 801a7a8 <_ZN7Sensors21ReceiveDelayInterruptEh+0x130>
	return *(this->_M_impl._M_start + __n);
 801a740:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a744:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
		if (pending_data->read_index >= pending_data->sequence.size()) return;
 801a748:	7a0b      	ldrb	r3, [r1, #8]
 801a74a:	1a12      	subs	r2, r2, r0
 801a74c:	1112      	asrs	r2, r2, #4
 801a74e:	fb0c f202 	mul.w	r2, ip, r2
 801a752:	4293      	cmp	r3, r2
 801a754:	d225      	bcs.n	801a7a2 <_ZN7Sensors21ReceiveDelayInterruptEh+0x12a>
	return *(this->_M_impl._M_start + __n);
 801a756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801a75a:	011b      	lsls	r3, r3, #4
		if (pending_access->access_mode == DELAY_MODE) {
 801a75c:	5cc3      	ldrb	r3, [r0, r3]
 801a75e:	2b04      	cmp	r3, #4
 801a760:	d118      	bne.n	801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
			if (!MoveToNextSequence(pending_data)) {
 801a762:	464a      	mov	r2, r9
 801a764:	4620      	mov	r0, r4
 801a766:	f7fe ff53 	bl	8019610 <_ZN7Sensors18MoveToNextSequenceEP10SensorDatab>
 801a76a:	b998      	cbnz	r0, 801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
				if (!MoveToNextData(pending_sensor)) {
 801a76c:	464a      	mov	r2, r9
 801a76e:	4639      	mov	r1, r7
 801a770:	4620      	mov	r0, r4
 801a772:	f7fe ff19 	bl	80195a8 <_ZN7Sensors14MoveToNextDataEP6Sensorb>
 801a776:	b968      	cbnz	r0, 801a794 <_ZN7Sensors21ReceiveDelayInterruptEh+0x11c>
      { return __normal_iterator(_M_current + __n); }
 801a778:	4628      	mov	r0, r5
 801a77a:	7b61      	ldrb	r1, [r4, #13]
 801a77c:	f850 3f64 	ldr.w	r3, [r0, #100]!
					interface->pending_sensors.erase(interface->pending_sensors.begin() + delayed_index);
 801a780:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a784:	f7fe fac7 	bl	8018d16 <_ZNSt6vectorIP6SensorSaIS1_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS1_S3_EE.isra.0>
					ProccessGroupTermination(interface, pending_group);
 801a788:	4642      	mov	r2, r8
 801a78a:	4629      	mov	r1, r5
 801a78c:	4620      	mov	r0, r4
 801a78e:	f7fe fc8b 	bl	80190a8 <_ZN7Sensors24ProccessGroupTerminationEP12I2CInterfaceP11SensorGroup>
 801a792:	e7b3      	b.n	801a6fc <_ZN7Sensors21ReceiveDelayInterruptEh+0x84>
	return ReadNextSensor(ID);
 801a794:	4631      	mov	r1, r6
 801a796:	4620      	mov	r0, r4
}
 801a798:	b003      	add	sp, #12
 801a79a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return ReadNextSensor(ID);
 801a79e:	f7ff ba2f 	b.w	8019c00 <_ZN7Sensors14ReadNextSensorEh>
}
 801a7a2:	b003      	add	sp, #12
 801a7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7a8:	cccccccd 	.word	0xcccccccd
 801a7ac:	aaaaaaab 	.word	0xaaaaaaab

0801a7b0 <_ZN7Sensors16HardwareDelayISREPvh>:
void Sensors::HardwareDelayISR(void* context, uint8_t ID) {
 801a7b0:	b538      	push	{r3, r4, r5, lr}
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	460d      	mov	r5, r1
	osSemaphoreAcquire(self->SensorsSemaphore, osWaitForever);
 801a7b6:	6800      	ldr	r0, [r0, #0]
 801a7b8:	f04f 31ff 	mov.w	r1, #4294967295
 801a7bc:	f7f2 fb36 	bl	800ce2c <osSemaphoreAcquire>
	osSemaphoreRelease(self->SensorsSemaphore);
 801a7c0:	6820      	ldr	r0, [r4, #0]
 801a7c2:	f7f2 fb67 	bl	800ce94 <osSemaphoreRelease>
	self->ReceiveDelayInterrupt(ID);
 801a7c6:	4629      	mov	r1, r5
 801a7c8:	4620      	mov	r0, r4
}
 801a7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	self->ReceiveDelayInterrupt(ID);
 801a7ce:	f7ff bf53 	b.w	801a678 <_ZN7Sensors21ReceiveDelayInterruptEh>
	...

0801a7d4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>:
      at(size_type __n)
 801a7d4:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a7d6:	e9d0 5400 	ldrd	r5, r4, [r0]
 801a7da:	1b64      	subs	r4, r4, r5
	if (__n >= this->size())
 801a7dc:	ebb1 1f24 	cmp.w	r1, r4, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a7e0:	ea4f 1224 	mov.w	r2, r4, asr #4
	if (__n >= this->size())
 801a7e4:	d302      	bcc.n	801a7ec <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801a7e6:	4803      	ldr	r0, [pc, #12]	@ (801a7f4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj+0x20>)
 801a7e8:	f002 fa7b 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 801a7ec:	eb05 1001 	add.w	r0, r5, r1, lsl #4
 801a7f0:	bd38      	pop	{r3, r4, r5, pc}
 801a7f2:	bf00      	nop
 801a7f4:	0801dfb4 	.word	0x0801dfb4

0801a7f8 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a7fc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801a800:	4607      	mov	r7, r0
 801a802:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a804:	4293      	cmp	r3, r2
 801a806:	d005      	beq.n	801a814 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a808:	880a      	ldrh	r2, [r1, #0]
 801a80a:	f823 2b02 	strh.w	r2, [r3], #2
	    ++this->_M_impl._M_finish;
 801a80e:	6043      	str	r3, [r0, #4]
      }
 801a810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a814:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801a818:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a81c:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801a820:	ebb2 0f66 	cmp.w	r2, r6, asr #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a824:	ea4f 0466 	mov.w	r4, r6, asr #1
	if (max_size() - size() < __n)
 801a828:	d102      	bne.n	801a830 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801a82a:	4818      	ldr	r0, [pc, #96]	@ (801a88c <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x94>)
 801a82c:	f002 fa56 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801a830:	4543      	cmp	r3, r8
 801a832:	bf14      	ite	ne
 801a834:	4621      	movne	r1, r4
 801a836:	2101      	moveq	r1, #1
 801a838:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a83a:	d222      	bcs.n	801a882 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a83c:	b31c      	cbz	r4, 801a886 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x8e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a83e:	4294      	cmp	r4, r2
 801a840:	bf28      	it	cs
 801a842:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a844:	0060      	lsls	r0, r4, #1
 801a846:	f002 f994 	bl	801cb72 <_Znwj>
 801a84a:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a84c:	f8b9 3000 	ldrh.w	r3, [r9]
      if (__count > 0)
 801a850:	2e00      	cmp	r6, #0
 801a852:	53ab      	strh	r3, [r5, r6]
 801a854:	dd04      	ble.n	801a860 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a856:	4632      	mov	r2, r6
 801a858:	4641      	mov	r1, r8
 801a85a:	4628      	mov	r0, r5
 801a85c:	f003 f906 	bl	801da6c <memmove>
	      ++__new_finish;
 801a860:	3602      	adds	r6, #2
 801a862:	442e      	add	r6, r5
	if (__p)
 801a864:	f1b8 0f00 	cmp.w	r8, #0
 801a868:	d005      	beq.n	801a876 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801a86a:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a86c:	4640      	mov	r0, r8
 801a86e:	eba1 0108 	sub.w	r1, r1, r8
 801a872:	f002 f959 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801a876:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801a87a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
 801a87e:	60bd      	str	r5, [r7, #8]
      }
 801a880:	e7c6      	b.n	801a810 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a882:	4614      	mov	r4, r2
 801a884:	e7de      	b.n	801a844 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a886:	4625      	mov	r5, r4
 801a888:	e7e0      	b.n	801a84c <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_+0x54>
 801a88a:	bf00      	nop
 801a88c:	0801dd74 	.word	0x0801dd74

0801a890 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a894:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801a898:	4607      	mov	r7, r0
 801a89a:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a89c:	4293      	cmp	r3, r2
 801a89e:	d005      	beq.n	801a8ac <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a8a0:	680a      	ldr	r2, [r1, #0]
 801a8a2:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 801a8a6:	6043      	str	r3, [r0, #4]
      }
 801a8a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a8ac:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801a8b0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a8b4:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801a8b8:	ebb2 0fa6 	cmp.w	r2, r6, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a8bc:	ea4f 04a6 	mov.w	r4, r6, asr #2
	if (max_size() - size() < __n)
 801a8c0:	d102      	bne.n	801a8c8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801a8c2:	4818      	ldr	r0, [pc, #96]	@ (801a924 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x94>)
 801a8c4:	f002 fa0a 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801a8c8:	4543      	cmp	r3, r8
 801a8ca:	bf14      	ite	ne
 801a8cc:	4621      	movne	r1, r4
 801a8ce:	2101      	moveq	r1, #1
 801a8d0:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a8d2:	d222      	bcs.n	801a91a <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x8a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a8d4:	b31c      	cbz	r4, 801a91e <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x8e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a8d6:	4294      	cmp	r4, r2
 801a8d8:	bf28      	it	cs
 801a8da:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a8dc:	00a0      	lsls	r0, r4, #2
 801a8de:	f002 f948 	bl	801cb72 <_Znwj>
 801a8e2:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a8e4:	f8d9 3000 	ldr.w	r3, [r9]
      if (__count > 0)
 801a8e8:	2e00      	cmp	r6, #0
 801a8ea:	51ab      	str	r3, [r5, r6]
 801a8ec:	dd04      	ble.n	801a8f8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a8ee:	4632      	mov	r2, r6
 801a8f0:	4641      	mov	r1, r8
 801a8f2:	4628      	mov	r0, r5
 801a8f4:	f003 f8ba 	bl	801da6c <memmove>
	      ++__new_finish;
 801a8f8:	3604      	adds	r6, #4
 801a8fa:	442e      	add	r6, r5
	if (__p)
 801a8fc:	f1b8 0f00 	cmp.w	r8, #0
 801a900:	d005      	beq.n	801a90e <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x7e>
		    this->_M_impl._M_end_of_storage - __old_start);
 801a902:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a904:	4640      	mov	r0, r8
 801a906:	eba1 0108 	sub.w	r1, r1, r8
 801a90a:	f002 f90d 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801a90e:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801a912:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801a916:	60bd      	str	r5, [r7, #8]
      }
 801a918:	e7c6      	b.n	801a8a8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a91a:	4614      	mov	r4, r2
 801a91c:	e7de      	b.n	801a8dc <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a91e:	4625      	mov	r5, r4
 801a920:	e7e0      	b.n	801a8e4 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
 801a922:	bf00      	nop
 801a924:	0801dd74 	.word	0x0801dd74

0801a928 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a92c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801a930:	4607      	mov	r7, r0
 801a932:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a934:	4293      	cmp	r3, r2
 801a936:	d006      	beq.n	801a946 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a93c:	e8e3 0102 	strd	r0, r1, [r3], #8
	    ++this->_M_impl._M_finish;
 801a940:	607b      	str	r3, [r7, #4]
      }
 801a942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a946:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801a94a:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a94e:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801a952:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a956:	ea4f 04e6 	mov.w	r4, r6, asr #3
	if (max_size() - size() < __n)
 801a95a:	d102      	bne.n	801a962 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x3a>
	  __throw_length_error(__N(__s));
 801a95c:	4818      	ldr	r0, [pc, #96]	@ (801a9c0 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x98>)
 801a95e:	f002 f9bd 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801a962:	4543      	cmp	r3, r8
 801a964:	bf14      	ite	ne
 801a966:	4621      	movne	r1, r4
 801a968:	2101      	moveq	r1, #1
 801a96a:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a96c:	d224      	bcs.n	801a9b8 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x90>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a96e:	b32c      	cbz	r4, 801a9bc <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x94>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a970:	4294      	cmp	r4, r2
 801a972:	bf28      	it	cs
 801a974:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a976:	00e0      	lsls	r0, r4, #3
 801a978:	f002 f8fb 	bl	801cb72 <_Znwj>
 801a97c:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a97e:	19ab      	adds	r3, r5, r6
      if (__count > 0)
 801a980:	2e00      	cmp	r6, #0
 801a982:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a986:	e9c3 0100 	strd	r0, r1, [r3]
 801a98a:	dd04      	ble.n	801a996 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x6e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801a98c:	4632      	mov	r2, r6
 801a98e:	4641      	mov	r1, r8
 801a990:	4628      	mov	r0, r5
 801a992:	f003 f86b 	bl	801da6c <memmove>
	      ++__new_finish;
 801a996:	3608      	adds	r6, #8
 801a998:	442e      	add	r6, r5
	if (__p)
 801a99a:	f1b8 0f00 	cmp.w	r8, #0
 801a99e:	d005      	beq.n	801a9ac <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x84>
		    this->_M_impl._M_end_of_storage - __old_start);
 801a9a0:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a9a2:	4640      	mov	r0, r8
 801a9a4:	eba1 0108 	sub.w	r1, r1, r8
 801a9a8:	f002 f8be 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801a9ac:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801a9b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801a9b4:	60bd      	str	r5, [r7, #8]
      }
 801a9b6:	e7c4      	b.n	801a942 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x1a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801a9b8:	4614      	mov	r4, r2
 801a9ba:	e7dc      	b.n	801a976 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x4e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801a9bc:	4625      	mov	r5, r4
 801a9be:	e7de      	b.n	801a97e <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_+0x56>
 801a9c0:	0801dd74 	.word	0x0801dd74

0801a9c4 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 801a9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a9c8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
      vector<_Tp, _Alloc>::
 801a9cc:	4607      	mov	r7, r0
 801a9ce:	4689      	mov	r9, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801a9d0:	4293      	cmp	r3, r2
 801a9d2:	d005      	beq.n	801a9e0 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801a9d4:	680a      	ldr	r2, [r1, #0]
 801a9d6:	f843 2b04 	str.w	r2, [r3], #4
	    ++this->_M_impl._M_finish;
 801a9da:	6043      	str	r3, [r0, #4]
      }
 801a9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a9e0:	f8d0 8000 	ldr.w	r8, [r0]
	if (max_size() - size() < __n)
 801a9e4:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a9e8:	eba3 0608 	sub.w	r6, r3, r8
	if (max_size() - size() < __n)
 801a9ec:	ebb2 0fa6 	cmp.w	r2, r6, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801a9f0:	ea4f 04a6 	mov.w	r4, r6, asr #2
	if (max_size() - size() < __n)
 801a9f4:	d102      	bne.n	801a9fc <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x38>
	  __throw_length_error(__N(__s));
 801a9f6:	4818      	ldr	r0, [pc, #96]	@ (801aa58 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x94>)
 801a9f8:	f002 f970 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801a9fc:	4543      	cmp	r3, r8
 801a9fe:	bf14      	ite	ne
 801aa00:	4621      	movne	r1, r4
 801aa02:	2101      	moveq	r1, #1
 801aa04:	1864      	adds	r4, r4, r1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801aa06:	d223      	bcs.n	801aa50 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801aa08:	b324      	cbz	r4, 801aa54 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x90>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801aa0a:	4294      	cmp	r4, r2
 801aa0c:	bf28      	it	cs
 801aa0e:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801aa10:	00a0      	lsls	r0, r4, #2
 801aa12:	f002 f8ae 	bl	801cb72 <_Znwj>
 801aa16:	4605      	mov	r5, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801aa18:	19ab      	adds	r3, r5, r6
 801aa1a:	f8d9 2000 	ldr.w	r2, [r9]
      if (__count > 0)
 801aa1e:	2e00      	cmp	r6, #0
 801aa20:	601a      	str	r2, [r3, #0]
 801aa22:	dd04      	ble.n	801aa2e <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801aa24:	4632      	mov	r2, r6
 801aa26:	4641      	mov	r1, r8
 801aa28:	4628      	mov	r0, r5
 801aa2a:	f003 f81f 	bl	801da6c <memmove>
	      ++__new_finish;
 801aa2e:	3604      	adds	r6, #4
 801aa30:	442e      	add	r6, r5
	if (__p)
 801aa32:	f1b8 0f00 	cmp.w	r8, #0
 801aa36:	d005      	beq.n	801aa44 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 801aa38:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801aa3a:	4640      	mov	r0, r8
 801aa3c:	eba1 0108 	sub.w	r1, r1, r8
 801aa40:	f002 f872 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801aa44:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801aa48:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801aa4c:	60bd      	str	r5, [r7, #8]
      }
 801aa4e:	e7c5      	b.n	801a9dc <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x18>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801aa50:	4614      	mov	r4, r2
 801aa52:	e7dd      	b.n	801aa10 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x4c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801aa54:	4625      	mov	r5, r4
 801aa56:	e7df      	b.n	801aa18 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
 801aa58:	0801dd74 	.word	0x0801dd74

0801aa5c <_ZN7Sensors21AddMemoryReadSequenceEhttt>:
bool Sensors::AddMemoryReadSequence(uint8_t sensor_ID, uint16_t sensor_register, uint16_t memory_address, uint16_t size) {
 801aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa60:	b096      	sub	sp, #88	@ 0x58
 801aa62:	4698      	mov	r8, r3
 801aa64:	4604      	mov	r4, r0
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801aa66:	f10d 0307 	add.w	r3, sp, #7
bool Sensors::AddMemoryReadSequence(uint8_t sensor_ID, uint16_t sensor_register, uint16_t memory_address, uint16_t size) {
 801aa6a:	f8bd 7070 	ldrh.w	r7, [sp, #112]	@ 0x70
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801aa6e:	f7fe fcee 	bl	801944e <_ZN7Sensors14FindSensorDataEhtPb>
	if (!success) return false;
 801aa72:	f89d 6007 	ldrb.w	r6, [sp, #7]
	SensorData* sensor_data = FindSensorData(sensor_ID, sensor_register, &success);
 801aa76:	4605      	mov	r5, r0
	if (!success) return false;
 801aa78:	b926      	cbnz	r6, 801aa84 <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x28>
 801aa7a:	2600      	movs	r6, #0
}
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	b016      	add	sp, #88	@ 0x58
 801aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (size > SENSOR_BUFFER_SIZE) return false; 								// Check that the sensor read buffer has enough space to save the read value
 801aa84:	2f40      	cmp	r7, #64	@ 0x40
 801aa86:	d8f8      	bhi.n	801aa7a <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x1e>
	if (size > registers->GetTypeSize(sensor_data->type)) return false;			// Check that the size doesn't exceed the register type size
 801aa88:	79c1      	ldrb	r1, [r0, #7]
 801aa8a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aa8e:	f7fd fee5 	bl	801885c <_ZN9Registers11GetTypeSizeEh>
 801aa92:	42b8      	cmp	r0, r7
 801aa94:	d3f1      	bcc.n	801aa7a <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x1e>
	I2C_access.access_mode = MEM_READ_MODE;
 801aa96:	2301      	movs	r3, #1
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801aa98:	f04f 31ff 	mov.w	r1, #4294967295
 801aa9c:	6820      	ldr	r0, [r4, #0]
	I2C_access.access_mode = MEM_READ_MODE;
 801aa9e:	f88d 3008 	strb.w	r3, [sp, #8]
	I2C_access.memory_address = memory_address;
 801aaa2:	f8ad 800c 	strh.w	r8, [sp, #12]
	I2C_access.size = size;
 801aaa6:	f8ad 700a 	strh.w	r7, [sp, #10]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801aaaa:	f7f2 f9bf 	bl	800ce2c <osSemaphoreAcquire>
	sensor_data->sequence.push_back(I2C_access);
 801aaae:	f105 000c 	add.w	r0, r5, #12
 801aab2:	a902      	add	r1, sp, #8
 801aab4:	f7f5 faf8 	bl	80100a8 <_ZNSt6vectorI9I2CAccessSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(SensorsSemaphore);
 801aab8:	6820      	ldr	r0, [r4, #0]
 801aaba:	f7f2 f9eb 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801aabe:	e7dd      	b.n	801aa7c <_ZN7Sensors21AddMemoryReadSequenceEhttt+0x20>

0801aac0 <_ZN9Registers11AddRegisterItEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 801aac0:	b570      	push	{r4, r5, r6, lr}
 801aac2:	4604      	mov	r4, r0
 801aac4:	b086      	sub	sp, #24
 801aac6:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801aac8:	6800      	ldr	r0, [r0, #0]
 801aaca:	f04f 31ff 	mov.w	r1, #4294967295
 801aace:	f7f2 f9ad 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801aad2:	f10d 0207 	add.w	r2, sp, #7
 801aad6:	4631      	mov	r1, r6
 801aad8:	4620      	mov	r0, r4
 801aada:	f7fd fe16 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801aade:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801aae2:	b12d      	cbz	r5, 801aaf0 <_ZN9Registers11AddRegisterItEEbt+0x30>
		osSemaphoreRelease(RegistersSemaphore);
 801aae4:	6820      	ldr	r0, [r4, #0]
 801aae6:	f7f2 f9d5 	bl	800ce94 <osSemaphoreRelease>
		return false;
 801aaea:	2000      	movs	r0, #0
}
 801aaec:	b006      	add	sp, #24
 801aaee:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aaf0:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801aaf4:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801aaf8:	f7fe f852 	bl	8018ba0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	configuration_.register_info = register_;
 801aafc:	2301      	movs	r3, #1
 801aafe:	f8ad 600a 	strh.w	r6, [sp, #10]
 801ab02:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801ab06:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801ab0a:	f88d 000c 	strb.w	r0, [sp, #12]
 801ab0e:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801ab12:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801ab16:	b11b      	cbz	r3, 801ab20 <_ZN9Registers11AddRegisterItEEbt+0x60>
		registers.push_back(configuration_);
 801ab18:	a902      	add	r1, sp, #8
 801ab1a:	1d20      	adds	r0, r4, #4
 801ab1c:	f7f5 f988 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801ab20:	6820      	ldr	r0, [r4, #0]
 801ab22:	f7f2 f9b7 	bl	800ce94 <osSemaphoreRelease>
	return success;
 801ab26:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801ab2a:	e7df      	b.n	801aaec <_ZN9Registers11AddRegisterItEEbt+0x2c>

0801ab2c <_ZN9Registers11AddRegisterImEEbt>:
bool Registers::AddRegister(uint16_t ID) {
 801ab2c:	b570      	push	{r4, r5, r6, lr}
 801ab2e:	4604      	mov	r4, r0
 801ab30:	b086      	sub	sp, #24
 801ab32:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ab34:	6800      	ldr	r0, [r0, #0]
 801ab36:	f04f 31ff 	mov.w	r1, #4294967295
 801ab3a:	f7f2 f977 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801ab3e:	f10d 0207 	add.w	r2, sp, #7
 801ab42:	4631      	mov	r1, r6
 801ab44:	4620      	mov	r0, r4
 801ab46:	f7fd fde0 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801ab4a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801ab4e:	b12d      	cbz	r5, 801ab5c <_ZN9Registers11AddRegisterImEEbt+0x30>
		osSemaphoreRelease(RegistersSemaphore);
 801ab50:	6820      	ldr	r0, [r4, #0]
 801ab52:	f7f2 f99f 	bl	800ce94 <osSemaphoreRelease>
		return false;
 801ab56:	2000      	movs	r0, #0
}
 801ab58:	b006      	add	sp, #24
 801ab5a:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801ab5c:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801ab60:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801ab64:	f7fd ffce 	bl	8018b04 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	configuration_.register_info = register_;
 801ab68:	2301      	movs	r3, #1
 801ab6a:	f8ad 600a 	strh.w	r6, [sp, #10]
 801ab6e:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801ab72:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801ab76:	f88d 000c 	strb.w	r0, [sp, #12]
 801ab7a:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801ab7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801ab82:	b11b      	cbz	r3, 801ab8c <_ZN9Registers11AddRegisterImEEbt+0x60>
		registers.push_back(configuration_);
 801ab84:	a902      	add	r1, sp, #8
 801ab86:	1d20      	adds	r0, r4, #4
 801ab88:	f7f5 f952 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801ab8c:	6820      	ldr	r0, [r4, #0]
 801ab8e:	f7f2 f981 	bl	800ce94 <osSemaphoreRelease>
	return success;
 801ab92:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801ab96:	e7df      	b.n	801ab58 <_ZN9Registers11AddRegisterImEEbt+0x2c>

0801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801ab98:	b570      	push	{r4, r5, r6, lr}
 801ab9a:	4604      	mov	r4, r0
 801ab9c:	b086      	sub	sp, #24
 801ab9e:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801aba0:	6800      	ldr	r0, [r0, #0]
 801aba2:	f04f 31ff 	mov.w	r1, #4294967295
 801aba6:	f7f2 f941 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801abaa:	f10d 0207 	add.w	r2, sp, #7
 801abae:	4631      	mov	r1, r6
 801abb0:	4620      	mov	r0, r4
 801abb2:	f7fd fdaa 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801abb6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801abba:	b125      	cbz	r5, 801abc6 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801abbc:	6820      	ldr	r0, [r4, #0]
 801abbe:	f7f2 f969 	bl	800ce94 <osSemaphoreRelease>
}
 801abc2:	b006      	add	sp, #24
 801abc4:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801abc6:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801abca:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801abce:	f7fe f835 	bl	8018c3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801abd2:	2301      	movs	r3, #1
 801abd4:	f8ad 600a 	strh.w	r6, [sp, #10]
 801abd8:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801abdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801abe0:	f88d 000c 	strb.w	r0, [sp, #12]
 801abe4:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801abe8:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801abec:	2b00      	cmp	r3, #0
 801abee:	d0e5      	beq.n	801abbc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
		registers.push_back(configuration_);
 801abf0:	a902      	add	r1, sp, #8
 801abf2:	1d20      	adds	r0, r4, #4
 801abf4:	f7f5 f91c 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
 801abf8:	e7e0      	b.n	801abbc <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801abfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abfc:	460c      	mov	r4, r1
 801abfe:	b087      	sub	sp, #28
 801ac00:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ac02:	f04f 31ff 	mov.w	r1, #4294967295
 801ac06:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801ac08:	461e      	mov	r6, r3
 801ac0a:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ac0c:	f7f2 f90e 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ac10:	4621      	mov	r1, r4
 801ac12:	f10d 0207 	add.w	r2, sp, #7
 801ac16:	4628      	mov	r0, r5
 801ac18:	f7fd fd77 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ac1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ac20:	4604      	mov	r4, r0
	if (!success) {
 801ac22:	b923      	cbnz	r3, 801ac2e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801ac24:	6828      	ldr	r0, [r5, #0]
 801ac26:	f7f2 f935 	bl	800ce94 <osSemaphoreRelease>
}
 801ac2a:	b007      	add	sp, #28
 801ac2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801ac2e:	f10d 0007 	add.w	r0, sp, #7
 801ac32:	f7fe f803 	bl	8018c3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801ac36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d0f2      	beq.n	801ac24 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801ac3e:	7923      	ldrb	r3, [r4, #4]
 801ac40:	4298      	cmp	r0, r3
 801ac42:	d1ef      	bne.n	801ac24 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ac44:	3004      	adds	r0, #4
 801ac46:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	d0ea      	beq.n	801ac24 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801ac4e:	7823      	ldrb	r3, [r4, #0]
 801ac50:	b983      	cbnz	r3, 801ac74 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801ac52:	7863      	ldrb	r3, [r4, #1]
 801ac54:	b973      	cbnz	r3, 801ac74 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801ac56:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801ac58:	a902      	add	r1, sp, #8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ac5a:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801ac5e:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801ac62:	1a9b      	subs	r3, r3, r2
 801ac64:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ac66:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ac68:	f7f5 ff1e 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801ac6c:	2301      	movs	r3, #1
 801ac6e:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801ac70:	7223      	strb	r3, [r4, #8]
 801ac72:	e7d7      	b.n	801ac24 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ac74:	8961      	ldrh	r1, [r4, #10]
 801ac76:	f7f5 fddd 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->write = write;
 801ac7a:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801ac7e:	e7f5      	b.n	801ac6c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801ac80 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801ac80:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ac82:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
      push_back(const value_type& __x)
 801ac86:	4605      	mov	r5, r0
 801ac88:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ac8a:	429c      	cmp	r4, r3
 801ac8c:	d005      	beq.n	801ac9a <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_+0x1a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801ac8e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801ac90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801ac94:	3410      	adds	r4, #16
 801ac96:	606c      	str	r4, [r5, #4]
      }
 801ac98:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
 801ac9a:	4621      	mov	r1, r4
 801ac9c:	f7fc fec4 	bl	8017a28 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 801aca0:	e7fa      	b.n	801ac98 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_+0x18>

0801aca2 <_ZN9Registers18AddRegisterPointerItEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801aca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aca4:	460c      	mov	r4, r1
 801aca6:	b087      	sub	sp, #28
 801aca8:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801acaa:	f04f 31ff 	mov.w	r1, #4294967295
 801acae:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801acb0:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801acb2:	f7f2 f8bb 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801acb6:	4621      	mov	r1, r4
 801acb8:	f10d 0207 	add.w	r2, sp, #7
 801acbc:	4628      	mov	r0, r5
 801acbe:	f7fd fd24 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801acc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801acc6:	4604      	mov	r4, r0
	if (!success) {
 801acc8:	b933      	cbnz	r3, 801acd8 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x36>
		return false;
 801acca:	2700      	movs	r7, #0
		osSemaphoreRelease(RegistersSemaphore);
 801accc:	6828      	ldr	r0, [r5, #0]
 801acce:	f7f2 f8e1 	bl	800ce94 <osSemaphoreRelease>
}
 801acd2:	4638      	mov	r0, r7
 801acd4:	b007      	add	sp, #28
 801acd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801acd8:	f10d 0007 	add.w	r0, sp, #7
 801acdc:	f7fd ff60 	bl	8018ba0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 801ace0:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801ace4:	2f00      	cmp	r7, #0
 801ace6:	d0f0      	beq.n	801acca <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (target_register->register_info.type != registered_type) {
 801ace8:	7923      	ldrb	r3, [r4, #4]
 801acea:	4283      	cmp	r3, r0
 801acec:	d1ed      	bne.n	801acca <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801acee:	3304      	adds	r3, #4
 801acf0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801acf4:	2800      	cmp	r0, #0
 801acf6:	d0e8      	beq.n	801acca <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801acf8:	7823      	ldrb	r3, [r4, #0]
 801acfa:	b99b      	cbnz	r3, 801ad24 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x82>
 801acfc:	7863      	ldrb	r3, [r4, #1]
 801acfe:	b98b      	cbnz	r3, 801ad24 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x82>
		target_callback_list->push_back(callback);
 801ad00:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801ad02:	9602      	str	r6, [sp, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ad04:	e9d0 2300 	ldrd	r2, r3, [r0]
 801ad08:	1a9b      	subs	r3, r3, r2
 801ad0a:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ad0c:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ad0e:	f7ff ffb7 	bl	801ac80 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801ad12:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801ad14:	6828      	ldr	r0, [r5, #0]
	target_register->mode.pointer = true;
 801ad16:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801ad18:	f240 1301 	movw	r3, #257	@ 0x101
 801ad1c:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801ad1e:	f7f2 f8b9 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801ad22:	e7d6      	b.n	801acd2 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x30>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ad24:	8961      	ldrh	r1, [r4, #10]
 801ad26:	f7ff fd55 	bl	801a7d4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>
		callback->pointer = pointer;
 801ad2a:	6006      	str	r6, [r0, #0]
 801ad2c:	e7f1      	b.n	801ad12 <_ZN9Registers18AddRegisterPointerItEEbtPT_+0x70>

0801ad2e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801ad2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad30:	460c      	mov	r4, r1
 801ad32:	b087      	sub	sp, #28
 801ad34:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ad36:	f04f 31ff 	mov.w	r1, #4294967295
 801ad3a:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801ad3c:	461e      	mov	r6, r3
 801ad3e:	4617      	mov	r7, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ad40:	f7f2 f874 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ad44:	4621      	mov	r1, r4
 801ad46:	f10d 0207 	add.w	r2, sp, #7
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	f7fd fcdd 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ad50:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ad54:	4604      	mov	r4, r0
	if (!success) {
 801ad56:	b923      	cbnz	r3, 801ad62 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x34>
	osSemaphoreRelease(RegistersSemaphore);
 801ad58:	6828      	ldr	r0, [r5, #0]
 801ad5a:	f7f2 f89b 	bl	800ce94 <osSemaphoreRelease>
}
 801ad5e:	b007      	add	sp, #28
 801ad60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801ad62:	f10d 0007 	add.w	r0, sp, #7
 801ad66:	f7fd ff1b 	bl	8018ba0 <_ZN9Registers9GetTypeIDItEEhPb.isra.0>
	if (!success) {
 801ad6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d0f2      	beq.n	801ad58 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (target_register->register_info.type != registered_type) {
 801ad72:	7923      	ldrb	r3, [r4, #4]
 801ad74:	4298      	cmp	r0, r3
 801ad76:	d1ef      	bne.n	801ad58 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ad78:	3004      	adds	r0, #4
 801ad7a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ad7e:	2800      	cmp	r0, #0
 801ad80:	d0ea      	beq.n	801ad58 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801ad82:	7823      	ldrb	r3, [r4, #0]
 801ad84:	b983      	cbnz	r3, 801ada8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
 801ad86:	7863      	ldrb	r3, [r4, #1]
 801ad88:	b973      	cbnz	r3, 801ada8 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x7a>
		callback.read = NULL;
 801ad8a:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801ad8c:	a902      	add	r1, sp, #8
 801ad8e:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801ad92:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801ad96:	1a9b      	subs	r3, r3, r2
 801ad98:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ad9a:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ad9c:	f7ff ff70 	bl	801ac80 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801ada0:	2301      	movs	r3, #1
 801ada2:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801ada4:	7223      	strb	r3, [r4, #8]
 801ada6:	e7d7      	b.n	801ad58 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x2a>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ada8:	8961      	ldrh	r1, [r4, #10]
 801adaa:	f7ff fd13 	bl	801a7d4 <_ZNSt6vectorI17RegisterCallbacksItESaIS1_EE2atEj>
		callback->write = write;
 801adae:	e9c0 7601 	strd	r7, r6, [r0, #4]
 801adb2:	e7f5      	b.n	801ada0 <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0+0x72>

0801adb4 <_ZN9Registers18AddRegisterPointerImEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adb6:	460c      	mov	r4, r1
 801adb8:	b087      	sub	sp, #28
 801adba:	4605      	mov	r5, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801adbc:	f04f 31ff 	mov.w	r1, #4294967295
 801adc0:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801adc2:	4616      	mov	r6, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801adc4:	f7f2 f832 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801adc8:	4621      	mov	r1, r4
 801adca:	f10d 0207 	add.w	r2, sp, #7
 801adce:	4628      	mov	r0, r5
 801add0:	f7fd fc9b 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801add4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801add8:	4604      	mov	r4, r0
	if (!success) {
 801adda:	b933      	cbnz	r3, 801adea <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x36>
		return false;
 801addc:	2700      	movs	r7, #0
		osSemaphoreRelease(RegistersSemaphore);
 801adde:	6828      	ldr	r0, [r5, #0]
 801ade0:	f7f2 f858 	bl	800ce94 <osSemaphoreRelease>
}
 801ade4:	4638      	mov	r0, r7
 801ade6:	b007      	add	sp, #28
 801ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801adea:	f10d 0007 	add.w	r0, sp, #7
 801adee:	f7fd fe89 	bl	8018b04 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801adf2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 801adf6:	2f00      	cmp	r7, #0
 801adf8:	d0f0      	beq.n	801addc <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (target_register->register_info.type != registered_type) {
 801adfa:	7923      	ldrb	r3, [r4, #4]
 801adfc:	4283      	cmp	r3, r0
 801adfe:	d1ed      	bne.n	801addc <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (callbacks[target_register->register_info.type] == NULL) {
 801ae00:	3304      	adds	r3, #4
 801ae02:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801ae06:	2800      	cmp	r0, #0
 801ae08:	d0e8      	beq.n	801addc <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x28>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801ae0a:	7823      	ldrb	r3, [r4, #0]
 801ae0c:	b99b      	cbnz	r3, 801ae36 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x82>
 801ae0e:	7863      	ldrb	r3, [r4, #1]
 801ae10:	b98b      	cbnz	r3, 801ae36 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x82>
		target_callback_list->push_back(callback);
 801ae12:	a902      	add	r1, sp, #8
		callback.pointer = pointer;
 801ae14:	9602      	str	r6, [sp, #8]
 801ae16:	e9d0 2300 	ldrd	r2, r3, [r0]
 801ae1a:	1a9b      	subs	r3, r3, r2
 801ae1c:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801ae1e:	8163      	strh	r3, [r4, #10]
		target_callback_list->push_back(callback);
 801ae20:	f7f9 fa88 	bl	8014334 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.pointer = true;
 801ae24:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801ae26:	6828      	ldr	r0, [r5, #0]
	target_register->mode.pointer = true;
 801ae28:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801ae2a:	f240 1301 	movw	r3, #257	@ 0x101
 801ae2e:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801ae30:	f7f2 f830 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801ae34:	e7d6      	b.n	801ade4 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x30>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801ae36:	8961      	ldrh	r1, [r4, #10]
 801ae38:	f7f8 ff86 	bl	8013d48 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->pointer = pointer;
 801ae3c:	6006      	str	r6, [r0, #0]
 801ae3e:	e7f1      	b.n	801ae24 <_ZN9Registers18AddRegisterPointerImEEbtPT_+0x70>

0801ae40 <_ZN7Sensors12AddRegistersEv>:
void Sensors::AddRegisters(void) {
 801ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae42:	4604      	mov	r4, r0
 801ae44:	b087      	sub	sp, #28
	registers->AddRegister<uint8_t>(REG_SENSORS_READING_STATUS);
 801ae46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ae4a:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 801ae4e:	f7ff fea3 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_READING_STATUS);
 801ae52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ae56:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801ae5a:	f7fd fc8f 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddReadCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801ae5e:	f8d4 608c 	ldr.w	r6, [r4, #140]	@ 0x8c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801ae62:	f04f 31ff 	mov.w	r1, #4294967295
 801ae66:	6830      	ldr	r0, [r6, #0]
 801ae68:	f7f1 ffe0 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ae6c:	f10d 0207 	add.w	r2, sp, #7
 801ae70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ae74:	4630      	mov	r0, r6
 801ae76:	f7fd fc48 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801ae7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801ae7e:	4605      	mov	r5, r0
	if (!success) {
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	f040 80bf 	bne.w	801b004 <_ZN7Sensors12AddRegistersEv+0x1c4>
	osSemaphoreRelease(RegistersSemaphore);
 801ae86:	6830      	ldr	r0, [r6, #0]
 801ae88:	f7f2 f804 	bl	800ce94 <osSemaphoreRelease>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_READING_STATUS, (void*) this,
 801ae8c:	4b89      	ldr	r3, [pc, #548]	@ (801b0b4 <_ZN7Sensors12AddRegistersEv+0x274>)
 801ae8e:	4622      	mov	r2, r4
 801ae90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ae94:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801ae98:	f7ff feaf 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_GROUP_STATUS);
 801ae9c:	f240 2101 	movw	r1, #513	@ 0x201
 801aea0:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aea4:	f7ff fe78 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_STATUS, 2);
 801aea8:	2202      	movs	r2, #2
 801aeaa:	f240 2101 	movw	r1, #513	@ 0x201
 801aeae:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aeb2:	f7fd fc7f 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_GROUP_STATUS, (void*) this,
 801aeb6:	4b80      	ldr	r3, [pc, #512]	@ (801b0b8 <_ZN7Sensors12AddRegistersEv+0x278>)
 801aeb8:	4622      	mov	r2, r4
 801aeba:	f240 2101 	movw	r1, #513	@ 0x201
 801aebe:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aec2:	f7ff fe9a 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS);
 801aec6:	f240 2102 	movw	r1, #514	@ 0x202
 801aeca:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aece:	f7ff fe63 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_GROUPS);
 801aed2:	f240 2102 	movw	r1, #514	@ 0x202
 801aed6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aeda:	f7fd fc4f 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_GROUPS, (void*) this,
 801aede:	4b77      	ldr	r3, [pc, #476]	@ (801b0bc <_ZN7Sensors12AddRegistersEv+0x27c>)
 801aee0:	4622      	mov	r2, r4
 801aee2:	f240 2102 	movw	r1, #514	@ 0x202
 801aee6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aeea:	f7ff fe86 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_SENSOR_STATUS);
 801aeee:	f240 2103 	movw	r1, #515	@ 0x203
 801aef2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801aef6:	f7ff fe4f 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SENSORS_SENSOR_STATUS, 2);
 801aefa:	2202      	movs	r2, #2
 801aefc:	f240 2103 	movw	r1, #515	@ 0x203
 801af00:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af04:	f7fd fc56 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_SENSOR_STATUS, (void*) this,
 801af08:	4b6d      	ldr	r3, [pc, #436]	@ (801b0c0 <_ZN7Sensors12AddRegistersEv+0x280>)
 801af0a:	4622      	mov	r2, r4
 801af0c:	f240 2103 	movw	r1, #515	@ 0x203
 801af10:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af14:	f7ff fe71 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS);
 801af18:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801af1c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af20:	f7ff fe3a 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_SENSORS);
 801af24:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801af28:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af2c:	f7fd fc26 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_SENSORS, (void*) this,
 801af30:	4b64      	ldr	r3, [pc, #400]	@ (801b0c4 <_ZN7Sensors12AddRegistersEv+0x284>)
 801af32:	4622      	mov	r2, r4
 801af34:	f44f 7101 	mov.w	r1, #516	@ 0x204
 801af38:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af3c:	f7ff fe5d 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_DATA_STATUS);
 801af40:	f240 2105 	movw	r1, #517	@ 0x205
 801af44:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af48:	f7ff fdba 	bl	801aac0 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DATA_STATUS, 3);
 801af4c:	2203      	movs	r2, #3
 801af4e:	f240 2105 	movw	r1, #517	@ 0x205
 801af52:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af56:	f7fd fc2d 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_DATA_STATUS, (void*) this,
 801af5a:	4b5b      	ldr	r3, [pc, #364]	@ (801b0c8 <_ZN7Sensors12AddRegistersEv+0x288>)
 801af5c:	4622      	mov	r2, r4
 801af5e:	f240 2105 	movw	r1, #517	@ 0x205
 801af62:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af66:	f7ff fee2 	bl	801ad2e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801af6a:	f240 2106 	movw	r1, #518	@ 0x206
 801af6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af72:	f7ff fe11 	bl	801ab98 <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SENSORS_DEACTIVATE_ALL_DATA);
 801af76:	f240 2106 	movw	r1, #518	@ 0x206
 801af7a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af7e:	f7fd fbfd 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SENSORS_DEACTIVATE_ALL_DATA, (void*) this,
 801af82:	4b52      	ldr	r3, [pc, #328]	@ (801b0cc <_ZN7Sensors12AddRegistersEv+0x28c>)
 801af84:	4622      	mov	r2, r4
 801af86:	f240 2106 	movw	r1, #518	@ 0x206
 801af8a:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af8e:	f7ff fe34 	bl	801abfa <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint16_t>(REG_SENSORS_GROUP_PRESCALER);
 801af92:	f240 2107 	movw	r1, #519	@ 0x207
 801af96:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801af9a:	f7ff fd91 	bl	801aac0 <_ZN9Registers11AddRegisterItEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_GROUP_PRESCALER, 2);
 801af9e:	2202      	movs	r2, #2
 801afa0:	f240 2107 	movw	r1, #519	@ 0x207
 801afa4:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801afa8:	f7fd fc04 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint16_t>(REG_SENSORS_GROUP_PRESCALER, (void*) this,
 801afac:	4b48      	ldr	r3, [pc, #288]	@ (801b0d0 <_ZN7Sensors12AddRegistersEv+0x290>)
 801afae:	4622      	mov	r2, r4
 801afb0:	f240 2107 	movw	r1, #519	@ 0x207
 801afb4:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801afb8:	f7ff feb9 	bl	801ad2e <_ZN9Registers16AddWriteCallbackItEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint32_t>(REG_SENSORS_DETECT_SENSORS);
 801afbc:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801afc0:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801afc4:	f7ff fdb2 	bl	801ab2c <_ZN9Registers11AddRegisterImEEbt>
	registers->SetRegisterAsArray(REG_SENSORS_DETECT_SENSORS, 2);
 801afc8:	2202      	movs	r2, #2
 801afca:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801afce:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801afd2:	f7fd fbef 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint32_t>(REG_SENSORS_DETECT_SENSORS, (void*) this,
 801afd6:	f8d4 608c 	ldr.w	r6, [r4, #140]	@ 0x8c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801afda:	f04f 31ff 	mov.w	r1, #4294967295
 801afde:	6830      	ldr	r0, [r6, #0]
 801afe0:	f7f1 ff24 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801afe4:	f10d 0207 	add.w	r2, sp, #7
 801afe8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 801afec:	4630      	mov	r0, r6
 801afee:	f7fd fb8c 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801aff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801aff6:	4605      	mov	r5, r0
	if (!success) {
 801aff8:	bb8b      	cbnz	r3, 801b05e <_ZN7Sensors12AddRegistersEv+0x21e>
	osSemaphoreRelease(RegistersSemaphore);
 801affa:	6830      	ldr	r0, [r6, #0]
 801affc:	f7f1 ff4a 	bl	800ce94 <osSemaphoreRelease>
}
 801b000:	b007      	add	sp, #28
 801b002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801b004:	f10d 0007 	add.w	r0, sp, #7
 801b008:	f7fd fe18 	bl	8018c3c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801b00c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b010:	2b00      	cmp	r3, #0
 801b012:	f43f af38 	beq.w	801ae86 <_ZN7Sensors12AddRegistersEv+0x46>
	if (target_register->register_info.type != registered_type) {
 801b016:	792b      	ldrb	r3, [r5, #4]
 801b018:	4298      	cmp	r0, r3
 801b01a:	f47f af34 	bne.w	801ae86 <_ZN7Sensors12AddRegistersEv+0x46>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b01e:	3004      	adds	r0, #4
 801b020:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b024:	2800      	cmp	r0, #0
 801b026:	f43f af2e 	beq.w	801ae86 <_ZN7Sensors12AddRegistersEv+0x46>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801b02a:	782b      	ldrb	r3, [r5, #0]
 801b02c:	4f29      	ldr	r7, [pc, #164]	@ (801b0d4 <_ZN7Sensors12AddRegistersEv+0x294>)
 801b02e:	b983      	cbnz	r3, 801b052 <_ZN7Sensors12AddRegistersEv+0x212>
 801b030:	786b      	ldrb	r3, [r5, #1]
 801b032:	b973      	cbnz	r3, 801b052 <_ZN7Sensors12AddRegistersEv+0x212>
		target_callback_list->push_back(callback);
 801b034:	a902      	add	r1, sp, #8
		callback.read = read;
 801b036:	9705      	str	r7, [sp, #20]
		callback.write = NULL;
 801b038:	e9cd 4303 	strd	r4, r3, [sp, #12]
 801b03c:	e9d0 2300 	ldrd	r2, r3, [r0]
 801b040:	1a9b      	subs	r3, r3, r2
 801b042:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b044:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 801b046:	f7f5 fd2f 	bl	8010aa8 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801b04a:	2301      	movs	r3, #1
 801b04c:	706b      	strb	r3, [r5, #1]
	target_register->access.read = true;
 801b04e:	726b      	strb	r3, [r5, #9]
 801b050:	e719      	b.n	801ae86 <_ZN7Sensors12AddRegistersEv+0x46>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b052:	8969      	ldrh	r1, [r5, #10]
 801b054:	f7f5 fbee 	bl	8010834 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE2atEj>
		callback->context = context;
 801b058:	6044      	str	r4, [r0, #4]
		callback->read = read;
 801b05a:	60c7      	str	r7, [r0, #12]
 801b05c:	e7f5      	b.n	801b04a <_ZN7Sensors12AddRegistersEv+0x20a>
	uint8_t registered_type = GetTypeID<T>(&success);
 801b05e:	f10d 0007 	add.w	r0, sp, #7
 801b062:	f7fd fd4f 	bl	8018b04 <_ZN9Registers9GetTypeIDImEEhPb.isra.0>
	if (!success) {
 801b066:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d0c5      	beq.n	801affa <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (target_register->register_info.type != registered_type) {
 801b06e:	792b      	ldrb	r3, [r5, #4]
 801b070:	4298      	cmp	r0, r3
 801b072:	d1c2      	bne.n	801affa <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b074:	3004      	adds	r0, #4
 801b076:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b07a:	2800      	cmp	r0, #0
 801b07c:	d0bd      	beq.n	801affa <_ZN7Sensors12AddRegistersEv+0x1ba>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801b07e:	782b      	ldrb	r3, [r5, #0]
 801b080:	4f15      	ldr	r7, [pc, #84]	@ (801b0d8 <_ZN7Sensors12AddRegistersEv+0x298>)
 801b082:	b983      	cbnz	r3, 801b0a6 <_ZN7Sensors12AddRegistersEv+0x266>
 801b084:	786b      	ldrb	r3, [r5, #1]
 801b086:	b973      	cbnz	r3, 801b0a6 <_ZN7Sensors12AddRegistersEv+0x266>
		callback.read = NULL;
 801b088:	9305      	str	r3, [sp, #20]
		target_callback_list->push_back(callback);
 801b08a:	a902      	add	r1, sp, #8
 801b08c:	e9d0 2300 	ldrd	r2, r3, [r0]
		callback.write = write;
 801b090:	e9cd 4703 	strd	r4, r7, [sp, #12]
 801b094:	1a9b      	subs	r3, r3, r2
 801b096:	111b      	asrs	r3, r3, #4
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b098:	816b      	strh	r3, [r5, #10]
		target_callback_list->push_back(callback);
 801b09a:	f7f9 f94b 	bl	8014334 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE9push_backERKS1_>
	target_register->mode.callbacks = true;
 801b09e:	2301      	movs	r3, #1
 801b0a0:	706b      	strb	r3, [r5, #1]
	target_register->access.write = true;
 801b0a2:	722b      	strb	r3, [r5, #8]
 801b0a4:	e7a9      	b.n	801affa <_ZN7Sensors12AddRegistersEv+0x1ba>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b0a6:	8969      	ldrh	r1, [r5, #10]
 801b0a8:	f7f8 fe4e 	bl	8013d48 <_ZNSt6vectorI17RegisterCallbacksImESaIS1_EE2atEj>
		callback->write = write;
 801b0ac:	e9c0 4701 	strd	r4, r7, [r0, #4]
 801b0b0:	e7f5      	b.n	801b09e <_ZN7Sensors12AddRegistersEv+0x25e>
 801b0b2:	bf00      	nop
 801b0b4:	08018f19 	.word	0x08018f19
 801b0b8:	0801921d 	.word	0x0801921d
 801b0bc:	08018f59 	.word	0x08018f59
 801b0c0:	08019341 	.word	0x08019341
 801b0c4:	08019271 	.word	0x08019271
 801b0c8:	080194c3 	.word	0x080194c3
 801b0cc:	08019449 	.word	0x08019449
 801b0d0:	080191c5 	.word	0x080191c5
 801b0d4:	08018989 	.word	0x08018989
 801b0d8:	08018fbf 	.word	0x08018fbf

0801b0dc <_ZN6SensorC1ERKS_>:
struct Sensor {
 801b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0e0:	790b      	ldrb	r3, [r1, #4]
 801b0e2:	4604      	mov	r4, r0
 801b0e4:	680a      	ldr	r2, [r1, #0]
 801b0e6:	460d      	mov	r5, r1
 801b0e8:	7103      	strb	r3, [r0, #4]
 801b0ea:	88cb      	ldrh	r3, [r1, #6]
 801b0ec:	6002      	str	r2, [r0, #0]
 801b0ee:	80c3      	strh	r3, [r0, #6]
 801b0f0:	890b      	ldrh	r3, [r1, #8]
 801b0f2:	8103      	strh	r3, [r0, #8]
 801b0f4:	68cb      	ldr	r3, [r1, #12]
 801b0f6:	60c3      	str	r3, [r0, #12]
 801b0f8:	7c0b      	ldrb	r3, [r1, #16]
 801b0fa:	7403      	strb	r3, [r0, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b0fc:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b0fe:	e9d1 2705 	ldrd	r2, r7, [r1, #20]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b102:	e9c0 3305 	strd	r3, r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b106:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b108:	61c3      	str	r3, [r0, #28]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b10a:	d018      	beq.n	801b13e <_ZN6SensorC1ERKS_+0x62>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801b10c:	4b10      	ldr	r3, [pc, #64]	@ (801b150 <_ZN6SensorC1ERKS_+0x74>)
 801b10e:	429f      	cmp	r7, r3
 801b110:	d901      	bls.n	801b116 <_ZN6SensorC1ERKS_+0x3a>
	      std::__throw_bad_array_new_length();
 801b112:	f001 fde0 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b116:	4638      	mov	r0, r7
 801b118:	f001 fd2b 	bl	801cb72 <_Znwj>
 801b11c:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b11e:	4437      	add	r7, r6
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801b120:	e9c4 6605 	strd	r6, r6, [r4, #20]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b124:	61e7      	str	r7, [r4, #28]
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b126:	e9d5 7805 	ldrd	r7, r8, [r5, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 801b12a:	45b8      	cmp	r8, r7
 801b12c:	d109      	bne.n	801b142 <_ZN6SensorC1ERKS_+0x66>
 801b12e:	6a2b      	ldr	r3, [r5, #32]
 801b130:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801b132:	61a6      	str	r6, [r4, #24]
 801b134:	6223      	str	r3, [r4, #32]
 801b136:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801b138:	6263      	str	r3, [r4, #36]	@ 0x24
 801b13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b13e:	463e      	mov	r6, r7
 801b140:	e7ed      	b.n	801b11e <_ZN6SensorC1ERKS_+0x42>
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801b142:	4639      	mov	r1, r7
 801b144:	4630      	mov	r0, r6
 801b146:	3718      	adds	r7, #24
 801b148:	3618      	adds	r6, #24
 801b14a:	f7fd ff43 	bl	8018fd4 <_ZN10SensorDataC1ERKS_>
 801b14e:	e7ec      	b.n	801b12a <_ZN6SensorC1ERKS_+0x4e>
 801b150:	7ffffff8 	.word	0x7ffffff8

0801b154 <_ZN11SensorGroupC1ERKS_>:
struct SensorGroup {
 801b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b156:	680a      	ldr	r2, [r1, #0]
 801b158:	4604      	mov	r4, r0
 801b15a:	7a0b      	ldrb	r3, [r1, #8]
 801b15c:	460e      	mov	r6, r1
 801b15e:	6002      	str	r2, [r0, #0]
 801b160:	684a      	ldr	r2, [r1, #4]
 801b162:	7203      	strb	r3, [r0, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b164:	2300      	movs	r3, #0
 801b166:	6042      	str	r2, [r0, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b168:	e9d1 2703 	ldrd	r2, r7, [r1, #12]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b170:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b172:	6143      	str	r3, [r0, #20]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b174:	d013      	beq.n	801b19e <_ZN11SensorGroupC1ERKS_+0x4a>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801b176:	4b0e      	ldr	r3, [pc, #56]	@ (801b1b0 <_ZN11SensorGroupC1ERKS_+0x5c>)
 801b178:	429f      	cmp	r7, r3
 801b17a:	d901      	bls.n	801b180 <_ZN11SensorGroupC1ERKS_+0x2c>
	      std::__throw_bad_array_new_length();
 801b17c:	f001 fdab 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b180:	4638      	mov	r0, r7
 801b182:	f001 fcf6 	bl	801cb72 <_Znwj>
 801b186:	4605      	mov	r5, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b188:	442f      	add	r7, r5
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801b18a:	e9c4 5503 	strd	r5, r5, [r4, #12]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b18e:	6167      	str	r7, [r4, #20]
 801b190:	e9d6 6703 	ldrd	r6, r7, [r6, #12]
 801b194:	42b7      	cmp	r7, r6
 801b196:	d104      	bne.n	801b1a2 <_ZN11SensorGroupC1ERKS_+0x4e>
 801b198:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 801b19a:	6125      	str	r5, [r4, #16]
 801b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b19e:	463d      	mov	r5, r7
 801b1a0:	e7f2      	b.n	801b188 <_ZN11SensorGroupC1ERKS_+0x34>
 801b1a2:	4631      	mov	r1, r6
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	3628      	adds	r6, #40	@ 0x28
 801b1a8:	3528      	adds	r5, #40	@ 0x28
 801b1aa:	f7ff ff97 	bl	801b0dc <_ZN6SensorC1ERKS_>
 801b1ae:	e7f1      	b.n	801b194 <_ZN11SensorGroupC1ERKS_+0x40>
 801b1b0:	7ffffff8 	.word	0x7ffffff8

0801b1b4 <_ZN12I2CInterfaceC1ERKS_>:
struct I2CInterface {
 801b1b4:	788b      	ldrb	r3, [r1, #2]
 801b1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1ba:	7083      	strb	r3, [r0, #2]
 801b1bc:	f101 0710 	add.w	r7, r1, #16
 801b1c0:	684b      	ldr	r3, [r1, #4]
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	880a      	ldrh	r2, [r1, #0]
 801b1c6:	460d      	mov	r5, r1
 801b1c8:	6043      	str	r3, [r0, #4]
 801b1ca:	f100 0610 	add.w	r6, r0, #16
 801b1ce:	688b      	ldr	r3, [r1, #8]
 801b1d0:	8002      	strh	r2, [r0, #0]
 801b1d2:	6083      	str	r3, [r0, #8]
 801b1d4:	68cb      	ldr	r3, [r1, #12]
 801b1d6:	60c3      	str	r3, [r0, #12]
 801b1d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b1da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b1dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b1de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b1e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801b1e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b1e4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801b1e8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801b1ec:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801b1ee:	6523      	str	r3, [r4, #80]	@ 0x50
 801b1f0:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 801b1f2:	6563      	str	r3, [r4, #84]	@ 0x54
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b1f4:	2300      	movs	r3, #0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b1f6:	e9d5 2716 	ldrd	r2, r7, [r5, #88]	@ 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b1fa:	e9c4 3316 	strd	r3, r3, [r4, #88]	@ 0x58
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b1fe:	1abf      	subs	r7, r7, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b200:	6623      	str	r3, [r4, #96]	@ 0x60
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b202:	d04a      	beq.n	801b29a <_ZN12I2CInterfaceC1ERKS_+0xe6>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801b204:	4b32      	ldr	r3, [pc, #200]	@ (801b2d0 <_ZN12I2CInterfaceC1ERKS_+0x11c>)
 801b206:	429f      	cmp	r7, r3
 801b208:	d901      	bls.n	801b20e <_ZN12I2CInterfaceC1ERKS_+0x5a>
	      std::__throw_bad_array_new_length();
 801b20a:	f001 fd64 	bl	801ccd6 <_ZSt28__throw_bad_array_new_lengthv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b20e:	4638      	mov	r0, r7
 801b210:	f001 fcaf 	bl	801cb72 <_Znwj>
 801b214:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b216:	4437      	add	r7, r6
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801b218:	e9c4 6616 	strd	r6, r6, [r4, #88]	@ 0x58
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b21c:	6627      	str	r7, [r4, #96]	@ 0x60
 801b21e:	e9d5 7816 	ldrd	r7, r8, [r5, #88]	@ 0x58
 801b222:	45b8      	cmp	r8, r7
 801b224:	d13b      	bne.n	801b29e <_ZN12I2CInterfaceC1ERKS_+0xea>
	this->_M_impl._M_finish =
 801b226:	65e6      	str	r6, [r4, #92]	@ 0x5c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b228:	e9d5 3719 	ldrd	r3, r7, [r5, #100]	@ 0x64
 801b22c:	1aff      	subs	r7, r7, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b22e:	2300      	movs	r3, #0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801b230:	10b8      	asrs	r0, r7, #2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b232:	66e3      	str	r3, [r4, #108]	@ 0x6c
 801b234:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
	this->_M_impl._M_start = this->_M_allocate(__n);
 801b238:	f7fd fc52 	bl	8018ae0 <_ZNSt12_Vector_baseIP6SensorSaIS1_EE11_M_allocateEj.isra.0>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b23c:	4407      	add	r7, r0
	this->_M_impl._M_start = this->_M_allocate(__n);
 801b23e:	4606      	mov	r6, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b240:	66e7      	str	r7, [r4, #108]	@ 0x6c
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801b242:	e9c4 0019 	strd	r0, r0, [r4, #100]	@ 0x64
      : _M_current(__i) { }
 801b246:	e9d5 1319 	ldrd	r1, r3, [r5, #100]	@ 0x64
	  if (_Num)
 801b24a:	4299      	cmp	r1, r3
	  const ptrdiff_t _Num = __last - __first;
 801b24c:	eba3 0701 	sub.w	r7, r3, r1
	  if (_Num)
 801b250:	d002      	beq.n	801b258 <_ZN12I2CInterfaceC1ERKS_+0xa4>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801b252:	463a      	mov	r2, r7
 801b254:	f002 fc0a 	bl	801da6c <memmove>
	  return __result + _Num;
 801b258:	443e      	add	r6, r7
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b25a:	2300      	movs	r3, #0
	this->_M_impl._M_finish =
 801b25c:	66a6      	str	r6, [r4, #104]	@ 0x68
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b25e:	e9d5 261c 	ldrd	r2, r6, [r5, #112]	@ 0x70
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b262:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b266:	1ab6      	subs	r6, r6, r2
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b268:	67a3      	str	r3, [r4, #120]	@ 0x78
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b26a:	d01f      	beq.n	801b2ac <_ZN12I2CInterfaceC1ERKS_+0xf8>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801b26c:	4b19      	ldr	r3, [pc, #100]	@ (801b2d4 <_ZN12I2CInterfaceC1ERKS_+0x120>)
 801b26e:	429e      	cmp	r6, r3
 801b270:	d8cb      	bhi.n	801b20a <_ZN12I2CInterfaceC1ERKS_+0x56>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b272:	4630      	mov	r0, r6
 801b274:	f001 fc7d 	bl	801cb72 <_Znwj>
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b278:	4406      	add	r6, r0
	this->_M_impl._M_finish = this->_M_impl._M_start;
 801b27a:	e9c4 001c 	strd	r0, r0, [r4, #112]	@ 0x70
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b27e:	67a6      	str	r6, [r4, #120]	@ 0x78
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b280:	e9d5 571c 	ldrd	r5, r7, [r5, #112]	@ 0x70
 801b284:	3508      	adds	r5, #8
 801b286:	f1a5 0308 	sub.w	r3, r5, #8
 801b28a:	f100 0620 	add.w	r6, r0, #32
 801b28e:	429f      	cmp	r7, r3
 801b290:	d10e      	bne.n	801b2b0 <_ZN12I2CInterfaceC1ERKS_+0xfc>
	this->_M_impl._M_finish =
 801b292:	6760      	str	r0, [r4, #116]	@ 0x74
 801b294:	4620      	mov	r0, r4
 801b296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b29a:	463e      	mov	r6, r7
 801b29c:	e7bb      	b.n	801b216 <_ZN12I2CInterfaceC1ERKS_+0x62>
 801b29e:	4639      	mov	r1, r7
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	3718      	adds	r7, #24
 801b2a4:	3618      	adds	r6, #24
 801b2a6:	f7ff ff55 	bl	801b154 <_ZN11SensorGroupC1ERKS_>
 801b2aa:	e7ba      	b.n	801b222 <_ZN12I2CInterfaceC1ERKS_+0x6e>
 801b2ac:	4630      	mov	r0, r6
 801b2ae:	e7e3      	b.n	801b278 <_ZN12I2CInterfaceC1ERKS_+0xc4>
struct ReadRequest {
 801b2b0:	f815 3c08 	ldrb.w	r3, [r5, #-8]
 801b2b4:	4629      	mov	r1, r5
 801b2b6:	3008      	adds	r0, #8
 801b2b8:	3520      	adds	r5, #32
 801b2ba:	f806 3c20 	strb.w	r3, [r6, #-32]
 801b2be:	f855 3c24 	ldr.w	r3, [r5, #-36]
 801b2c2:	f846 3c1c 	str.w	r3, [r6, #-28]
 801b2c6:	f7fd fe85 	bl	8018fd4 <_ZN10SensorDataC1ERKS_>
 801b2ca:	4630      	mov	r0, r6
 801b2cc:	e7db      	b.n	801b286 <_ZN12I2CInterfaceC1ERKS_+0xd2>
 801b2ce:	bf00      	nop
 801b2d0:	7ffffff8 	.word	0x7ffffff8
 801b2d4:	7fffffe0 	.word	0x7fffffe0

0801b2d8 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b2dc:	e9d0 6800 	ldrd	r6, r8, [r0]
 801b2e0:	4b20      	ldr	r3, [pc, #128]	@ (801b364 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801b2e2:	4605      	mov	r5, r0
 801b2e4:	eba8 0406 	sub.w	r4, r8, r6
 801b2e8:	460f      	mov	r7, r1
 801b2ea:	4691      	mov	r9, r2
 801b2ec:	10a4      	asrs	r4, r4, #2
 801b2ee:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801b2f0:	4b1d      	ldr	r3, [pc, #116]	@ (801b368 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801b2f2:	429c      	cmp	r4, r3
 801b2f4:	d102      	bne.n	801b2fc <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801b2f6:	481d      	ldr	r0, [pc, #116]	@ (801b36c <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801b2f8:	f001 fcf0 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
      if (__a < __b)
 801b2fc:	45b0      	cmp	r8, r6
 801b2fe:	bf14      	ite	ne
 801b300:	4622      	movne	r2, r4
 801b302:	2201      	moveq	r2, #1
    { return __lhs.base() - __rhs.base(); }
 801b304:	eba1 0b06 	sub.w	fp, r1, r6
 801b308:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b30a:	d227      	bcs.n	801b35c <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b30c:	b344      	cbz	r4, 801b360 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b30e:	429c      	cmp	r4, r3
 801b310:	bf28      	it	cs
 801b312:	461c      	movcs	r4, r3
 801b314:	207c      	movs	r0, #124	@ 0x7c
 801b316:	4360      	muls	r0, r4
 801b318:	f001 fc2b 	bl	801cb72 <_Znwj>
 801b31c:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b31e:	4649      	mov	r1, r9
 801b320:	eb0a 000b 	add.w	r0, sl, fp
 801b324:	f7ff ff46 	bl	801b1b4 <_ZN12I2CInterfaceC1ERKS_>
      return std::__relocate_a_1(std::__niter_base(__first),
 801b328:	4639      	mov	r1, r7
 801b32a:	4652      	mov	r2, sl
 801b32c:	4630      	mov	r0, r6
 801b32e:	f7fe f9f5 	bl	801971c <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b332:	4641      	mov	r1, r8
 801b334:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 801b338:	4638      	mov	r0, r7
 801b33a:	f7fe f9ef 	bl	801971c <_ZSt14__relocate_a_1IP12I2CInterfaceS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b33e:	4607      	mov	r7, r0
	if (__p)
 801b340:	b126      	cbz	r6, 801b34c <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801b342:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801b344:	4630      	mov	r0, r6
 801b346:	1b89      	subs	r1, r1, r6
 801b348:	f001 fbee 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b34c:	237c      	movs	r3, #124	@ 0x7c
 801b34e:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801b352:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b356:	60ab      	str	r3, [r5, #8]
    }
 801b358:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b35c:	461c      	mov	r4, r3
 801b35e:	e7d9      	b.n	801b314 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b360:	46a2      	mov	sl, r4
 801b362:	e7dc      	b.n	801b31e <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801b364:	bdef7bdf 	.word	0xbdef7bdf
 801b368:	01084210 	.word	0x01084210
 801b36c:	0801dd74 	.word	0x0801dd74

0801b370 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b374:	e9d0 6800 	ldrd	r6, r8, [r0]
 801b378:	4b20      	ldr	r3, [pc, #128]	@ (801b3fc <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801b37a:	4605      	mov	r5, r0
 801b37c:	eba8 0406 	sub.w	r4, r8, r6
 801b380:	460f      	mov	r7, r1
 801b382:	4691      	mov	r9, r2
 801b384:	10e4      	asrs	r4, r4, #3
 801b386:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801b388:	4b1d      	ldr	r3, [pc, #116]	@ (801b400 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801b38a:	429c      	cmp	r4, r3
 801b38c:	d102      	bne.n	801b394 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801b38e:	481d      	ldr	r0, [pc, #116]	@ (801b404 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801b390:	f001 fca4 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801b394:	45b0      	cmp	r8, r6
 801b396:	bf14      	ite	ne
 801b398:	4622      	movne	r2, r4
 801b39a:	2201      	moveq	r2, #1
 801b39c:	eba1 0b06 	sub.w	fp, r1, r6
 801b3a0:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b3a2:	d227      	bcs.n	801b3f4 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b3a4:	b344      	cbz	r4, 801b3f8 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b3a6:	429c      	cmp	r4, r3
 801b3a8:	bf28      	it	cs
 801b3aa:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b3ac:	2018      	movs	r0, #24
 801b3ae:	4360      	muls	r0, r4
 801b3b0:	f001 fbdf 	bl	801cb72 <_Znwj>
 801b3b4:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b3b6:	4649      	mov	r1, r9
 801b3b8:	eb0a 000b 	add.w	r0, sl, fp
 801b3bc:	f7ff feca 	bl	801b154 <_ZN11SensorGroupC1ERKS_>
 801b3c0:	4639      	mov	r1, r7
 801b3c2:	4652      	mov	r2, sl
 801b3c4:	4630      	mov	r0, r6
 801b3c6:	f7fe fa1f 	bl	8019808 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b3ca:	4641      	mov	r1, r8
 801b3cc:	f100 0218 	add.w	r2, r0, #24
 801b3d0:	4638      	mov	r0, r7
 801b3d2:	f7fe fa19 	bl	8019808 <_ZSt14__relocate_a_1IP11SensorGroupS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b3d6:	4607      	mov	r7, r0
	if (__p)
 801b3d8:	b126      	cbz	r6, 801b3e4 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801b3da:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801b3dc:	4630      	mov	r0, r6
 801b3de:	1b89      	subs	r1, r1, r6
 801b3e0:	f001 fba2 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b3e4:	2318      	movs	r3, #24
 801b3e6:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801b3ea:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b3ee:	60ab      	str	r3, [r5, #8]
    }
 801b3f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f4:	461c      	mov	r4, r3
 801b3f6:	e7d9      	b.n	801b3ac <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b3f8:	46a2      	mov	sl, r4
 801b3fa:	e7dc      	b.n	801b3b6 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801b3fc:	aaaaaaab 	.word	0xaaaaaaab
 801b400:	05555555 	.word	0x05555555
 801b404:	0801dd74 	.word	0x0801dd74

0801b408 <_ZN7Sensors14AddSensorGroupEhhb>:
bool Sensors::AddSensorGroup(uint8_t ID, uint8_t group_ID, bool publishable) {
 801b408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b40c:	b089      	sub	sp, #36	@ 0x24
 801b40e:	4617      	mov	r7, r2
 801b410:	4606      	mov	r6, r0
 801b412:	4699      	mov	r9, r3
	I2CInterface* interface = FindInterface(ID, &success);
 801b414:	f10d 0207 	add.w	r2, sp, #7
 801b418:	f7fd fe7c 	bl	8019114 <_ZN7Sensors13FindInterfaceEhPb>
	if (!success) return false;
 801b41c:	f89d 8007 	ldrb.w	r8, [sp, #7]
	I2CInterface* interface = FindInterface(ID, &success);
 801b420:	4605      	mov	r5, r0
	if (!success) return false;
 801b422:	f1b8 0f00 	cmp.w	r8, #0
 801b426:	d104      	bne.n	801b432 <_ZN7Sensors14AddSensorGroupEhhb+0x2a>
 801b428:	2400      	movs	r4, #0
}
 801b42a:	4620      	mov	r0, r4
 801b42c:	b009      	add	sp, #36	@ 0x24
 801b42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	FindSensorGroup(group_ID, &success);
 801b432:	4639      	mov	r1, r7
 801b434:	4630      	mov	r0, r6
 801b436:	f7fd feaa 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
	if (success) return false;
 801b43a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 801b43e:	2c00      	cmp	r4, #0
 801b440:	d1f2      	bne.n	801b428 <_ZN7Sensors14AddSensorGroupEhhb+0x20>
	sensor_group.parent = interface->ID; // interface
 801b442:	782b      	ldrb	r3, [r5, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b444:	9407      	str	r4, [sp, #28]
 801b446:	f88d 3009 	strb.w	r3, [sp, #9]
	sensor_group.prescaler = 1;
 801b44a:	2301      	movs	r3, #1
	sensor_group.active = false;
 801b44c:	f88d 4008 	strb.w	r4, [sp, #8]
	sensor_group.ID = group_ID;
 801b450:	f88d 700a 	strb.w	r7, [sp, #10]
	sensor_group.publishable = publishable;
 801b454:	f88d 900b 	strb.w	r9, [sp, #11]
	sensor_group.prescaler = 1;
 801b458:	9303      	str	r3, [sp, #12]
	sensor_group.read_index = 0;
 801b45a:	f88d 4010 	strb.w	r4, [sp, #16]
 801b45e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (publishable) {
 801b462:	f1b9 0f00 	cmp.w	r9, #0
 801b466:	d10f      	bne.n	801b488 <_ZN7Sensors14AddSensorGroupEhhb+0x80>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b468:	f04f 31ff 	mov.w	r1, #4294967295
 801b46c:	6830      	ldr	r0, [r6, #0]
 801b46e:	f7f1 fcdd 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b472:	e9d5 0317 	ldrd	r0, r3, [r5, #92]	@ 0x5c
 801b476:	4298      	cmp	r0, r3
 801b478:	d11b      	bne.n	801b4b2 <_ZN7Sensors14AddSensorGroupEhhb+0xaa>
	  _M_realloc_insert(end(), __x);
 801b47a:	4601      	mov	r1, r0
 801b47c:	aa02      	add	r2, sp, #8
 801b47e:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 801b482:	f7ff ff75 	bl	801b370 <_ZNSt6vectorI11SensorGroupSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801b486:	e01a      	b.n	801b4be <_ZN7Sensors14AddSensorGroupEhhb+0xb6>
		success = publishers->AddPublisher(group_ID);
 801b488:	f8d6 0090 	ldr.w	r0, [r6, #144]	@ 0x90
 801b48c:	f7fc fc9a 	bl	8017dc4 <_ZN10Publishers12AddPublisherEh>
 801b490:	f88d 0007 	strb.w	r0, [sp, #7]
		if (!success) return false;  								// TODO Or continue? Simply don't add the topic ?
 801b494:	b148      	cbz	r0, 801b4aa <_ZN7Sensors14AddSensorGroupEhhb+0xa2>
		success = publishers->AddTopic(group_ID, REG_TIMEBASE);
 801b496:	4622      	mov	r2, r4
 801b498:	4639      	mov	r1, r7
 801b49a:	f8d6 0090 	ldr.w	r0, [r6, #144]	@ 0x90
 801b49e:	f7fc f90f 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
 801b4a2:	f88d 0007 	strb.w	r0, [sp, #7]
		if (!success) return false;  								// TODO Or continue, Simply don't add the topic ?
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d1de      	bne.n	801b468 <_ZN7Sensors14AddSensorGroupEhhb+0x60>
struct SensorGroup {
 801b4aa:	a805      	add	r0, sp, #20
 801b4ac:	f7fe f8f8 	bl	80196a0 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
 801b4b0:	e7bb      	b.n	801b42a <_ZN7Sensors14AddSensorGroupEhhb+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b4b2:	a902      	add	r1, sp, #8
 801b4b4:	f7ff fe4e 	bl	801b154 <_ZN11SensorGroupC1ERKS_>
	    ++this->_M_impl._M_finish;
 801b4b8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 801b4ba:	3318      	adds	r3, #24
 801b4bc:	65eb      	str	r3, [r5, #92]	@ 0x5c
	osSemaphoreRelease(SensorsSemaphore);
 801b4be:	6830      	ldr	r0, [r6, #0]
	return true;
 801b4c0:	4644      	mov	r4, r8
	osSemaphoreRelease(SensorsSemaphore);
 801b4c2:	f7f1 fce7 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801b4c6:	e7f0      	b.n	801b4aa <_ZN7Sensors14AddSensorGroupEhhb+0xa2>

0801b4c8 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b4cc:	e9d0 6800 	ldrd	r6, r8, [r0]
 801b4d0:	4b20      	ldr	r3, [pc, #128]	@ (801b554 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>)
 801b4d2:	4605      	mov	r5, r0
 801b4d4:	eba8 0406 	sub.w	r4, r8, r6
 801b4d8:	460f      	mov	r7, r1
 801b4da:	4691      	mov	r9, r2
 801b4dc:	10e4      	asrs	r4, r4, #3
 801b4de:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801b4e0:	4b1d      	ldr	r3, [pc, #116]	@ (801b558 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x90>)
 801b4e2:	429c      	cmp	r4, r3
 801b4e4:	d102      	bne.n	801b4ec <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801b4e6:	481d      	ldr	r0, [pc, #116]	@ (801b55c <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x94>)
 801b4e8:	f001 fbf8 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801b4ec:	45b0      	cmp	r8, r6
 801b4ee:	bf14      	ite	ne
 801b4f0:	4622      	movne	r2, r4
 801b4f2:	2201      	moveq	r2, #1
 801b4f4:	eba1 0b06 	sub.w	fp, r1, r6
 801b4f8:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b4fa:	d227      	bcs.n	801b54c <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b4fc:	b344      	cbz	r4, 801b550 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b4fe:	429c      	cmp	r4, r3
 801b500:	bf28      	it	cs
 801b502:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b504:	2028      	movs	r0, #40	@ 0x28
 801b506:	4360      	muls	r0, r4
 801b508:	f001 fb33 	bl	801cb72 <_Znwj>
 801b50c:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b50e:	4649      	mov	r1, r9
 801b510:	eb0a 000b 	add.w	r0, sl, fp
 801b514:	f7ff fde2 	bl	801b0dc <_ZN6SensorC1ERKS_>
 801b518:	4639      	mov	r1, r7
 801b51a:	4652      	mov	r2, sl
 801b51c:	4630      	mov	r0, r6
 801b51e:	f7fe f9a5 	bl	801986c <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b522:	4641      	mov	r1, r8
 801b524:	f100 0228 	add.w	r2, r0, #40	@ 0x28
 801b528:	4638      	mov	r0, r7
 801b52a:	f7fe f99f 	bl	801986c <_ZSt14__relocate_a_1IP6SensorS1_SaIS0_EET0_T_S4_S3_RT1_.isra.0>
 801b52e:	4607      	mov	r7, r0
	if (__p)
 801b530:	b126      	cbz	r6, 801b53c <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
		    this->_M_impl._M_end_of_storage - __old_start);
 801b532:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801b534:	4630      	mov	r0, r6
 801b536:	1b89      	subs	r1, r1, r6
 801b538:	f001 faf6 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b53c:	2328      	movs	r3, #40	@ 0x28
 801b53e:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801b542:	e9c5 a700 	strd	sl, r7, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b546:	60ab      	str	r3, [r5, #8]
    }
 801b548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b54c:	461c      	mov	r4, r3
 801b54e:	e7d9      	b.n	801b504 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b550:	46a2      	mov	sl, r4
 801b552:	e7dc      	b.n	801b50e <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
 801b554:	cccccccd 	.word	0xcccccccd
 801b558:	03333333 	.word	0x03333333
 801b55c:	0801dd74 	.word	0x0801dd74

0801b560 <_ZN7Sensors9AddSensorEhht>:
bool Sensors::AddSensor(uint8_t group_ID, uint8_t sensor_ID, uint16_t address) {
 801b560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b564:	b08d      	sub	sp, #52	@ 0x34
 801b566:	4691      	mov	r9, r2
 801b568:	4698      	mov	r8, r3
 801b56a:	4606      	mov	r6, r0
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801b56c:	f10d 0303 	add.w	r3, sp, #3
 801b570:	aa01      	add	r2, sp, #4
 801b572:	f7fd fdf2 	bl	801915a <_ZN7Sensors19FindSensorGroupPathEhPP12I2CInterfacePb>
	if (!success) return false;
 801b576:	f89d 7003 	ldrb.w	r7, [sp, #3]
	SensorGroup* sensor_group = FindSensorGroupPath(group_ID, &interface, &success);
 801b57a:	4604      	mov	r4, r0
	if (!success) return false;
 801b57c:	b927      	cbnz	r7, 801b588 <_ZN7Sensors9AddSensorEhht+0x28>
 801b57e:	2700      	movs	r7, #0
}
 801b580:	4638      	mov	r0, r7
 801b582:	b00d      	add	sp, #52	@ 0x34
 801b584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	FindSensor(sensor_ID, &success);
 801b588:	f10d 0203 	add.w	r2, sp, #3
 801b58c:	4649      	mov	r1, r9
 801b58e:	4630      	mov	r0, r6
 801b590:	f7fd fe96 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (success) return false;
 801b594:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801b598:	2800      	cmp	r0, #0
 801b59a:	d1f0      	bne.n	801b57e <_ZN7Sensors9AddSensorEhht+0x1e>
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b59c:	9009      	str	r0, [sp, #36]	@ 0x24
	sensor.active = false;
 801b59e:	f88d 0008 	strb.w	r0, [sp, #8]
 801b5a2:	e9cd 0007 	strd	r0, r0, [sp, #28]
	if (interface->ID != INTERNAL) {
 801b5a6:	9801      	ldr	r0, [sp, #4]
 801b5a8:	7803      	ldrb	r3, [r0, #0]
 801b5aa:	2b0a      	cmp	r3, #10
 801b5ac:	d032      	beq.n	801b614 <_ZN7Sensors9AddSensorEhht+0xb4>
		sensor.present = (HAL_I2C_IsDeviceReady(interface->interface, address, 1, HAL_MAX_DELAY) == HAL_OK);
 801b5ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b5b2:	2201      	movs	r2, #1
 801b5b4:	4641      	mov	r1, r8
 801b5b6:	68c0      	ldr	r0, [r0, #12]
 801b5b8:	f7ec f888 	bl	80076cc <HAL_I2C_IsDeviceReady>
 801b5bc:	fab0 f580 	clz	r5, r0
 801b5c0:	096d      	lsrs	r5, r5, #5
	sensor.parent = sensor_group->ID;
 801b5c2:	78a2      	ldrb	r2, [r4, #2]
	sensor.processing = false;
 801b5c4:	2300      	movs	r3, #0
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b5c6:	f04f 31ff 	mov.w	r1, #4294967295
 801b5ca:	6830      	ldr	r0, [r6, #0]
	sensor.parent = sensor_group->ID;
 801b5cc:	f88d 2009 	strb.w	r2, [sp, #9]
	sensor.memory_address_size = 1;
 801b5d0:	2201      	movs	r2, #1
	sensor.processing = false;
 801b5d2:	f88d 300b 	strb.w	r3, [sp, #11]
	sensor.read_index = 0;
 801b5d6:	f88d 3018 	strb.w	r3, [sp, #24]
		sensor.present = (HAL_I2C_IsDeviceReady(interface->interface, address, 1, HAL_MAX_DELAY) == HAL_OK);
 801b5da:	f88d 500a 	strb.w	r5, [sp, #10]
	sensor.ID = sensor_ID;
 801b5de:	f88d 900c 	strb.w	r9, [sp, #12]
	sensor.address = address;
 801b5e2:	f8ad 800e 	strh.w	r8, [sp, #14]
	sensor.memory_address_size = 1;
 801b5e6:	f8ad 2010 	strh.w	r2, [sp, #16]
	sensor.callback = NULL;
 801b5ea:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b5ee:	f7f1 fc1d 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b5f2:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
 801b5f6:	4298      	cmp	r0, r3
 801b5f8:	d00e      	beq.n	801b618 <_ZN7Sensors9AddSensorEhht+0xb8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b5fa:	a902      	add	r1, sp, #8
 801b5fc:	f7ff fd6e 	bl	801b0dc <_ZN6SensorC1ERKS_>
	    ++this->_M_impl._M_finish;
 801b600:	6923      	ldr	r3, [r4, #16]
 801b602:	3328      	adds	r3, #40	@ 0x28
 801b604:	6123      	str	r3, [r4, #16]
	osSemaphoreRelease(SensorsSemaphore);
 801b606:	6830      	ldr	r0, [r6, #0]
 801b608:	f7f1 fc44 	bl	800ce94 <osSemaphoreRelease>
struct Sensor {
 801b60c:	a807      	add	r0, sp, #28
 801b60e:	f7fe f833 	bl	8019678 <_ZNSt6vectorI10SensorDataSaIS0_EED1Ev>
 801b612:	e7b5      	b.n	801b580 <_ZN7Sensors9AddSensorEhht+0x20>
 801b614:	463d      	mov	r5, r7
 801b616:	e7d4      	b.n	801b5c2 <_ZN7Sensors9AddSensorEhht+0x62>
	  _M_realloc_insert(end(), __x);
 801b618:	4601      	mov	r1, r0
 801b61a:	aa02      	add	r2, sp, #8
 801b61c:	f104 000c 	add.w	r0, r4, #12
 801b620:	f7ff ff52 	bl	801b4c8 <_ZNSt6vectorI6SensorSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801b624:	e7ef      	b.n	801b606 <_ZN7Sensors9AddSensorEhht+0xa6>
	...

0801b628 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b62c:	e9d0 8900 	ldrd	r8, r9, [r0]
 801b630:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801b632:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b636:	eba9 0208 	sub.w	r2, r9, r8
 801b63a:	4607      	mov	r7, r0
 801b63c:	468a      	mov	sl, r1
	if (max_size() - size() < __n)
 801b63e:	ebb3 1f22 	cmp.w	r3, r2, asr #4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b642:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 801b646:	d102      	bne.n	801b64e <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 801b648:	4820      	ldr	r0, [pc, #128]	@ (801b6cc <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>)
 801b64a:	f001 fb47 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801b64e:	45c1      	cmp	r9, r8
 801b650:	bf14      	ite	ne
 801b652:	4622      	movne	r2, r4
 801b654:	2201      	moveq	r2, #1
 801b656:	eba1 0508 	sub.w	r5, r1, r8
 801b65a:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b65c:	d231      	bcs.n	801b6c2 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b65e:	b394      	cbz	r4, 801b6c6 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b660:	429c      	cmp	r4, r3
 801b662:	bf28      	it	cs
 801b664:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b666:	0120      	lsls	r0, r4, #4
 801b668:	f001 fa83 	bl	801cb72 <_Znwj>
 801b66c:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b66e:	eb06 0c05 	add.w	ip, r6, r5
      if (__count > 0)
 801b672:	2d00      	cmp	r5, #0
 801b674:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801b678:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801b67c:	dd04      	ble.n	801b688 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x60>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801b67e:	462a      	mov	r2, r5
 801b680:	4641      	mov	r1, r8
 801b682:	4630      	mov	r0, r6
 801b684:	f002 f9f2 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801b688:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801b68c:	3510      	adds	r5, #16
      if (__count > 0)
 801b68e:	f1b9 0f00 	cmp.w	r9, #0
 801b692:	4435      	add	r5, r6
 801b694:	dd04      	ble.n	801b6a0 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801b696:	464a      	mov	r2, r9
 801b698:	4651      	mov	r1, sl
 801b69a:	4628      	mov	r0, r5
 801b69c:	f002 fade 	bl	801dc5c <memcpy>
      return __result + __count;
 801b6a0:	444d      	add	r5, r9
	if (__p)
 801b6a2:	f1b8 0f00 	cmp.w	r8, #0
 801b6a6:	d005      	beq.n	801b6b4 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801b6a8:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801b6aa:	4640      	mov	r0, r8
 801b6ac:	eba1 0108 	sub.w	r1, r1, r8
 801b6b0:	f001 fa3a 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801b6b4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b6b8:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 801b6bc:	60be      	str	r6, [r7, #8]
    }
 801b6be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b6c2:	461c      	mov	r4, r3
 801b6c4:	e7cf      	b.n	801b666 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b6c6:	4626      	mov	r6, r4
 801b6c8:	e7d1      	b.n	801b66e <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
 801b6ca:	bf00      	nop
 801b6cc:	0801dd74 	.word	0x0801dd74

0801b6d0 <_ZN9Registers18AddRegisterPointerIyEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801b6d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b6d4:	460c      	mov	r4, r1
 801b6d6:	b087      	sub	sp, #28
 801b6d8:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b6da:	f04f 31ff 	mov.w	r1, #4294967295
 801b6de:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801b6e0:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b6e2:	f7f1 fba3 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b6e6:	4621      	mov	r1, r4
 801b6e8:	f10d 0207 	add.w	r2, sp, #7
 801b6ec:	4630      	mov	r0, r6
 801b6ee:	f7fd f80c 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b6f6:	4604      	mov	r4, r0
	if (!success) {
 801b6f8:	b943      	cbnz	r3, 801b70c <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x3c>
		return false;
 801b6fa:	f04f 0800 	mov.w	r8, #0
		osSemaphoreRelease(RegistersSemaphore);
 801b6fe:	6830      	ldr	r0, [r6, #0]
 801b700:	f7f1 fbc8 	bl	800ce94 <osSemaphoreRelease>
}
 801b704:	4640      	mov	r0, r8
 801b706:	b007      	add	sp, #28
 801b708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801b70c:	f10d 0007 	add.w	r0, sp, #7
 801b710:	f7fd f998 	bl	8018a44 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	if (!success) {
 801b714:	f89d 8007 	ldrb.w	r8, [sp, #7]
 801b718:	f1b8 0f00 	cmp.w	r8, #0
 801b71c:	d0ed      	beq.n	801b6fa <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (target_register->register_info.type != registered_type) {
 801b71e:	7923      	ldrb	r3, [r4, #4]
 801b720:	4283      	cmp	r3, r0
 801b722:	d1ea      	bne.n	801b6fa <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b724:	3304      	adds	r3, #4
 801b726:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 801b72a:	2f00      	cmp	r7, #0
 801b72c:	d0e5      	beq.n	801b6fa <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801b72e:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b730:	e9d7 3500 	ldrd	r3, r5, [r7]
 801b734:	1aea      	subs	r2, r5, r3
 801b736:	1112      	asrs	r2, r2, #4
 801b738:	b9d1      	cbnz	r1, 801b770 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xa0>
 801b73a:	7861      	ldrb	r1, [r4, #1]
 801b73c:	b9c1      	cbnz	r1, 801b770 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xa0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b73e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b740:	8162      	strh	r2, [r4, #10]
 801b742:	aa02      	add	r2, sp, #8
 801b744:	42a9      	cmp	r1, r5
		callback.pointer = pointer;
 801b746:	f8cd 9008 	str.w	r9, [sp, #8]
 801b74a:	d00d      	beq.n	801b768 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x98>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b74c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801b74e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801b752:	3510      	adds	r5, #16
 801b754:	607d      	str	r5, [r7, #4]
	target_register->mode.pointer = true;
 801b756:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801b758:	6830      	ldr	r0, [r6, #0]
	target_register->mode.pointer = true;
 801b75a:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801b75c:	f240 1301 	movw	r3, #257	@ 0x101
 801b760:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801b762:	f7f1 fb97 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801b766:	e7cd      	b.n	801b704 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x34>
	  _M_realloc_insert(end(), __x);
 801b768:	4638      	mov	r0, r7
 801b76a:	f7ff ff5d 	bl	801b628 <_ZNSt6vectorI17RegisterCallbacksIyESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801b76e:	e7f2      	b.n	801b756 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x86>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b770:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801b772:	4291      	cmp	r1, r2
 801b774:	d302      	bcc.n	801b77c <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xac>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801b776:	4803      	ldr	r0, [pc, #12]	@ (801b784 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0xb4>)
 801b778:	f001 fab3 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 801b77c:	0109      	lsls	r1, r1, #4
 801b77e:	f843 9001 	str.w	r9, [r3, r1]
 801b782:	e7e8      	b.n	801b756 <_ZN9Registers18AddRegisterPointerIyEEbtPT_+0x86>
 801b784:	0801dfb4 	.word	0x0801dfb4

0801b788 <_ZN9Registers18AddRegisterPointerIfEEbtPT_>:
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801b788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b78c:	460c      	mov	r4, r1
 801b78e:	b087      	sub	sp, #28
 801b790:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b792:	f04f 31ff 	mov.w	r1, #4294967295
 801b796:	6800      	ldr	r0, [r0, #0]
bool Registers::AddRegisterPointer(uint16_t ID, T* pointer) {
 801b798:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801b79a:	f7f1 fb47 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b79e:	4621      	mov	r1, r4
 801b7a0:	f10d 0207 	add.w	r2, sp, #7
 801b7a4:	4630      	mov	r0, r6
 801b7a6:	f7fc ffb0 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801b7aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801b7ae:	4604      	mov	r4, r0
	if (!success) {
 801b7b0:	b943      	cbnz	r3, 801b7c4 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x3c>
		return false;
 801b7b2:	f04f 0800 	mov.w	r8, #0
		osSemaphoreRelease(RegistersSemaphore);
 801b7b6:	6830      	ldr	r0, [r6, #0]
 801b7b8:	f7f1 fb6c 	bl	800ce94 <osSemaphoreRelease>
}
 801b7bc:	4640      	mov	r0, r8
 801b7be:	b007      	add	sp, #28
 801b7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801b7c4:	f10d 0007 	add.w	r0, sp, #7
 801b7c8:	f7fd f8ee 	bl	80189a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	if (!success) {
 801b7cc:	f89d 8007 	ldrb.w	r8, [sp, #7]
 801b7d0:	f1b8 0f00 	cmp.w	r8, #0
 801b7d4:	d0ed      	beq.n	801b7b2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (target_register->register_info.type != registered_type) {
 801b7d6:	7923      	ldrb	r3, [r4, #4]
 801b7d8:	4283      	cmp	r3, r0
 801b7da:	d1ea      	bne.n	801b7b2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (callbacks[target_register->register_info.type] == NULL) {
 801b7dc:	3304      	adds	r3, #4
 801b7de:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 801b7e2:	2f00      	cmp	r7, #0
 801b7e4:	d0e5      	beq.n	801b7b2 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x2a>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) {
 801b7e6:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b7e8:	e9d7 3500 	ldrd	r3, r5, [r7]
 801b7ec:	1aea      	subs	r2, r5, r3
 801b7ee:	1112      	asrs	r2, r2, #4
 801b7f0:	b9d1      	cbnz	r1, 801b828 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xa0>
 801b7f2:	7861      	ldrb	r1, [r4, #1]
 801b7f4:	b9c1      	cbnz	r1, 801b828 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xa0>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b7f6:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801b7f8:	8162      	strh	r2, [r4, #10]
 801b7fa:	aa02      	add	r2, sp, #8
 801b7fc:	42a9      	cmp	r1, r5
		callback.pointer = pointer;
 801b7fe:	f8cd 9008 	str.w	r9, [sp, #8]
 801b802:	d00d      	beq.n	801b820 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x98>
 801b804:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801b806:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801b80a:	3510      	adds	r5, #16
 801b80c:	607d      	str	r5, [r7, #4]
	target_register->mode.pointer = true;
 801b80e:	2301      	movs	r3, #1
	osSemaphoreRelease(RegistersSemaphore);
 801b810:	6830      	ldr	r0, [r6, #0]
	target_register->mode.pointer = true;
 801b812:	7023      	strb	r3, [r4, #0]
	target_register->access.write = true;
 801b814:	f240 1301 	movw	r3, #257	@ 0x101
 801b818:	8123      	strh	r3, [r4, #8]
	osSemaphoreRelease(RegistersSemaphore);
 801b81a:	f7f1 fb3b 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801b81e:	e7cd      	b.n	801b7bc <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x34>
	  _M_realloc_insert(end(), __x);
 801b820:	4638      	mov	r0, r7
 801b822:	f7f4 fb47 	bl	800feb4 <_ZNSt6vectorI17RegisterCallbacksIfESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801b826:	e7f2      	b.n	801b80e <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x86>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801b828:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801b82a:	4291      	cmp	r1, r2
 801b82c:	d302      	bcc.n	801b834 <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xac>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801b82e:	4803      	ldr	r0, [pc, #12]	@ (801b83c <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0xb4>)
 801b830:	f001 fa57 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
		callback->pointer = pointer;
 801b834:	0109      	lsls	r1, r1, #4
 801b836:	f843 9001 	str.w	r9, [r3, r1]
 801b83a:	e7e8      	b.n	801b80e <_ZN9Registers18AddRegisterPointerIfEEbtPT_+0x86>
 801b83c:	0801dfb4 	.word	0x0801dfb4

0801b840 <_ZN10SensorDataC1EOS_>:
struct SensorData {
 801b840:	788a      	ldrb	r2, [r1, #2]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801b842:	2300      	movs	r3, #0
 801b844:	b510      	push	{r4, lr}
 801b846:	880c      	ldrh	r4, [r1, #0]
 801b848:	7082      	strb	r2, [r0, #2]
 801b84a:	8004      	strh	r4, [r0, #0]
 801b84c:	7a0a      	ldrb	r2, [r1, #8]
 801b84e:	684c      	ldr	r4, [r1, #4]
 801b850:	7202      	strb	r2, [r0, #8]
 801b852:	6044      	str	r4, [r0, #4]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801b854:	68ca      	ldr	r2, [r1, #12]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801b856:	60cb      	str	r3, [r1, #12]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 801b858:	60c2      	str	r2, [r0, #12]
 801b85a:	690a      	ldr	r2, [r1, #16]
 801b85c:	6102      	str	r2, [r0, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801b85e:	694a      	ldr	r2, [r1, #20]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 801b860:	e9c1 3304 	strd	r3, r3, [r1, #16]
	  _M_end_of_storage(__x._M_end_of_storage)
 801b864:	6142      	str	r2, [r0, #20]
 801b866:	bd10      	pop	{r4, pc}

0801b868 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef>:
bool Sensors::AddInterface(uint8_t ID, I2C_HandleTypeDef* interface) {
 801b868:	b570      	push	{r4, r5, r6, lr}
 801b86a:	b0a0      	sub	sp, #128	@ 0x80
 801b86c:	4616      	mov	r6, r2
 801b86e:	4604      	mov	r4, r0
	FindInterface(ID, &success);
 801b870:	f10d 0203 	add.w	r2, sp, #3
 801b874:	f7fd fc4e 	bl	8019114 <_ZN7Sensors13FindInterfaceEhPb>
	if (success) return false;
 801b878:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d13a      	bne.n	801b8f6 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x8e>
	I2Cinterface.timeout = UINT32_MAX;
 801b880:	f04f 35ff 	mov.w	r5, #4294967295
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b884:	2014      	movs	r0, #20
	I2Cinterface.request_regular_process = false;
 801b886:	f88d 3005 	strb.w	r3, [sp, #5]
	I2Cinterface.error_flag = false;
 801b88a:	f88d 3006 	strb.w	r3, [sp, #6]
	I2Cinterface.ID = ID;
 801b88e:	f88d 1004 	strb.w	r1, [sp, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801b892:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
 801b896:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
	I2Cinterface.interface = interface;
 801b89a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801b89e:	f001 f968 	bl	801cb72 <_Znwj>
	  this->_M_impl._M_finish = __tmp + __old_size;
 801b8a2:	e9cd 001a 	strd	r0, r0, [sp, #104]	@ 0x68
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b8a6:	3014      	adds	r0, #20
 801b8a8:	901c      	str	r0, [sp, #112]	@ 0x70
 801b8aa:	20a0      	movs	r0, #160	@ 0xa0
 801b8ac:	f001 f961 	bl	801cb72 <_Znwj>
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b8b0:	4629      	mov	r1, r5
	I2Cinterface.current_group_ID = UINT8_MAX;
 801b8b2:	9515      	str	r5, [sp, #84]	@ 0x54
	  this->_M_impl._M_finish = __tmp + __old_size;
 801b8b4:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801b8b8:	30a0      	adds	r0, #160	@ 0xa0
 801b8ba:	901f      	str	r0, [sp, #124]	@ 0x7c
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801b8bc:	6820      	ldr	r0, [r4, #0]
 801b8be:	f7f1 fab5 	bl	800ce2c <osSemaphoreAcquire>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801b8c2:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
 801b8c6:	4298      	cmp	r0, r3
 801b8c8:	d00e      	beq.n	801b8e8 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x80>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b8ca:	a901      	add	r1, sp, #4
 801b8cc:	f7ff fc72 	bl	801b1b4 <_ZN12I2CInterfaceC1ERKS_>
	    ++this->_M_impl._M_finish;
 801b8d0:	6963      	ldr	r3, [r4, #20]
 801b8d2:	337c      	adds	r3, #124	@ 0x7c
 801b8d4:	6163      	str	r3, [r4, #20]
	osSemaphoreRelease(SensorsSemaphore);
 801b8d6:	6820      	ldr	r0, [r4, #0]
 801b8d8:	f7f1 fadc 	bl	800ce94 <osSemaphoreRelease>
}
 801b8dc:	a801      	add	r0, sp, #4
 801b8de:	f7fd fef3 	bl	80196c8 <_ZN12I2CInterfaceD1Ev>
	return true;
 801b8e2:	2001      	movs	r0, #1
}
 801b8e4:	b020      	add	sp, #128	@ 0x80
 801b8e6:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
 801b8e8:	4601      	mov	r1, r0
 801b8ea:	aa01      	add	r2, sp, #4
 801b8ec:	f104 0010 	add.w	r0, r4, #16
 801b8f0:	f7ff fcf2 	bl	801b2d8 <_ZNSt6vectorI12I2CInterfaceSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801b8f4:	e7ef      	b.n	801b8d6 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x6e>
	if (success) return false;
 801b8f6:	2000      	movs	r0, #0
 801b8f8:	e7f4      	b.n	801b8e4 <_ZN7Sensors12AddInterfaceEhP19__I2C_HandleTypeDef+0x7c>
	...

0801b8fc <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b900:	e9d0 6800 	ldrd	r6, r8, [r0]
 801b904:	4b2a      	ldr	r3, [pc, #168]	@ (801b9b0 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
 801b906:	4605      	mov	r5, r0
 801b908:	eba8 0406 	sub.w	r4, r8, r6
 801b90c:	460f      	mov	r7, r1
 801b90e:	4691      	mov	r9, r2
 801b910:	10e4      	asrs	r4, r4, #3
 801b912:	435c      	muls	r4, r3
	if (max_size() - size() < __n)
 801b914:	4b27      	ldr	r3, [pc, #156]	@ (801b9b4 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
 801b916:	429c      	cmp	r4, r3
 801b918:	d102      	bne.n	801b920 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
 801b91a:	4827      	ldr	r0, [pc, #156]	@ (801b9b8 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 801b91c:	f001 f9de 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801b920:	45b0      	cmp	r8, r6
 801b922:	bf14      	ite	ne
 801b924:	4622      	movne	r2, r4
 801b926:	2201      	moveq	r2, #1
 801b928:	eba1 0b06 	sub.w	fp, r1, r6
 801b92c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b92e:	d223      	bcs.n	801b978 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b930:	b324      	cbz	r4, 801b97c <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801b932:	429c      	cmp	r4, r3
 801b934:	bf28      	it	cs
 801b936:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801b938:	2018      	movs	r0, #24
 801b93a:	4360      	muls	r0, r4
 801b93c:	f001 f919 	bl	801cb72 <_Znwj>
 801b940:	4682      	mov	sl, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b942:	4649      	mov	r1, r9
 801b944:	eb0a 000b 	add.w	r0, sl, fp
 801b948:	f7fd fb44 	bl	8018fd4 <_ZN10SensorDataC1ERKS_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801b94c:	46b1      	mov	r9, r6
      _ForwardIterator __cur = __result;
 801b94e:	4650      	mov	r0, sl
      for (; __first != __last; ++__first, (void)++__cur)
 801b950:	454f      	cmp	r7, r9
 801b952:	f100 0b18 	add.w	fp, r0, #24
 801b956:	d113      	bne.n	801b980 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x84>
 801b958:	45c1      	cmp	r9, r8
 801b95a:	d11c      	bne.n	801b996 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	if (__p)
 801b95c:	b126      	cbz	r6, 801b968 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
		    this->_M_impl._M_end_of_storage - __old_start);
 801b95e:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801b960:	4630      	mov	r0, r6
 801b962:	1b89      	subs	r1, r1, r6
 801b964:	f001 f8e0 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b968:	2318      	movs	r3, #24
 801b96a:	fb03 a304 	mla	r3, r3, r4, sl
      this->_M_impl._M_finish = __new_finish;
 801b96e:	e9c5 ab00 	strd	sl, fp, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b972:	60ab      	str	r3, [r5, #8]
    }
 801b974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b978:	461c      	mov	r4, r3
 801b97a:	e7dd      	b.n	801b938 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801b97c:	46a2      	mov	sl, r4
 801b97e:	e7e0      	b.n	801b942 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b980:	4649      	mov	r1, r9
 801b982:	f7ff ff5d 	bl	801b840 <_ZN10SensorDataC1EOS_>
      }
 801b986:	f109 000c 	add.w	r0, r9, #12
 801b98a:	f7e6 fb33 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801b98e:	f109 0918 	add.w	r9, r9, #24
 801b992:	4658      	mov	r0, fp
 801b994:	e7dc      	b.n	801b950 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x54>
 801b996:	4649      	mov	r1, r9
 801b998:	4658      	mov	r0, fp
 801b99a:	f7ff ff51 	bl	801b840 <_ZN10SensorDataC1EOS_>
 801b99e:	f109 000c 	add.w	r0, r9, #12
 801b9a2:	f10b 0b18 	add.w	fp, fp, #24
 801b9a6:	f109 0918 	add.w	r9, r9, #24
 801b9aa:	f7e6 fb23 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801b9ae:	e7d3      	b.n	801b958 <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5c>
 801b9b0:	aaaaaaab 	.word	0xaaaaaaab
 801b9b4:	05555555 	.word	0x05555555
 801b9b8:	0801dd74 	.word	0x0801dd74

0801b9bc <_ZN7Sensors21AddSensorDataWithTypeEhthb>:
bool Sensors::AddSensorDataWithType(uint8_t sensor_ID, uint16_t sensor_register, uint8_t type, bool publishable) {
 801b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9c0:	b08f      	sub	sp, #60	@ 0x3c
 801b9c2:	4615      	mov	r5, r2
 801b9c4:	4604      	mov	r4, r0
 801b9c6:	4698      	mov	r8, r3
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801b9c8:	f10d 020e 	add.w	r2, sp, #14
bool Sensors::AddSensorDataWithType(uint8_t sensor_ID, uint16_t sensor_register, uint8_t type, bool publishable) {
 801b9cc:	468b      	mov	fp, r1
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801b9ce:	f7fd fc77 	bl	80192c0 <_ZN7Sensors10FindSensorEhPb>
	if (!success) return false;
 801b9d2:	f89d 600e 	ldrb.w	r6, [sp, #14]
	Sensor* sensor = FindSensor(sensor_ID, &success);
 801b9d6:	4607      	mov	r7, r0
	if (!success) return false;
 801b9d8:	b926      	cbnz	r6, 801b9e4 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x28>
 801b9da:	2600      	movs	r6, #0
}
 801b9dc:	4630      	mov	r0, r6
 801b9de:	b00f      	add	sp, #60	@ 0x3c
 801b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 801b9e4:	7841      	ldrb	r1, [r0, #1]
 801b9e6:	f10d 020e 	add.w	r2, sp, #14
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f7fd fbcf 	bl	801918e <_ZN7Sensors15FindSensorGroupEhPb>
	if (!success) return HAL_ERROR;
 801b9f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
	SensorGroup* sensor_group = FindSensorGroup(sensor->parent, &success);
 801b9f4:	4681      	mov	r9, r0
	if (!success) return HAL_ERROR;
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d0f0      	beq.n	801b9dc <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x20>
	if (!sensor_group->publishable) publishable = false;
 801b9fa:	f890 a003 	ldrb.w	sl, [r0, #3]
	FindSensorData(sensor_ID, sensor_register, &success);
 801b9fe:	462a      	mov	r2, r5
	if (!sensor_group->publishable) publishable = false;
 801ba00:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
	FindSensorData(sensor_ID, sensor_register, &success);
 801ba04:	4659      	mov	r1, fp
	if (!sensor_group->publishable) publishable = false;
 801ba06:	f1ba 0f00 	cmp.w	sl, #0
	FindSensorData(sensor_ID, sensor_register, &success);
 801ba0a:	4620      	mov	r0, r4
	if (!sensor_group->publishable) publishable = false;
 801ba0c:	bf18      	it	ne
 801ba0e:	469a      	movne	sl, r3
	FindSensorData(sensor_ID, sensor_register, &success);
 801ba10:	f10d 030e 	add.w	r3, sp, #14
 801ba14:	f7fd fd1b 	bl	801944e <_ZN7Sensors14FindSensorDataEhtPb>
	if (success) return false;
 801ba18:	f89d 600e 	ldrb.w	r6, [sp, #14]
 801ba1c:	2e00      	cmp	r6, #0
 801ba1e:	d1dc      	bne.n	801b9da <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x1e>
	data.parent = sensor->ID;
 801ba20:	793b      	ldrb	r3, [r7, #4]
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ba22:	f04f 31ff 	mov.w	r1, #4294967295
	data.type =	type;
 801ba26:	f88d 8027 	strb.w	r8, [sp, #39]	@ 0x27
	switch (data.type) {
 801ba2a:	f108 38ff 	add.w	r8, r8, #4294967295
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ba2e:	6820      	ldr	r0, [r4, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801ba30:	960d      	str	r6, [sp, #52]	@ 0x34
	data.active = false;
 801ba32:	f88d 6020 	strb.w	r6, [sp, #32]
	data.parent = sensor->ID;
 801ba36:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
	data.register_address = sensor_register;
 801ba3a:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
	data.read_index = 0;
 801ba3e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801ba42:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
	osSemaphoreAcquire(SensorsSemaphore, osWaitForever);
 801ba46:	f7f1 f9f1 	bl	800ce2c <osSemaphoreAcquire>
	switch (data.type) {
 801ba4a:	f1b8 0f07 	cmp.w	r8, #7
 801ba4e:	d813      	bhi.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
 801ba50:	e8df f018 	tbh	[pc, r8, lsl #1]
 801ba54:	00460008 	.word	0x00460008
 801ba58:	0012007c 	.word	0x0012007c
 801ba5c:	00120012 	.word	0x00120012
 801ba60:	00e70012 	.word	0x00e70012
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ba64:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 801ba68:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint16.size();
 801ba6a:	f3c3 0847 	ubfx	r8, r3, #1, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ba6e:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint16.size();
 801ba72:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ba76:	d906      	bls.n	801ba86 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xca>
		if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;} // TODO Or continue? Simply don't add the topic ?
 801ba78:	6820      	ldr	r0, [r4, #0]
 801ba7a:	f7f1 fa0b 	bl	800ce94 <osSemaphoreRelease>
      }
 801ba7e:	a80b      	add	r0, sp, #44	@ 0x2c
 801ba80:	f7e6 fab8 	bl	8001ff4 <_ZNSt12_Vector_baseI9I2CAccessSaIS0_EED1Ev>
 801ba84:	e7aa      	b.n	801b9dc <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x20>
		success = registers->AddRegister<uint16_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801ba86:	4629      	mov	r1, r5
 801ba88:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801ba8c:	f7ff f818 	bl	801aac0 <_ZN9Registers11AddRegisterItEEbt>
 801ba90:	f88d 000e 	strb.w	r0, [sp, #14]
 801ba94:	2800      	cmp	r0, #0
 801ba96:	d0ef      	beq.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		sensor_data_uint16.push_back(0);
 801ba98:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801ba9a:	a904      	add	r1, sp, #16
 801ba9c:	f104 001c 	add.w	r0, r4, #28
	return *(this->_M_impl._M_start + __n);
 801baa0:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801baa4:	f8ad 3010 	strh.w	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801baa8:	f7fe fea6 	bl	801a7f8 <_ZNSt6vectorItSaItEE12emplace_backIJtEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801baac:	69e2      	ldr	r2, [r4, #28]
		success = registers->AddRegisterPointer<uint16_t>(sensor_register, &(sensor_data_uint16[data.index]));
 801baae:	4629      	mov	r1, r5
 801bab0:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bab4:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 801bab8:	f7ff f8f3 	bl	801aca2 <_ZN9Registers18AddRegisterPointerItEEbtPT_>
 801babc:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint16.erase(sensor_data_uint16.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801bac0:	2800      	cmp	r0, #0
 801bac2:	f040 8112 	bne.w	801bcea <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x32e>
      { return __normal_iterator(_M_current + __n); }
 801bac6:	69e0      	ldr	r0, [r4, #28]
      : _M_current(__i) { }
 801bac8:	6a22      	ldr	r2, [r4, #32]
      { return __normal_iterator(_M_current + __n); }
 801baca:	4458      	add	r0, fp
 801bacc:	1c81      	adds	r1, r0, #2
      if (__position + 1 != end())
 801bace:	4291      	cmp	r1, r2
 801bad0:	d002      	beq.n	801bad8 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x11c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801bad2:	1a52      	subs	r2, r2, r1
 801bad4:	f001 ffca 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 801bad8:	6a23      	ldr	r3, [r4, #32]
 801bada:	3b02      	subs	r3, #2
 801badc:	6223      	str	r3, [r4, #32]
 801bade:	e7cb      	b.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bae0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 801bae4:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint32.size();
 801bae6:	f3c3 0887 	ubfx	r8, r3, #2, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801baea:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint32.size();
 801baee:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801baf2:	d8c1      	bhi.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		success = registers->AddRegister<uint32_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801baf4:	4629      	mov	r1, r5
 801baf6:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bafa:	f7ff f817 	bl	801ab2c <_ZN9Registers11AddRegisterImEEbt>
 801bafe:	f88d 000e 	strb.w	r0, [sp, #14]
 801bb02:	2800      	cmp	r0, #0
 801bb04:	d0b8      	beq.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		sensor_data_uint32.push_back(0);
 801bb06:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801bb08:	a904      	add	r1, sp, #16
 801bb0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
	return *(this->_M_impl._M_start + __n);
 801bb0e:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801bb12:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801bb14:	f7fe febc 	bl	801a890 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801bb18:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
		success = registers->AddRegisterPointer<uint32_t>(sensor_register, &(sensor_data_uint32[data.index]));
 801bb1a:	4629      	mov	r1, r5
 801bb1c:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bb20:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 801bb24:	f7ff f946 	bl	801adb4 <_ZN9Registers18AddRegisterPointerImEEbtPT_>
 801bb28:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint32.erase(sensor_data_uint32.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801bb2c:	2800      	cmp	r0, #0
 801bb2e:	f040 80dc 	bne.w	801bcea <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x32e>
 801bb32:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      : _M_current(__i) { }
 801bb34:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      { return __normal_iterator(_M_current + __n); }
 801bb36:	4458      	add	r0, fp
 801bb38:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 801bb3a:	4291      	cmp	r1, r2
 801bb3c:	d002      	beq.n	801bb44 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x188>
 801bb3e:	1a52      	subs	r2, r2, r1
 801bb40:	f001 ff94 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 801bb44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801bb46:	3b04      	subs	r3, #4
 801bb48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bb4a:	e795      	b.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bb4c:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	@ 0x34
 801bb50:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_uint64.size();
 801bb52:	f3c3 08c7 	ubfx	r8, r3, #3, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bb56:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_uint64.size();
 801bb5a:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bb5e:	d88b      	bhi.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		success = registers->AddRegister<uint64_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bb60:	f8d4 b08c 	ldr.w	fp, [r4, #140]	@ 0x8c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bb64:	f04f 31ff 	mov.w	r1, #4294967295
 801bb68:	f8db 0000 	ldr.w	r0, [fp]
 801bb6c:	f7f1 f95e 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801bb70:	f10d 020f 	add.w	r2, sp, #15
 801bb74:	4629      	mov	r1, r5
 801bb76:	4658      	mov	r0, fp
 801bb78:	f7fc fdc7 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801bb7c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801bb80:	b123      	cbz	r3, 801bb8c <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x1d0>
		osSemaphoreRelease(RegistersSemaphore);
 801bb82:	f8db 0000 	ldr.w	r0, [fp]
 801bb86:	f7f1 f985 	bl	800ce94 <osSemaphoreRelease>
		success = registers->AddRegister<float>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bb8a:	e775      	b.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bb8c:	f10d 000f 	add.w	r0, sp, #15
	configuration_.mode = mode;
 801bb90:	f8ad 3010 	strh.w	r3, [sp, #16]
 801bb94:	9301      	str	r3, [sp, #4]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bb96:	f7fc ff55 	bl	8018a44 <_ZN9Registers9GetTypeIDIyEEhPb.isra.0>
	configuration_.register_info = register_;
 801bb9a:	9b01      	ldr	r3, [sp, #4]
 801bb9c:	2201      	movs	r2, #1
 801bb9e:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bba2:	f88d 3015 	strb.w	r3, [sp, #21]
 801bba6:	f88d 0014 	strb.w	r0, [sp, #20]
 801bbaa:	f8ad 2016 	strh.w	r2, [sp, #22]
	configuration_.register_semaphore = NULL;
 801bbae:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (success) {
 801bbb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801bbb6:	b123      	cbz	r3, 801bbc2 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x206>
		registers.push_back(configuration_);
 801bbb8:	a904      	add	r1, sp, #16
 801bbba:	f10b 0004 	add.w	r0, fp, #4
 801bbbe:	f7f4 f937 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801bbc2:	f8db 0000 	ldr.w	r0, [fp]
 801bbc6:	f7f1 f965 	bl	800ce94 <osSemaphoreRelease>
	return success;
 801bbca:	f89d 300f 	ldrb.w	r3, [sp, #15]
		success = registers->AddRegister<uint64_t>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bbce:	f88d 300e 	strb.w	r3, [sp, #14]
 801bbd2:	2b00      	cmp	r3, #0
 801bbd4:	f43f af50 	beq.w	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		sensor_data_uint64.push_back(0);
 801bbd8:	2200      	movs	r2, #0
 801bbda:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801bbdc:	a904      	add	r1, sp, #16
 801bbde:	f104 0034 	add.w	r0, r4, #52	@ 0x34
	return *(this->_M_impl._M_start + __n);
 801bbe2:	ea4f 0bc8 	mov.w	fp, r8, lsl #3
 801bbe6:	e9cd 2304 	strd	r2, r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801bbea:	f7fe fe9d 	bl	801a928 <_ZNSt6vectorIySaIyEE12emplace_backIJyEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801bbee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
		success = registers->AddRegisterPointer<uint64_t>(sensor_register, &(sensor_data_uint64[data.index]));
 801bbf0:	4629      	mov	r1, r5
 801bbf2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bbf6:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 801bbfa:	f7ff fd69 	bl	801b6d0 <_ZN9Registers18AddRegisterPointerIyEEbtPT_>
 801bbfe:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_uint64.erase(sensor_data_uint64.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801bc02:	2800      	cmp	r0, #0
 801bc04:	d171      	bne.n	801bcea <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x32e>
 801bc06:	6b60      	ldr	r0, [r4, #52]	@ 0x34
      : _M_current(__i) { }
 801bc08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      { return __normal_iterator(_M_current + __n); }
 801bc0a:	4458      	add	r0, fp
 801bc0c:	f100 0108 	add.w	r1, r0, #8
      if (__position + 1 != end())
 801bc10:	4291      	cmp	r1, r2
 801bc12:	d002      	beq.n	801bc1a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x25e>
 801bc14:	1a52      	subs	r2, r2, r1
 801bc16:	f001 ff29 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 801bc1a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bc1c:	3b08      	subs	r3, #8
 801bc1e:	63a3      	str	r3, [r4, #56]	@ 0x38
 801bc20:	e72a      	b.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801bc22:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 801bc26:	1a9b      	subs	r3, r3, r2
		data.index = sensor_data_float.size();
 801bc28:	f3c3 0887 	ubfx	r8, r3, #2, #8
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bc2c:	f1b8 0f13 	cmp.w	r8, #19
		data.index = sensor_data_float.size();
 801bc30:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
		if (data.index >= SENSOR_MAX_REGISTER_NB_PER_TYPE) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bc34:	f63f af20 	bhi.w	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		success = registers->AddRegister<float>(sensor_register); if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bc38:	f8d4 b08c 	ldr.w	fp, [r4, #140]	@ 0x8c
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801bc3c:	f04f 31ff 	mov.w	r1, #4294967295
 801bc40:	f8db 0000 	ldr.w	r0, [fp]
 801bc44:	f7f1 f8f2 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801bc48:	f10d 020f 	add.w	r2, sp, #15
 801bc4c:	4629      	mov	r1, r5
 801bc4e:	4658      	mov	r0, fp
 801bc50:	f7fc fd5b 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801bc54:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d192      	bne.n	801bb82 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x1c6>
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bc5c:	f10d 000f 	add.w	r0, sp, #15
	configuration_.mode = mode;
 801bc60:	f8ad 3010 	strh.w	r3, [sp, #16]
 801bc64:	9301      	str	r3, [sp, #4]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801bc66:	f7fc fe9f 	bl	80189a8 <_ZN9Registers9GetTypeIDIfEEhPb.isra.0>
	configuration_.register_info = register_;
 801bc6a:	9b01      	ldr	r3, [sp, #4]
 801bc6c:	2201      	movs	r2, #1
 801bc6e:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bc72:	f88d 3015 	strb.w	r3, [sp, #21]
 801bc76:	f88d 0014 	strb.w	r0, [sp, #20]
 801bc7a:	f8ad 2016 	strh.w	r2, [sp, #22]
	configuration_.register_semaphore = NULL;
 801bc7e:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (success) {
 801bc82:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801bc86:	b123      	cbz	r3, 801bc92 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x2d6>
		registers.push_back(configuration_);
 801bc88:	a904      	add	r1, sp, #16
 801bc8a:	f10b 0004 	add.w	r0, fp, #4
 801bc8e:	f7f4 f8cf 	bl	800fe30 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE9push_backERKS0_>
	osSemaphoreRelease(RegistersSemaphore);
 801bc92:	f8db 0000 	ldr.w	r0, [fp]
 801bc96:	f7f1 f8fd 	bl	800ce94 <osSemaphoreRelease>
	return success;
 801bc9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801bc9e:	f88d 300e 	strb.w	r3, [sp, #14]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	f43f aee8 	beq.w	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
		sensor_data_float.push_back(0);
 801bca8:	2300      	movs	r3, #0
      { emplace_back(std::move(__x)); }
 801bcaa:	a904      	add	r1, sp, #16
 801bcac:	f104 0040 	add.w	r0, r4, #64	@ 0x40
	return *(this->_M_impl._M_start + __n);
 801bcb0:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801bcb4:	9304      	str	r3, [sp, #16]
      { emplace_back(std::move(__x)); }
 801bcb6:	f7fe fe85 	bl	801a9c4 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
	return *(this->_M_impl._M_start + __n);
 801bcba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
		success = registers->AddRegisterPointer<float>(sensor_register, &(sensor_data_float[data.index]));
 801bcbc:	4629      	mov	r1, r5
 801bcbe:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bcc2:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 801bcc6:	f7ff fd5f 	bl	801b788 <_ZN9Registers18AddRegisterPointerIfEEbtPT_>
 801bcca:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {sensor_data_float.erase(sensor_data_float.begin() + data.index); osSemaphoreRelease(SensorsSemaphore); return false;}
 801bcce:	b960      	cbnz	r0, 801bcea <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x32e>
 801bcd0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
      : _M_current(__i) { }
 801bcd2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      { return __normal_iterator(_M_current + __n); }
 801bcd4:	4458      	add	r0, fp
 801bcd6:	1d01      	adds	r1, r0, #4
      if (__position + 1 != end())
 801bcd8:	4291      	cmp	r1, r2
 801bcda:	d002      	beq.n	801bce2 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x326>
 801bcdc:	1a52      	subs	r2, r2, r1
 801bcde:	f001 fec5 	bl	801da6c <memmove>
      --this->_M_impl._M_finish;
 801bce2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801bce4:	3b04      	subs	r3, #4
 801bce6:	6463      	str	r3, [r4, #68]	@ 0x44
 801bce8:	e6c6      	b.n	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
	success = registers->AddRegisterSemaphore(sensor_register, &SensorsSemaphore);
 801bcea:	4622      	mov	r2, r4
 801bcec:	4629      	mov	r1, r5
 801bcee:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bcf2:	f7fc fd29 	bl	8018748 <_ZN9Registers20AddRegisterSemaphoreEtPPv>
	success = registers->SetRegisterPermissions(sensor_register, READ_PERMISSION);
 801bcf6:	2202      	movs	r2, #2
 801bcf8:	4629      	mov	r1, r5
 801bcfa:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 801bcfe:	f7fc fd78 	bl	80187f2 <_ZN9Registers22SetRegisterPermissionsEth>
 801bd02:	4680      	mov	r8, r0
 801bd04:	f88d 000e 	strb.w	r0, [sp, #14]
	if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;}
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	f43f aeb5 	beq.w	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
	if (publishable) {
 801bd0e:	f1ba 0f00 	cmp.w	sl, #0
 801bd12:	d00b      	beq.n	801bd2c <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x370>
		success = publishers->AddTopic(sensor_group->ID, sensor_register);
 801bd14:	462a      	mov	r2, r5
 801bd16:	f899 1002 	ldrb.w	r1, [r9, #2]
 801bd1a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801bd1e:	f7fb fccf 	bl	80176c0 <_ZN10Publishers8AddTopicEht>
 801bd22:	f88d 000e 	strb.w	r0, [sp, #14]
		if (!success) {osSemaphoreRelease(SensorsSemaphore); return false;} // TODO Or continue? Simply don't add the topic ?
 801bd26:	2800      	cmp	r0, #0
 801bd28:	f43f aea6 	beq.w	801ba78 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xbc>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801bd2c:	e9d7 0306 	ldrd	r0, r3, [r7, #24]
 801bd30:	4298      	cmp	r0, r3
 801bd32:	d00a      	beq.n	801bd4a <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x38e>
 801bd34:	a908      	add	r1, sp, #32
 801bd36:	f7fd f94d 	bl	8018fd4 <_ZN10SensorDataC1ERKS_>
	    ++this->_M_impl._M_finish;
 801bd3a:	69bb      	ldr	r3, [r7, #24]
 801bd3c:	3318      	adds	r3, #24
 801bd3e:	61bb      	str	r3, [r7, #24]
	osSemaphoreRelease(SensorsSemaphore);
 801bd40:	6820      	ldr	r0, [r4, #0]
	return true;
 801bd42:	4646      	mov	r6, r8
	osSemaphoreRelease(SensorsSemaphore);
 801bd44:	f7f1 f8a6 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801bd48:	e699      	b.n	801ba7e <_ZN7Sensors21AddSensorDataWithTypeEhthb+0xc2>
	  _M_realloc_insert(end(), __x);
 801bd4a:	4601      	mov	r1, r0
 801bd4c:	aa08      	add	r2, sp, #32
 801bd4e:	f107 0014 	add.w	r0, r7, #20
 801bd52:	f7ff fdd3 	bl	801b8fc <_ZNSt6vectorI10SensorDataSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801bd56:	e7f3      	b.n	801bd40 <_ZN7Sensors21AddSensorDataWithTypeEhthb+0x384>

0801bd58 <_ZN8Services4InitEP9RegistersP13CommunicationP4LEDS>:
 *
 * @param input registers_: the Registers instance
 * @param input communication_: the Communication instance
 * @param input leds_: the LEDS instance
 */
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 801bd58:	b510      	push	{r4, lr}
	registers = registers_;
 801bd5a:	f8c0 1c38 	str.w	r1, [r0, #3128]	@ 0xc38
	communication = communication_;
	leds = leds_;

	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801bd5e:	2101      	movs	r1, #1
void Services::Init(Registers* registers_, Communication* communication_, LEDS* leds_) {
 801bd60:	4604      	mov	r4, r0
	communication = communication_;
 801bd62:	f8c0 2c3c 	str.w	r2, [r0, #3132]	@ 0xc3c
	leds = leds_;
 801bd66:	f8c0 3c40 	str.w	r3, [r0, #3136]	@ 0xc40
	ServiceSemaphore = osSemaphoreNew(1,1,NULL);
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	f7f1 f801 	bl	800cd74 <osSemaphoreNew>
 801bd72:	6020      	str	r0, [r4, #0]
	osSemaphoreRelease(ServiceSemaphore);
}
 801bd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(ServiceSemaphore);
 801bd78:	f7f1 b88c 	b.w	800ce94 <osSemaphoreRelease>

0801bd7c <_ZN8Services10ResetQueueEv>:

/**
 * @brief Reset the pending services
 */
void Services::ResetQueue(void) {
 801bd7c:	b538      	push	{r3, r4, r5, lr}
	queue_size = 0;
 801bd7e:	2500      	movs	r5, #0
void Services::ResetQueue(void) {
 801bd80:	4604      	mov	r4, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bd82:	f04f 31ff 	mov.w	r1, #4294967295
	queue_size = 0;
 801bd86:	7105      	strb	r5, [r0, #4]
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bd88:	6800      	ldr	r0, [r0, #0]
 801bd8a:	f7f1 f84f 	bl	800ce2c <osSemaphoreAcquire>
	for (uint8_t index = 0; index < NUMBER_OF_SERVICES; index++) {
		services[index].active = false;
		services[index].reception_flag = false;
		services[index].error = false;
	}
	osSemaphoreRelease(ServiceSemaphore);
 801bd8e:	6820      	ldr	r0, [r4, #0]
		services[index].active = false;
 801bd90:	8125      	strh	r5, [r4, #8]
		services[index].error = false;
 801bd92:	7725      	strb	r5, [r4, #28]
		services[index].active = false;
 801bd94:	8425      	strh	r5, [r4, #32]
		services[index].error = false;
 801bd96:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 801bd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	osSemaphoreRelease(ServiceSemaphore);
 801bd9e:	f7f1 b879 	b.w	800ce94 <osSemaphoreRelease>

0801bda2 <_ZN8ServicesC1Ev>:
Services::Services() {
 801bda2:	b510      	push	{r4, lr}
 801bda4:	4604      	mov	r4, r0
	ResetQueue();
 801bda6:	f7ff ffe9 	bl	801bd7c <_ZN8Services10ResetQueueEv>
}
 801bdaa:	4620      	mov	r0, r4
 801bdac:	bd10      	pop	{r4, pc}

0801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>:
 * @param input interface: the interface from which the data comes from, used to find the service
 * @param input access: whether WRITE or READ
 * @param output success: whether successful
 * @return service index
 */
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801bdae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801bdb2:	460c      	mov	r4, r1
 801bdb4:	a902      	add	r1, sp, #8
 801bdb6:	4605      	mov	r5, r0
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bdb8:	6800      	ldr	r0, [r0, #0]
uint8_t Services::FindQueueIndex(uint8_t start_index, Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801bdba:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 801bdbe:	e901 000c 	stmdb	r1, {r2, r3}
	osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bdc2:	f04f 31ff 	mov.w	r1, #4294967295
 801bdc6:	f89d 7021 	ldrb.w	r7, [sp, #33]	@ 0x21
 801bdca:	f7f1 f82f 	bl	800ce2c <osSemaphoreAcquire>
		if (services[index].active) {
			Register registered_register = services[index].configuration.register_;
			ServiceInterface registered_interface =services[index].configuration.interface;

			// Check register address
			if (remote_register.address == registered_register.address) {
 801bdce:	f8bd 1000 	ldrh.w	r1, [sp]
 801bdd2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
				// Check interface
				if (interface.interface == registered_interface.interface) {
 801bdd6:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801bdda:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801bdde:	2c01      	cmp	r4, #1
 801bde0:	d905      	bls.n	801bdee <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x40>
			}
		}
	}
	osSemaphoreRelease(ServiceSemaphore);
	*success = false;
	return 0;
 801bde2:	2400      	movs	r4, #0
	osSemaphoreRelease(ServiceSemaphore);
 801bde4:	6828      	ldr	r0, [r5, #0]
 801bde6:	f7f1 f855 	bl	800ce94 <osSemaphoreRelease>
	return 0;
 801bdea:	4626      	mov	r6, r4
 801bdec:	e014      	b.n	801be18 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x6a>
		if (services[index].active) {
 801bdee:	7a1e      	ldrb	r6, [r3, #8]
 801bdf0:	b1c6      	cbz	r6, 801be24 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			if (remote_register.address == registered_register.address) {
 801bdf2:	895a      	ldrh	r2, [r3, #10]
 801bdf4:	428a      	cmp	r2, r1
 801bdf6:	d115      	bne.n	801be24 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
				if (interface.interface == registered_interface.interface) {
 801bdf8:	7c9a      	ldrb	r2, [r3, #18]
 801bdfa:	4282      	cmp	r2, r0
 801bdfc:	d112      	bne.n	801be24 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
			ServiceInterface registered_interface =services[index].configuration.interface;
 801bdfe:	7cda      	ldrb	r2, [r3, #19]
					if (interface.address == registered_interface.address || registered_interface.address == ALL || interface.address == ALL) {
 801be00:	4297      	cmp	r7, r2
 801be02:	d003      	beq.n	801be0c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 801be04:	2aff      	cmp	r2, #255	@ 0xff
 801be06:	d001      	beq.n	801be0c <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x5e>
 801be08:	2fff      	cmp	r7, #255	@ 0xff
 801be0a:	d10b      	bne.n	801be24 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
						if (access == services[index].configuration.access) { // check access type
 801be0c:	7d1a      	ldrb	r2, [r3, #20]
 801be0e:	4542      	cmp	r2, r8
 801be10:	d108      	bne.n	801be24 <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x76>
							osSemaphoreRelease(ServiceSemaphore);
 801be12:	6828      	ldr	r0, [r5, #0]
 801be14:	f7f1 f83e 	bl	800ce94 <osSemaphoreRelease>
							*success = true;
 801be18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
}
 801be1a:	4620      	mov	r0, r4
							*success = true;
 801be1c:	701e      	strb	r6, [r3, #0]
}
 801be1e:	b002      	add	sp, #8
 801be20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t index = start_index; index < NUMBER_OF_SERVICES; index++) {
 801be24:	3401      	adds	r4, #1
 801be26:	3318      	adds	r3, #24
 801be28:	b2e4      	uxtb	r4, r4
 801be2a:	e7d8      	b.n	801bdde <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb+0x30>

0801be2c <_ZN8Services12ReceiveWriteE20ServiceConfigurationh>:
 * @brief Receive a write service access acknowledgment
 *
 * @param input information: service information associated to the write acknowledgment
 * @param input status: value returned by the remote module
 */
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801be2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be30:	b08b      	sub	sp, #44	@ 0x2c
 801be32:	4605      	mov	r5, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = status;
		services[index].reception_flag = true;
 801be34:	f04f 0918 	mov.w	r9, #24
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801be38:	ae05      	add	r6, sp, #20
 801be3a:	f89d 7048 	ldrb.w	r7, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801be3e:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
void Services::ReceiveWrite(ServiceConfiguration information, uint8_t status) {
 801be42:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 801be46:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 801be48:	2100      	movs	r1, #0
	bool success = true;
 801be4a:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801be4e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801be52:	b913      	cbnz	r3, 801be5a <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x2e>
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 801be54:	b00b      	add	sp, #44	@ 0x2c
 801be56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801be5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801be5e:	4628      	mov	r0, r5
 801be60:	f8cd 8008 	str.w	r8, [sp, #8]
 801be64:	9301      	str	r3, [sp, #4]
 801be66:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801be6a:	f8ad 3000 	strh.w	r3, [sp]
 801be6e:	e896 000c 	ldmia.w	r6, {r2, r3}
 801be72:	f7ff ff9c 	bl	801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801be76:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801be7a:	4604      	mov	r4, r0
		if (not success) return;
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d0e9      	beq.n	801be54 <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x28>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801be80:	f04f 31ff 	mov.w	r1, #4294967295
 801be84:	6828      	ldr	r0, [r5, #0]
 801be86:	f7f0 ffd1 	bl	800ce2c <osSemaphoreAcquire>
		services[index].reception_flag = true;
 801be8a:	2201      	movs	r2, #1
		buffer_uint8[index][0] = status;
 801be8c:	eb05 2304 	add.w	r3, r5, r4, lsl #8
 801be90:	f883 7038 	strb.w	r7, [r3, #56]	@ 0x38
		services[index].reception_flag = true;
 801be94:	fb09 5304 	mla	r3, r9, r4, r5
		osSemaphoreRelease(ServiceSemaphore);
 801be98:	6828      	ldr	r0, [r5, #0]
		services[index].reception_flag = true;
 801be9a:	725a      	strb	r2, [r3, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801be9c:	f7f0 fffa 	bl	800ce94 <osSemaphoreRelease>
		start_index = index + 1;
 801bea0:	1c61      	adds	r1, r4, #1
 801bea2:	b2c9      	uxtb	r1, r1
 801bea4:	e7d3      	b.n	801be4e <_ZN8Services12ReceiveWriteE20ServiceConfigurationh+0x22>

0801bea6 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh>:
 * @brief Receive an service access error
 *
 * @param input information: service information associated to the acknowledgment
 * @param input error: error flag returned by the remote module
 */
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801bea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801beaa:	b08a      	sub	sp, #40	@ 0x28
 801beac:	4604      	mov	r4, r0
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
		if (not success) return;

		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
		buffer_uint8[index][0] = error;
		services[index].error = true;
 801beae:	2718      	movs	r7, #24
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801beb0:	ae05      	add	r6, sp, #20
 801beb2:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801beb6:	f10d 0927 	add.w	r9, sp, #39	@ 0x27
void Services::ReceiveError(ServiceConfiguration information, uint8_t error) {
 801beba:	e886 000e 	stmia.w	r6, {r1, r2, r3}
	bool success = true;
 801bebe:	2301      	movs	r3, #1
	uint8_t start_index = 0;
 801bec0:	2100      	movs	r1, #0
	bool success = true;
 801bec2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
	while (success) {
 801bec6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801beca:	b913      	cbnz	r3, 801bed2 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x2c>
		services[index].reception_flag = true;
		osSemaphoreRelease(ServiceSemaphore);

		start_index = index + 1;
	}
}
 801becc:	b00a      	add	sp, #40	@ 0x28
 801bece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801bed2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801bed6:	4620      	mov	r0, r4
 801bed8:	f8cd 9008 	str.w	r9, [sp, #8]
 801bedc:	9301      	str	r3, [sp, #4]
 801bede:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801bee2:	f8ad 3000 	strh.w	r3, [sp]
 801bee6:	e896 000c 	ldmia.w	r6, {r2, r3}
 801beea:	f7ff ff60 	bl	801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
		if (not success) return;
 801beee:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
		uint8_t index = FindQueueIndex(start_index, information.register_, information.interface, information.access, &success);
 801bef2:	4605      	mov	r5, r0
		if (not success) return;
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d0e9      	beq.n	801becc <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x26>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bef8:	f04f 31ff 	mov.w	r1, #4294967295
 801befc:	6820      	ldr	r0, [r4, #0]
 801befe:	f7f0 ff95 	bl	800ce2c <osSemaphoreAcquire>
		services[index].error = true;
 801bf02:	f105 0a01 	add.w	sl, r5, #1
		buffer_uint8[index][0] = error;
 801bf06:	eb04 2305 	add.w	r3, r4, r5, lsl #8
		services[index].error = true;
 801bf0a:	2201      	movs	r2, #1
		buffer_uint8[index][0] = error;
 801bf0c:	f883 8038 	strb.w	r8, [r3, #56]	@ 0x38
		services[index].error = true;
 801bf10:	fb05 7307 	mla	r3, r5, r7, r7
		osSemaphoreRelease(ServiceSemaphore);
 801bf14:	6820      	ldr	r0, [r4, #0]
		services[index].reception_flag = true;
 801bf16:	fb07 4505 	mla	r5, r7, r5, r4
		services[index].error = true;
 801bf1a:	4423      	add	r3, r4
 801bf1c:	711a      	strb	r2, [r3, #4]
		services[index].reception_flag = true;
 801bf1e:	726a      	strb	r2, [r5, #9]
		osSemaphoreRelease(ServiceSemaphore);
 801bf20:	f7f0 ffb8 	bl	800ce94 <osSemaphoreRelease>
		start_index = index + 1;
 801bf24:	fa5f f18a 	uxtb.w	r1, sl
 801bf28:	e7cd      	b.n	801bec6 <_ZN8Services12ReceiveErrorE20ServiceConfigurationh+0x20>

0801bf2a <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb>:
 * @param input interface: interface associated to the register to find
 * @param input access: access mode of the register to find
 * @param output success: whether successful
 * @return the Register complete configuration (type, isArray, length)
 */
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801bf2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf2e:	b087      	sub	sp, #28
 801bf30:	460d      	mov	r5, r1
 801bf32:	4604      	mov	r4, r0
 801bf34:	a904      	add	r1, sp, #16
 801bf36:	9f10      	ldr	r7, [sp, #64]	@ 0x40
	uint8_t index;
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801bf38:	4628      	mov	r0, r5
Register Services::FindRemoteRegister(Register remote_register, ServiceInterface interface, bool access, bool* success) {
 801bf3a:	e881 000c 	stmia.w	r1, {r2, r3}
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801bf3e:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 801bf42:	9702      	str	r7, [sp, #8]
 801bf44:	9301      	str	r3, [sp, #4]
 801bf46:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bf4a:	f8ad 3000 	strh.w	r3, [sp]
 801bf4e:	e891 000c 	ldmia.w	r1, {r2, r3}
 801bf52:	2100      	movs	r1, #0
 801bf54:	f7ff ff2b 	bl	801bdae <_ZN8Services14FindQueueIndexEh8Register16ServiceInterfacebPb>
	if (*success) {
 801bf58:	783b      	ldrb	r3, [r7, #0]
	index = FindQueueIndex(0, remote_register, interface, access, success);
 801bf5a:	4606      	mov	r6, r0
	if (*success) {
 801bf5c:	b1f3      	cbz	r3, 801bf9c <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x72>
		osSemaphoreAcquire(ServiceSemaphore, osWaitForever);
 801bf5e:	f04f 31ff 	mov.w	r1, #4294967295
 801bf62:	6828      	ldr	r0, [r5, #0]
 801bf64:	f7f0 ff62 	bl	800ce2c <osSemaphoreAcquire>
		Register found_register = services[index].configuration.register_;
 801bf68:	2318      	movs	r3, #24
 801bf6a:	210a      	movs	r1, #10
		osSemaphoreRelease(ServiceSemaphore);
 801bf6c:	6828      	ldr	r0, [r5, #0]
		Register found_register = services[index].configuration.register_;
 801bf6e:	fb03 5206 	mla	r2, r3, r6, r5
 801bf72:	fb13 1306 	smlabb	r3, r3, r6, r1
 801bf76:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 801bf7a:	442b      	add	r3, r5
 801bf7c:	f892 800c 	ldrb.w	r8, [r2, #12]
 801bf80:	89d6      	ldrh	r6, [r2, #14]
 801bf82:	78df      	ldrb	r7, [r3, #3]
		osSemaphoreRelease(ServiceSemaphore);
 801bf84:	f7f0 ff86 	bl	800ce94 <osSemaphoreRelease>

		return found_register;
 801bf88:	f8a4 9000 	strh.w	r9, [r4]
 801bf8c:	f884 8002 	strb.w	r8, [r4, #2]
 801bf90:	70e7      	strb	r7, [r4, #3]
 801bf92:	80a6      	strh	r6, [r4, #4]
	}

	*success = false;
	return Register();
}
 801bf94:	4620      	mov	r0, r4
 801bf96:	b007      	add	sp, #28
 801bf98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return Register();
 801bf9c:	6023      	str	r3, [r4, #0]
 801bf9e:	80a3      	strh	r3, [r4, #4]
 801bfa0:	e7f8      	b.n	801bf94 <_ZN8Services18FindRemoteRegisterE8Register16ServiceInterfacebPb+0x6a>
	...

0801bfa4 <_ZN11ServomotorsC1EPmS0_>:
 * @brief Class constructor
 *
 * @param input servomotor1_pulse_: timer pulse pointer of the servomotor 1
 * @param input servomotor2_pulse_: timer pulse pointer of the servomotor 2
 */
Servomotors::Servomotors(uint32_t* servomotor1_pulse_, uint32_t* servomotor2_pulse_) {
 801bfa4:	b570      	push	{r4, r5, r6, lr}
 801bfa6:	4604      	mov	r4, r0
 801bfa8:	460e      	mov	r6, r1
 801bfaa:	4615      	mov	r5, r2
 801bfac:	f000 fb2e 	bl	801c60c <_ZN19TrajectoryGeneratorC1Ev>
 801bfb0:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801bfb4:	f000 fb2a 	bl	801c60c <_ZN19TrajectoryGeneratorC1Ev>
 801bfb8:	4b03      	ldr	r3, [pc, #12]	@ (801bfc8 <_ZN11ServomotorsC1EPmS0_+0x24>)
	servomotor1_pulse = servomotor1_pulse_;
	servomotor2_pulse = servomotor2_pulse_;
}
 801bfba:	4620      	mov	r0, r4
Servomotors::Servomotors(uint32_t* servomotor1_pulse_, uint32_t* servomotor2_pulse_) {
 801bfbc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
	servomotor2_pulse = servomotor2_pulse_;
 801bfc0:	e9c4 651e 	strd	r6, r5, [r4, #120]	@ 0x78
}
 801bfc4:	bd70      	pop	{r4, r5, r6, pc}
 801bfc6:	bf00      	nop
 801bfc8:	42c80000 	.word	0x42c80000

0801bfcc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>:
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801bfcc:	491e      	ldr	r1, [pc, #120]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
uint8_t Registers::GetTypeID (bool* success) {
 801bfce:	b510      	push	{r4, lr}
 801bfd0:	4604      	mov	r4, r0
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801bfd2:	4608      	mov	r0, r1
 801bfd4:	f000 fe64 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801bfd8:	bb40      	cbnz	r0, 801c02c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x60>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801bfda:	491c      	ldr	r1, [pc, #112]	@ (801c04c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x80>)
 801bfdc:	481a      	ldr	r0, [pc, #104]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801bfde:	f000 fe5f 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801bfe2:	bb28      	cbnz	r0, 801c030 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x64>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801bfe4:	491a      	ldr	r1, [pc, #104]	@ (801c050 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x84>)
 801bfe6:	4818      	ldr	r0, [pc, #96]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801bfe8:	f000 fe5a 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801bfec:	bb10      	cbnz	r0, 801c034 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x68>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801bfee:	4919      	ldr	r1, [pc, #100]	@ (801c054 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x88>)
 801bff0:	4815      	ldr	r0, [pc, #84]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801bff2:	f000 fe55 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801bff6:	b9f8      	cbnz	r0, 801c038 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x6c>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801bff8:	4917      	ldr	r1, [pc, #92]	@ (801c058 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x8c>)
 801bffa:	4813      	ldr	r0, [pc, #76]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801bffc:	f000 fe50 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801c000:	b9e0      	cbnz	r0, 801c03c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x70>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801c002:	4916      	ldr	r1, [pc, #88]	@ (801c05c <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x90>)
 801c004:	4810      	ldr	r0, [pc, #64]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801c006:	f000 fe4b 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801c00a:	b9c8      	cbnz	r0, 801c040 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x74>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801c00c:	4914      	ldr	r1, [pc, #80]	@ (801c060 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x94>)
 801c00e:	480e      	ldr	r0, [pc, #56]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801c010:	f000 fe46 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801c014:	b9b0      	cbnz	r0, 801c044 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x78>
	else if (typeid(T) == typeid(double)) 		type = DOUBLE_TYPE;
 801c016:	4913      	ldr	r1, [pc, #76]	@ (801c064 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x98>)
 801c018:	480b      	ldr	r0, [pc, #44]	@ (801c048 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x7c>)
 801c01a:	f000 fe41 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
	else {*success = false; return 0;}
 801c01e:	2800      	cmp	r0, #0
 801c020:	bf14      	ite	ne
 801c022:	2309      	movne	r3, #9
 801c024:	2300      	moveq	r3, #0
 801c026:	7020      	strb	r0, [r4, #0]
}
 801c028:	4618      	mov	r0, r3
 801c02a:	bd10      	pop	{r4, pc}
	else if (typeid(T) == typeid(uint8_t)) 		type = UINT8_TYPE;
 801c02c:	2300      	movs	r3, #0
 801c02e:	e7fa      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint16_t)) 	type = UINT16_TYPE;
 801c030:	2301      	movs	r3, #1
 801c032:	e7f8      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint32_t)) 	type = UINT32_TYPE;
 801c034:	2302      	movs	r3, #2
 801c036:	e7f6      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(uint64_t))	 	type = UINT64_TYPE;
 801c038:	2303      	movs	r3, #3
 801c03a:	e7f4      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int8_t)) 		type = INT8_TYPE;
 801c03c:	2304      	movs	r3, #4
 801c03e:	e7f2      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(int32_t)) 		type = INT32_TYPE;
 801c040:	2306      	movs	r3, #6
 801c042:	e7f0      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
	else if (typeid(T) == typeid(float)) 		type = FLOAT_TYPE;
 801c044:	2308      	movs	r3, #8
 801c046:	e7ee      	b.n	801c026 <_ZN9Registers9GetTypeIDIhEEhPb.isra.0+0x5a>
 801c048:	0801e1c4 	.word	0x0801e1c4
 801c04c:	0801e1bc 	.word	0x0801e1bc
 801c050:	0801e1ac 	.word	0x0801e1ac
 801c054:	0801e1a4 	.word	0x0801e1a4
 801c058:	0801e1cc 	.word	0x0801e1cc
 801c05c:	0801e1b4 	.word	0x0801e1b4
 801c060:	0801e19c 	.word	0x0801e19c
 801c064:	0801e194 	.word	0x0801e194

0801c068 <_ZN17MasterSubscribersC1Ev>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 801c068:	2200      	movs	r2, #0
 801c06a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801c06e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c072:	e9c0 2207 	strd	r2, r2, [r0, #28]

/**
 * @brief Class constructor
 */
MasterSubscribers::MasterSubscribers() {
}
 801c076:	4770      	bx	lr

0801c078 <_ZN17MasterSubscribers4InitEP9RegistersP4LEDS>:
 * @brief Initialize the class with references to other classes. Set default values.
 *
 * @param input registers_: the Registers instance
 * @param input leds_: the LEDS instance
 */
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 801c078:	b510      	push	{r4, lr}
	registers = registers_;
	leds = leds_;
 801c07a:	e9c0 1200 	strd	r1, r2, [r0]

	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801c07e:	2101      	movs	r1, #1
void MasterSubscribers::Init(Registers* registers_, LEDS* leds_) {
 801c080:	4604      	mov	r4, r0
	SubscribersSemaphore = osSemaphoreNew(1,1,NULL);
 801c082:	2200      	movs	r2, #0
 801c084:	4608      	mov	r0, r1
 801c086:	f7f0 fe75 	bl	800cd74 <osSemaphoreNew>
 801c08a:	60a0      	str	r0, [r4, #8]
	osSemaphoreRelease(SubscribersSemaphore);
}
 801c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSemaphoreRelease(SubscribersSemaphore);
 801c090:	f7f0 bf00 	b.w	800ce94 <osSemaphoreRelease>

0801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>:
 *
 * @param input ID: subscriber ID
 * @param output success: whether successful
 * @return the subscriber index
 */
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c096:	4604      	mov	r4, r0
 801c098:	460d      	mov	r5, r1
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c09a:	6880      	ldr	r0, [r0, #8]
 801c09c:	f04f 31ff 	mov.w	r1, #4294967295
uint8_t MasterSubscribers::FindSubscriberIndex(uint8_t ID, bool* success) {
 801c0a0:	4616      	mov	r6, r2
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c0a2:	f7f0 fec3 	bl	800ce2c <osSemaphoreAcquire>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c0a6:	4a10      	ldr	r2, [pc, #64]	@ (801c0e8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x54>)
	for (uint8_t index = 0; index < configurations.size(); index++) {
		if (configurations[index].ID == ID) {
 801c0a8:	2728      	movs	r7, #40	@ 0x28
 801c0aa:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 801c0ae:	1a5b      	subs	r3, r3, r1
 801c0b0:	10db      	asrs	r3, r3, #3
 801c0b2:	4353      	muls	r3, r2
	for (uint8_t index = 0; index < configurations.size(); index++) {
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	b2d0      	uxtb	r0, r2
 801c0b8:	4298      	cmp	r0, r3
 801c0ba:	d305      	bcc.n	801c0c8 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x34>
			osSemaphoreRelease(SubscribersSemaphore);
			*success = true;
			return index;
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801c0bc:	68a0      	ldr	r0, [r4, #8]
 801c0be:	f7f0 fee9 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
	return 0;
 801c0c2:	2300      	movs	r3, #0
 801c0c4:	461d      	mov	r5, r3
 801c0c6:	e00b      	b.n	801c0e0 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x4c>
		if (configurations[index].ID == ID) {
 801c0c8:	fb07 fc00 	mul.w	ip, r7, r0
 801c0cc:	3201      	adds	r2, #1
 801c0ce:	f811 c00c 	ldrb.w	ip, [r1, ip]
 801c0d2:	45ac      	cmp	ip, r5
 801c0d4:	d1ef      	bne.n	801c0b6 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb+0x22>
 801c0d6:	4605      	mov	r5, r0
			osSemaphoreRelease(SubscribersSemaphore);
 801c0d8:	68a0      	ldr	r0, [r4, #8]
 801c0da:	f7f0 fedb 	bl	800ce94 <osSemaphoreRelease>
			return index;
 801c0de:	2301      	movs	r3, #1
}
 801c0e0:	4628      	mov	r0, r5
			*success = true;
 801c0e2:	7033      	strb	r3, [r6, #0]
}
 801c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0e6:	bf00      	nop
 801c0e8:	cccccccd 	.word	0xcccccccd

0801c0ec <_ZN17MasterSubscribers19SetSubscriberStatusEhb>:
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801c0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c0ee:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c0f0:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::SetSubscriberStatus(uint8_t ID, bool status) {
 801c0f4:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c0f6:	f7ff ffcd 	bl	801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801c0fa:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c0fe:	4604      	mov	r4, r0
	if (!success) return false;
 801c100:	b177      	cbz	r7, 801c120 <_ZN17MasterSubscribers19SetSubscriberStatusEhb+0x34>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c102:	f04f 31ff 	mov.w	r1, #4294967295
 801c106:	68a8      	ldr	r0, [r5, #8]
 801c108:	f7f0 fe90 	bl	800ce2c <osSemaphoreAcquire>
	configurations[index].activated = status;
 801c10c:	68e9      	ldr	r1, [r5, #12]
	return *(this->_M_impl._M_start + __n);
 801c10e:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 801c110:	68a8      	ldr	r0, [r5, #8]
 801c112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	configurations[index].activated = status;
 801c116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c11a:	704e      	strb	r6, [r1, #1]
	osSemaphoreRelease(SubscribersSemaphore);
 801c11c:	f7f0 feba 	bl	800ce94 <osSemaphoreRelease>
}
 801c120:	4638      	mov	r0, r7
 801c122:	b003      	add	sp, #12
 801c124:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c126 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801c126:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801c128:	4611      	mov	r1, r2
 801c12a:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801c12c:	d108      	bne.n	801c140 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x1a>
			self->SetSubscriberStatus(input[0], (bool) input[1]);
 801c12e:	7852      	ldrb	r2, [r2, #1]
 801c130:	7809      	ldrb	r1, [r1, #0]
 801c132:	3a00      	subs	r2, #0
 801c134:	bf18      	it	ne
 801c136:	2201      	movne	r2, #1
 801c138:	f7ff ffd8 	bl	801c0ec <_ZN17MasterSubscribers19SetSubscriberStatusEhb>
			return true;
 801c13c:	2001      	movs	r0, #1
		}
 801c13e:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801c140:	2000      	movs	r0, #0
 801c142:	e7fc      	b.n	801c13e <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE_4_FUNES0_tS1_t+0x18>

0801c144 <_ZN17MasterSubscribers15AddressAcceptedEhh>:
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801c144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c146:	4616      	mov	r6, r2
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c148:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::AddressAccepted(uint8_t ID, uint8_t address) {
 801c14c:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c14e:	f7ff ffa1 	bl	801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801c152:	f89d 7007 	ldrb.w	r7, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c156:	4604      	mov	r4, r0
	if (!success) return false;
 801c158:	b1ef      	cbz	r7, 801c196 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x52>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c15a:	f04f 31ff 	mov.w	r1, #4294967295
 801c15e:	68a8      	ldr	r0, [r5, #8]
 801c160:	f7f0 fe64 	bl	800ce2c <osSemaphoreAcquire>
 801c164:	68ea      	ldr	r2, [r5, #12]
 801c166:	b223      	sxth	r3, r4
 801c168:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c16c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c170:	e9d3 3207 	ldrd	r3, r2, [r3, #28]
	if (configurations[index].filters.size() == 0) {
 801c174:	429a      	cmp	r2, r3
 801c176:	d109      	bne.n	801c18c <_ZN17MasterSubscribers15AddressAcceptedEhh+0x48>
		osSemaphoreRelease(SubscribersSemaphore);
 801c178:	68a8      	ldr	r0, [r5, #8]
 801c17a:	f7f0 fe8b 	bl	800ce94 <osSemaphoreRelease>
}
 801c17e:	4638      	mov	r0, r7
 801c180:	b003      	add	sp, #12
 801c182:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (uint8_t filtered_address : configurations[index].filters) {
 801c184:	f813 1b01 	ldrb.w	r1, [r3], #1
		if (filtered_address == address) {
 801c188:	42b1      	cmp	r1, r6
 801c18a:	e7f4      	b.n	801c176 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x32>
	for (uint8_t filtered_address : configurations[index].filters) {
 801c18c:	4293      	cmp	r3, r2
 801c18e:	d1f9      	bne.n	801c184 <_ZN17MasterSubscribers15AddressAcceptedEhh+0x40>
	osSemaphoreRelease(SubscribersSemaphore);
 801c190:	68a8      	ldr	r0, [r5, #8]
 801c192:	f7f0 fe7f 	bl	800ce94 <osSemaphoreRelease>
	if (!success) return false;
 801c196:	2700      	movs	r7, #0
 801c198:	e7f1      	b.n	801c17e <_ZN17MasterSubscribers15AddressAcceptedEhh+0x3a>

0801c19a <_ZN17MasterSubscribers12ClearFiltersEh>:
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801c19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c19c:	f10d 0207 	add.w	r2, sp, #7
bool MasterSubscribers::ClearFilters(uint8_t ID) {
 801c1a0:	4605      	mov	r5, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c1a2:	f7ff ff77 	bl	801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801c1a6:	f89d 6007 	ldrb.w	r6, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c1aa:	4604      	mov	r4, r0
	if (!success) return false;
 801c1ac:	b196      	cbz	r6, 801c1d4 <_ZN17MasterSubscribers12ClearFiltersEh+0x3a>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c1ae:	f04f 31ff 	mov.w	r1, #4294967295
 801c1b2:	68a8      	ldr	r0, [r5, #8]
 801c1b4:	f7f0 fe3a 	bl	800ce2c <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801c1b8:	68ea      	ldr	r2, [r5, #12]
 801c1ba:	b223      	sxth	r3, r4
	osSemaphoreRelease(SubscribersSemaphore);
 801c1bc:	68a8      	ldr	r0, [r5, #8]
 801c1be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c1c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801c1c6:	e9d3 2107 	ldrd	r2, r1, [r3, #28]
 801c1ca:	428a      	cmp	r2, r1
	    this->_M_impl._M_finish = __pos;
 801c1cc:	bf18      	it	ne
 801c1ce:	621a      	strne	r2, [r3, #32]
 801c1d0:	f7f0 fe60 	bl	800ce94 <osSemaphoreRelease>
}
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	b002      	add	sp, #8
 801c1d8:	bd70      	pop	{r4, r5, r6, pc}

0801c1da <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE1_4_FUNES0_tS1_t>:
			self->ClearFilters(*input);
 801c1da:	7811      	ldrb	r1, [r2, #0]
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801c1dc:	b508      	push	{r3, lr}
			self->ClearFilters(*input);
 801c1de:	f7ff ffdc 	bl	801c19a <_ZN17MasterSubscribers12ClearFiltersEh>
		}
 801c1e2:	2001      	movs	r0, #1
 801c1e4:	bd08      	pop	{r3, pc}
	...

0801c1e8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>:
 * @param input remote_register: register configuration with only address filled
 * @param input interface: interface from which the published data comes from
 * @param output success: whether successful
 * @return the register configuration index from the subscriber
 */
uint8_t MasterSubscribers::FindRemoteRegisterIndex(uint8_t ID, Register remote_register, SubscriberInterface interface, bool* success) {
 801c1e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c1ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c1ee:	ac02      	add	r4, sp, #8
 801c1f0:	4605      	mov	r5, r0
 801c1f2:	e904 000c 	stmdb	r4, {r2, r3}
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801c1f6:	4632      	mov	r2, r6
 801c1f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801c1fc:	f89d 7029 	ldrb.w	r7, [sp, #41]	@ 0x29
 801c200:	f7ff ff48 	bl	801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (not *success)
 801c204:	7833      	ldrb	r3, [r6, #0]
	uint8_t subscriber_index = FindSubscriberIndex(ID, success);
 801c206:	4604      	mov	r4, r0
	if (not *success)
 801c208:	b1eb      	cbz	r3, 801c246 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x5e>
		return 0;

	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c20a:	f04f 31ff 	mov.w	r1, #4294967295
 801c20e:	68a8      	ldr	r0, [r5, #8]
 801c210:	f7f0 fe0c 	bl	800ce2c <osSemaphoreAcquire>
	return *(this->_M_impl._M_start + __n);
 801c214:	68ea      	ldr	r2, [r5, #12]
 801c216:	b223      	sxth	r3, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c218:	4920      	ldr	r1, [pc, #128]	@ (801c29c <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb4>)
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];

		if (remote_register.address == subscribed_register.address) {
 801c21a:	f8bd e000 	ldrh.w	lr, [sp]
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801c21e:	f04f 0906 	mov.w	r9, #6
	return *(this->_M_impl._M_start + __n);
 801c222:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c226:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c22a:	e9d2 4301 	ldrd	r4, r3, [r2, #4]
 801c22e:	1b1b      	subs	r3, r3, r4
 801c230:	105b      	asrs	r3, r3, #1
 801c232:	434b      	muls	r3, r1
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801c234:	2100      	movs	r1, #0
 801c236:	b2c8      	uxtb	r0, r1
 801c238:	4298      	cmp	r0, r3
 801c23a:	d306      	bcc.n	801c24a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x62>
//					}
				}
			}
		}
	}
	osSemaphoreRelease(SubscribersSemaphore);
 801c23c:	68a8      	ldr	r0, [r5, #8]
 801c23e:	f7f0 fe29 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
 801c242:	2300      	movs	r3, #0
 801c244:	7033      	strb	r3, [r6, #0]
		return 0;
 801c246:	2400      	movs	r4, #0
 801c248:	e01d      	b.n	801c286 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x9e>
		Register subscribed_register = configurations[subscriber_index].remote_registers[index];
 801c24a:	fb09 fc00 	mul.w	ip, r9, r0
		if (remote_register.address == subscribed_register.address) {
 801c24e:	f834 c00c 	ldrh.w	ip, [r4, ip]
 801c252:	45f4      	cmp	ip, lr
 801c254:	d120      	bne.n	801c298 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
	return *(this->_M_impl._M_start + __n);
 801c256:	f8d2 c010 	ldr.w	ip, [r2, #16]
 801c25a:	eb0c 0a40 	add.w	sl, ip, r0, lsl #1
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801c25e:	f81c c010 	ldrb.w	ip, [ip, r0, lsl #1]
			if (interface.interface == subscribed_interface.interface || subscribed_interface.interface == ALL_INTERFACES || interface.interface == ALL_INTERFACES) {
 801c262:	45c4      	cmp	ip, r8
 801c264:	d005      	beq.n	801c272 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801c266:	f1bc 0f07 	cmp.w	ip, #7
 801c26a:	d002      	beq.n	801c272 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x8a>
 801c26c:	f1b8 0f07 	cmp.w	r8, #7
 801c270:	d112      	bne.n	801c298 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xb0>
		SubscriberInterface subscribed_interface = configurations[subscriber_index].interfaces[index];
 801c272:	f89a c001 	ldrb.w	ip, [sl, #1]
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801c276:	4567      	cmp	r7, ip
 801c278:	d109      	bne.n	801c28e <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0xa6>
 801c27a:	4604      	mov	r4, r0
					osSemaphoreRelease(SubscribersSemaphore);
 801c27c:	68a8      	ldr	r0, [r5, #8]
 801c27e:	f7f0 fe09 	bl	800ce94 <osSemaphoreRelease>
					*success = true;
 801c282:	2301      	movs	r3, #1
 801c284:	7033      	strb	r3, [r6, #0]
	return 0;

}
 801c286:	4620      	mov	r0, r4
 801c288:	b002      	add	sp, #8
 801c28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (interface.address == subscribed_interface.address || subscribed_interface.address == ALL || interface.address == ALL) {
 801c28e:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c292:	d0f2      	beq.n	801c27a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
 801c294:	2fff      	cmp	r7, #255	@ 0xff
 801c296:	d0f0      	beq.n	801c27a <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x92>
	for (uint8_t index = 0; index < configurations[subscriber_index].remote_registers.size(); index++) {
 801c298:	3101      	adds	r1, #1
 801c29a:	e7cc      	b.n	801c236 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb+0x4e>
 801c29c:	aaaaaaab 	.word	0xaaaaaaab

0801c2a0 <_ZN17MasterSubscribers26SubscribedToRemoteRegisterEh8Register19SubscriberInterface>:
bool MasterSubscribers::SubscribedToRemoteRegister(uint8_t ID, Register remote_register, SubscriberInterface interface) {
 801c2a0:	b510      	push	{r4, lr}
 801c2a2:	b086      	sub	sp, #24
 801c2a4:	ac02      	add	r4, sp, #8
 801c2a6:	e884 000c 	stmia.w	r4, {r2, r3}
	FindRemoteRegisterIndex(ID, remote_register, interface, &success);
 801c2aa:	f10d 0317 	add.w	r3, sp, #23
 801c2ae:	9301      	str	r3, [sp, #4]
 801c2b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c2b4:	f8ad 3000 	strh.w	r3, [sp]
 801c2b8:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c2bc:	f7ff ff94 	bl	801c1e8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
}
 801c2c0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801c2c4:	b006      	add	sp, #24
 801c2c6:	bd10      	pop	{r4, pc}

0801c2c8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb>:
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 801c2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c2cc:	460d      	mov	r5, r1
 801c2ce:	af02      	add	r7, sp, #8
 801c2d0:	4604      	mov	r4, r0
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c2d2:	f04f 31ff 	mov.w	r1, #4294967295
 801c2d6:	68a8      	ldr	r0, [r5, #8]
Register MasterSubscribers::FindRemoteRegister(Register remote_register, SubscriberInterface interface, bool* success) {
 801c2d8:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
 801c2dc:	e887 000c 	stmia.w	r7, {r2, r3}
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c2e0:	f7f0 fda4 	bl	800ce2c <osSemaphoreAcquire>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801c2e4:	e9d5 6a03 	ldrd	r6, sl, [r5, #12]
	for (SubscriberConfiguration &configuration : configurations) {
 801c2e8:	4556      	cmp	r6, sl
 801c2ea:	46b0      	mov	r8, r6
 801c2ec:	d108      	bne.n	801c300 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x38>
	osSemaphoreRelease(SubscribersSemaphore);
 801c2ee:	68a8      	ldr	r0, [r5, #8]
 801c2f0:	f7f0 fdd0 	bl	800ce94 <osSemaphoreRelease>
	*success = false;
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	f889 3000 	strb.w	r3, [r9]
	return Register();
 801c2fa:	6023      	str	r3, [r4, #0]
 801c2fc:	80a3      	strh	r3, [r4, #4]
 801c2fe:	e022      	b.n	801c346 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x7e>
		index = FindRemoteRegisterIndex(configuration.ID, remote_register, interface, success);
 801c300:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c304:	4628      	mov	r0, r5
 801c306:	f816 1b28 	ldrb.w	r1, [r6], #40
 801c30a:	f8cd 9004 	str.w	r9, [sp, #4]
 801c30e:	f8ad 3000 	strh.w	r3, [sp]
 801c312:	e897 000c 	ldmia.w	r7, {r2, r3}
 801c316:	f7ff ff67 	bl	801c1e8 <_ZN17MasterSubscribers23FindRemoteRegisterIndexEh8Register19SubscriberInterfacePb>
		if (*success) {
 801c31a:	f899 2000 	ldrb.w	r2, [r9]
 801c31e:	2a00      	cmp	r2, #0
 801c320:	d0e2      	beq.n	801c2e8 <_ZN17MasterSubscribers18FindRemoteRegisterE8Register19SubscriberInterfacePb+0x20>
 801c322:	b203      	sxth	r3, r0
 801c324:	f8d8 1004 	ldr.w	r1, [r8, #4]
			osSemaphoreRelease(SubscribersSemaphore);
 801c328:	68a8      	ldr	r0, [r5, #8]
 801c32a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c32e:	eb01 0243 	add.w	r2, r1, r3, lsl #1
			Register found_register = configuration.remote_registers[index];
 801c332:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
 801c336:	8896      	ldrh	r6, [r2, #4]
 801c338:	8857      	ldrh	r7, [r2, #2]
			osSemaphoreRelease(SubscribersSemaphore);
 801c33a:	f7f0 fdab 	bl	800ce94 <osSemaphoreRelease>
			return found_register;
 801c33e:	f8a4 8000 	strh.w	r8, [r4]
 801c342:	8067      	strh	r7, [r4, #2]
 801c344:	80a6      	strh	r6, [r4, #4]
}
 801c346:	4620      	mov	r0, r4
 801c348:	b004      	add	sp, #16
 801c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c350 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801c350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c354:	e9d0 8900 	ldrd	r8, r9, [r0]
	if (max_size() - size() < __n)
 801c358:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c35c:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c35e:	eba9 0408 	sub.w	r4, r9, r8
 801c362:	468a      	mov	sl, r1
 801c364:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
 801c366:	429c      	cmp	r4, r3
 801c368:	d102      	bne.n	801c370 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x20>
	  __throw_length_error(__N(__s));
 801c36a:	481e      	ldr	r0, [pc, #120]	@ (801c3e4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x94>)
 801c36c:	f000 fcb6 	bl	801ccdc <_ZSt20__throw_length_errorPKc>
 801c370:	2c01      	cmp	r4, #1
 801c372:	4622      	mov	r2, r4
    { return __lhs.base() - __rhs.base(); }
 801c374:	eba1 0508 	sub.w	r5, r1, r8
 801c378:	bf38      	it	cc
 801c37a:	2201      	movcc	r2, #1
 801c37c:	18a4      	adds	r4, r4, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c37e:	d22d      	bcs.n	801c3dc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x8c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c380:	b374      	cbz	r4, 801c3e0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x90>
 801c382:	429c      	cmp	r4, r3
 801c384:	bf28      	it	cs
 801c386:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801c388:	4620      	mov	r0, r4
 801c38a:	f000 fbf2 	bl	801cb72 <_Znwj>
 801c38e:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c390:	f89b 3000 	ldrb.w	r3, [fp]
      if (__count > 0)
 801c394:	2d00      	cmp	r5, #0
 801c396:	5573      	strb	r3, [r6, r5]
 801c398:	dd04      	ble.n	801c3a4 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x54>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801c39a:	462a      	mov	r2, r5
 801c39c:	4641      	mov	r1, r8
 801c39e:	4630      	mov	r0, r6
 801c3a0:	f001 fb64 	bl	801da6c <memmove>
      ptrdiff_t __count = __last - __first;
 801c3a4:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
 801c3a8:	3501      	adds	r5, #1
      if (__count > 0)
 801c3aa:	f1b9 0f00 	cmp.w	r9, #0
 801c3ae:	4435      	add	r5, r6
 801c3b0:	dd04      	ble.n	801c3bc <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801c3b2:	464a      	mov	r2, r9
 801c3b4:	4651      	mov	r1, sl
 801c3b6:	4628      	mov	r0, r5
 801c3b8:	f001 fc50 	bl	801dc5c <memcpy>
      return __result + __count;
 801c3bc:	444d      	add	r5, r9
	if (__p)
 801c3be:	f1b8 0f00 	cmp.w	r8, #0
 801c3c2:	d005      	beq.n	801c3d0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x80>
		    this->_M_impl._M_end_of_storage - __old_start);
 801c3c4:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801c3c6:	4640      	mov	r0, r8
 801c3c8:	eba1 0108 	sub.w	r1, r1, r8
 801c3cc:	f000 fbac 	bl	801cb28 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
 801c3d0:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801c3d4:	4426      	add	r6, r4
 801c3d6:	60be      	str	r6, [r7, #8]
    }
 801c3d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801c3dc:	461c      	mov	r4, r3
 801c3de:	e7d3      	b.n	801c388 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x38>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801c3e0:	4626      	mov	r6, r4
 801c3e2:	e7d5      	b.n	801c390 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x40>
 801c3e4:	0801dd74 	.word	0x0801dd74

0801c3e8 <_ZN17MasterSubscribers9AddFilterEhh>:
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801c3e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c3ea:	f88d 2007 	strb.w	r2, [sp, #7]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c3ee:	f10d 020f 	add.w	r2, sp, #15
bool MasterSubscribers::AddFilter(uint8_t ID, uint8_t address) {
 801c3f2:	4604      	mov	r4, r0
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c3f4:	f7ff fe4e 	bl	801c094 <_ZN17MasterSubscribers19FindSubscriberIndexEhPb>
	if (!success) return false;
 801c3f8:	f89d 500f 	ldrb.w	r5, [sp, #15]
	uint8_t index = FindSubscriberIndex(ID, &success);
 801c3fc:	4601      	mov	r1, r0
	if (!success) return false;
 801c3fe:	b91d      	cbnz	r5, 801c408 <_ZN17MasterSubscribers9AddFilterEhh+0x20>
 801c400:	2500      	movs	r5, #0
}
 801c402:	4628      	mov	r0, r5
 801c404:	b004      	add	sp, #16
 801c406:	bd70      	pop	{r4, r5, r6, pc}
	return *(this->_M_impl._M_start + __n);
 801c408:	b203      	sxth	r3, r0
 801c40a:	68e2      	ldr	r2, [r4, #12]
 801c40c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c410:	00de      	lsls	r6, r3, #3
 801c412:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 801c416:	e9d3 2307 	ldrd	r2, r3, [r3, #28]
 801c41a:	429a      	cmp	r2, r3
 801c41c:	d110      	bne.n	801c440 <_ZN17MasterSubscribers9AddFilterEhh+0x58>
	osSemaphoreAcquire(SubscribersSemaphore, osWaitForever);
 801c41e:	f04f 31ff 	mov.w	r1, #4294967295
 801c422:	68a0      	ldr	r0, [r4, #8]
 801c424:	f7f0 fd02 	bl	800ce2c <osSemaphoreAcquire>
 801c428:	68e0      	ldr	r0, [r4, #12]
 801c42a:	4430      	add	r0, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c42c:	e9d0 1308 	ldrd	r1, r3, [r0, #32]
 801c430:	4299      	cmp	r1, r3
 801c432:	d10d      	bne.n	801c450 <_ZN17MasterSubscribers9AddFilterEhh+0x68>
	  _M_realloc_insert(end(), __x);
 801c434:	f10d 0207 	add.w	r2, sp, #7
 801c438:	301c      	adds	r0, #28
 801c43a:	f7ff ff89 	bl	801c350 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
 801c43e:	e00d      	b.n	801c45c <_ZN17MasterSubscribers9AddFilterEhh+0x74>
	if (configurations[index].filters.size() > 0 && AddressAccepted(index, address)) // if address already filtered, return
 801c440:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801c444:	4620      	mov	r0, r4
 801c446:	f7ff fe7d 	bl	801c144 <_ZN17MasterSubscribers15AddressAcceptedEhh>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	d0e7      	beq.n	801c41e <_ZN17MasterSubscribers9AddFilterEhh+0x36>
 801c44e:	e7d7      	b.n	801c400 <_ZN17MasterSubscribers9AddFilterEhh+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801c450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c454:	700b      	strb	r3, [r1, #0]
	    ++this->_M_impl._M_finish;
 801c456:	6a03      	ldr	r3, [r0, #32]
 801c458:	3301      	adds	r3, #1
 801c45a:	6203      	str	r3, [r0, #32]
	osSemaphoreRelease(SubscribersSemaphore);
 801c45c:	68a0      	ldr	r0, [r4, #8]
 801c45e:	f7f0 fd19 	bl	800ce94 <osSemaphoreRelease>
	return true;
 801c462:	e7ce      	b.n	801c402 <_ZN17MasterSubscribers9AddFilterEhh+0x1a>

0801c464 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t>:
			if (length != 2) return false;
 801c464:	2b02      	cmp	r3, #2
		[](void* context, uint16_t register_id, uint8_t* input, uint16_t length) -> bool {
 801c466:	4611      	mov	r1, r2
 801c468:	b508      	push	{r3, lr}
			if (length != 2) return false;
 801c46a:	d105      	bne.n	801c478 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x14>
			self->AddFilter(input[0], input[1]);
 801c46c:	7852      	ldrb	r2, [r2, #1]
 801c46e:	7809      	ldrb	r1, [r1, #0]
 801c470:	f7ff ffba 	bl	801c3e8 <_ZN17MasterSubscribers9AddFilterEhh>
 801c474:	2001      	movs	r0, #1
		}
 801c476:	bd08      	pop	{r3, pc}
			if (length != 2) return false;
 801c478:	2000      	movs	r0, #0
 801c47a:	e7fc      	b.n	801c476 <_ZZN17MasterSubscribers12AddRegistersEvENUlPvtPhtE0_4_FUNES0_tS1_t+0x12>

0801c47c <_ZN9Registers11AddRegisterIhEEbt.isra.0>:
bool Registers::AddRegister(uint16_t ID) {
 801c47c:	b570      	push	{r4, r5, r6, lr}
 801c47e:	4604      	mov	r4, r0
 801c480:	b086      	sub	sp, #24
 801c482:	460e      	mov	r6, r1
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c484:	6800      	ldr	r0, [r0, #0]
 801c486:	f04f 31ff 	mov.w	r1, #4294967295
 801c48a:	f7f0 fccf 	bl	800ce2c <osSemaphoreAcquire>
	FindRegisterConfiguration(ID, &success);
 801c48e:	f10d 0207 	add.w	r2, sp, #7
 801c492:	4631      	mov	r1, r6
 801c494:	4620      	mov	r0, r4
 801c496:	f7fc f938 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (success) {
 801c49a:	f89d 5007 	ldrb.w	r5, [sp, #7]
 801c49e:	b125      	cbz	r5, 801c4aa <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x2e>
	osSemaphoreRelease(RegistersSemaphore);
 801c4a0:	6820      	ldr	r0, [r4, #0]
 801c4a2:	f7f0 fcf7 	bl	800ce94 <osSemaphoreRelease>
}
 801c4a6:	b006      	add	sp, #24
 801c4a8:	bd70      	pop	{r4, r5, r6, pc}
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801c4aa:	f10d 0007 	add.w	r0, sp, #7
	configuration_.mode = mode;
 801c4ae:	f8ad 5008 	strh.w	r5, [sp, #8]
	register_.type = GetTypeID<T>(&success); 	// check that the type is supported
 801c4b2:	f7ff fd8b 	bl	801bfcc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	configuration_.register_info = register_;
 801c4b6:	2301      	movs	r3, #1
 801c4b8:	f8ad 600a 	strh.w	r6, [sp, #10]
 801c4bc:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (success) {
 801c4c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	configuration_.register_info = register_;
 801c4c4:	f88d 000c 	strb.w	r0, [sp, #12]
 801c4c8:	f88d 500d 	strb.w	r5, [sp, #13]
	configuration_.register_semaphore = NULL;
 801c4cc:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (success) {
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d0e5      	beq.n	801c4a0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
      push_back(const value_type& __x)
 801c4d4:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c4d6:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 801c4da:	429d      	cmp	r5, r3
 801c4dc:	d005      	beq.n	801c4ea <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x6e>
 801c4de:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801c4e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801c4e4:	3510      	adds	r5, #16
 801c4e6:	60a5      	str	r5, [r4, #8]
 801c4e8:	e7da      	b.n	801c4a0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>
	  _M_realloc_insert(end(), __x);
 801c4ea:	4629      	mov	r1, r5
 801c4ec:	1d20      	adds	r0, r4, #4
 801c4ee:	f7f3 fc3f 	bl	800fd70 <_ZNSt6vectorI21RegisterConfigurationSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 801c4f2:	e7d5      	b.n	801c4a0 <_ZN9Registers11AddRegisterIhEEbt.isra.0+0x24>

0801c4f4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>:
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c4f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c4f8:	460c      	mov	r4, r1
 801c4fa:	b087      	sub	sp, #28
 801c4fc:	4606      	mov	r6, r0
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c4fe:	f04f 31ff 	mov.w	r1, #4294967295
 801c502:	6800      	ldr	r0, [r0, #0]
bool Registers::AddWriteCallback(uint16_t ID, void* context, bool (*write)(void*, uint16_t, T*, uint16_t)) {
 801c504:	4698      	mov	r8, r3
 801c506:	4691      	mov	r9, r2
	osSemaphoreAcquire(RegistersSemaphore, osWaitForever);
 801c508:	f7f0 fc90 	bl	800ce2c <osSemaphoreAcquire>
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c50c:	4621      	mov	r1, r4
 801c50e:	f10d 0207 	add.w	r2, sp, #7
 801c512:	4630      	mov	r0, r6
 801c514:	f7fc f8f9 	bl	801870a <_ZN9Registers25FindRegisterConfigurationEtPb>
	if (!success) {
 801c518:	f89d 3007 	ldrb.w	r3, [sp, #7]
	RegisterConfiguration* target_register = FindRegisterConfiguration(ID, &success);
 801c51c:	4604      	mov	r4, r0
	if (!success) {
 801c51e:	b92b      	cbnz	r3, 801c52c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x38>
	osSemaphoreRelease(RegistersSemaphore);
 801c520:	6830      	ldr	r0, [r6, #0]
 801c522:	f7f0 fcb7 	bl	800ce94 <osSemaphoreRelease>
}
 801c526:	b007      	add	sp, #28
 801c528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t registered_type = GetTypeID<T>(&success);
 801c52c:	f10d 0007 	add.w	r0, sp, #7
 801c530:	f7ff fd4c 	bl	801bfcc <_ZN9Registers9GetTypeIDIhEEhPb.isra.0>
	if (!success) {
 801c534:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d0f1      	beq.n	801c520 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (target_register->register_info.type != registered_type) {
 801c53c:	7923      	ldrb	r3, [r4, #4]
 801c53e:	4298      	cmp	r0, r3
 801c540:	d1ee      	bne.n	801c520 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (callbacks[target_register->register_info.type] == NULL) {
 801c542:	3004      	adds	r0, #4
 801c544:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 801c548:	2f00      	cmp	r7, #0
 801c54a:	d0e9      	beq.n	801c520 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	if (not target_register->mode.pointer &&  not target_register->mode.callbacks) { // if (target_register->mode. == NONE_MODE) {
 801c54c:	7821      	ldrb	r1, [r4, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801c54e:	e9d7 3500 	ldrd	r3, r5, [r7]
 801c552:	1aea      	subs	r2, r5, r3
 801c554:	1112      	asrs	r2, r2, #4
 801c556:	b9b1      	cbnz	r1, 801c586 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
 801c558:	7861      	ldrb	r1, [r4, #1]
 801c55a:	b9a1      	cbnz	r1, 801c586 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x92>
		callback.read = NULL;
 801c55c:	9105      	str	r1, [sp, #20]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c55e:	68b9      	ldr	r1, [r7, #8]
		target_register->callbacks_ID = (uint16_t) target_callback_list->size();
 801c560:	8162      	strh	r2, [r4, #10]
      push_back(const value_type& __x)
 801c562:	aa02      	add	r2, sp, #8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801c564:	42a9      	cmp	r1, r5
		callback.write = write;
 801c566:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801c56a:	d008      	beq.n	801c57e <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x8a>
 801c56c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801c56e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 801c572:	3510      	adds	r5, #16
 801c574:	607d      	str	r5, [r7, #4]
	target_register->mode.callbacks = true;
 801c576:	2301      	movs	r3, #1
 801c578:	7063      	strb	r3, [r4, #1]
	target_register->access.write = true;
 801c57a:	7223      	strb	r3, [r4, #8]
 801c57c:	e7d0      	b.n	801c520 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x2c>
	  _M_realloc_insert(end(), __x);
 801c57e:	4638      	mov	r0, r7
 801c580:	f7f4 fa3e 	bl	8010a00 <_ZNSt6vectorI17RegisterCallbacksIhESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	} else {
 801c584:	e7f7      	b.n	801c576 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
		RegisterCallbacks<T>* callback = &(target_callback_list->at(target_register->callbacks_ID));
 801c586:	8961      	ldrh	r1, [r4, #10]
	if (__n >= this->size())
 801c588:	4291      	cmp	r1, r2
 801c58a:	d302      	bcc.n	801c592 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x9e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 801c58c:	4803      	ldr	r0, [pc, #12]	@ (801c59c <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0xa8>)
 801c58e:	f000 fba8 	bl	801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>
	return *(this->_M_impl._M_start + __n);
 801c592:	eb03 1301 	add.w	r3, r3, r1, lsl #4
		callback->write = write;
 801c596:	e9c3 9801 	strd	r9, r8, [r3, #4]
 801c59a:	e7ec      	b.n	801c576 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0+0x82>
 801c59c:	0801dfb4 	.word	0x0801dfb4

0801c5a0 <_ZN17MasterSubscribers12AddRegistersEv>:
void MasterSubscribers::AddRegisters(void) {
 801c5a0:	b510      	push	{r4, lr}
 801c5a2:	4604      	mov	r4, r0
	registers->AddRegister<uint8_t>(REG_SUB_SET_STATUS);
 801c5a4:	2120      	movs	r1, #32
 801c5a6:	6800      	ldr	r0, [r0, #0]
 801c5a8:	f7ff ff68 	bl	801c47c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_SET_STATUS, 2);
 801c5ac:	2202      	movs	r2, #2
 801c5ae:	2120      	movs	r1, #32
 801c5b0:	6820      	ldr	r0, [r4, #0]
 801c5b2:	f7fc f8ff 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_SET_STATUS, (void*) this,
 801c5b6:	4b12      	ldr	r3, [pc, #72]	@ (801c600 <_ZN17MasterSubscribers12AddRegistersEv+0x60>)
 801c5b8:	4622      	mov	r2, r4
 801c5ba:	6820      	ldr	r0, [r4, #0]
 801c5bc:	2120      	movs	r1, #32
 801c5be:	f7ff ff99 	bl	801c4f4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_ADD_FILTER);
 801c5c2:	6820      	ldr	r0, [r4, #0]
 801c5c4:	2121      	movs	r1, #33	@ 0x21
 801c5c6:	f7ff ff59 	bl	801c47c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsArray(REG_SUB_ADD_FILTER, 2);
 801c5ca:	2202      	movs	r2, #2
 801c5cc:	2121      	movs	r1, #33	@ 0x21
 801c5ce:	6820      	ldr	r0, [r4, #0]
 801c5d0:	f7fc f8f0 	bl	80187b4 <_ZN9Registers18SetRegisterAsArrayEtt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_ADD_FILTER, (void*) this,
 801c5d4:	4622      	mov	r2, r4
 801c5d6:	4b0b      	ldr	r3, [pc, #44]	@ (801c604 <_ZN17MasterSubscribers12AddRegistersEv+0x64>)
 801c5d8:	2121      	movs	r1, #33	@ 0x21
 801c5da:	6820      	ldr	r0, [r4, #0]
 801c5dc:	f7ff ff8a 	bl	801c4f4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
	registers->AddRegister<uint8_t>(REG_SUB_CLEAR_FILTERS);
 801c5e0:	6820      	ldr	r0, [r4, #0]
 801c5e2:	2122      	movs	r1, #34	@ 0x22
 801c5e4:	f7ff ff4a 	bl	801c47c <_ZN9Registers11AddRegisterIhEEbt.isra.0>
	registers->SetRegisterAsSingle(REG_SUB_CLEAR_FILTERS);
 801c5e8:	2122      	movs	r1, #34	@ 0x22
 801c5ea:	6820      	ldr	r0, [r4, #0]
 801c5ec:	f7fc f8c6 	bl	801877c <_ZN9Registers19SetRegisterAsSingleEt>
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801c5f0:	4622      	mov	r2, r4
 801c5f2:	6820      	ldr	r0, [r4, #0]
 801c5f4:	2122      	movs	r1, #34	@ 0x22
 801c5f6:	4b04      	ldr	r3, [pc, #16]	@ (801c608 <_ZN17MasterSubscribers12AddRegistersEv+0x68>)
}
 801c5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	registers->AddWriteCallback<uint8_t>(REG_SUB_CLEAR_FILTERS, (void*) this,
 801c5fc:	f7ff bf7a 	b.w	801c4f4 <_ZN9Registers16AddWriteCallbackIhEEbtPvPFbS1_tPT_tE.isra.0>
 801c600:	0801c127 	.word	0x0801c127
 801c604:	0801c465 	.word	0x0801c465
 801c608:	0801c1db 	.word	0x0801c1db

0801c60c <_ZN19TrajectoryGeneratorC1Ev>:

/**
 * @brief Class constructor
 */
TrajectoryGenerator::TrajectoryGenerator() {
	cyclic = false;
 801c60c:	2200      	movs	r2, #0
 801c60e:	8002      	strh	r2, [r0, #0]
	mode = TRAJECTORY_STEP;
	speed_max = 1000.0f; 		// /ms
 801c610:	4a03      	ldr	r2, [pc, #12]	@ (801c620 <_ZN19TrajectoryGeneratorC1Ev+0x14>)
 801c612:	6042      	str	r2, [r0, #4]
	accel_max = 1.0f; 			// /ms^2
 801c614:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801c618:	6082      	str	r2, [r0, #8]
	frequency = 1.0f;
 801c61a:	60c2      	str	r2, [r0, #12]
}
 801c61c:	4770      	bx	lr
 801c61e:	bf00      	nop
 801c620:	447a0000 	.word	0x447a0000

0801c624 <_ZN19TrajectoryGenerator14PlanTrajectoryEff>:
 */
void TrajectoryGenerator::PlanTrajectory(float start_position_, float end_position_) {
	start_position = start_position_;
	end_position = end_position_;

	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801c624:	eeb4 0ae0 	vcmpe.f32	s0, s1
	start_position = start_position_;
 801c628:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
	end_position = end_position_;
 801c62c:	edc0 0a0a 	vstr	s1, [r0, #40]	@ 0x28
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c634:	bf4c      	ite	mi
 801c636:	2301      	movmi	r3, #1
 801c638:	f04f 33ff 	movpl.w	r3, #4294967295
 801c63c:	7603      	strb	r3, [r0, #24]
}
 801c63e:	4770      	bx	lr

0801c640 <_ZN19TrajectoryGenerator14ComputeTimingsEv>:
/**
 * @brief Compute the trajectory timings based on the selected trajectory mode
 */
void TrajectoryGenerator::ComputeTimings(void) {
	uint32_t accel_time_no_speed_sat;
	switch (mode) {
 801c640:	7843      	ldrb	r3, [r0, #1]
void TrajectoryGenerator::ComputeTimings(void) {
 801c642:	b510      	push	{r4, lr}
 801c644:	4604      	mov	r4, r0
 801c646:	ed2d 8b02 	vpush	{d8}
	switch (mode) {
 801c64a:	2b03      	cmp	r3, #3
 801c64c:	d805      	bhi.n	801c65a <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x1a>
 801c64e:	e8df f003 	tbb	[pc, r3]
 801c652:	0702      	.short	0x0702
 801c654:	571a      	.short	0x571a
		// STEP
		case 0:
			end_time = start_time;
 801c656:	69c3      	ldr	r3, [r0, #28]
		case 2:
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
			accel_time = speed_max / accel_max;
			if (accel_time_no_speed_sat > accel_time)  {
				speed_time = abs(end_position - start_position) / speed_max;
				end_time = start_time + accel_time + speed_time;
 801c658:	6223      	str	r3, [r4, #32]
			end_time = start_time + 1000.0f / (2.0f * frequency);
			break;
		default:
			break;
	}
}
 801c65a:	ecbd 8b02 	vpop	{d8}
 801c65e:	bd10      	pop	{r4, pc}
			end_time = start_time + abs(end_position - start_position) / speed_max;
 801c660:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 801c664:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 801c668:	edd0 6a01 	vldr	s13, [r0, #4]
 801c66c:	ee37 7a67 	vsub.f32	s14, s14, s15
  { return __builtin_fabsf(__x); }
 801c670:	eeb0 7ac7 	vabs.f32	s14, s14
 801c674:	eec7 7a26 	vdiv.f32	s15, s14, s13
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801c678:	ed94 7a07 	vldr	s14, [r4, #28]
 801c67c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c680:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c684:	e037      	b.n	801c6f6 <_ZN19TrajectoryGenerator14ComputeTimingsEv+0xb6>
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
 801c686:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
 801c68a:	ed90 8a0a 	vldr	s16, [r0, #40]	@ 0x28
 801c68e:	edd0 8a02 	vldr	s17, [r0, #8]
 801c692:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c696:	eeb0 8ac8 	vabs.f32	s16, s16
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 801c69a:	ee88 0a28 	vdiv.f32	s0, s16, s17
 801c69e:	f000 fb7b 	bl	801cd98 <sqrtf>
			accel_time = speed_max / accel_max;
 801c6a2:	ed94 7a01 	vldr	s14, [r4, #4]
 801c6a6:	69e2      	ldr	r2, [r4, #28]
			accel_time_no_speed_sat = sqrt(abs(end_position - start_position) / accel_max);
 801c6a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c6ac:	ee17 1a90 	vmov	r1, s15
			accel_time = speed_max / accel_max;
 801c6b0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801c6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c6b8:	ee17 3a90 	vmov	r3, s15
 801c6bc:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
			if (accel_time_no_speed_sat > accel_time)  {
 801c6c0:	428b      	cmp	r3, r1
 801c6c2:	d20a      	bcs.n	801c6da <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x9a>
				speed_time = abs(end_position - start_position) / speed_max;
 801c6c4:	eec8 7a07 	vdiv.f32	s15, s16, s14
				end_time = start_time + accel_time + speed_time;
 801c6c8:	4413      	add	r3, r2
				speed_time = abs(end_position - start_position) / speed_max;
 801c6ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c6ce:	ee17 1a90 	vmov	r1, s15
 801c6d2:	edc4 7a0c 	vstr	s15, [r4, #48]	@ 0x30
				end_time = start_time + accel_time + speed_time;
 801c6d6:	440b      	add	r3, r1
 801c6d8:	e7be      	b.n	801c658 <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x18>
				end_time = start_time + 2.0f * accel_time_no_speed_sat;
 801c6da:	ee07 1a90 	vmov	s15, r1
 801c6de:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801c6e2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801c6e6:	ee07 2a90 	vmov	s15, r2
 801c6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
				speed_time = accel_time;
 801c6ee:	e9c4 110b 	strd	r1, r1, [r4, #44]	@ 0x2c
				end_time = start_time + 2.0f * accel_time_no_speed_sat;
 801c6f2:	eee0 7a07 	vfma.f32	s15, s0, s14
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801c6f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c6fa:	edc4 7a08 	vstr	s15, [r4, #32]
}
 801c6fe:	e7ac      	b.n	801c65a <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x1a>
			end_time = start_time + 1000.0f / (2.0f * frequency);
 801c700:	edd0 7a03 	vldr	s15, [r0, #12]
 801c704:	eddf 6a03 	vldr	s13, [pc, #12]	@ 801c714 <_ZN19TrajectoryGenerator14ComputeTimingsEv+0xd4>
 801c708:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801c70c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c710:	e7b2      	b.n	801c678 <_ZN19TrajectoryGenerator14ComputeTimingsEv+0x38>
 801c712:	bf00      	nop
 801c714:	447a0000 	.word	0x447a0000

0801c718 <_ZN19TrajectoryGenerator15StartTrajectoryEv>:
void TrajectoryGenerator::StartTrajectory(void) {
 801c718:	b510      	push	{r4, lr}
 801c71a:	4604      	mov	r4, r0
	start_time = HAL_GetTick();
 801c71c:	f7e6 fed6 	bl	80034cc <HAL_GetTick>
 801c720:	61e0      	str	r0, [r4, #28]
	ComputeTimings();
 801c722:	4620      	mov	r0, r4
}
 801c724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ComputeTimings();
 801c728:	f7ff bf8a 	b.w	801c640 <_ZN19TrajectoryGenerator14ComputeTimingsEv>

0801c72c <_ZN19TrajectoryGenerator15StartTrajectoryEff>:
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801c72c:	eeb4 0ae0 	vcmpe.f32	s0, s1
	start_position = start_position_;
 801c730:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
	end_position = end_position_;
 801c734:	edc0 0a0a 	vstr	s1, [r0, #40]	@ 0x28
	(end_position_ > start_position) ? sign = 1 : sign = -1;
 801c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c73c:	bf4c      	ite	mi
 801c73e:	2201      	movmi	r2, #1
 801c740:	f04f 32ff 	movpl.w	r2, #4294967295
 801c744:	7602      	strb	r2, [r0, #24]
	StartTrajectory();
 801c746:	f7ff bfe7 	b.w	801c718 <_ZN19TrajectoryGenerator15StartTrajectoryEv>

0801c74a <_ZN19TrajectoryGenerator5SlopeEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Slope(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801c74a:	428a      	cmp	r2, r1
 801c74c:	d310      	bcc.n	801c770 <_ZN19TrajectoryGenerator5SlopeEmmff+0x26>
	return start + sign * speed_max * (time - start_time);
 801c74e:	f990 3018 	ldrsb.w	r3, [r0, #24]
 801c752:	1a52      	subs	r2, r2, r1
 801c754:	edd0 7a01 	vldr	s15, [r0, #4]
 801c758:	ee07 3a10 	vmov	s14, r3
 801c75c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c760:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c764:	ee07 2a90 	vmov	s15, r2
 801c768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c76c:	eea7 0a27 	vfma.f32	s0, s14, s15
}
 801c770:	4770      	bx	lr

0801c772 <_ZN19TrajectoryGenerator11TrapezoidalEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Trapezoidal(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801c772:	428a      	cmp	r2, r1
float TrajectoryGenerator::Trapezoidal(uint32_t start_time, uint32_t time, float start, float target) {
 801c774:	b530      	push	{r4, r5, lr}
	if (time < start_time) return start;
 801c776:	d31a      	bcc.n	801c7ae <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>
	if (time < start_time + accel_time) {
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c778:	1a55      	subs	r5, r2, r1
	if (time < start_time + accel_time) {
 801c77a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c77c:	f990 3018 	ldrsb.w	r3, [r0, #24]
 801c780:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801c784:	ee07 5a10 	vmov	s14, r5
	if (time < start_time + accel_time) {
 801c788:	190d      	adds	r5, r1, r4
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c78a:	ee07 3a90 	vmov	s15, r3
	if (time < start_time + accel_time) {
 801c78e:	42aa      	cmp	r2, r5
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c790:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	if (time < start_time + accel_time) {
 801c794:	d20c      	bcs.n	801c7b0 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3e>
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c796:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c79a:	edd0 7a02 	vldr	s15, [r0, #8]
 801c79e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801c7a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 801c7a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
	} else if (time < start_time + speed_time) {
		return sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801c7aa:	eea6 0a87 	vfma.f32	s0, s13, s14
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
		} else {
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * accel_max * speed_time * (time - start_time - speed_time) + 0.5f * (start + target);
		}
	}
}
 801c7ae:	bd30      	pop	{r4, r5, pc}
	} else if (time < start_time + speed_time) {
 801c7b0:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 801c7b2:	4429      	add	r1, r5
 801c7b4:	428a      	cmp	r2, r1
 801c7b6:	d20c      	bcs.n	801c7d2 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x60>
		return sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801c7b8:	edd0 7a01 	vldr	s15, [r0, #4]
 801c7bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c7c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801c7c4:	ee07 4a90 	vmov	s15, r4
 801c7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c7cc:	eea7 7ae5 	vfms.f32	s14, s15, s11
 801c7d0:	e7eb      	b.n	801c7aa <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x38>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801c7d2:	425b      	negs	r3, r3
 801c7d4:	ee17 2a10 	vmov	r2, s14
		return sign * 0.5f * accel_max * powf((time  - start_time), 2) + start;
 801c7d8:	ed90 6a02 	vldr	s12, [r0, #8]
		if (speed_time > accel_time) {
 801c7dc:	42ac      	cmp	r4, r5
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801c7de:	ee07 3a90 	vmov	s15, r3
 801c7e2:	eba2 0205 	sub.w	r2, r2, r5
 801c7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7ea:	ee05 2a10 	vmov	s10, r2
 801c7ee:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 801c7f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c7f6:	ee65 4a05 	vmul.f32	s9, s10, s10
 801c7fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c7fe:	ee67 7aa4 	vmul.f32	s15, s15, s9
		if (speed_time > accel_time) {
 801c802:	d210      	bcs.n	801c826 <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0xb4>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * speed_max * (time - start_time - 0.5f * accel_time) + start;
 801c804:	ed90 6a01 	vldr	s12, [r0, #4]
 801c808:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c80c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c810:	ee06 4a10 	vmov	s12, r4
 801c814:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801c818:	eea6 7a65 	vfms.f32	s14, s12, s11
 801c81c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c820:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c824:	e7c3      	b.n	801c7ae <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>
			return - sign * 0.5f * accel_max * powf((time - start_time - speed_time), 2) + sign * accel_max * speed_time * (time - start_time - speed_time) + 0.5f * (start + target);
 801c826:	ee07 5a10 	vmov	s14, r5
 801c82a:	ee26 6a26 	vmul.f32	s12, s12, s13
 801c82e:	ee70 0a20 	vadd.f32	s1, s0, s1
 801c832:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c836:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c83a:	eee6 7a05 	vfma.f32	s15, s12, s10
 801c83e:	eee0 7aa5 	vfma.f32	s15, s1, s11
 801c842:	eeb0 0a67 	vmov.f32	s0, s15
 801c846:	e7b2      	b.n	801c7ae <_ZN19TrajectoryGenerator11TrapezoidalEmmff+0x3c>

0801c848 <_ZN19TrajectoryGenerator10SinusoidalEmmff>:
 * @param input start: start value
 * @param input target: target value
 * @return setpoint
 */
float TrajectoryGenerator::Sinusoidal(uint32_t start_time, uint32_t time, float start, float target) {
	if (time < start_time) return start;
 801c848:	428a      	cmp	r2, r1
float TrajectoryGenerator::Sinusoidal(uint32_t start_time, uint32_t time, float start, float target) {
 801c84a:	b508      	push	{r3, lr}
 801c84c:	ed2d 8b04 	vpush	{d8-d9}
	if (time < start_time) return start;
 801c850:	d32c      	bcc.n	801c8ac <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x64>
	return (int32_t) (start - (target - start) * (cos(2.0f * M_PI * frequency * (time - start_time) * 0.001f + phase) - 1) / 2.0f); // or / 1000.0f instead of * 0.001f but more efficient
 801c852:	ed90 7a03 	vldr	s14, [r0, #12]
 801c856:	1a52      	subs	r2, r2, r1
 801c858:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801c85c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c860:	eeb7 9ac0 	vcvt.f64.f32	d9, s0
 801c864:	ed90 0a04 	vldr	s0, [r0, #16]
 801c868:	eeb7 8ae0 	vcvt.f64.f32	d8, s1
 801c86c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801c870:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 801c8b8 <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x70>
 801c874:	ee27 6b06 	vmul.f64	d6, d7, d6
 801c878:	ee07 2a90 	vmov	s15, r2
 801c87c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c880:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c884:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801c8c0 <_ZN19TrajectoryGenerator10SinusoidalEmmff+0x78>
 801c888:	eea7 0b06 	vfma.f64	d0, d7, d6
 801c88c:	f000 fa38 	bl	801cd00 <cos>
 801c890:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801c894:	ee30 0b47 	vsub.f64	d0, d0, d7
 801c898:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801c89c:	ee28 8b40 	vnmul.f64	d8, d8, d0
 801c8a0:	eea8 9b07 	vfma.f64	d9, d8, d7
 801c8a4:	eebd 9bc9 	vcvt.s32.f64	s18, d9
 801c8a8:	eeb8 0ac9 	vcvt.f32.s32	s0, s18
}
 801c8ac:	ecbd 8b04 	vpop	{d8-d9}
 801c8b0:	bd08      	pop	{r3, pc}
 801c8b2:	bf00      	nop
 801c8b4:	f3af 8000 	nop.w
 801c8b8:	54442d18 	.word	0x54442d18
 801c8bc:	401921fb 	.word	0x401921fb
 801c8c0:	e0000000 	.word	0xe0000000
 801c8c4:	3f50624d 	.word	0x3f50624d

0801c8c8 <_ZN19TrajectoryGenerator16GenerateSetPointEv>:
float TrajectoryGenerator::GenerateSetPoint(void) {
 801c8c8:	b510      	push	{r4, lr}
	if (mode == TRAJECTORY_STEP) {
 801c8ca:	7843      	ldrb	r3, [r0, #1]
float TrajectoryGenerator::GenerateSetPoint(void) {
 801c8cc:	4604      	mov	r4, r0
	if (mode == TRAJECTORY_STEP) {
 801c8ce:	b923      	cbnz	r3, 801c8da <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x12>
		setpoint = Step(end_position);
 801c8d0:	ed90 0a0a 	vldr	s0, [r0, #40]	@ 0x28
 801c8d4:	ed80 0a05 	vstr	s0, [r0, #20]
}
 801c8d8:	bd10      	pop	{r4, pc}
	uint32_t time = HAL_GetTick();
 801c8da:	f7e6 fdf7 	bl	80034cc <HAL_GetTick>
	if (time > end_time) {
 801c8de:	6a23      	ldr	r3, [r4, #32]
	uint32_t time = HAL_GetTick();
 801c8e0:	4602      	mov	r2, r0
	if (time > end_time) {
 801c8e2:	4283      	cmp	r3, r0
 801c8e4:	d20c      	bcs.n	801c900 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x38>
		if (cyclic) {
 801c8e6:	7823      	ldrb	r3, [r4, #0]
			StartTrajectory(end_position, start_position);
 801c8e8:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
		if (cyclic) {
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d0f3      	beq.n	801c8d8 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
			StartTrajectory(end_position, start_position);
 801c8f0:	edd4 0a09 	vldr	s1, [r4, #36]	@ 0x24
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	f7ff ff19 	bl	801c72c <_ZN19TrajectoryGenerator15StartTrajectoryEff>
			return start_position;
 801c8fa:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801c8fe:	e7eb      	b.n	801c8d8 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
	switch (mode) {
 801c900:	7863      	ldrb	r3, [r4, #1]
 801c902:	2b02      	cmp	r3, #2
 801c904:	d010      	beq.n	801c928 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x60>
 801c906:	2b03      	cmp	r3, #3
 801c908:	d017      	beq.n	801c93a <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x72>
 801c90a:	2b01      	cmp	r3, #1
 801c90c:	d109      	bne.n	801c922 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x5a>
			setpoint = Slope(start_time, time, start_position, end_position);
 801c90e:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801c912:	4620      	mov	r0, r4
 801c914:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801c918:	69e1      	ldr	r1, [r4, #28]
 801c91a:	f7ff ff16 	bl	801c74a <_ZN19TrajectoryGenerator5SlopeEmmff>
			setpoint = Sinusoidal(start_time, time, start_position, end_position);
 801c91e:	ed84 0a05 	vstr	s0, [r4, #20]
	return setpoint;
 801c922:	ed94 0a05 	vldr	s0, [r4, #20]
 801c926:	e7d7      	b.n	801c8d8 <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x10>
			setpoint = Trapezoidal(start_time, time, start_position, end_position);
 801c928:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801c92c:	4620      	mov	r0, r4
 801c92e:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801c932:	69e1      	ldr	r1, [r4, #28]
 801c934:	f7ff ff1d 	bl	801c772 <_ZN19TrajectoryGenerator11TrapezoidalEmmff>
 801c938:	e7f1      	b.n	801c91e <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x56>
			setpoint = Sinusoidal(start_time, time, start_position, end_position);
 801c93a:	edd4 0a0a 	vldr	s1, [r4, #40]	@ 0x28
 801c93e:	4620      	mov	r0, r4
 801c940:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 801c944:	69e1      	ldr	r1, [r4, #28]
 801c946:	f7ff ff7f 	bl	801c848 <_ZN19TrajectoryGenerator10SinusoidalEmmff>
 801c94a:	e7e8      	b.n	801c91e <_ZN19TrajectoryGenerator16GenerateSetPointEv+0x56>

0801c94c <_ZN19TrajectoryGenerator17SetTrajectoryModeEh>:
 * @brief Set the trajectory mode
 *
 * @param input mode_: the trajectory mode
*/
void TrajectoryGenerator::SetTrajectoryMode(uint8_t mode_) {
	mode = mode_;
 801c94c:	7041      	strb	r1, [r0, #1]
}
 801c94e:	4770      	bx	lr

0801c950 <_ZN19TrajectoryGenerator24SetTrajectoryCyclicValueEb>:
 * @brief Set the cyclic falg
 *
 * @param input cyclic_: whether the motion is cyclic or not
*/
void TrajectoryGenerator::SetTrajectoryCyclicValue(bool cyclic_) {
	cyclic = cyclic_;
 801c950:	7001      	strb	r1, [r0, #0]
}
 801c952:	4770      	bx	lr

0801c954 <_ZN19TrajectoryGenerator21SetTrajectoryMaxSpeedEf>:
 * @brief Set the maximum speed
 *
 * @param input speed_max_: the maximum speed
*/
void TrajectoryGenerator::SetTrajectoryMaxSpeed(float speed_max_) {
	speed_max = speed_max_;
 801c954:	ed80 0a01 	vstr	s0, [r0, #4]
}
 801c958:	4770      	bx	lr

0801c95a <_ZN19TrajectoryGenerator28SetTrajectoryMaxAccelerationEf>:
 * @brief Set the maximum acceleration
 *
 * @param input accel_max_: the maximum acceleration
*/
void TrajectoryGenerator::SetTrajectoryMaxAcceleration(float accel_max_) {
	accel_max = accel_max_;
 801c95a:	ed80 0a02 	vstr	s0, [r0, #8]
}
 801c95e:	4770      	bx	lr

0801c960 <_ZN19TrajectoryGenerator22SetTrajectoryFrequencyEf>:
 * @brief Set the sinusoidal frequency
 *
 * @param input frequency_: the sinusoidal frequency
*/
void TrajectoryGenerator::SetTrajectoryFrequency(float frequency_) {
	frequency = frequency_;
 801c960:	ed80 0a03 	vstr	s0, [r0, #12]
}
 801c964:	4770      	bx	lr

0801c966 <_ZN19TrajectoryGenerator18SetTrajectoryPhaseEf>:
 * @brief Set the sinusoidal phase
 *
 * @param input frequency_: the sinusoidal phase
*/
void TrajectoryGenerator::SetTrajectoryPhase(float phase_) {
	phase = phase_;
 801c966:	ed80 0a04 	vstr	s0, [r0, #16]
}
 801c96a:	4770      	bx	lr

0801c96c <_ZL8UserTaskPv>:
		.priority = (osPriority_t) osPriorityLow,
	};
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
}

static void UserTask(void *argument) {
 801c96c:	b510      	push	{r4, lr}
	Communication* communication = class_instances_pointer->communication;
	Services* services = class_instances_pointer->services;
	Publishers* publishers = class_instances_pointer->publishers;
	HardwareDelay* hardware_delay = class_instances_pointer->hardware_delay;
	Sensors* sensors = class_instances_pointer->sensors;
	LEDS* leds = class_instances_pointer->leds;
 801c96e:	69c4      	ldr	r4, [r0, #28]
	Controller* controller = class_instances_pointer->controller;
	Servomotors* servomotors = class_instances_pointer->servomotors;

	for(;;) {
		leds->SetLED(LED_USER3, GPIO_PIN_SET);
 801c970:	2201      	movs	r2, #1
 801c972:	210c      	movs	r1, #12
 801c974:	4620      	mov	r0, r4
 801c976:	f7f8 fe2b 	bl	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801c97a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801c97e:	f7f0 f9eb 	bl	800cd58 <osDelay>
		leds->SetLED(LED_USER3, GPIO_PIN_RESET);
 801c982:	2200      	movs	r2, #0
 801c984:	210c      	movs	r1, #12
 801c986:	4620      	mov	r0, r4
 801c988:	f7f8 fe22 	bl	80155d0 <_ZN4LEDS6SetLEDEh13GPIO_PinState>
		osDelay(500);
 801c98c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801c990:	f7f0 f9e2 	bl	800cd58 <osDelay>
	for(;;) {
 801c994:	e7ec      	b.n	801c970 <_ZL8UserTaskPv+0x4>

0801c996 <_ZN4UserC1EP9RegistersP17MasterSubscribersP13CommunicationP8ServicesP10PublishersP13HardwareDelayP7SensorsP4LEDSP10ControllerP11Servomotors>:
User::User(	Registers* registers_,
 801c996:	b510      	push	{r4, lr}
	communication = communication_;
 801c998:	6083      	str	r3, [r0, #8]
	services = services_;
 801c99a:	9b02      	ldr	r3, [sp, #8]
 801c99c:	60c3      	str	r3, [r0, #12]
	publishers = publishers_;
 801c99e:	9b03      	ldr	r3, [sp, #12]
 801c9a0:	6103      	str	r3, [r0, #16]
	hardware_delay = hardware_delay_;
 801c9a2:	9b04      	ldr	r3, [sp, #16]
 801c9a4:	6143      	str	r3, [r0, #20]
	sensors = sensors_;
 801c9a6:	9b05      	ldr	r3, [sp, #20]
 801c9a8:	6183      	str	r3, [r0, #24]
	leds = leds_;
 801c9aa:	9b06      	ldr	r3, [sp, #24]
 801c9ac:	61c3      	str	r3, [r0, #28]
	controller = controller_;
 801c9ae:	9b07      	ldr	r3, [sp, #28]
 801c9b0:	6203      	str	r3, [r0, #32]
	servomotors = servomotors_;
 801c9b2:	9b08      	ldr	r3, [sp, #32]
	subscribers = subscribers_;
 801c9b4:	e9c0 1200 	strd	r1, r2, [r0]
	servomotors = servomotors_;
 801c9b8:	6243      	str	r3, [r0, #36]	@ 0x24
}
 801c9ba:	bd10      	pop	{r4, pc}

0801c9bc <_ZN4User4InitEv>:
}
 801c9bc:	4770      	bx	lr
	...

0801c9c0 <_ZN4User12AddOSThreadsEv>:
void User::AddOSThreads(void) {
 801c9c0:	b530      	push	{r4, r5, lr}
	};
 801c9c2:	4d1b      	ldr	r5, [pc, #108]	@ (801ca30 <_ZN4User12AddOSThreadsEv+0x70>)
void User::AddOSThreads(void) {
 801c9c4:	b08b      	sub	sp, #44	@ 0x2c
 801c9c6:	4604      	mov	r4, r0
	};
 801c9c8:	682b      	ldr	r3, [r5, #0]
 801c9ca:	f3bf 8f5b 	dmb	ish
 801c9ce:	07d9      	lsls	r1, r3, #31
 801c9d0:	d41b      	bmi.n	801ca0a <_ZN4User12AddOSThreadsEv+0x4a>
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	f000 f8be 	bl	801cb54 <__cxa_guard_acquire>
 801c9d8:	b1b8      	cbz	r0, 801ca0a <_ZN4User12AddOSThreadsEv+0x4a>
 801c9da:	6822      	ldr	r2, [r4, #0]
 801c9dc:	4628      	mov	r0, r5
 801c9de:	4b15      	ldr	r3, [pc, #84]	@ (801ca34 <_ZN4User12AddOSThreadsEv+0x74>)
 801c9e0:	601a      	str	r2, [r3, #0]
 801c9e2:	6862      	ldr	r2, [r4, #4]
 801c9e4:	605a      	str	r2, [r3, #4]
 801c9e6:	68a2      	ldr	r2, [r4, #8]
 801c9e8:	609a      	str	r2, [r3, #8]
 801c9ea:	68e2      	ldr	r2, [r4, #12]
 801c9ec:	60da      	str	r2, [r3, #12]
 801c9ee:	6922      	ldr	r2, [r4, #16]
 801c9f0:	611a      	str	r2, [r3, #16]
 801c9f2:	6962      	ldr	r2, [r4, #20]
 801c9f4:	615a      	str	r2, [r3, #20]
 801c9f6:	69a2      	ldr	r2, [r4, #24]
 801c9f8:	619a      	str	r2, [r3, #24]
 801c9fa:	69e2      	ldr	r2, [r4, #28]
 801c9fc:	61da      	str	r2, [r3, #28]
 801c9fe:	6a22      	ldr	r2, [r4, #32]
 801ca00:	621a      	str	r2, [r3, #32]
 801ca02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801ca04:	625a      	str	r2, [r3, #36]	@ 0x24
 801ca06:	f000 f8b1 	bl	801cb6c <__cxa_guard_release>
	const osThreadAttr_t UserTask_attributes = {
 801ca0a:	2220      	movs	r2, #32
 801ca0c:	2100      	movs	r1, #0
 801ca0e:	a802      	add	r0, sp, #8
 801ca10:	f001 f846 	bl	801daa0 <memset>
 801ca14:	4b08      	ldr	r3, [pc, #32]	@ (801ca38 <_ZN4User12AddOSThreadsEv+0x78>)
 801ca16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801ca1a:	4906      	ldr	r1, [pc, #24]	@ (801ca34 <_ZN4User12AddOSThreadsEv+0x74>)
	const osThreadAttr_t UserTask_attributes = {
 801ca1c:	9301      	str	r3, [sp, #4]
 801ca1e:	2308      	movs	r3, #8
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801ca20:	4806      	ldr	r0, [pc, #24]	@ (801ca3c <_ZN4User12AddOSThreadsEv+0x7c>)
	const osThreadAttr_t UserTask_attributes = {
 801ca22:	e9cd 2306 	strd	r2, r3, [sp, #24]
	osThreadNew(UserTask, &class_instances_argument, &UserTask_attributes);
 801ca26:	aa01      	add	r2, sp, #4
 801ca28:	f7f0 f938 	bl	800cc9c <osThreadNew>
}
 801ca2c:	b00b      	add	sp, #44	@ 0x2c
 801ca2e:	bd30      	pop	{r4, r5, pc}
 801ca30:	24006ba4 	.word	0x24006ba4
 801ca34:	24006ba8 	.word	0x24006ba8
 801ca38:	0801e0ce 	.word	0x0801e0ce
 801ca3c:	0801c96d 	.word	0x0801c96d

0801ca40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 801ca40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ca42:	2400      	movs	r4, #0
 801ca44:	2310      	movs	r3, #16
 801ca46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ca4a:	6803      	ldr	r3, [r0, #0]
 801ca4c:	4615      	mov	r5, r2
 801ca4e:	699e      	ldr	r6, [r3, #24]
 801ca50:	6812      	ldr	r2, [r2, #0]
 801ca52:	466b      	mov	r3, sp
 801ca54:	e9cd 4400 	strd	r4, r4, [sp]
 801ca58:	47b0      	blx	r6
 801ca5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ca5e:	f003 0306 	and.w	r3, r3, #6
 801ca62:	2b06      	cmp	r3, #6
 801ca64:	bf03      	ittte	eq
 801ca66:	9b00      	ldreq	r3, [sp, #0]
 801ca68:	602b      	streq	r3, [r5, #0]
 801ca6a:	2001      	moveq	r0, #1
 801ca6c:	4620      	movne	r0, r4
 801ca6e:	b004      	add	sp, #16
 801ca70:	bd70      	pop	{r4, r5, r6, pc}

0801ca72 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 801ca72:	9800      	ldr	r0, [sp, #0]
 801ca74:	4290      	cmp	r0, r2
 801ca76:	bf0c      	ite	eq
 801ca78:	2006      	moveq	r0, #6
 801ca7a:	2001      	movne	r0, #1
 801ca7c:	4770      	bx	lr
	...

0801ca80 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 801ca80:	b510      	push	{r4, lr}
 801ca82:	4b03      	ldr	r3, [pc, #12]	@ (801ca90 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 801ca84:	6003      	str	r3, [r0, #0]
 801ca86:	4604      	mov	r4, r0
 801ca88:	f000 f905 	bl	801cc96 <_ZNSt9type_infoD1Ev>
 801ca8c:	4620      	mov	r0, r4
 801ca8e:	bd10      	pop	{r4, pc}
 801ca90:	0801e10c 	.word	0x0801e10c

0801ca94 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 801ca94:	b510      	push	{r4, lr}
 801ca96:	4604      	mov	r4, r0
 801ca98:	f7ff fff2 	bl	801ca80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	2108      	movs	r1, #8
 801caa0:	f000 f842 	bl	801cb28 <_ZdlPvj>
 801caa4:	4620      	mov	r0, r4
 801caa6:	bd10      	pop	{r4, pc}

0801caa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 801caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801caac:	461f      	mov	r7, r3
 801caae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801cab2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cab6:	4598      	cmp	r8, r3
 801cab8:	4606      	mov	r6, r0
 801caba:	4615      	mov	r5, r2
 801cabc:	d107      	bne.n	801cace <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cabe:	9907      	ldr	r1, [sp, #28]
 801cac0:	f000 f8ee 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cac4:	b118      	cbz	r0, 801cace <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 801cac6:	7165      	strb	r5, [r4, #5]
 801cac8:	2000      	movs	r0, #0
 801caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cace:	4639      	mov	r1, r7
 801cad0:	4630      	mov	r0, r6
 801cad2:	f000 f8e5 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cad6:	2800      	cmp	r0, #0
 801cad8:	d0f6      	beq.n	801cac8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 801cada:	2301      	movs	r3, #1
 801cadc:	f8c4 8000 	str.w	r8, [r4]
 801cae0:	7125      	strb	r5, [r4, #4]
 801cae2:	71a3      	strb	r3, [r4, #6]
 801cae4:	e7f0      	b.n	801cac8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0801cae6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 801cae6:	b538      	push	{r3, r4, r5, lr}
 801cae8:	4615      	mov	r5, r2
 801caea:	461c      	mov	r4, r3
 801caec:	f000 f8d8 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801caf0:	b120      	cbz	r0, 801cafc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 801caf2:	2308      	movs	r3, #8
 801caf4:	60e3      	str	r3, [r4, #12]
 801caf6:	2306      	movs	r3, #6
 801caf8:	6025      	str	r5, [r4, #0]
 801cafa:	7123      	strb	r3, [r4, #4]
 801cafc:	bd38      	pop	{r3, r4, r5, pc}

0801cafe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 801cafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb02:	4605      	mov	r5, r0
 801cb04:	460c      	mov	r4, r1
 801cb06:	4616      	mov	r6, r2
 801cb08:	461f      	mov	r7, r3
 801cb0a:	f000 f8c9 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cb0e:	b948      	cbnz	r0, 801cb24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cb10:	2f03      	cmp	r7, #3
 801cb12:	d807      	bhi.n	801cb24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 801cb14:	6823      	ldr	r3, [r4, #0]
 801cb16:	4632      	mov	r2, r6
 801cb18:	4629      	mov	r1, r5
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	695b      	ldr	r3, [r3, #20]
 801cb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cb22:	4718      	bx	r3
 801cb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cb28 <_ZdlPvj>:
 801cb28:	f000 b8df 	b.w	801ccea <_ZdlPv>

0801cb2c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 801cb2c:	b510      	push	{r4, lr}
 801cb2e:	4b03      	ldr	r3, [pc, #12]	@ (801cb3c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 801cb30:	6003      	str	r3, [r0, #0]
 801cb32:	4604      	mov	r4, r0
 801cb34:	f000 f8af 	bl	801cc96 <_ZNSt9type_infoD1Ev>
 801cb38:	4620      	mov	r0, r4
 801cb3a:	bd10      	pop	{r4, pc}
 801cb3c:	0801e17c 	.word	0x0801e17c

0801cb40 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 801cb40:	b510      	push	{r4, lr}
 801cb42:	4604      	mov	r4, r0
 801cb44:	f7ff fff2 	bl	801cb2c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 801cb48:	4620      	mov	r0, r4
 801cb4a:	2108      	movs	r1, #8
 801cb4c:	f7ff ffec 	bl	801cb28 <_ZdlPvj>
 801cb50:	4620      	mov	r0, r4
 801cb52:	bd10      	pop	{r4, pc}

0801cb54 <__cxa_guard_acquire>:
 801cb54:	6802      	ldr	r2, [r0, #0]
 801cb56:	07d2      	lsls	r2, r2, #31
 801cb58:	4603      	mov	r3, r0
 801cb5a:	d405      	bmi.n	801cb68 <__cxa_guard_acquire+0x14>
 801cb5c:	7842      	ldrb	r2, [r0, #1]
 801cb5e:	b102      	cbz	r2, 801cb62 <__cxa_guard_acquire+0xe>
 801cb60:	deff      	udf	#255	@ 0xff
 801cb62:	2001      	movs	r0, #1
 801cb64:	7058      	strb	r0, [r3, #1]
 801cb66:	4770      	bx	lr
 801cb68:	2000      	movs	r0, #0
 801cb6a:	4770      	bx	lr

0801cb6c <__cxa_guard_release>:
 801cb6c:	2301      	movs	r3, #1
 801cb6e:	6003      	str	r3, [r0, #0]
 801cb70:	4770      	bx	lr

0801cb72 <_Znwj>:
 801cb72:	2801      	cmp	r0, #1
 801cb74:	bf38      	it	cc
 801cb76:	2001      	movcc	r0, #1
 801cb78:	b510      	push	{r4, lr}
 801cb7a:	4604      	mov	r4, r0
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f000 feb7 	bl	801d8f0 <malloc>
 801cb82:	b100      	cbz	r0, 801cb86 <_Znwj+0x14>
 801cb84:	bd10      	pop	{r4, pc}
 801cb86:	f000 f8b3 	bl	801ccf0 <_ZSt15get_new_handlerv>
 801cb8a:	b908      	cbnz	r0, 801cb90 <_Znwj+0x1e>
 801cb8c:	f000 fea8 	bl	801d8e0 <abort>
 801cb90:	4780      	blx	r0
 801cb92:	e7f3      	b.n	801cb7c <_Znwj+0xa>

0801cb94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 801cb94:	b510      	push	{r4, lr}
 801cb96:	4b03      	ldr	r3, [pc, #12]	@ (801cba4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 801cb98:	6003      	str	r3, [r0, #0]
 801cb9a:	4604      	mov	r4, r0
 801cb9c:	f7ff ff70 	bl	801ca80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 801cba0:	4620      	mov	r0, r4
 801cba2:	bd10      	pop	{r4, pc}
 801cba4:	0801e210 	.word	0x0801e210

0801cba8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 801cba8:	b510      	push	{r4, lr}
 801cbaa:	4604      	mov	r4, r0
 801cbac:	f7ff fff2 	bl	801cb94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 801cbb0:	4620      	mov	r0, r4
 801cbb2:	210c      	movs	r1, #12
 801cbb4:	f7ff ffb8 	bl	801cb28 <_ZdlPvj>
 801cbb8:	4620      	mov	r0, r4
 801cbba:	bd10      	pop	{r4, pc}

0801cbbc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 801cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbc0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cbc4:	4590      	cmp	r8, r2
 801cbc6:	4606      	mov	r6, r0
 801cbc8:	460f      	mov	r7, r1
 801cbca:	4615      	mov	r5, r2
 801cbcc:	461c      	mov	r4, r3
 801cbce:	d00b      	beq.n	801cbe8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 801cbd0:	68b0      	ldr	r0, [r6, #8]
 801cbd2:	6803      	ldr	r3, [r0, #0]
 801cbd4:	f8cd 8018 	str.w	r8, [sp, #24]
 801cbd8:	6a1e      	ldr	r6, [r3, #32]
 801cbda:	462a      	mov	r2, r5
 801cbdc:	4623      	mov	r3, r4
 801cbde:	4639      	mov	r1, r7
 801cbe0:	46b4      	mov	ip, r6
 801cbe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cbe6:	4760      	bx	ip
 801cbe8:	4619      	mov	r1, r3
 801cbea:	f000 f859 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cbee:	2800      	cmp	r0, #0
 801cbf0:	d0ee      	beq.n	801cbd0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 801cbf2:	2006      	movs	r0, #6
 801cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cbf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 801cbf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbfc:	460d      	mov	r5, r1
 801cbfe:	4619      	mov	r1, r3
 801cc00:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 801cc04:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 801cc08:	4681      	mov	r9, r0
 801cc0a:	4617      	mov	r7, r2
 801cc0c:	4698      	mov	r8, r3
 801cc0e:	f000 f847 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cc12:	b190      	cbz	r0, 801cc3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 801cc14:	2d00      	cmp	r5, #0
 801cc16:	6034      	str	r4, [r6, #0]
 801cc18:	7137      	strb	r7, [r6, #4]
 801cc1a:	db09      	blt.n	801cc30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 801cc1c:	442c      	add	r4, r5
 801cc1e:	45a2      	cmp	sl, r4
 801cc20:	bf14      	ite	ne
 801cc22:	2401      	movne	r4, #1
 801cc24:	2406      	moveq	r4, #6
 801cc26:	71b4      	strb	r4, [r6, #6]
 801cc28:	2000      	movs	r0, #0
 801cc2a:	b001      	add	sp, #4
 801cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc30:	3502      	adds	r5, #2
 801cc32:	d1f9      	bne.n	801cc28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cc34:	2301      	movs	r3, #1
 801cc36:	71b3      	strb	r3, [r6, #6]
 801cc38:	e7f6      	b.n	801cc28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cc3a:	4554      	cmp	r4, sl
 801cc3c:	d106      	bne.n	801cc4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801cc3e:	4659      	mov	r1, fp
 801cc40:	4648      	mov	r0, r9
 801cc42:	f000 f82d 	bl	801cca0 <_ZNKSt9type_info7__equalERKS_>
 801cc46:	b108      	cbz	r0, 801cc4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 801cc48:	7177      	strb	r7, [r6, #5]
 801cc4a:	e7ed      	b.n	801cc28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 801cc4c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801cc50:	6803      	ldr	r3, [r0, #0]
 801cc52:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 801cc56:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 801cc5a:	69dc      	ldr	r4, [r3, #28]
 801cc5c:	463a      	mov	r2, r7
 801cc5e:	4643      	mov	r3, r8
 801cc60:	4629      	mov	r1, r5
 801cc62:	46a4      	mov	ip, r4
 801cc64:	b001      	add	sp, #4
 801cc66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc6a:	4760      	bx	ip

0801cc6c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 801cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc70:	4607      	mov	r7, r0
 801cc72:	460c      	mov	r4, r1
 801cc74:	4615      	mov	r5, r2
 801cc76:	461e      	mov	r6, r3
 801cc78:	f7ff ff35 	bl	801cae6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 801cc7c:	b948      	cbnz	r0, 801cc92 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 801cc7e:	68b8      	ldr	r0, [r7, #8]
 801cc80:	6803      	ldr	r3, [r0, #0]
 801cc82:	699f      	ldr	r7, [r3, #24]
 801cc84:	462a      	mov	r2, r5
 801cc86:	4633      	mov	r3, r6
 801cc88:	4621      	mov	r1, r4
 801cc8a:	46bc      	mov	ip, r7
 801cc8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc90:	4760      	bx	ip
 801cc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cc96 <_ZNSt9type_infoD1Ev>:
 801cc96:	4770      	bx	lr

0801cc98 <_ZNKSt9type_info14__is_pointer_pEv>:
 801cc98:	2000      	movs	r0, #0
 801cc9a:	4770      	bx	lr

0801cc9c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 801cc9c:	2000      	movs	r0, #0
 801cc9e:	4770      	bx	lr

0801cca0 <_ZNKSt9type_info7__equalERKS_>:
 801cca0:	4281      	cmp	r1, r0
 801cca2:	b508      	push	{r3, lr}
 801cca4:	d00e      	beq.n	801ccc4 <_ZNKSt9type_info7__equalERKS_+0x24>
 801cca6:	6840      	ldr	r0, [r0, #4]
 801cca8:	7803      	ldrb	r3, [r0, #0]
 801ccaa:	2b2a      	cmp	r3, #42	@ 0x2a
 801ccac:	d00c      	beq.n	801ccc8 <_ZNKSt9type_info7__equalERKS_+0x28>
 801ccae:	6849      	ldr	r1, [r1, #4]
 801ccb0:	780b      	ldrb	r3, [r1, #0]
 801ccb2:	2b2a      	cmp	r3, #42	@ 0x2a
 801ccb4:	bf08      	it	eq
 801ccb6:	3101      	addeq	r1, #1
 801ccb8:	f7e3 fb12 	bl	80002e0 <strcmp>
 801ccbc:	fab0 f080 	clz	r0, r0
 801ccc0:	0940      	lsrs	r0, r0, #5
 801ccc2:	bd08      	pop	{r3, pc}
 801ccc4:	2001      	movs	r0, #1
 801ccc6:	e7fc      	b.n	801ccc2 <_ZNKSt9type_info7__equalERKS_+0x22>
 801ccc8:	2000      	movs	r0, #0
 801ccca:	e7fa      	b.n	801ccc2 <_ZNKSt9type_info7__equalERKS_+0x22>

0801cccc <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 801cccc:	f7ff bfe8 	b.w	801cca0 <_ZNKSt9type_info7__equalERKS_>

0801ccd0 <_ZSt17__throw_bad_allocv>:
 801ccd0:	b508      	push	{r3, lr}
 801ccd2:	f000 fe05 	bl	801d8e0 <abort>

0801ccd6 <_ZSt28__throw_bad_array_new_lengthv>:
 801ccd6:	b508      	push	{r3, lr}
 801ccd8:	f000 fe02 	bl	801d8e0 <abort>

0801ccdc <_ZSt20__throw_length_errorPKc>:
 801ccdc:	b508      	push	{r3, lr}
 801ccde:	f000 fdff 	bl	801d8e0 <abort>

0801cce2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 801cce2:	b40f      	push	{r0, r1, r2, r3}
 801cce4:	b508      	push	{r3, lr}
 801cce6:	f000 fdfb 	bl	801d8e0 <abort>

0801ccea <_ZdlPv>:
 801ccea:	f000 be09 	b.w	801d900 <free>
	...

0801ccf0 <_ZSt15get_new_handlerv>:
 801ccf0:	4b02      	ldr	r3, [pc, #8]	@ (801ccfc <_ZSt15get_new_handlerv+0xc>)
 801ccf2:	6818      	ldr	r0, [r3, #0]
 801ccf4:	f3bf 8f5b 	dmb	ish
 801ccf8:	4770      	bx	lr
 801ccfa:	bf00      	nop
 801ccfc:	24006bd0 	.word	0x24006bd0

0801cd00 <cos>:
 801cd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd02:	eeb0 7b40 	vmov.f64	d7, d0
 801cd06:	ee17 3a90 	vmov	r3, s15
 801cd0a:	4a21      	ldr	r2, [pc, #132]	@ (801cd90 <cos+0x90>)
 801cd0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cd10:	4293      	cmp	r3, r2
 801cd12:	d806      	bhi.n	801cd22 <cos+0x22>
 801cd14:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 801cd88 <cos+0x88>
 801cd18:	b005      	add	sp, #20
 801cd1a:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd1e:	f000 b85f 	b.w	801cde0 <__kernel_cos>
 801cd22:	4a1c      	ldr	r2, [pc, #112]	@ (801cd94 <cos+0x94>)
 801cd24:	4293      	cmp	r3, r2
 801cd26:	d904      	bls.n	801cd32 <cos+0x32>
 801cd28:	ee30 0b40 	vsub.f64	d0, d0, d0
 801cd2c:	b005      	add	sp, #20
 801cd2e:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd32:	4668      	mov	r0, sp
 801cd34:	f000 f914 	bl	801cf60 <__ieee754_rem_pio2>
 801cd38:	f000 0003 	and.w	r0, r0, #3
 801cd3c:	2801      	cmp	r0, #1
 801cd3e:	d009      	beq.n	801cd54 <cos+0x54>
 801cd40:	2802      	cmp	r0, #2
 801cd42:	d010      	beq.n	801cd66 <cos+0x66>
 801cd44:	b9b0      	cbnz	r0, 801cd74 <cos+0x74>
 801cd46:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cd4a:	ed9d 0b00 	vldr	d0, [sp]
 801cd4e:	f000 f847 	bl	801cde0 <__kernel_cos>
 801cd52:	e7eb      	b.n	801cd2c <cos+0x2c>
 801cd54:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cd58:	ed9d 0b00 	vldr	d0, [sp]
 801cd5c:	f000 f8a8 	bl	801ceb0 <__kernel_sin>
 801cd60:	eeb1 0b40 	vneg.f64	d0, d0
 801cd64:	e7e2      	b.n	801cd2c <cos+0x2c>
 801cd66:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cd6a:	ed9d 0b00 	vldr	d0, [sp]
 801cd6e:	f000 f837 	bl	801cde0 <__kernel_cos>
 801cd72:	e7f5      	b.n	801cd60 <cos+0x60>
 801cd74:	ed9d 1b02 	vldr	d1, [sp, #8]
 801cd78:	ed9d 0b00 	vldr	d0, [sp]
 801cd7c:	2001      	movs	r0, #1
 801cd7e:	f000 f897 	bl	801ceb0 <__kernel_sin>
 801cd82:	e7d3      	b.n	801cd2c <cos+0x2c>
 801cd84:	f3af 8000 	nop.w
	...
 801cd90:	3fe921fb 	.word	0x3fe921fb
 801cd94:	7fefffff 	.word	0x7fefffff

0801cd98 <sqrtf>:
 801cd98:	b508      	push	{r3, lr}
 801cd9a:	ed2d 8b02 	vpush	{d8}
 801cd9e:	eeb0 8a40 	vmov.f32	s16, s0
 801cda2:	f000 f817 	bl	801cdd4 <__ieee754_sqrtf>
 801cda6:	eeb4 8a48 	vcmp.f32	s16, s16
 801cdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdae:	d60c      	bvs.n	801cdca <sqrtf+0x32>
 801cdb0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801cdd0 <sqrtf+0x38>
 801cdb4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdbc:	d505      	bpl.n	801cdca <sqrtf+0x32>
 801cdbe:	f000 ff21 	bl	801dc04 <__errno>
 801cdc2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801cdc6:	2321      	movs	r3, #33	@ 0x21
 801cdc8:	6003      	str	r3, [r0, #0]
 801cdca:	ecbd 8b02 	vpop	{d8}
 801cdce:	bd08      	pop	{r3, pc}
 801cdd0:	00000000 	.word	0x00000000

0801cdd4 <__ieee754_sqrtf>:
 801cdd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cdd8:	4770      	bx	lr
 801cdda:	0000      	movs	r0, r0
 801cddc:	0000      	movs	r0, r0
	...

0801cde0 <__kernel_cos>:
 801cde0:	eeb0 5b40 	vmov.f64	d5, d0
 801cde4:	ee15 1a90 	vmov	r1, s11
 801cde8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801cdec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801cdf0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801cdf4:	d204      	bcs.n	801ce00 <__kernel_cos+0x20>
 801cdf6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 801cdfa:	ee17 3a90 	vmov	r3, s15
 801cdfe:	b343      	cbz	r3, 801ce52 <__kernel_cos+0x72>
 801ce00:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ce04:	ee21 1b45 	vnmul.f64	d1, d1, d5
 801ce08:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 801ce78 <__kernel_cos+0x98>
 801ce0c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801ce80 <__kernel_cos+0xa0>
 801ce10:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ce14:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801ce88 <__kernel_cos+0xa8>
 801ce18:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ce1c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801ce90 <__kernel_cos+0xb0>
 801ce20:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ce24:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 801ce98 <__kernel_cos+0xb8>
 801ce28:	4b1f      	ldr	r3, [pc, #124]	@ (801cea8 <__kernel_cos+0xc8>)
 801ce2a:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ce2e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 801cea0 <__kernel_cos+0xc0>
 801ce32:	4299      	cmp	r1, r3
 801ce34:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ce38:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801ce3c:	ee24 4b06 	vmul.f64	d4, d4, d6
 801ce40:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ce44:	eea6 1b04 	vfma.f64	d1, d6, d4
 801ce48:	d804      	bhi.n	801ce54 <__kernel_cos+0x74>
 801ce4a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801ce4e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801ce52:	4770      	bx	lr
 801ce54:	4b15      	ldr	r3, [pc, #84]	@ (801ceac <__kernel_cos+0xcc>)
 801ce56:	4299      	cmp	r1, r3
 801ce58:	d809      	bhi.n	801ce6e <__kernel_cos+0x8e>
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 801ce60:	ec43 2b16 	vmov	d6, r2, r3
 801ce64:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ce68:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ce6c:	e7ed      	b.n	801ce4a <__kernel_cos+0x6a>
 801ce6e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801ce72:	e7f7      	b.n	801ce64 <__kernel_cos+0x84>
 801ce74:	f3af 8000 	nop.w
 801ce78:	be8838d4 	.word	0xbe8838d4
 801ce7c:	bda8fae9 	.word	0xbda8fae9
 801ce80:	bdb4b1c4 	.word	0xbdb4b1c4
 801ce84:	3e21ee9e 	.word	0x3e21ee9e
 801ce88:	809c52ad 	.word	0x809c52ad
 801ce8c:	be927e4f 	.word	0xbe927e4f
 801ce90:	19cb1590 	.word	0x19cb1590
 801ce94:	3efa01a0 	.word	0x3efa01a0
 801ce98:	16c15177 	.word	0x16c15177
 801ce9c:	bf56c16c 	.word	0xbf56c16c
 801cea0:	5555554c 	.word	0x5555554c
 801cea4:	3fa55555 	.word	0x3fa55555
 801cea8:	3fd33332 	.word	0x3fd33332
 801ceac:	3fe90000 	.word	0x3fe90000

0801ceb0 <__kernel_sin>:
 801ceb0:	ee10 3a90 	vmov	r3, s1
 801ceb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ceb8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801cebc:	d204      	bcs.n	801cec8 <__kernel_sin+0x18>
 801cebe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801cec2:	ee17 3a90 	vmov	r3, s15
 801cec6:	b35b      	cbz	r3, 801cf20 <__kernel_sin+0x70>
 801cec8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cecc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801ced0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 801cf28 <__kernel_sin+0x78>
 801ced4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cf30 <__kernel_sin+0x80>
 801ced8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cedc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801cf38 <__kernel_sin+0x88>
 801cee0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cee4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cf40 <__kernel_sin+0x90>
 801cee8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ceec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 801cf48 <__kernel_sin+0x98>
 801cef0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801cef4:	b930      	cbnz	r0, 801cf04 <__kernel_sin+0x54>
 801cef6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 801cf50 <__kernel_sin+0xa0>
 801cefa:	eea6 4b07 	vfma.f64	d4, d6, d7
 801cefe:	eea4 0b05 	vfma.f64	d0, d4, d5
 801cf02:	4770      	bx	lr
 801cf04:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801cf08:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 801cf0c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801cf10:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801cf14:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801cf58 <__kernel_sin+0xa8>
 801cf18:	eea5 1b07 	vfma.f64	d1, d5, d7
 801cf1c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801cf20:	4770      	bx	lr
 801cf22:	bf00      	nop
 801cf24:	f3af 8000 	nop.w
 801cf28:	5acfd57c 	.word	0x5acfd57c
 801cf2c:	3de5d93a 	.word	0x3de5d93a
 801cf30:	8a2b9ceb 	.word	0x8a2b9ceb
 801cf34:	be5ae5e6 	.word	0xbe5ae5e6
 801cf38:	57b1fe7d 	.word	0x57b1fe7d
 801cf3c:	3ec71de3 	.word	0x3ec71de3
 801cf40:	19c161d5 	.word	0x19c161d5
 801cf44:	bf2a01a0 	.word	0xbf2a01a0
 801cf48:	1110f8a6 	.word	0x1110f8a6
 801cf4c:	3f811111 	.word	0x3f811111
 801cf50:	55555549 	.word	0x55555549
 801cf54:	bfc55555 	.word	0xbfc55555
 801cf58:	55555549 	.word	0x55555549
 801cf5c:	3fc55555 	.word	0x3fc55555

0801cf60 <__ieee754_rem_pio2>:
 801cf60:	b570      	push	{r4, r5, r6, lr}
 801cf62:	eeb0 7b40 	vmov.f64	d7, d0
 801cf66:	ee17 5a90 	vmov	r5, s15
 801cf6a:	4b99      	ldr	r3, [pc, #612]	@ (801d1d0 <__ieee754_rem_pio2+0x270>)
 801cf6c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801cf70:	429e      	cmp	r6, r3
 801cf72:	b088      	sub	sp, #32
 801cf74:	4604      	mov	r4, r0
 801cf76:	d807      	bhi.n	801cf88 <__ieee754_rem_pio2+0x28>
 801cf78:	2200      	movs	r2, #0
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	ed84 0b00 	vstr	d0, [r4]
 801cf80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801cf84:	2000      	movs	r0, #0
 801cf86:	e01b      	b.n	801cfc0 <__ieee754_rem_pio2+0x60>
 801cf88:	4b92      	ldr	r3, [pc, #584]	@ (801d1d4 <__ieee754_rem_pio2+0x274>)
 801cf8a:	429e      	cmp	r6, r3
 801cf8c:	d83b      	bhi.n	801d006 <__ieee754_rem_pio2+0xa6>
 801cf8e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801cf92:	2d00      	cmp	r5, #0
 801cf94:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 801d190 <__ieee754_rem_pio2+0x230>
 801cf98:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801cf9c:	dd19      	ble.n	801cfd2 <__ieee754_rem_pio2+0x72>
 801cf9e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801cfa2:	429e      	cmp	r6, r3
 801cfa4:	d00e      	beq.n	801cfc4 <__ieee754_rem_pio2+0x64>
 801cfa6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 801d198 <__ieee754_rem_pio2+0x238>
 801cfaa:	ee37 6b45 	vsub.f64	d6, d7, d5
 801cfae:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cfb2:	ed84 6b00 	vstr	d6, [r4]
 801cfb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801cfba:	ed84 7b02 	vstr	d7, [r4, #8]
 801cfbe:	2001      	movs	r0, #1
 801cfc0:	b008      	add	sp, #32
 801cfc2:	bd70      	pop	{r4, r5, r6, pc}
 801cfc4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801d1a0 <__ieee754_rem_pio2+0x240>
 801cfc8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 801d1a8 <__ieee754_rem_pio2+0x248>
 801cfcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cfd0:	e7eb      	b.n	801cfaa <__ieee754_rem_pio2+0x4a>
 801cfd2:	429e      	cmp	r6, r3
 801cfd4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801cfd8:	d00e      	beq.n	801cff8 <__ieee754_rem_pio2+0x98>
 801cfda:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 801d198 <__ieee754_rem_pio2+0x238>
 801cfde:	ee37 6b05 	vadd.f64	d6, d7, d5
 801cfe2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cfe6:	ed84 6b00 	vstr	d6, [r4]
 801cfea:	ee37 7b05 	vadd.f64	d7, d7, d5
 801cfee:	f04f 30ff 	mov.w	r0, #4294967295
 801cff2:	ed84 7b02 	vstr	d7, [r4, #8]
 801cff6:	e7e3      	b.n	801cfc0 <__ieee754_rem_pio2+0x60>
 801cff8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 801d1a0 <__ieee754_rem_pio2+0x240>
 801cffc:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 801d1a8 <__ieee754_rem_pio2+0x248>
 801d000:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d004:	e7eb      	b.n	801cfde <__ieee754_rem_pio2+0x7e>
 801d006:	4b74      	ldr	r3, [pc, #464]	@ (801d1d8 <__ieee754_rem_pio2+0x278>)
 801d008:	429e      	cmp	r6, r3
 801d00a:	d870      	bhi.n	801d0ee <__ieee754_rem_pio2+0x18e>
 801d00c:	f000 f8ec 	bl	801d1e8 <fabs>
 801d010:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d014:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801d1b0 <__ieee754_rem_pio2+0x250>
 801d018:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d01c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d020:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d024:	ee17 0a90 	vmov	r0, s15
 801d028:	eeb1 4b45 	vneg.f64	d4, d5
 801d02c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d190 <__ieee754_rem_pio2+0x230>
 801d030:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d034:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 801d198 <__ieee754_rem_pio2+0x238>
 801d038:	281f      	cmp	r0, #31
 801d03a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d03e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d042:	dc05      	bgt.n	801d050 <__ieee754_rem_pio2+0xf0>
 801d044:	4b65      	ldr	r3, [pc, #404]	@ (801d1dc <__ieee754_rem_pio2+0x27c>)
 801d046:	1e42      	subs	r2, r0, #1
 801d048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d04c:	42b3      	cmp	r3, r6
 801d04e:	d109      	bne.n	801d064 <__ieee754_rem_pio2+0x104>
 801d050:	ee16 3a90 	vmov	r3, s13
 801d054:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d058:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d05c:	2b10      	cmp	r3, #16
 801d05e:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d062:	dc02      	bgt.n	801d06a <__ieee754_rem_pio2+0x10a>
 801d064:	ed84 6b00 	vstr	d6, [r4]
 801d068:	e01a      	b.n	801d0a0 <__ieee754_rem_pio2+0x140>
 801d06a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 801d1a0 <__ieee754_rem_pio2+0x240>
 801d06e:	eeb0 6b40 	vmov.f64	d6, d0
 801d072:	eea4 6b03 	vfma.f64	d6, d4, d3
 801d076:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d07a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d07e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 801d1a8 <__ieee754_rem_pio2+0x248>
 801d082:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d086:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d08a:	ee13 3a90 	vmov	r3, s7
 801d08e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d092:	1ad3      	subs	r3, r2, r3
 801d094:	2b31      	cmp	r3, #49	@ 0x31
 801d096:	dc17      	bgt.n	801d0c8 <__ieee754_rem_pio2+0x168>
 801d098:	eeb0 0b46 	vmov.f64	d0, d6
 801d09c:	ed84 3b00 	vstr	d3, [r4]
 801d0a0:	ed94 6b00 	vldr	d6, [r4]
 801d0a4:	2d00      	cmp	r5, #0
 801d0a6:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d0aa:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d0ae:	ed84 0b02 	vstr	d0, [r4, #8]
 801d0b2:	da85      	bge.n	801cfc0 <__ieee754_rem_pio2+0x60>
 801d0b4:	eeb1 6b46 	vneg.f64	d6, d6
 801d0b8:	eeb1 0b40 	vneg.f64	d0, d0
 801d0bc:	ed84 6b00 	vstr	d6, [r4]
 801d0c0:	ed84 0b02 	vstr	d0, [r4, #8]
 801d0c4:	4240      	negs	r0, r0
 801d0c6:	e77b      	b.n	801cfc0 <__ieee754_rem_pio2+0x60>
 801d0c8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 801d1b8 <__ieee754_rem_pio2+0x258>
 801d0cc:	eeb0 0b46 	vmov.f64	d0, d6
 801d0d0:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d0d4:	ee36 6b40 	vsub.f64	d6, d6, d0
 801d0d8:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d0dc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 801d1c0 <__ieee754_rem_pio2+0x260>
 801d0e0:	eeb0 7b46 	vmov.f64	d7, d6
 801d0e4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801d0e8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d0ec:	e7ba      	b.n	801d064 <__ieee754_rem_pio2+0x104>
 801d0ee:	4b3c      	ldr	r3, [pc, #240]	@ (801d1e0 <__ieee754_rem_pio2+0x280>)
 801d0f0:	429e      	cmp	r6, r3
 801d0f2:	d906      	bls.n	801d102 <__ieee754_rem_pio2+0x1a2>
 801d0f4:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d0f8:	ed80 7b02 	vstr	d7, [r0, #8]
 801d0fc:	ed80 7b00 	vstr	d7, [r0]
 801d100:	e740      	b.n	801cf84 <__ieee754_rem_pio2+0x24>
 801d102:	ee10 3a10 	vmov	r3, s0
 801d106:	1532      	asrs	r2, r6, #20
 801d108:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 801d10c:	4618      	mov	r0, r3
 801d10e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d112:	ec41 0b17 	vmov	d7, r0, r1
 801d116:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d11a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 801d1c8 <__ieee754_rem_pio2+0x268>
 801d11e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d122:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d126:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d12a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d12e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d132:	a808      	add	r0, sp, #32
 801d134:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d138:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d13c:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d140:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d144:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d148:	2103      	movs	r1, #3
 801d14a:	ed30 7b02 	vldmdb	r0!, {d7}
 801d14e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d156:	460b      	mov	r3, r1
 801d158:	f101 31ff 	add.w	r1, r1, #4294967295
 801d15c:	d0f5      	beq.n	801d14a <__ieee754_rem_pio2+0x1ea>
 801d15e:	4921      	ldr	r1, [pc, #132]	@ (801d1e4 <__ieee754_rem_pio2+0x284>)
 801d160:	9101      	str	r1, [sp, #4]
 801d162:	2102      	movs	r1, #2
 801d164:	9100      	str	r1, [sp, #0]
 801d166:	a802      	add	r0, sp, #8
 801d168:	4621      	mov	r1, r4
 801d16a:	f000 f845 	bl	801d1f8 <__kernel_rem_pio2>
 801d16e:	2d00      	cmp	r5, #0
 801d170:	f6bf af26 	bge.w	801cfc0 <__ieee754_rem_pio2+0x60>
 801d174:	ed94 7b00 	vldr	d7, [r4]
 801d178:	eeb1 7b47 	vneg.f64	d7, d7
 801d17c:	ed84 7b00 	vstr	d7, [r4]
 801d180:	ed94 7b02 	vldr	d7, [r4, #8]
 801d184:	eeb1 7b47 	vneg.f64	d7, d7
 801d188:	ed84 7b02 	vstr	d7, [r4, #8]
 801d18c:	e79a      	b.n	801d0c4 <__ieee754_rem_pio2+0x164>
 801d18e:	bf00      	nop
 801d190:	54400000 	.word	0x54400000
 801d194:	3ff921fb 	.word	0x3ff921fb
 801d198:	1a626331 	.word	0x1a626331
 801d19c:	3dd0b461 	.word	0x3dd0b461
 801d1a0:	1a600000 	.word	0x1a600000
 801d1a4:	3dd0b461 	.word	0x3dd0b461
 801d1a8:	2e037073 	.word	0x2e037073
 801d1ac:	3ba3198a 	.word	0x3ba3198a
 801d1b0:	6dc9c883 	.word	0x6dc9c883
 801d1b4:	3fe45f30 	.word	0x3fe45f30
 801d1b8:	2e000000 	.word	0x2e000000
 801d1bc:	3ba3198a 	.word	0x3ba3198a
 801d1c0:	252049c1 	.word	0x252049c1
 801d1c4:	397b839a 	.word	0x397b839a
 801d1c8:	00000000 	.word	0x00000000
 801d1cc:	41700000 	.word	0x41700000
 801d1d0:	3fe921fb 	.word	0x3fe921fb
 801d1d4:	4002d97b 	.word	0x4002d97b
 801d1d8:	413921fb 	.word	0x413921fb
 801d1dc:	0801e24c 	.word	0x0801e24c
 801d1e0:	7fefffff 	.word	0x7fefffff
 801d1e4:	0801e2cc 	.word	0x0801e2cc

0801d1e8 <fabs>:
 801d1e8:	ec51 0b10 	vmov	r0, r1, d0
 801d1ec:	4602      	mov	r2, r0
 801d1ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801d1f2:	ec43 2b10 	vmov	d0, r2, r3
 801d1f6:	4770      	bx	lr

0801d1f8 <__kernel_rem_pio2>:
 801d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1fc:	ed2d 8b06 	vpush	{d8-d10}
 801d200:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801d204:	469b      	mov	fp, r3
 801d206:	9001      	str	r0, [sp, #4]
 801d208:	4bbb      	ldr	r3, [pc, #748]	@ (801d4f8 <__kernel_rem_pio2+0x300>)
 801d20a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801d20c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 801d210:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801d214:	f112 0f14 	cmn.w	r2, #20
 801d218:	bfa8      	it	ge
 801d21a:	1ed3      	subge	r3, r2, #3
 801d21c:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d220:	bfb8      	it	lt
 801d222:	2300      	movlt	r3, #0
 801d224:	f06f 0517 	mvn.w	r5, #23
 801d228:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 801d4e0 <__kernel_rem_pio2+0x2e8>
 801d22c:	bfa4      	itt	ge
 801d22e:	2018      	movge	r0, #24
 801d230:	fb93 f3f0 	sdivge	r3, r3, r0
 801d234:	fb03 5505 	mla	r5, r3, r5, r5
 801d238:	eba3 040a 	sub.w	r4, r3, sl
 801d23c:	4415      	add	r5, r2
 801d23e:	460f      	mov	r7, r1
 801d240:	eb09 060a 	add.w	r6, r9, sl
 801d244:	a81a      	add	r0, sp, #104	@ 0x68
 801d246:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801d24a:	2200      	movs	r2, #0
 801d24c:	42b2      	cmp	r2, r6
 801d24e:	dd0e      	ble.n	801d26e <__kernel_rem_pio2+0x76>
 801d250:	aa1a      	add	r2, sp, #104	@ 0x68
 801d252:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801d256:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801d25a:	2600      	movs	r6, #0
 801d25c:	454e      	cmp	r6, r9
 801d25e:	dc25      	bgt.n	801d2ac <__kernel_rem_pio2+0xb4>
 801d260:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 801d4e0 <__kernel_rem_pio2+0x2e8>
 801d264:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d268:	4614      	mov	r4, r2
 801d26a:	2000      	movs	r0, #0
 801d26c:	e015      	b.n	801d29a <__kernel_rem_pio2+0xa2>
 801d26e:	42d4      	cmn	r4, r2
 801d270:	d409      	bmi.n	801d286 <__kernel_rem_pio2+0x8e>
 801d272:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801d276:	ee07 1a90 	vmov	s15, r1
 801d27a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d27e:	eca0 7b02 	vstmia	r0!, {d7}
 801d282:	3201      	adds	r2, #1
 801d284:	e7e2      	b.n	801d24c <__kernel_rem_pio2+0x54>
 801d286:	eeb0 7b46 	vmov.f64	d7, d6
 801d28a:	e7f8      	b.n	801d27e <__kernel_rem_pio2+0x86>
 801d28c:	ecbc 5b02 	vldmia	ip!, {d5}
 801d290:	ed94 6b00 	vldr	d6, [r4]
 801d294:	3001      	adds	r0, #1
 801d296:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d29a:	4550      	cmp	r0, sl
 801d29c:	f1a4 0408 	sub.w	r4, r4, #8
 801d2a0:	ddf4      	ble.n	801d28c <__kernel_rem_pio2+0x94>
 801d2a2:	ecae 7b02 	vstmia	lr!, {d7}
 801d2a6:	3601      	adds	r6, #1
 801d2a8:	3208      	adds	r2, #8
 801d2aa:	e7d7      	b.n	801d25c <__kernel_rem_pio2+0x64>
 801d2ac:	aa06      	add	r2, sp, #24
 801d2ae:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 801d4e8 <__kernel_rem_pio2+0x2f0>
 801d2b2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 801d4f0 <__kernel_rem_pio2+0x2f8>
 801d2b6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801d2ba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801d2be:	9203      	str	r2, [sp, #12]
 801d2c0:	9302      	str	r3, [sp, #8]
 801d2c2:	464c      	mov	r4, r9
 801d2c4:	00e3      	lsls	r3, r4, #3
 801d2c6:	9304      	str	r3, [sp, #16]
 801d2c8:	ab92      	add	r3, sp, #584	@ 0x248
 801d2ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d2ce:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801d2d2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801d2d4:	ab06      	add	r3, sp, #24
 801d2d6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801d2da:	461e      	mov	r6, r3
 801d2dc:	4620      	mov	r0, r4
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	f1a2 0208 	sub.w	r2, r2, #8
 801d2e4:	dc4a      	bgt.n	801d37c <__kernel_rem_pio2+0x184>
 801d2e6:	4628      	mov	r0, r5
 801d2e8:	9305      	str	r3, [sp, #20]
 801d2ea:	f000 fa01 	bl	801d6f0 <scalbn>
 801d2ee:	eeb0 8b40 	vmov.f64	d8, d0
 801d2f2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801d2f6:	ee28 0b00 	vmul.f64	d0, d8, d0
 801d2fa:	f000 fa79 	bl	801d7f0 <floor>
 801d2fe:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801d302:	eea0 8b47 	vfms.f64	d8, d0, d7
 801d306:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801d30a:	2d00      	cmp	r5, #0
 801d30c:	ee17 8a90 	vmov	r8, s15
 801d310:	9b05      	ldr	r3, [sp, #20]
 801d312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d316:	ee38 8b47 	vsub.f64	d8, d8, d7
 801d31a:	dd41      	ble.n	801d3a0 <__kernel_rem_pio2+0x1a8>
 801d31c:	1e60      	subs	r0, r4, #1
 801d31e:	aa06      	add	r2, sp, #24
 801d320:	f1c5 0c18 	rsb	ip, r5, #24
 801d324:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d328:	fa46 f20c 	asr.w	r2, r6, ip
 801d32c:	4490      	add	r8, r2
 801d32e:	fa02 f20c 	lsl.w	r2, r2, ip
 801d332:	1ab6      	subs	r6, r6, r2
 801d334:	aa06      	add	r2, sp, #24
 801d336:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801d33a:	f1c5 0217 	rsb	r2, r5, #23
 801d33e:	4116      	asrs	r6, r2
 801d340:	2e00      	cmp	r6, #0
 801d342:	dd3c      	ble.n	801d3be <__kernel_rem_pio2+0x1c6>
 801d344:	f04f 0c00 	mov.w	ip, #0
 801d348:	f108 0801 	add.w	r8, r8, #1
 801d34c:	4660      	mov	r0, ip
 801d34e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801d352:	4564      	cmp	r4, ip
 801d354:	dc66      	bgt.n	801d424 <__kernel_rem_pio2+0x22c>
 801d356:	2d00      	cmp	r5, #0
 801d358:	dd03      	ble.n	801d362 <__kernel_rem_pio2+0x16a>
 801d35a:	2d01      	cmp	r5, #1
 801d35c:	d072      	beq.n	801d444 <__kernel_rem_pio2+0x24c>
 801d35e:	2d02      	cmp	r5, #2
 801d360:	d07a      	beq.n	801d458 <__kernel_rem_pio2+0x260>
 801d362:	2e02      	cmp	r6, #2
 801d364:	d12b      	bne.n	801d3be <__kernel_rem_pio2+0x1c6>
 801d366:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d36a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801d36e:	b330      	cbz	r0, 801d3be <__kernel_rem_pio2+0x1c6>
 801d370:	4628      	mov	r0, r5
 801d372:	f000 f9bd 	bl	801d6f0 <scalbn>
 801d376:	ee38 8b40 	vsub.f64	d8, d8, d0
 801d37a:	e020      	b.n	801d3be <__kernel_rem_pio2+0x1c6>
 801d37c:	ee20 7b09 	vmul.f64	d7, d0, d9
 801d380:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d384:	3801      	subs	r0, #1
 801d386:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801d38a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801d38e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d392:	eca6 0a01 	vstmia	r6!, {s0}
 801d396:	ed92 0b00 	vldr	d0, [r2]
 801d39a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d39e:	e79e      	b.n	801d2de <__kernel_rem_pio2+0xe6>
 801d3a0:	d105      	bne.n	801d3ae <__kernel_rem_pio2+0x1b6>
 801d3a2:	1e62      	subs	r2, r4, #1
 801d3a4:	a906      	add	r1, sp, #24
 801d3a6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d3aa:	15f6      	asrs	r6, r6, #23
 801d3ac:	e7c8      	b.n	801d340 <__kernel_rem_pio2+0x148>
 801d3ae:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801d3b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3ba:	da31      	bge.n	801d420 <__kernel_rem_pio2+0x228>
 801d3bc:	2600      	movs	r6, #0
 801d3be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3c6:	f040 809b 	bne.w	801d500 <__kernel_rem_pio2+0x308>
 801d3ca:	1e62      	subs	r2, r4, #1
 801d3cc:	2000      	movs	r0, #0
 801d3ce:	454a      	cmp	r2, r9
 801d3d0:	da49      	bge.n	801d466 <__kernel_rem_pio2+0x26e>
 801d3d2:	2800      	cmp	r0, #0
 801d3d4:	d062      	beq.n	801d49c <__kernel_rem_pio2+0x2a4>
 801d3d6:	3c01      	subs	r4, #1
 801d3d8:	ab06      	add	r3, sp, #24
 801d3da:	3d18      	subs	r5, #24
 801d3dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d0f8      	beq.n	801d3d6 <__kernel_rem_pio2+0x1de>
 801d3e4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801d3e8:	4628      	mov	r0, r5
 801d3ea:	f000 f981 	bl	801d6f0 <scalbn>
 801d3ee:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 801d4e8 <__kernel_rem_pio2+0x2f0>
 801d3f2:	1c62      	adds	r2, r4, #1
 801d3f4:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d3f6:	00d3      	lsls	r3, r2, #3
 801d3f8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801d3fc:	4622      	mov	r2, r4
 801d3fe:	2a00      	cmp	r2, #0
 801d400:	f280 80a8 	bge.w	801d554 <__kernel_rem_pio2+0x35c>
 801d404:	4622      	mov	r2, r4
 801d406:	2a00      	cmp	r2, #0
 801d408:	f2c0 80c6 	blt.w	801d598 <__kernel_rem_pio2+0x3a0>
 801d40c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801d40e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801d412:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 801d4e0 <__kernel_rem_pio2+0x2e8>
 801d416:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801d4fc <__kernel_rem_pio2+0x304>
 801d41a:	2000      	movs	r0, #0
 801d41c:	1aa1      	subs	r1, r4, r2
 801d41e:	e0b0      	b.n	801d582 <__kernel_rem_pio2+0x38a>
 801d420:	2602      	movs	r6, #2
 801d422:	e78f      	b.n	801d344 <__kernel_rem_pio2+0x14c>
 801d424:	f853 2b04 	ldr.w	r2, [r3], #4
 801d428:	b948      	cbnz	r0, 801d43e <__kernel_rem_pio2+0x246>
 801d42a:	b122      	cbz	r2, 801d436 <__kernel_rem_pio2+0x23e>
 801d42c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 801d430:	f843 2c04 	str.w	r2, [r3, #-4]
 801d434:	2201      	movs	r2, #1
 801d436:	f10c 0c01 	add.w	ip, ip, #1
 801d43a:	4610      	mov	r0, r2
 801d43c:	e789      	b.n	801d352 <__kernel_rem_pio2+0x15a>
 801d43e:	ebae 0202 	sub.w	r2, lr, r2
 801d442:	e7f5      	b.n	801d430 <__kernel_rem_pio2+0x238>
 801d444:	1e62      	subs	r2, r4, #1
 801d446:	ab06      	add	r3, sp, #24
 801d448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d44c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801d450:	a906      	add	r1, sp, #24
 801d452:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801d456:	e784      	b.n	801d362 <__kernel_rem_pio2+0x16a>
 801d458:	1e62      	subs	r2, r4, #1
 801d45a:	ab06      	add	r3, sp, #24
 801d45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d460:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801d464:	e7f4      	b.n	801d450 <__kernel_rem_pio2+0x258>
 801d466:	ab06      	add	r3, sp, #24
 801d468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d46c:	3a01      	subs	r2, #1
 801d46e:	4318      	orrs	r0, r3
 801d470:	e7ad      	b.n	801d3ce <__kernel_rem_pio2+0x1d6>
 801d472:	3301      	adds	r3, #1
 801d474:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801d478:	2800      	cmp	r0, #0
 801d47a:	d0fa      	beq.n	801d472 <__kernel_rem_pio2+0x27a>
 801d47c:	9a04      	ldr	r2, [sp, #16]
 801d47e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801d482:	446a      	add	r2, sp
 801d484:	eb04 000b 	add.w	r0, r4, fp
 801d488:	a91a      	add	r1, sp, #104	@ 0x68
 801d48a:	1c66      	adds	r6, r4, #1
 801d48c:	3a98      	subs	r2, #152	@ 0x98
 801d48e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d492:	4423      	add	r3, r4
 801d494:	42b3      	cmp	r3, r6
 801d496:	da04      	bge.n	801d4a2 <__kernel_rem_pio2+0x2aa>
 801d498:	461c      	mov	r4, r3
 801d49a:	e713      	b.n	801d2c4 <__kernel_rem_pio2+0xcc>
 801d49c:	9a03      	ldr	r2, [sp, #12]
 801d49e:	2301      	movs	r3, #1
 801d4a0:	e7e8      	b.n	801d474 <__kernel_rem_pio2+0x27c>
 801d4a2:	9902      	ldr	r1, [sp, #8]
 801d4a4:	f8dd c004 	ldr.w	ip, [sp, #4]
 801d4a8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 801d4ac:	9104      	str	r1, [sp, #16]
 801d4ae:	ee07 1a90 	vmov	s15, r1
 801d4b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d4b6:	2400      	movs	r4, #0
 801d4b8:	eca0 7b02 	vstmia	r0!, {d7}
 801d4bc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801d4e0 <__kernel_rem_pio2+0x2e8>
 801d4c0:	4686      	mov	lr, r0
 801d4c2:	4554      	cmp	r4, sl
 801d4c4:	dd03      	ble.n	801d4ce <__kernel_rem_pio2+0x2d6>
 801d4c6:	eca2 7b02 	vstmia	r2!, {d7}
 801d4ca:	3601      	adds	r6, #1
 801d4cc:	e7e2      	b.n	801d494 <__kernel_rem_pio2+0x29c>
 801d4ce:	ecbc 5b02 	vldmia	ip!, {d5}
 801d4d2:	ed3e 6b02 	vldmdb	lr!, {d6}
 801d4d6:	3401      	adds	r4, #1
 801d4d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d4dc:	e7f1      	b.n	801d4c2 <__kernel_rem_pio2+0x2ca>
 801d4de:	bf00      	nop
	...
 801d4ec:	3e700000 	.word	0x3e700000
 801d4f0:	00000000 	.word	0x00000000
 801d4f4:	41700000 	.word	0x41700000
 801d4f8:	0801e418 	.word	0x0801e418
 801d4fc:	0801e3d8 	.word	0x0801e3d8
 801d500:	4268      	negs	r0, r5
 801d502:	eeb0 0b48 	vmov.f64	d0, d8
 801d506:	f000 f8f3 	bl	801d6f0 <scalbn>
 801d50a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 801d6d8 <__kernel_rem_pio2+0x4e0>
 801d50e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801d512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d516:	db17      	blt.n	801d548 <__kernel_rem_pio2+0x350>
 801d518:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 801d6e0 <__kernel_rem_pio2+0x4e8>
 801d51c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d520:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801d524:	aa06      	add	r2, sp, #24
 801d526:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801d52a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801d52e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d532:	3518      	adds	r5, #24
 801d534:	ee10 3a10 	vmov	r3, s0
 801d538:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d53c:	ee17 3a10 	vmov	r3, s14
 801d540:	3401      	adds	r4, #1
 801d542:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d546:	e74d      	b.n	801d3e4 <__kernel_rem_pio2+0x1ec>
 801d548:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801d54c:	aa06      	add	r2, sp, #24
 801d54e:	ee10 3a10 	vmov	r3, s0
 801d552:	e7f6      	b.n	801d542 <__kernel_rem_pio2+0x34a>
 801d554:	a806      	add	r0, sp, #24
 801d556:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801d55a:	9001      	str	r0, [sp, #4]
 801d55c:	ee07 0a90 	vmov	s15, r0
 801d560:	3a01      	subs	r2, #1
 801d562:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d566:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d56a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801d56e:	ed21 7b02 	vstmdb	r1!, {d7}
 801d572:	e744      	b.n	801d3fe <__kernel_rem_pio2+0x206>
 801d574:	ecbc 5b02 	vldmia	ip!, {d5}
 801d578:	ecb5 6b02 	vldmia	r5!, {d6}
 801d57c:	3001      	adds	r0, #1
 801d57e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d582:	4548      	cmp	r0, r9
 801d584:	dc01      	bgt.n	801d58a <__kernel_rem_pio2+0x392>
 801d586:	4281      	cmp	r1, r0
 801d588:	daf4      	bge.n	801d574 <__kernel_rem_pio2+0x37c>
 801d58a:	a842      	add	r0, sp, #264	@ 0x108
 801d58c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801d590:	ed81 7b00 	vstr	d7, [r1]
 801d594:	3a01      	subs	r2, #1
 801d596:	e736      	b.n	801d406 <__kernel_rem_pio2+0x20e>
 801d598:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d59a:	2a02      	cmp	r2, #2
 801d59c:	dc0a      	bgt.n	801d5b4 <__kernel_rem_pio2+0x3bc>
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	dc2d      	bgt.n	801d5fe <__kernel_rem_pio2+0x406>
 801d5a2:	d046      	beq.n	801d632 <__kernel_rem_pio2+0x43a>
 801d5a4:	f008 0007 	and.w	r0, r8, #7
 801d5a8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 801d5ac:	ecbd 8b06 	vpop	{d8-d10}
 801d5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5b4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801d5b6:	2a03      	cmp	r2, #3
 801d5b8:	d1f4      	bne.n	801d5a4 <__kernel_rem_pio2+0x3ac>
 801d5ba:	a942      	add	r1, sp, #264	@ 0x108
 801d5bc:	f1a3 0208 	sub.w	r2, r3, #8
 801d5c0:	440a      	add	r2, r1
 801d5c2:	4611      	mov	r1, r2
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	2800      	cmp	r0, #0
 801d5c8:	f1a1 0108 	sub.w	r1, r1, #8
 801d5cc:	dc52      	bgt.n	801d674 <__kernel_rem_pio2+0x47c>
 801d5ce:	4621      	mov	r1, r4
 801d5d0:	2901      	cmp	r1, #1
 801d5d2:	f1a2 0208 	sub.w	r2, r2, #8
 801d5d6:	dc5d      	bgt.n	801d694 <__kernel_rem_pio2+0x49c>
 801d5d8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 801d6e8 <__kernel_rem_pio2+0x4f0>
 801d5dc:	aa42      	add	r2, sp, #264	@ 0x108
 801d5de:	4413      	add	r3, r2
 801d5e0:	2c01      	cmp	r4, #1
 801d5e2:	dc67      	bgt.n	801d6b4 <__kernel_rem_pio2+0x4bc>
 801d5e4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 801d5e8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 801d5ec:	2e00      	cmp	r6, #0
 801d5ee:	d167      	bne.n	801d6c0 <__kernel_rem_pio2+0x4c8>
 801d5f0:	ed87 5b00 	vstr	d5, [r7]
 801d5f4:	ed87 6b02 	vstr	d6, [r7, #8]
 801d5f8:	ed87 7b04 	vstr	d7, [r7, #16]
 801d5fc:	e7d2      	b.n	801d5a4 <__kernel_rem_pio2+0x3ac>
 801d5fe:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 801d6e8 <__kernel_rem_pio2+0x4f0>
 801d602:	aa42      	add	r2, sp, #264	@ 0x108
 801d604:	4413      	add	r3, r2
 801d606:	4622      	mov	r2, r4
 801d608:	2a00      	cmp	r2, #0
 801d60a:	da24      	bge.n	801d656 <__kernel_rem_pio2+0x45e>
 801d60c:	b34e      	cbz	r6, 801d662 <__kernel_rem_pio2+0x46a>
 801d60e:	eeb1 7b46 	vneg.f64	d7, d6
 801d612:	ed87 7b00 	vstr	d7, [r7]
 801d616:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 801d61a:	aa44      	add	r2, sp, #272	@ 0x110
 801d61c:	2301      	movs	r3, #1
 801d61e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d622:	429c      	cmp	r4, r3
 801d624:	da20      	bge.n	801d668 <__kernel_rem_pio2+0x470>
 801d626:	b10e      	cbz	r6, 801d62c <__kernel_rem_pio2+0x434>
 801d628:	eeb1 7b47 	vneg.f64	d7, d7
 801d62c:	ed87 7b02 	vstr	d7, [r7, #8]
 801d630:	e7b8      	b.n	801d5a4 <__kernel_rem_pio2+0x3ac>
 801d632:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 801d6e8 <__kernel_rem_pio2+0x4f0>
 801d636:	aa42      	add	r2, sp, #264	@ 0x108
 801d638:	4413      	add	r3, r2
 801d63a:	2c00      	cmp	r4, #0
 801d63c:	da05      	bge.n	801d64a <__kernel_rem_pio2+0x452>
 801d63e:	b10e      	cbz	r6, 801d644 <__kernel_rem_pio2+0x44c>
 801d640:	eeb1 7b47 	vneg.f64	d7, d7
 801d644:	ed87 7b00 	vstr	d7, [r7]
 801d648:	e7ac      	b.n	801d5a4 <__kernel_rem_pio2+0x3ac>
 801d64a:	ed33 6b02 	vldmdb	r3!, {d6}
 801d64e:	3c01      	subs	r4, #1
 801d650:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d654:	e7f1      	b.n	801d63a <__kernel_rem_pio2+0x442>
 801d656:	ed33 7b02 	vldmdb	r3!, {d7}
 801d65a:	3a01      	subs	r2, #1
 801d65c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801d660:	e7d2      	b.n	801d608 <__kernel_rem_pio2+0x410>
 801d662:	eeb0 7b46 	vmov.f64	d7, d6
 801d666:	e7d4      	b.n	801d612 <__kernel_rem_pio2+0x41a>
 801d668:	ecb2 6b02 	vldmia	r2!, {d6}
 801d66c:	3301      	adds	r3, #1
 801d66e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d672:	e7d6      	b.n	801d622 <__kernel_rem_pio2+0x42a>
 801d674:	ed91 7b00 	vldr	d7, [r1]
 801d678:	ed91 5b02 	vldr	d5, [r1, #8]
 801d67c:	3801      	subs	r0, #1
 801d67e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d682:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d686:	ed81 6b00 	vstr	d6, [r1]
 801d68a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d68e:	ed81 7b02 	vstr	d7, [r1, #8]
 801d692:	e798      	b.n	801d5c6 <__kernel_rem_pio2+0x3ce>
 801d694:	ed92 7b00 	vldr	d7, [r2]
 801d698:	ed92 5b02 	vldr	d5, [r2, #8]
 801d69c:	3901      	subs	r1, #1
 801d69e:	ee37 6b05 	vadd.f64	d6, d7, d5
 801d6a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d6a6:	ed82 6b00 	vstr	d6, [r2]
 801d6aa:	ee37 7b05 	vadd.f64	d7, d7, d5
 801d6ae:	ed82 7b02 	vstr	d7, [r2, #8]
 801d6b2:	e78d      	b.n	801d5d0 <__kernel_rem_pio2+0x3d8>
 801d6b4:	ed33 6b02 	vldmdb	r3!, {d6}
 801d6b8:	3c01      	subs	r4, #1
 801d6ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d6be:	e78f      	b.n	801d5e0 <__kernel_rem_pio2+0x3e8>
 801d6c0:	eeb1 5b45 	vneg.f64	d5, d5
 801d6c4:	eeb1 6b46 	vneg.f64	d6, d6
 801d6c8:	ed87 5b00 	vstr	d5, [r7]
 801d6cc:	eeb1 7b47 	vneg.f64	d7, d7
 801d6d0:	ed87 6b02 	vstr	d6, [r7, #8]
 801d6d4:	e790      	b.n	801d5f8 <__kernel_rem_pio2+0x400>
 801d6d6:	bf00      	nop
 801d6d8:	00000000 	.word	0x00000000
 801d6dc:	41700000 	.word	0x41700000
 801d6e0:	00000000 	.word	0x00000000
 801d6e4:	3e700000 	.word	0x3e700000
	...

0801d6f0 <scalbn>:
 801d6f0:	ee10 1a90 	vmov	r1, s1
 801d6f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d6f8:	b98b      	cbnz	r3, 801d71e <scalbn+0x2e>
 801d6fa:	ee10 3a10 	vmov	r3, s0
 801d6fe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801d702:	4319      	orrs	r1, r3
 801d704:	d00a      	beq.n	801d71c <scalbn+0x2c>
 801d706:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 801d7b8 <scalbn+0xc8>
 801d70a:	4b37      	ldr	r3, [pc, #220]	@ (801d7e8 <scalbn+0xf8>)
 801d70c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d710:	4298      	cmp	r0, r3
 801d712:	da0b      	bge.n	801d72c <scalbn+0x3c>
 801d714:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 801d7c0 <scalbn+0xd0>
 801d718:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d71c:	4770      	bx	lr
 801d71e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801d722:	4293      	cmp	r3, r2
 801d724:	d107      	bne.n	801d736 <scalbn+0x46>
 801d726:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d72a:	4770      	bx	lr
 801d72c:	ee10 1a90 	vmov	r1, s1
 801d730:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d734:	3b36      	subs	r3, #54	@ 0x36
 801d736:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801d73a:	4290      	cmp	r0, r2
 801d73c:	dd0d      	ble.n	801d75a <scalbn+0x6a>
 801d73e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801d7c8 <scalbn+0xd8>
 801d742:	ee10 3a90 	vmov	r3, s1
 801d746:	eeb0 6b47 	vmov.f64	d6, d7
 801d74a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 801d7d0 <scalbn+0xe0>
 801d74e:	2b00      	cmp	r3, #0
 801d750:	fe27 7b05 	vselge.f64	d7, d7, d5
 801d754:	ee27 0b06 	vmul.f64	d0, d7, d6
 801d758:	4770      	bx	lr
 801d75a:	4418      	add	r0, r3
 801d75c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 801d760:	4298      	cmp	r0, r3
 801d762:	dcec      	bgt.n	801d73e <scalbn+0x4e>
 801d764:	2800      	cmp	r0, #0
 801d766:	dd0a      	ble.n	801d77e <scalbn+0x8e>
 801d768:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d76c:	ec53 2b10 	vmov	r2, r3, d0
 801d770:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d774:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d778:	ec43 2b10 	vmov	d0, r2, r3
 801d77c:	4770      	bx	lr
 801d77e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801d782:	da09      	bge.n	801d798 <scalbn+0xa8>
 801d784:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 801d7c0 <scalbn+0xd0>
 801d788:	ee10 3a90 	vmov	r3, s1
 801d78c:	eeb0 6b47 	vmov.f64	d6, d7
 801d790:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 801d7d8 <scalbn+0xe8>
 801d794:	2b00      	cmp	r3, #0
 801d796:	e7db      	b.n	801d750 <scalbn+0x60>
 801d798:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801d79c:	ec53 2b10 	vmov	r2, r3, d0
 801d7a0:	3036      	adds	r0, #54	@ 0x36
 801d7a2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801d7a6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801d7aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801d7e0 <scalbn+0xf0>
 801d7ae:	ec43 2b10 	vmov	d0, r2, r3
 801d7b2:	e7b1      	b.n	801d718 <scalbn+0x28>
 801d7b4:	f3af 8000 	nop.w
 801d7b8:	00000000 	.word	0x00000000
 801d7bc:	43500000 	.word	0x43500000
 801d7c0:	c2f8f359 	.word	0xc2f8f359
 801d7c4:	01a56e1f 	.word	0x01a56e1f
 801d7c8:	8800759c 	.word	0x8800759c
 801d7cc:	7e37e43c 	.word	0x7e37e43c
 801d7d0:	8800759c 	.word	0x8800759c
 801d7d4:	fe37e43c 	.word	0xfe37e43c
 801d7d8:	c2f8f359 	.word	0xc2f8f359
 801d7dc:	81a56e1f 	.word	0x81a56e1f
 801d7e0:	00000000 	.word	0x00000000
 801d7e4:	3c900000 	.word	0x3c900000
 801d7e8:	ffff3cb0 	.word	0xffff3cb0
 801d7ec:	00000000 	.word	0x00000000

0801d7f0 <floor>:
 801d7f0:	ee10 3a90 	vmov	r3, s1
 801d7f4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 801d7f8:	ee10 2a10 	vmov	r2, s0
 801d7fc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801d800:	2913      	cmp	r1, #19
 801d802:	b530      	push	{r4, r5, lr}
 801d804:	4615      	mov	r5, r2
 801d806:	dc33      	bgt.n	801d870 <floor+0x80>
 801d808:	2900      	cmp	r1, #0
 801d80a:	da18      	bge.n	801d83e <floor+0x4e>
 801d80c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 801d8d0 <floor+0xe0>
 801d810:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d814:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d81c:	dd0a      	ble.n	801d834 <floor+0x44>
 801d81e:	2b00      	cmp	r3, #0
 801d820:	da50      	bge.n	801d8c4 <floor+0xd4>
 801d822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d826:	4313      	orrs	r3, r2
 801d828:	2200      	movs	r2, #0
 801d82a:	4293      	cmp	r3, r2
 801d82c:	4b2a      	ldr	r3, [pc, #168]	@ (801d8d8 <floor+0xe8>)
 801d82e:	bf08      	it	eq
 801d830:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801d834:	4619      	mov	r1, r3
 801d836:	4610      	mov	r0, r2
 801d838:	ec41 0b10 	vmov	d0, r0, r1
 801d83c:	e01f      	b.n	801d87e <floor+0x8e>
 801d83e:	4827      	ldr	r0, [pc, #156]	@ (801d8dc <floor+0xec>)
 801d840:	4108      	asrs	r0, r1
 801d842:	ea03 0400 	and.w	r4, r3, r0
 801d846:	4314      	orrs	r4, r2
 801d848:	d019      	beq.n	801d87e <floor+0x8e>
 801d84a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801d8d0 <floor+0xe0>
 801d84e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d852:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d85a:	ddeb      	ble.n	801d834 <floor+0x44>
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	bfbe      	ittt	lt
 801d860:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 801d864:	410a      	asrlt	r2, r1
 801d866:	189b      	addlt	r3, r3, r2
 801d868:	ea23 0300 	bic.w	r3, r3, r0
 801d86c:	2200      	movs	r2, #0
 801d86e:	e7e1      	b.n	801d834 <floor+0x44>
 801d870:	2933      	cmp	r1, #51	@ 0x33
 801d872:	dd05      	ble.n	801d880 <floor+0x90>
 801d874:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801d878:	d101      	bne.n	801d87e <floor+0x8e>
 801d87a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801d87e:	bd30      	pop	{r4, r5, pc}
 801d880:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 801d884:	f04f 30ff 	mov.w	r0, #4294967295
 801d888:	40e0      	lsrs	r0, r4
 801d88a:	4210      	tst	r0, r2
 801d88c:	d0f7      	beq.n	801d87e <floor+0x8e>
 801d88e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801d8d0 <floor+0xe0>
 801d892:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d896:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801d89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d89e:	ddc9      	ble.n	801d834 <floor+0x44>
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	da02      	bge.n	801d8aa <floor+0xba>
 801d8a4:	2914      	cmp	r1, #20
 801d8a6:	d103      	bne.n	801d8b0 <floor+0xc0>
 801d8a8:	3301      	adds	r3, #1
 801d8aa:	ea22 0200 	bic.w	r2, r2, r0
 801d8ae:	e7c1      	b.n	801d834 <floor+0x44>
 801d8b0:	2401      	movs	r4, #1
 801d8b2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801d8b6:	fa04 f101 	lsl.w	r1, r4, r1
 801d8ba:	440a      	add	r2, r1
 801d8bc:	42aa      	cmp	r2, r5
 801d8be:	bf38      	it	cc
 801d8c0:	191b      	addcc	r3, r3, r4
 801d8c2:	e7f2      	b.n	801d8aa <floor+0xba>
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	4613      	mov	r3, r2
 801d8c8:	e7b4      	b.n	801d834 <floor+0x44>
 801d8ca:	bf00      	nop
 801d8cc:	f3af 8000 	nop.w
 801d8d0:	8800759c 	.word	0x8800759c
 801d8d4:	7e37e43c 	.word	0x7e37e43c
 801d8d8:	bff00000 	.word	0xbff00000
 801d8dc:	000fffff 	.word	0x000fffff

0801d8e0 <abort>:
 801d8e0:	b508      	push	{r3, lr}
 801d8e2:	2006      	movs	r0, #6
 801d8e4:	f000 f90c 	bl	801db00 <raise>
 801d8e8:	2001      	movs	r0, #1
 801d8ea:	f7e5 fcfb 	bl	80032e4 <_exit>
	...

0801d8f0 <malloc>:
 801d8f0:	4b02      	ldr	r3, [pc, #8]	@ (801d8fc <malloc+0xc>)
 801d8f2:	4601      	mov	r1, r0
 801d8f4:	6818      	ldr	r0, [r3, #0]
 801d8f6:	f000 b82d 	b.w	801d954 <_malloc_r>
 801d8fa:	bf00      	nop
 801d8fc:	24000014 	.word	0x24000014

0801d900 <free>:
 801d900:	4b02      	ldr	r3, [pc, #8]	@ (801d90c <free+0xc>)
 801d902:	4601      	mov	r1, r0
 801d904:	6818      	ldr	r0, [r3, #0]
 801d906:	f000 b9b7 	b.w	801dc78 <_free_r>
 801d90a:	bf00      	nop
 801d90c:	24000014 	.word	0x24000014

0801d910 <sbrk_aligned>:
 801d910:	b570      	push	{r4, r5, r6, lr}
 801d912:	4e0f      	ldr	r6, [pc, #60]	@ (801d950 <sbrk_aligned+0x40>)
 801d914:	460c      	mov	r4, r1
 801d916:	6831      	ldr	r1, [r6, #0]
 801d918:	4605      	mov	r5, r0
 801d91a:	b911      	cbnz	r1, 801d922 <sbrk_aligned+0x12>
 801d91c:	f000 f962 	bl	801dbe4 <_sbrk_r>
 801d920:	6030      	str	r0, [r6, #0]
 801d922:	4621      	mov	r1, r4
 801d924:	4628      	mov	r0, r5
 801d926:	f000 f95d 	bl	801dbe4 <_sbrk_r>
 801d92a:	1c43      	adds	r3, r0, #1
 801d92c:	d103      	bne.n	801d936 <sbrk_aligned+0x26>
 801d92e:	f04f 34ff 	mov.w	r4, #4294967295
 801d932:	4620      	mov	r0, r4
 801d934:	bd70      	pop	{r4, r5, r6, pc}
 801d936:	1cc4      	adds	r4, r0, #3
 801d938:	f024 0403 	bic.w	r4, r4, #3
 801d93c:	42a0      	cmp	r0, r4
 801d93e:	d0f8      	beq.n	801d932 <sbrk_aligned+0x22>
 801d940:	1a21      	subs	r1, r4, r0
 801d942:	4628      	mov	r0, r5
 801d944:	f000 f94e 	bl	801dbe4 <_sbrk_r>
 801d948:	3001      	adds	r0, #1
 801d94a:	d1f2      	bne.n	801d932 <sbrk_aligned+0x22>
 801d94c:	e7ef      	b.n	801d92e <sbrk_aligned+0x1e>
 801d94e:	bf00      	nop
 801d950:	24006bd4 	.word	0x24006bd4

0801d954 <_malloc_r>:
 801d954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d958:	1ccd      	adds	r5, r1, #3
 801d95a:	f025 0503 	bic.w	r5, r5, #3
 801d95e:	3508      	adds	r5, #8
 801d960:	2d0c      	cmp	r5, #12
 801d962:	bf38      	it	cc
 801d964:	250c      	movcc	r5, #12
 801d966:	2d00      	cmp	r5, #0
 801d968:	4606      	mov	r6, r0
 801d96a:	db01      	blt.n	801d970 <_malloc_r+0x1c>
 801d96c:	42a9      	cmp	r1, r5
 801d96e:	d904      	bls.n	801d97a <_malloc_r+0x26>
 801d970:	230c      	movs	r3, #12
 801d972:	6033      	str	r3, [r6, #0]
 801d974:	2000      	movs	r0, #0
 801d976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d97a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801da50 <_malloc_r+0xfc>
 801d97e:	f000 f869 	bl	801da54 <__malloc_lock>
 801d982:	f8d8 3000 	ldr.w	r3, [r8]
 801d986:	461c      	mov	r4, r3
 801d988:	bb44      	cbnz	r4, 801d9dc <_malloc_r+0x88>
 801d98a:	4629      	mov	r1, r5
 801d98c:	4630      	mov	r0, r6
 801d98e:	f7ff ffbf 	bl	801d910 <sbrk_aligned>
 801d992:	1c43      	adds	r3, r0, #1
 801d994:	4604      	mov	r4, r0
 801d996:	d158      	bne.n	801da4a <_malloc_r+0xf6>
 801d998:	f8d8 4000 	ldr.w	r4, [r8]
 801d99c:	4627      	mov	r7, r4
 801d99e:	2f00      	cmp	r7, #0
 801d9a0:	d143      	bne.n	801da2a <_malloc_r+0xd6>
 801d9a2:	2c00      	cmp	r4, #0
 801d9a4:	d04b      	beq.n	801da3e <_malloc_r+0xea>
 801d9a6:	6823      	ldr	r3, [r4, #0]
 801d9a8:	4639      	mov	r1, r7
 801d9aa:	4630      	mov	r0, r6
 801d9ac:	eb04 0903 	add.w	r9, r4, r3
 801d9b0:	f000 f918 	bl	801dbe4 <_sbrk_r>
 801d9b4:	4581      	cmp	r9, r0
 801d9b6:	d142      	bne.n	801da3e <_malloc_r+0xea>
 801d9b8:	6821      	ldr	r1, [r4, #0]
 801d9ba:	1a6d      	subs	r5, r5, r1
 801d9bc:	4629      	mov	r1, r5
 801d9be:	4630      	mov	r0, r6
 801d9c0:	f7ff ffa6 	bl	801d910 <sbrk_aligned>
 801d9c4:	3001      	adds	r0, #1
 801d9c6:	d03a      	beq.n	801da3e <_malloc_r+0xea>
 801d9c8:	6823      	ldr	r3, [r4, #0]
 801d9ca:	442b      	add	r3, r5
 801d9cc:	6023      	str	r3, [r4, #0]
 801d9ce:	f8d8 3000 	ldr.w	r3, [r8]
 801d9d2:	685a      	ldr	r2, [r3, #4]
 801d9d4:	bb62      	cbnz	r2, 801da30 <_malloc_r+0xdc>
 801d9d6:	f8c8 7000 	str.w	r7, [r8]
 801d9da:	e00f      	b.n	801d9fc <_malloc_r+0xa8>
 801d9dc:	6822      	ldr	r2, [r4, #0]
 801d9de:	1b52      	subs	r2, r2, r5
 801d9e0:	d420      	bmi.n	801da24 <_malloc_r+0xd0>
 801d9e2:	2a0b      	cmp	r2, #11
 801d9e4:	d917      	bls.n	801da16 <_malloc_r+0xc2>
 801d9e6:	1961      	adds	r1, r4, r5
 801d9e8:	42a3      	cmp	r3, r4
 801d9ea:	6025      	str	r5, [r4, #0]
 801d9ec:	bf18      	it	ne
 801d9ee:	6059      	strne	r1, [r3, #4]
 801d9f0:	6863      	ldr	r3, [r4, #4]
 801d9f2:	bf08      	it	eq
 801d9f4:	f8c8 1000 	streq.w	r1, [r8]
 801d9f8:	5162      	str	r2, [r4, r5]
 801d9fa:	604b      	str	r3, [r1, #4]
 801d9fc:	4630      	mov	r0, r6
 801d9fe:	f000 f82f 	bl	801da60 <__malloc_unlock>
 801da02:	f104 000b 	add.w	r0, r4, #11
 801da06:	1d23      	adds	r3, r4, #4
 801da08:	f020 0007 	bic.w	r0, r0, #7
 801da0c:	1ac2      	subs	r2, r0, r3
 801da0e:	bf1c      	itt	ne
 801da10:	1a1b      	subne	r3, r3, r0
 801da12:	50a3      	strne	r3, [r4, r2]
 801da14:	e7af      	b.n	801d976 <_malloc_r+0x22>
 801da16:	6862      	ldr	r2, [r4, #4]
 801da18:	42a3      	cmp	r3, r4
 801da1a:	bf0c      	ite	eq
 801da1c:	f8c8 2000 	streq.w	r2, [r8]
 801da20:	605a      	strne	r2, [r3, #4]
 801da22:	e7eb      	b.n	801d9fc <_malloc_r+0xa8>
 801da24:	4623      	mov	r3, r4
 801da26:	6864      	ldr	r4, [r4, #4]
 801da28:	e7ae      	b.n	801d988 <_malloc_r+0x34>
 801da2a:	463c      	mov	r4, r7
 801da2c:	687f      	ldr	r7, [r7, #4]
 801da2e:	e7b6      	b.n	801d99e <_malloc_r+0x4a>
 801da30:	461a      	mov	r2, r3
 801da32:	685b      	ldr	r3, [r3, #4]
 801da34:	42a3      	cmp	r3, r4
 801da36:	d1fb      	bne.n	801da30 <_malloc_r+0xdc>
 801da38:	2300      	movs	r3, #0
 801da3a:	6053      	str	r3, [r2, #4]
 801da3c:	e7de      	b.n	801d9fc <_malloc_r+0xa8>
 801da3e:	230c      	movs	r3, #12
 801da40:	6033      	str	r3, [r6, #0]
 801da42:	4630      	mov	r0, r6
 801da44:	f000 f80c 	bl	801da60 <__malloc_unlock>
 801da48:	e794      	b.n	801d974 <_malloc_r+0x20>
 801da4a:	6005      	str	r5, [r0, #0]
 801da4c:	e7d6      	b.n	801d9fc <_malloc_r+0xa8>
 801da4e:	bf00      	nop
 801da50:	24006bd8 	.word	0x24006bd8

0801da54 <__malloc_lock>:
 801da54:	4801      	ldr	r0, [pc, #4]	@ (801da5c <__malloc_lock+0x8>)
 801da56:	f000 b8ff 	b.w	801dc58 <__retarget_lock_acquire_recursive>
 801da5a:	bf00      	nop
 801da5c:	24006d18 	.word	0x24006d18

0801da60 <__malloc_unlock>:
 801da60:	4801      	ldr	r0, [pc, #4]	@ (801da68 <__malloc_unlock+0x8>)
 801da62:	f000 b8fa 	b.w	801dc5a <__retarget_lock_release_recursive>
 801da66:	bf00      	nop
 801da68:	24006d18 	.word	0x24006d18

0801da6c <memmove>:
 801da6c:	4288      	cmp	r0, r1
 801da6e:	b510      	push	{r4, lr}
 801da70:	eb01 0402 	add.w	r4, r1, r2
 801da74:	d902      	bls.n	801da7c <memmove+0x10>
 801da76:	4284      	cmp	r4, r0
 801da78:	4623      	mov	r3, r4
 801da7a:	d807      	bhi.n	801da8c <memmove+0x20>
 801da7c:	1e43      	subs	r3, r0, #1
 801da7e:	42a1      	cmp	r1, r4
 801da80:	d008      	beq.n	801da94 <memmove+0x28>
 801da82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da86:	f803 2f01 	strb.w	r2, [r3, #1]!
 801da8a:	e7f8      	b.n	801da7e <memmove+0x12>
 801da8c:	4402      	add	r2, r0
 801da8e:	4601      	mov	r1, r0
 801da90:	428a      	cmp	r2, r1
 801da92:	d100      	bne.n	801da96 <memmove+0x2a>
 801da94:	bd10      	pop	{r4, pc}
 801da96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801da9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801da9e:	e7f7      	b.n	801da90 <memmove+0x24>

0801daa0 <memset>:
 801daa0:	4402      	add	r2, r0
 801daa2:	4603      	mov	r3, r0
 801daa4:	4293      	cmp	r3, r2
 801daa6:	d100      	bne.n	801daaa <memset+0xa>
 801daa8:	4770      	bx	lr
 801daaa:	f803 1b01 	strb.w	r1, [r3], #1
 801daae:	e7f9      	b.n	801daa4 <memset+0x4>

0801dab0 <_raise_r>:
 801dab0:	291f      	cmp	r1, #31
 801dab2:	b538      	push	{r3, r4, r5, lr}
 801dab4:	4605      	mov	r5, r0
 801dab6:	460c      	mov	r4, r1
 801dab8:	d904      	bls.n	801dac4 <_raise_r+0x14>
 801daba:	2316      	movs	r3, #22
 801dabc:	6003      	str	r3, [r0, #0]
 801dabe:	f04f 30ff 	mov.w	r0, #4294967295
 801dac2:	bd38      	pop	{r3, r4, r5, pc}
 801dac4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dac6:	b112      	cbz	r2, 801dace <_raise_r+0x1e>
 801dac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dacc:	b94b      	cbnz	r3, 801dae2 <_raise_r+0x32>
 801dace:	4628      	mov	r0, r5
 801dad0:	f000 f886 	bl	801dbe0 <_getpid_r>
 801dad4:	4622      	mov	r2, r4
 801dad6:	4601      	mov	r1, r0
 801dad8:	4628      	mov	r0, r5
 801dada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dade:	f000 b86d 	b.w	801dbbc <_kill_r>
 801dae2:	2b01      	cmp	r3, #1
 801dae4:	d00a      	beq.n	801dafc <_raise_r+0x4c>
 801dae6:	1c59      	adds	r1, r3, #1
 801dae8:	d103      	bne.n	801daf2 <_raise_r+0x42>
 801daea:	2316      	movs	r3, #22
 801daec:	6003      	str	r3, [r0, #0]
 801daee:	2001      	movs	r0, #1
 801daf0:	e7e7      	b.n	801dac2 <_raise_r+0x12>
 801daf2:	2100      	movs	r1, #0
 801daf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801daf8:	4620      	mov	r0, r4
 801dafa:	4798      	blx	r3
 801dafc:	2000      	movs	r0, #0
 801dafe:	e7e0      	b.n	801dac2 <_raise_r+0x12>

0801db00 <raise>:
 801db00:	4b02      	ldr	r3, [pc, #8]	@ (801db0c <raise+0xc>)
 801db02:	4601      	mov	r1, r0
 801db04:	6818      	ldr	r0, [r3, #0]
 801db06:	f7ff bfd3 	b.w	801dab0 <_raise_r>
 801db0a:	bf00      	nop
 801db0c:	24000014 	.word	0x24000014

0801db10 <_reclaim_reent>:
 801db10:	4b29      	ldr	r3, [pc, #164]	@ (801dbb8 <_reclaim_reent+0xa8>)
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	4283      	cmp	r3, r0
 801db16:	b570      	push	{r4, r5, r6, lr}
 801db18:	4604      	mov	r4, r0
 801db1a:	d04b      	beq.n	801dbb4 <_reclaim_reent+0xa4>
 801db1c:	69c3      	ldr	r3, [r0, #28]
 801db1e:	b1ab      	cbz	r3, 801db4c <_reclaim_reent+0x3c>
 801db20:	68db      	ldr	r3, [r3, #12]
 801db22:	b16b      	cbz	r3, 801db40 <_reclaim_reent+0x30>
 801db24:	2500      	movs	r5, #0
 801db26:	69e3      	ldr	r3, [r4, #28]
 801db28:	68db      	ldr	r3, [r3, #12]
 801db2a:	5959      	ldr	r1, [r3, r5]
 801db2c:	2900      	cmp	r1, #0
 801db2e:	d13b      	bne.n	801dba8 <_reclaim_reent+0x98>
 801db30:	3504      	adds	r5, #4
 801db32:	2d80      	cmp	r5, #128	@ 0x80
 801db34:	d1f7      	bne.n	801db26 <_reclaim_reent+0x16>
 801db36:	69e3      	ldr	r3, [r4, #28]
 801db38:	4620      	mov	r0, r4
 801db3a:	68d9      	ldr	r1, [r3, #12]
 801db3c:	f000 f89c 	bl	801dc78 <_free_r>
 801db40:	69e3      	ldr	r3, [r4, #28]
 801db42:	6819      	ldr	r1, [r3, #0]
 801db44:	b111      	cbz	r1, 801db4c <_reclaim_reent+0x3c>
 801db46:	4620      	mov	r0, r4
 801db48:	f000 f896 	bl	801dc78 <_free_r>
 801db4c:	6961      	ldr	r1, [r4, #20]
 801db4e:	b111      	cbz	r1, 801db56 <_reclaim_reent+0x46>
 801db50:	4620      	mov	r0, r4
 801db52:	f000 f891 	bl	801dc78 <_free_r>
 801db56:	69e1      	ldr	r1, [r4, #28]
 801db58:	b111      	cbz	r1, 801db60 <_reclaim_reent+0x50>
 801db5a:	4620      	mov	r0, r4
 801db5c:	f000 f88c 	bl	801dc78 <_free_r>
 801db60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801db62:	b111      	cbz	r1, 801db6a <_reclaim_reent+0x5a>
 801db64:	4620      	mov	r0, r4
 801db66:	f000 f887 	bl	801dc78 <_free_r>
 801db6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801db6c:	b111      	cbz	r1, 801db74 <_reclaim_reent+0x64>
 801db6e:	4620      	mov	r0, r4
 801db70:	f000 f882 	bl	801dc78 <_free_r>
 801db74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801db76:	b111      	cbz	r1, 801db7e <_reclaim_reent+0x6e>
 801db78:	4620      	mov	r0, r4
 801db7a:	f000 f87d 	bl	801dc78 <_free_r>
 801db7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801db80:	b111      	cbz	r1, 801db88 <_reclaim_reent+0x78>
 801db82:	4620      	mov	r0, r4
 801db84:	f000 f878 	bl	801dc78 <_free_r>
 801db88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801db8a:	b111      	cbz	r1, 801db92 <_reclaim_reent+0x82>
 801db8c:	4620      	mov	r0, r4
 801db8e:	f000 f873 	bl	801dc78 <_free_r>
 801db92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801db94:	b111      	cbz	r1, 801db9c <_reclaim_reent+0x8c>
 801db96:	4620      	mov	r0, r4
 801db98:	f000 f86e 	bl	801dc78 <_free_r>
 801db9c:	6a23      	ldr	r3, [r4, #32]
 801db9e:	b14b      	cbz	r3, 801dbb4 <_reclaim_reent+0xa4>
 801dba0:	4620      	mov	r0, r4
 801dba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dba6:	4718      	bx	r3
 801dba8:	680e      	ldr	r6, [r1, #0]
 801dbaa:	4620      	mov	r0, r4
 801dbac:	f000 f864 	bl	801dc78 <_free_r>
 801dbb0:	4631      	mov	r1, r6
 801dbb2:	e7bb      	b.n	801db2c <_reclaim_reent+0x1c>
 801dbb4:	bd70      	pop	{r4, r5, r6, pc}
 801dbb6:	bf00      	nop
 801dbb8:	24000014 	.word	0x24000014

0801dbbc <_kill_r>:
 801dbbc:	b538      	push	{r3, r4, r5, lr}
 801dbbe:	4d07      	ldr	r5, [pc, #28]	@ (801dbdc <_kill_r+0x20>)
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	4604      	mov	r4, r0
 801dbc4:	4608      	mov	r0, r1
 801dbc6:	4611      	mov	r1, r2
 801dbc8:	602b      	str	r3, [r5, #0]
 801dbca:	f7e5 fb83 	bl	80032d4 <_kill>
 801dbce:	1c43      	adds	r3, r0, #1
 801dbd0:	d102      	bne.n	801dbd8 <_kill_r+0x1c>
 801dbd2:	682b      	ldr	r3, [r5, #0]
 801dbd4:	b103      	cbz	r3, 801dbd8 <_kill_r+0x1c>
 801dbd6:	6023      	str	r3, [r4, #0]
 801dbd8:	bd38      	pop	{r3, r4, r5, pc}
 801dbda:	bf00      	nop
 801dbdc:	24006d14 	.word	0x24006d14

0801dbe0 <_getpid_r>:
 801dbe0:	f7e5 bb76 	b.w	80032d0 <_getpid>

0801dbe4 <_sbrk_r>:
 801dbe4:	b538      	push	{r3, r4, r5, lr}
 801dbe6:	4d06      	ldr	r5, [pc, #24]	@ (801dc00 <_sbrk_r+0x1c>)
 801dbe8:	2300      	movs	r3, #0
 801dbea:	4604      	mov	r4, r0
 801dbec:	4608      	mov	r0, r1
 801dbee:	602b      	str	r3, [r5, #0]
 801dbf0:	f7e5 fb7e 	bl	80032f0 <_sbrk>
 801dbf4:	1c43      	adds	r3, r0, #1
 801dbf6:	d102      	bne.n	801dbfe <_sbrk_r+0x1a>
 801dbf8:	682b      	ldr	r3, [r5, #0]
 801dbfa:	b103      	cbz	r3, 801dbfe <_sbrk_r+0x1a>
 801dbfc:	6023      	str	r3, [r4, #0]
 801dbfe:	bd38      	pop	{r3, r4, r5, pc}
 801dc00:	24006d14 	.word	0x24006d14

0801dc04 <__errno>:
 801dc04:	4b01      	ldr	r3, [pc, #4]	@ (801dc0c <__errno+0x8>)
 801dc06:	6818      	ldr	r0, [r3, #0]
 801dc08:	4770      	bx	lr
 801dc0a:	bf00      	nop
 801dc0c:	24000014 	.word	0x24000014

0801dc10 <__libc_init_array>:
 801dc10:	b570      	push	{r4, r5, r6, lr}
 801dc12:	4d0d      	ldr	r5, [pc, #52]	@ (801dc48 <__libc_init_array+0x38>)
 801dc14:	4c0d      	ldr	r4, [pc, #52]	@ (801dc4c <__libc_init_array+0x3c>)
 801dc16:	1b64      	subs	r4, r4, r5
 801dc18:	10a4      	asrs	r4, r4, #2
 801dc1a:	2600      	movs	r6, #0
 801dc1c:	42a6      	cmp	r6, r4
 801dc1e:	d109      	bne.n	801dc34 <__libc_init_array+0x24>
 801dc20:	4d0b      	ldr	r5, [pc, #44]	@ (801dc50 <__libc_init_array+0x40>)
 801dc22:	4c0c      	ldr	r4, [pc, #48]	@ (801dc54 <__libc_init_array+0x44>)
 801dc24:	f000 f872 	bl	801dd0c <_init>
 801dc28:	1b64      	subs	r4, r4, r5
 801dc2a:	10a4      	asrs	r4, r4, #2
 801dc2c:	2600      	movs	r6, #0
 801dc2e:	42a6      	cmp	r6, r4
 801dc30:	d105      	bne.n	801dc3e <__libc_init_array+0x2e>
 801dc32:	bd70      	pop	{r4, r5, r6, pc}
 801dc34:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc38:	4798      	blx	r3
 801dc3a:	3601      	adds	r6, #1
 801dc3c:	e7ee      	b.n	801dc1c <__libc_init_array+0xc>
 801dc3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc42:	4798      	blx	r3
 801dc44:	3601      	adds	r6, #1
 801dc46:	e7f2      	b.n	801dc2e <__libc_init_array+0x1e>
 801dc48:	0801e430 	.word	0x0801e430
 801dc4c:	0801e430 	.word	0x0801e430
 801dc50:	0801e430 	.word	0x0801e430
 801dc54:	0801e438 	.word	0x0801e438

0801dc58 <__retarget_lock_acquire_recursive>:
 801dc58:	4770      	bx	lr

0801dc5a <__retarget_lock_release_recursive>:
 801dc5a:	4770      	bx	lr

0801dc5c <memcpy>:
 801dc5c:	440a      	add	r2, r1
 801dc5e:	4291      	cmp	r1, r2
 801dc60:	f100 33ff 	add.w	r3, r0, #4294967295
 801dc64:	d100      	bne.n	801dc68 <memcpy+0xc>
 801dc66:	4770      	bx	lr
 801dc68:	b510      	push	{r4, lr}
 801dc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc72:	4291      	cmp	r1, r2
 801dc74:	d1f9      	bne.n	801dc6a <memcpy+0xe>
 801dc76:	bd10      	pop	{r4, pc}

0801dc78 <_free_r>:
 801dc78:	b538      	push	{r3, r4, r5, lr}
 801dc7a:	4605      	mov	r5, r0
 801dc7c:	2900      	cmp	r1, #0
 801dc7e:	d041      	beq.n	801dd04 <_free_r+0x8c>
 801dc80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dc84:	1f0c      	subs	r4, r1, #4
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	bfb8      	it	lt
 801dc8a:	18e4      	addlt	r4, r4, r3
 801dc8c:	f7ff fee2 	bl	801da54 <__malloc_lock>
 801dc90:	4a1d      	ldr	r2, [pc, #116]	@ (801dd08 <_free_r+0x90>)
 801dc92:	6813      	ldr	r3, [r2, #0]
 801dc94:	b933      	cbnz	r3, 801dca4 <_free_r+0x2c>
 801dc96:	6063      	str	r3, [r4, #4]
 801dc98:	6014      	str	r4, [r2, #0]
 801dc9a:	4628      	mov	r0, r5
 801dc9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dca0:	f7ff bede 	b.w	801da60 <__malloc_unlock>
 801dca4:	42a3      	cmp	r3, r4
 801dca6:	d908      	bls.n	801dcba <_free_r+0x42>
 801dca8:	6820      	ldr	r0, [r4, #0]
 801dcaa:	1821      	adds	r1, r4, r0
 801dcac:	428b      	cmp	r3, r1
 801dcae:	bf01      	itttt	eq
 801dcb0:	6819      	ldreq	r1, [r3, #0]
 801dcb2:	685b      	ldreq	r3, [r3, #4]
 801dcb4:	1809      	addeq	r1, r1, r0
 801dcb6:	6021      	streq	r1, [r4, #0]
 801dcb8:	e7ed      	b.n	801dc96 <_free_r+0x1e>
 801dcba:	461a      	mov	r2, r3
 801dcbc:	685b      	ldr	r3, [r3, #4]
 801dcbe:	b10b      	cbz	r3, 801dcc4 <_free_r+0x4c>
 801dcc0:	42a3      	cmp	r3, r4
 801dcc2:	d9fa      	bls.n	801dcba <_free_r+0x42>
 801dcc4:	6811      	ldr	r1, [r2, #0]
 801dcc6:	1850      	adds	r0, r2, r1
 801dcc8:	42a0      	cmp	r0, r4
 801dcca:	d10b      	bne.n	801dce4 <_free_r+0x6c>
 801dccc:	6820      	ldr	r0, [r4, #0]
 801dcce:	4401      	add	r1, r0
 801dcd0:	1850      	adds	r0, r2, r1
 801dcd2:	4283      	cmp	r3, r0
 801dcd4:	6011      	str	r1, [r2, #0]
 801dcd6:	d1e0      	bne.n	801dc9a <_free_r+0x22>
 801dcd8:	6818      	ldr	r0, [r3, #0]
 801dcda:	685b      	ldr	r3, [r3, #4]
 801dcdc:	6053      	str	r3, [r2, #4]
 801dcde:	4408      	add	r0, r1
 801dce0:	6010      	str	r0, [r2, #0]
 801dce2:	e7da      	b.n	801dc9a <_free_r+0x22>
 801dce4:	d902      	bls.n	801dcec <_free_r+0x74>
 801dce6:	230c      	movs	r3, #12
 801dce8:	602b      	str	r3, [r5, #0]
 801dcea:	e7d6      	b.n	801dc9a <_free_r+0x22>
 801dcec:	6820      	ldr	r0, [r4, #0]
 801dcee:	1821      	adds	r1, r4, r0
 801dcf0:	428b      	cmp	r3, r1
 801dcf2:	bf04      	itt	eq
 801dcf4:	6819      	ldreq	r1, [r3, #0]
 801dcf6:	685b      	ldreq	r3, [r3, #4]
 801dcf8:	6063      	str	r3, [r4, #4]
 801dcfa:	bf04      	itt	eq
 801dcfc:	1809      	addeq	r1, r1, r0
 801dcfe:	6021      	streq	r1, [r4, #0]
 801dd00:	6054      	str	r4, [r2, #4]
 801dd02:	e7ca      	b.n	801dc9a <_free_r+0x22>
 801dd04:	bd38      	pop	{r3, r4, r5, pc}
 801dd06:	bf00      	nop
 801dd08:	24006bd8 	.word	0x24006bd8

0801dd0c <_init>:
 801dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd0e:	bf00      	nop
 801dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd12:	bc08      	pop	{r3}
 801dd14:	469e      	mov	lr, r3
 801dd16:	4770      	bx	lr

0801dd18 <_fini>:
 801dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd1a:	bf00      	nop
 801dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd1e:	bc08      	pop	{r3}
 801dd20:	469e      	mov	lr, r3
 801dd22:	4770      	bx	lr
